10168

안녕.

메일은 중요한 응용 프로그램이며, 메일 앱 확장 프로그램을 사용하면 놀라운 새로운 방식으로 개선할 수 있습니다.

저는 Abhilash이고, 제 동료인 Seth와 함께 훌륭한 메일 앱 확장 프로그램을 만드는 방법을 안내해 드릴 것입니다.

macOS Monterey에서, 우리는 메일 확장을 구축하기 위한 새로운 프레임워크인 MailKit을 출시하고 있습니다.

이러한 확장 프로그램은 사파리 앱 확장 프로그램 및 공유 시트 확장 프로그램과 같은 다른 앱 확장 프로그램과 동일한 기반 위에 구축됩니다.

그들은 처음부터 사용자 개인 정보 보호와 보안을 염두에 두고 만들어졌다.

MailKit API는 잘 문서화되어 있으며 주요 macOS 릴리스에서 지원될 것입니다.

다른 앱 확장 프로그램과 마찬가지로, 제대로 서명된 Mac 앱에 있을 수 있고, 기존 앱에 번들로 제공될 수 있으며, App Store에서도 배포할 수 있습니다.

메일 확장은 메일 확장의 미래이다.

플러그인은 향후 macOS 릴리스에서 작동을 멈출 것이다.

우리는 당신이 메일의 사용자 경험을 확장할 수 있는 네 가지 새로운 방법을 소개하고 있습니다.

먼저, 확장 프로그램을 작성하면 메일 메시지를 작성할 때 새로운 워크플로우를 만들 수 있습니다.

액션 확장은 사람들이 들어오는 메시지에 대한 사용자 지정 규칙을 제공하여 받은 편지함을 관리하는 데 도움을 준다.

콘텐츠 차단 확장은 메일 메시지에 대한 WebKit 콘텐츠 차단기를 제공합니다.

마지막으로, 메시지 보안 확장은 사람들이 메일을 보내고 받을 때 메시지를 서명, 암호화 및 해독함으로써 추가적인 보안을 제공할 수 있습니다.

이것은 메시지를 작성하고, 수신 메시지에 대한 조치를 취하고, 원치 않는 메일 콘텐츠를 차단하고, 암호화 및 암호 해독을 제공하는 데 도움이 되는 전체 메일 확장 제품군을 제공합니다.

그것들은 쓰기 쉽다.

그들은 매우 강력해.

그것들은 안정적이며 시간이 지남에 따라 OS와 메일 앱이 변함에 따라 계속 작동할 것이다.

이러한 기능으로 메일 확장 프로그램을 구축하기 전에, 사용 중인 것의 예를 살펴봅시다.

제가 모든 동료들이 여러 개의 매우 비밀스러운 프로젝트에서 협력하고 있는 대규모 다국적 기업에서 일하고 있다고 상상해 보세요.

우리 프로젝트의 비밀을 유지하기 위해, 우리는 메일 메시지의 수신자를 검증하는 Big Secrecy Extension을 사용하고 있습니다.

나는 화성에 있는 우리의 새로운 원격 사무실에 대한 업데이트를 위해 내 동료 Seth에게 메시지를 보내고 싶다.

가장 먼저 눈에 띄는 것은 메일 작성 창의 Big Secrecy Extension 버튼입니다.

이 확장 프로그램은 내가 작업하고 있는 프로젝트 목록을 제공하며, 나는 Mars Remote Office를 선택한다.

나는 제목과 Seth의 이메일을 입력한다.

확장은 Seth가 이 프로젝트에 공개되었다는 것을 확인하고 그의 이메일 주소에 파란색 체크 표시를 달 수 있었다.

물론, 이 중요한 프로젝트를 위해, 우리는 우리의 매니저인 Mikey에게 정보를 제공하고 싶기 때문에, 나는 그를 추가할 것이다.

흠, Mikey가 우리의 새로운 원격 사무실에 대해 공개하지 않은 것 같아.

내가 그를 제거하고 메시지를 보낼게.

오, 나는 Seth로부터 답장을 받았는데, 그것은 메시지 목록에 빨간색으로 나타난다.

이것은 Big Secrecy Extension이 화성 프로젝트에 관한 메시지를 빨간색으로 색칠하는 작업을 수행했기 때문이다.

확장 프로그램이 이 메시지에 대한 작업을 수행했음을 나타내는 아이콘도 있습니다.

메시지를 보러 갈 때, 메시지 뷰어에 Seth의 메시지가 Big Secrecy Extension에 의해 암호화되고 성공적으로 해독되었음을 나타내는 아이콘이 있습니다.

이제 MailKit API를 활용하여 Big Secrecy Extension과 같은 강력한 확장을 구축하는 방법을 알아봅시다.

메시지를 작성하는 동안 사용자에게 새로운 기능을 제공할 수 있는 확장 프로그램을 작성하는 것부터 시작합시다.

macOS Monterey에서는 확장 프로그램이 메일 작성 창과 상호 작용할 수 있는 네 가지 방법이 있습니다.

확장 프로그램은 사용자가 편집할 때 수신자 이메일 주소를 검증하거나, 구성되는 메시지에 대한 추가 컨텍스트를 뷰 컨트롤러에 제공하거나, 발신 메시지에 추가 헤더를 설정하거나, 전송되기 전에 메시지의 오류를 사용자에게 경고할 수 있습니다.

구성 확장을 만드는 방법을 살펴봅시다.

기존 macOS 앱에 새 대상을 추가하는 것으로 시작합니다.

Xcode 13에는 새로운 메일 확장 대상을 만들기 시작할 수 있는 새로운 메일 확장 템플릿이 있습니다.

설치하는 동안, Xcode를 사용하면 만들고 싶은 확장 유형을 선택할 수 있습니다.

구성 확장의 경우, 구성 세션 핸들러 기능 포함을 선택합니다.

확장 대상의 Info.plist에서 MEComposeSession 사전에서 아이콘과 설명 툴팁을 지정해야 합니다.

메일은 아이콘과 도구 팁을 사용하여 작성 창에 도구 모음 버튼을 표시합니다.

이제 확장의 주요 클래스에 대한 구현을 살펴봅시다.

확장의 주요 클래스는 MEExtension 프로토콜을 준수해야 합니다.

MEExtension은 네 가지 유형의 확장 각각에 대한 선택적 핸들러 방법을 노출합니다.

구성 확장의 경우, 주 클래스는 세션 메서드에 대한 핸들러를 구현하고 MEComposeSessionHandler 프로토콜을 준수하는 인스턴스를 반환해야 합니다.

MEComposeSessionHandler의 방법은 Compose 창의 수명 주기에 대해 확장을 알리기 위해 우편으로 호출됩니다.

호출될 첫 번째 방법은 새로운 작성 창이 열릴 때 발생하는 ComposeSessionDidBegin입니다.

수신자 이메일 주소를 편집하거나 이메일을 보내는 것과 같은 사용자 작업을 기반으로 호출되는 방법도 있습니다.

MEComposeSessionHandler의 모든 방법에는 작성 창에 대한 정보를 제공하는 MEComposeSession 인수가 있습니다.

메일은 모든 메일 작성 창에 대해 고유한 MEComposeSession 인스턴스를 만듭니다.

편집 중인 메시지의 다양한 세부 사항을 노출하는 MEMessage 속성이 있습니다.

이 정보를 활용하여 메일이 내선 번호의 MEComposeSessionHandler 메소드를 호출할 때 제공하는 응답을 사용자 정의할 수 있습니다.

수신자 이메일 주소에 주석을 달기 위해 이것을 할 수 있는 방법의 예를 살펴봅시다.

메일은 수신자 주소가 편집될 때마다 ComposeSessionHandler의 annotateAddressesForSession을 호출합니다.

이 예에서는 MEMessage의 allRecipientAddresses 속성을 사용하여 seth@example.com과 일치하지 않는 이메일에 대한 오류 주석을 제공합니다.

확장을 작성하면 메일이 작성 창에 표시할 뷰 컨트롤러를 제공할 수도 있습니다.

뷰 컨트롤러는 각 구성 창에 대한 뷰 컨트롤러를 사용자 정의하여 사용자에게 중요한 컨텍스트를 제공할 수 있습니다.

확장 프로그램의 뷰 컨트롤러는 MEExtensionViewController의 하위 클래스여야 합니다.

메일은 MEComposeSessionHandler의 viewControllerForSession 메소드를 호출하여 이 뷰 컨트롤러의 인스턴스를 요청할 것이다.

MailKit 문서에서 이러한 구성 API에 대해 자세히 알아보고 새로운 워크플로우 구축을 시작할 수 있습니다.

이제 메일 작업 확장에 대해 이야기해 봅시다.

작업 확장은 사용자가 받은 편지함을 관리할 수 있도록 수신 메시지에 대한 작업을 수행합니다.

macOS Monterey에서, 우리는 확장 프로그램이 새 메시지에 대해 수행할 수 있는 세 가지 유형의 작업을 공개하고 있습니다.

작업 확장 프로그램은 수신 메시지의 읽기 상태와 플래그를 수정하거나, 메시지를 정크, 휴지통 또는 아카이브와 같은 시스템 사서함으로 이동하거나, 메시지 목록에 표시될 때 메시지에 색상을 적용할 수 있습니다.

메일 확장 대상을 만들 때 메시지 작업 핸들러 기능 포함을 선택하여 메시지 작업에 대한 지원을 추가할 수 있습니다.

구성 확장과 마찬가지로, 작업 확장의 경우, 주 클래스는 메시지 작업에 대한 핸들러를 구현하여 메시지 작업 핸들러를 반환해야 합니다.

이 예에서, 주요 클래스는 또한 MEMessageActionHandler를 채택하여 액션 핸들러 역할을 하고 있다.

작업 확장은 메시지 방법에 대한 MEMessageActionHandler의 decideAction을 구현해야 합니다.

메시지에 대한 DecideAction은 MEMessage 인수로 호출됩니다.

여기서, 우리는 헤더 속성에 "Mars"가 포함되어 있는지 확인하여 메시지를 빨간색으로 색칠하고 있습니다.

액션 핸들러에 대해 주의해야 할 몇 가지 사항.

메일은 받은 편지함에서 보기도 전에 다운로드되는 모든 새 메시지에 대한 핸들러의 결정 조치를 호출합니다.

메일이 메시지 방법에 대한 확장 프로그램의 decideAction을 처음 호출할 때, MEMessage 인스턴스에는 메시지 헤더의 하위 집합만 있습니다.

사용 가능한 헤더를 기반으로 메시지를 색칠하는 것과 같은 결정을 제공할 수 있습니다.

메일이 메시지에 대한 조치를 적용하면, 받은 편지함에 표시됩니다.

경우에 따라, 적절한 결정을 반환하기 위해 메시지의 전체 본문과 헤더가 필요합니다.

이 경우, 메시지 방법에 대한 결정 액션은 invokeAgainWithBody 결정을 반환할 수 있습니다.

이렇게 하면 메일이 메시지 방법에 대한 핸들러의 결정 액션을 다시 호출하기 전에 전체 메시지 본문과 헤더를 가져오게 됩니다.

이제 받은 편지함에 표시되기 전에 더 정확한 결정을 반환할 수 있습니다.

이제 나는 그것을 Seth에게 넘길 거야, Seth는 너에게 콘텐츠 차단과 보안 확장을 구축하는 방법을 보여줄 거야.

고마워, Abhilash.

먼저, 콘텐츠 차단기 확장을 추가하는 방법을 안내해드리겠습니다.

콘텐츠 차단기는 메시지 보기를 위해 Mail의 WebKit 구성에 연결하여 확장이 메시지 HTML의 트리거를 기반으로 콘텐츠 로딩을 차단할 수 있도록 합니다.

이를 통해 확장 프로그램은 URL과 같은 HTML 기준에 따라 콘텐츠 로딩을 차단할 수 있습니다.

이 예에서, 확장은 확장의 콘텐츠 규칙 목록의 규칙에 따라 원격 이미지 로딩을 차단할 수 있었다.

메일 확장 대상을 만들 때 콘텐츠 차단 포함을 선택하여 콘텐츠 차단에 대한 지원을 추가할 수 있습니다.

다음으로, 확장 프로그램의 주요 클래스에서 콘텐츠 차단기에 대한 핸들러를 반환합니다.

이 예에서, 주 클래스는 MEContentBlocker 프로토콜을 채택하여 자체를 반환합니다.

콘텐츠 규칙 목록은 사파리 콘텐츠 차단과 동일한 구문을 사용하여 지정됩니다.

따라서 이미 사파리 콘텐츠 차단기 확장 프로그램에 대한 콘텐츠 규칙 목록이 있다면, 메일 앱 확장 프로그램에도 동일한 규칙을 사용할 수 있습니다.

"웹킷 콘텐츠 차단기 소개" 문서를 참조하여 콘텐츠 규칙 목록을 만드는 방법에 대한 자세한 정보를 얻을 수 있습니다.

규칙 목록이 완료되면, contentRulesJSON 메소드로 반환하여 메일에 제공할 수 있습니다.

이 방법은 콘텐츠 규칙 목록 JSON의 데이터 인코딩을 기대합니다.

그리고 그것은 메일 콘텐츠 차단기를 위한 것이다.

마지막으로, 우리는 메시지 보안 확장을 검토할 것입니다.

메시지 보안 기능은 확장자에게 암호화된 메시지를 인코딩하고 디코딩할 수 있는 기능을 제공합니다.

그들은 또한 메시지에 서명하고 서명된 메시지의 인증서를 볼 수 있는 방법을 제공할 수 있다.

메일 확장 대상을 만들 때 메시지 보안 핸들러 포함을 선택하여 메시지 보안 지원을 추가할 수 있습니다.

다음으로, 확장 프로그램의 주요 클래스에서 MEMessageSecurityHandler 프로토콜을 지원하는 확장 프로그램에서 핸들러를 반환해야 합니다.

이 예에서, 확장의 주요 클래스는 또한 MEMessageSecurityHandler 프로토콜을 채택하고 있으므로, 자체를 반환합니다.

이제 구성되고 있는 메시지를 인코딩하는 방법을 살펴봅시다.

메시지를 인코딩하는 것은 두 부분으로 나뉜다.

첫 번째는 메시지가 구성됨에 따라 UI를 구동하는 데 도움이 된다.

이를 통해 확장 프로그램은 현재 메시지에 서명하고 암호화할 수 있는지 보여줄 수 있습니다.

다음 부분은 전송되는 메시지를 실제로 암호화하고 서명하는 것이다.

메시지가 구성되면, 메일은 발신자와 현재 수신자 목록을 포함하여 메시지를 확장으로 보낼 것이다.

그런 다음 확장 프로그램은 메시지에 서명하고 암호화할 수 있는지 결정할 수 있습니다.

확장 프로그램에 의해 반환되는 것에 따라, 메일은 메시지를 서명하고 암호화할 수 있는지에 따라 잠금 및 인증서 아이콘을 강조 표시합니다.

발신자나 수신자가 변경될 때마다, 메일은 확장 프로그램의 메시지 보안 핸들러에서 getEncodingStatus 메소드를 호출합니다.

확장 프로그램은 메시지에 서명하고 암호화하고 현재 인코딩 상태를 메일로 되돌릴 수 있는지 확인합니다.

여기의 예는 메시지의 인코딩 상태를 확인하는 실제 작업을 하기 위해 ExampleEncoder를 가져오는 것입니다.

메시지 보안 핸들러는 사용 가능한 상태를 반환합니다.

다음으로, 메시지가 전송되면, 메일은 RFC822 메시지 데이터를 받아 확장 프로그램에 전달할 것이다.

확장 프로그램은 필요에 따라 메시지에 서명하고 암호화하며, 서명되고 암호화된 RFC822 데이터를 메일로 다시 반환합니다.

그러면 메일은 이 데이터를 발신 서버로 보낼 것이다.

메시지를 보낼 준비가 되면, 메일은 encodeMessage 방법을 사용하여 현재 메시지를 확장자의 메시지 보안 핸들러로 전달합니다.

확장 프로그램의 메시지 보안 핸들러는 인코딩된 메시지를 반환합니다.

다시 말하지만, 이 예에서, 우리는 ExampleEncoder를 사용하여 메시지를 인코딩하는 실제 작업을 하고 있습니다.

메시지 보안 핸들러는 인코딩된 메시지를 반환합니다.

메시지 디코딩은 비슷하지만 반대로 작동한다.

메시지를 볼 때, 메일은 인코딩된 RFC822 메시지 데이터를 확장자로 보낼 것이다.

확장 프로그램은 메시지를 암호화되지 않거나 서명된 RFC822 데이터로 디코딩하고 메일로 다시 반환합니다.

그러면 메일은 디코딩된 메시지를 표시할 것이다.

메일이 메시지를 디코딩할 준비가 되면, 디코딩된 메시지 메소드를 호출하는 확장의 보안 핸들러를 호출할 것이다.

확장자가 메시지를 디코딩할 수 있는 능력이 있다면, 그렇게 하고 디코딩된 RFC822 메시지를 반환할 것이다.

메시지를 디코딩하는 데 확장이 필요하지 않다면, 빠르게 nil을 반환해야 합니다.

메시지를 볼 때, 서명되고 암호화되었는지 결정할 수 있습니다.

서명된 메시지의 경우, 서명자 라벨 옆에 있는 서명자 인증서를 클릭하여 발신자의 인증서 정보를 볼 수 있습니다.

메일은 확장이 이 인증서 정보를 렌더링하기 위해 자체 뷰 컨트롤러를 제공할 수 있게 해준다.

디코딩된 메일 메시지의 일환으로, 확장 프로그램은 일련의 메시지 서명자를 반환할 수 있다.

제공된 라벨은 메시지 보기에 서명자로 표시됩니다.

확장 프로그램은 또한 서명 인증서를 표시하는 데 필요한 모든 정보로 컨텍스트 속성을 채울 수 있습니다.

인증서 아이콘을 클릭하면, 메일은 확장 프로그램에서 뷰컨트롤러를 요청하고 현재 메시지에 대한 서명자 세트를 전달합니다.

이 서명자들은 메시지가 원래 디코딩되었을 때 확장 프로그램에 의해 메일로 반환된 것이다.

뷰 컨트롤러는 MEExtensionViewController의 하위 클래스여야 합니다.

그리고 그것은 메시지 보안 확장을 위한 것이다.

메일 확장은 메일 경험을 향상시킬 수 있는 강력한 새로운 방법입니다.

우리는 당신이 이러한 메일 기능을 활용하여 멋진 신제품을 만드는 방법을 보게 되어 기쁘고, 당신의 피드백을 듣고 싶습니다.

그러니 우리에게 이메일을 보내거나 개발자 포럼에 메시지를 게시하세요.

이 예시들은 메일 앱 확장의 힘을 보여준다.

우리는 수신자를 확인하는 구성 확장 프로그램, 수신 메시지를 색칠하는 작업 확장 프로그램을 만들었습니다.

우리는 원격 이미지를 차단하는 콘텐츠 차단기를 보았다.

마지막으로, 우리는 메일에 사용자 지정 암호화와 암호 해독을 추가하는 것이 얼마나 쉬운지 보았다.

이 비디오에서, 우리는 메일 앱 확장 프로그램을 구축하는 방법을 다루었습니다.

우리는 당신이 정말 멋진 일을 하기 위해 메일을 어떻게 확장하는지 기대하고 있습니다.

그러니 나가서 멋진 새로운 메일 앱 확장 프로그램을 만드세요.

봐줘서 고마워.