10187

♪ベース音楽の演奏♪

♪

Willem Mattelaer：こんにちは、私の名前はWillemで、グループ活動に取り組んでいるエンジニアです。

アンガスとアダムと一緒に、グループアクティビティでカスタムエクスペリエンスを作成する方法について話します。

まず、このセッションで取り組むアプリを紹介し、グループアクティビティのサポートを追加するのに最適な候補者である理由を説明します。

次に、アクティビティの作成とセッション管理の手順について説明し、メディアエクスペリエンスの作成との違いについて説明します。

最後に、アプリの使用中にユーザーが経験する体験を磨く方法をいくつか紹介します。

グループアクティビティを使用すると、SharePlayを使用してデバイス間で共有エクスペリエンスを構築できます。

メディアエクスペリエンスの作成に重点を置いていますが、それはあなたの創造性を熱狂させ、あなたのアプリが複数のデバイスでどのように体験できるかを見るのを妨げるべきではありません。

「グループ活動でメディア体験を調整する」セッションで紹介されたコンセプトのいくつかを基盤とします。

私はそれをチェックすることを強くお勧めします。

このセッションでは、FaceTimeで一緒に描画できるDrawTogetherというアプリに取り組みます。

これは、画面のほぼ全体がキャンバスであり、誰もが描画に使用できるランダムな色を取得する非常にシンプルなアプリです。

しかし、単純であるにもかかわらず、私の友人と一緒に絵を描き、彼らの何人かの素晴らしいスキルを賞賛したり、彼らの貧しい絵を笑うのはまだ信じられないほど楽しいです。

私自身は間違いなく2番目のカテゴリーに分類されます。

私たちが取り組んでいることの簡単なデモをお見せしましょう。

やあみんな、どうしたの?

アダム、あなたが私に質問があるのを見ました。

アダム・サイード:うん。アンガスと私は話していて、彼はあなたが本当に良いアーティストだと言いました - グレードAピカソのように。

だから、あなたは私たちに見せなければなりません、男!

アンガス・バートン：ウィレムの絵をいくつか見ましたが、印象的です。

ウィレム：アンガス、あなたはほんの少し大げさだと思います。

でも、私に何ができるかをお見せできてうれしいです。

DrawTogetherアプリに行きましょう。

アダム：わかりました。

牧歌的な風景のように、私たちはできますか?

ウィレム：もちろん、ええと...家を描くことから始めましょう、多分

アダム：わかりました。

アンガス：ウィレム、この家はかなり基本的に見えます。

たぶん、私は太陽の下であなたを手伝うでしょう。

アダム：木を試してみます。

ウィレム：その木は高すぎます。

アダム：いや、太陽が低すぎるよ。

ウィレム：草を追加させてください。

アダム：もう少し木を描きます。

ウィレム：わかりました。ええと、私はそれを呼ぼうと思います

私たちはアーティストではないので、今やっていることをやめるべきです。

後で話そう、いい？いい？

アダム:OK、アンガス:さようなら。

ウィレム：あなたが見たように、グループ活動APIの中核的な経験の1つは、物理的に離れている間に一緒に物事を行うことを可能にすることです。

ロックを解除できるリアルタイムのインタラクションと、ユーザーが他の人を見たり聞いたりすることができるので、ユーザーが得る瞬間的な反応は、本当に魔法のような瞬間につながる可能性があります。

これは、アプリにグループアクティビティを統合する方法を検討する際に留意すべきことです。

グループアクティビティを採用するには、アクティビティの作成とセッション管理の2つのステップがあります。

「メディア体験の調整」セッションで、これをより詳細に取り上げました。

このセッションでは、アクティビティの作成から始めて、カスタムエクスペリエンスを構築する際に、これらのステップがどのように変化するかを見てみましょう。

グループアクティビティを作成するには2つの部分があります。

最初にアクティビティを設定し、その後、アクティビティをアクティブにします。

メディアグループアクティビティと比較して、カスタムアクティビティでは設定部分のみが異なります。

アクティビティを設定するときは、すべての参加者間で共有したい特定の経験について考える必要があります。

アクティビティには、その経験を通して一定のままであるすべての情報を含める必要があります。

「グループ活動でメディア体験を調整する」セッションを見たことがあるなら、これは見覚えがあるはずです。

GroupActivityプロトコルに準拠したDrawTogether構造体を定義し、タイトルで関連するメタデータを構築するメタデータプロパティを実装しました。

これをカスタムアクティビティにするには、メタデータに正しいタイプを設定するだけです。

それをジェネリックに設定することで、このアクティビティをカスタムアクティビティに設定します。

そして、メディアと比較してカスタムアクティビティを設定するときにする必要があるのはそれだけです。

それでは、Xcodeにジャンプして、DrawTogetherアプリでカスタムグループアクティビティの作成を始めましょう。

まず、私たちが始めたコードを簡単に説明させてください。

DrawTogetherは、SwiftUIアプリのライフサイクルを使用するSwiftUIアプリです。

ContentViewはアプリのメインビューです。

ビューの上部には、描画時に使用される色を示すインジケーターがあります。

その下にはCanvasViewがあります。

これはキャンバスを取り、キャンバス内のすべてのストロークを描画し、ユーザーの入力に基づいてキャンバスを更新する責任があります。

最後に、下部にはControlBarがあり、描画中に役立ついくつかのコントロールが含まれています。

現在、キャンバスをクリアしてゼロから始めるためのボタンが1つあります。

キャンバス自体は、各ストロークに色、識別子、およびポイントのリストを持つストロークの配列で構成されています。

キャンバスには、ローカルユーザーが現在描画しているストロークを表すactiveStrokeと、ユーザーが使用するストロークカラーもあります。

では、アクティビティの設定から始めましょう。

その前に、グループアクティビティの資格を追加する必要があります。

プロジェクト設定に移動し、「署名と機能」タブで新しい機能を追加します。

グループアクティビティを検索して選択します。

資格ができたので、最後にアクティビティを設定しましょう。

「ファイル」>「新規」>「ファイル」に移動して、新しいファイルを追加します。

そして、スウィフトファイルを選択します。

私はそれを「DrawTogether」と呼びます...

...そして、[作成]をクリックします。

まず、フレームワークをインポートします。

次に、GroupActivityプロトコルに準拠した「DrawTogether」という新しい構造体を定義します。

GroupActivityプロトコルには、実装すべき2つのプロパティがあります。activityIdentifierとメタデータです。

activityIdentifierについては、デフォルトの実装に依存します。

ただし、メタデータプロパティはまだ必要です。

では、それを追加しましょう。

この計算されたプロパティでは、GroupActivityMetadataオブジェクトを作成し、タイトルを設定します。

また、タイプをジェネリックに設定しました。

これはカスタムアクティビティにとって非常に重要です。

最後に、メタデータオブジェクトを返します。

アクティビティを設定したので、適切なタイミングでアクティブにする必要があります。

私はそれをアクティブにするために新しいボタンを追加します - そして、私たちのコントロールバーよりも良い場所は何ですか？

HStackの開始時にボタンを追加します。

ボタンのラベルには、SFシンボルを使用しています。

また、アクションのクロージャでは、カスタムグループアクティビティの新しいインスタンスを作成し、アクティベートを呼び出します。

そして、私たちの活動を活性化するために必要なのはそれだけです。

カスタムグループアクティビティの設定方法とアクティベート方法を示しました。

これらは、アクティビティ作成ステップに必要な2つの部分です。

さて、アンガスに渡します。アンガスはセッション管理のステップについてお話しします。

アンガス:ありがとう、ウィレム。

次に、グループアクティビティを使用してアプリケーションでカスタムデータを送受信する方法について説明します。

これは、グループアクティビティでユニークなSharePlay体験を作成することの中心です。

「グループ活動とメディア体験を調整する」というタイトルの前のセッションから、セッションの受信、再生の準備、セッションへの参加の3つのステップに精通している必要があります。

再生同期の代わりに、カスタムエクスペリエンス用にセッションを設定する必要があります。

しかし、それに飛び込む前に、グループセッションを受信して参加するためのコードを追加しましょう。

Xcodeに戻りましょう。まず、ContentViewに移動し、GroupActivitiesをインポートします。

次に、GroupSessionを受信するための非同期タスクを作成します。

グループセッションが開催されたので、それを保管する場所が必要です。

「configureGroupSession」を呼び出す新しいメソッドを使用して、Canvasオブジェクトに保存しましょう。

では、Canvasに移動して、configureGroupSessionメソッドを実装しましょう。

まず、一番上に行って、必ずGroupActivitiesをインポートします。

ファイルの一番下に行って、次に新しいメソッドを実装しましょう。

ここでは、受け取ったgroupSessionオブジェクトをクラスの新しいプロパティに割り当てました。

また、groupSessionプロパティを設定する前にキャンバスをリセットすることに注意してください。

最後になりましたが、groupSessionに参加するコードを追加しましょう。

この時点で、プロジェクトを構築してコンパイルできるはずです。

製品>ビルドに移動して、それをテストしましょう。

すごい。

グループセッションを受信して参加するためのコードを設定したので、アプリケーションでカスタムデータを送受信するためのセッションを設定する方法を見てみましょう。

セッションを設定するには、グループセッション内の参加者との間で生データや構造化メッセージを送受信するためのシンプルなAPIを提供するGroupSessionMessengerを使用します。

次はGroupSessionMessengerの使い方を見てみましょう。

まず、groupSessionからGroupSessionMessengerを作成します。

GroupSessionMessengerを使用する最初のステップは、アプリケーションの参加者間で交換する必要があるデータの種類を定義することです。

DrawTogetherでは、他のデバイスと共有する必要がある特定のデータは、ストローク自体です。

識別子、色、座標点の3つのプロパティでストロークを表すことができます。

UpsertStrokeMessageをCodableプロトコルに準拠させることに注意してください。

これは、GroupSessionMessengerが構造化されたメッセージを送受信することを可能にし、メッセージがコーダブルである限り、シリアル化とデシリアライズを自動的に処理するためです。

セッションを設定するための2番目のステップは、GroupSessionMessengerのメッセージAPIを使用してデータを受信することです。

DrawTogetherでは、UpsertStrokeMessagesの受信を処理する必要があります。

ここに示されているメッセージAPIは、コーダブルタイプを取ることができ、非同期シーケンスを返します。これは、そのタイプのメッセージを含むタプルと、メッセージを取り巻くコンテキストを返します。これには、どの参加者がそのメッセージを送信したかなどの情報が含まれます。

セッションを設定するための3番目のステップは、GroupSessionMessengerの送信APIを使用してデータを送信することです。

DrawTogetherでは、グループ内のすべての参加者にUpsertStrokeMessageを送信します。

送信APIは非同期スローメソッドであることに注意してください。

スローされるエラーは、アプリケーションによって適切に処理されるべきです。

では、Xcodeに移動して、GroupSessionMessengerコードを追加しましょう。

まず、Canvasのソースファイルに移動し、グループセッションからGroupSessionMessengerを作成します。

作成したばかりのメッセンジャーオブジェクトを保持するキャンバスにメッセンジャープロパティを追加します。

次に、参加者間で送受信されるUpsertStrokeMessageを定義する必要があります。

このために新しいファイルを作成しましょう。

「ファイル」>「新規」>「ファイル」に移動して行います。

スウィフトファイルを選択...

...そして、それを私たちのモデルフォルダに貼り付けましょう。

そして、それを「メッセージ」と呼びましょう。

それでは、UpsertStrokeMessageを定義するコードを追加しましょう。

GroupSessionMessengerで送受信するメッセージを定義したので、送受信するコードを書いてみましょう。

これを行うには、Canvasに戻ります。

ファイルの一番下に移動して、メッセージを受信するためのコードを追加しましょう。

ここでは、非同期シーケンスからUpsertStrokeMessagesを受信するための切り離されたタスクを作成し、メッセージを処理するために新しいメソッド、ハンドルを呼び出します。

次にそれを実装しましょう。

このコードでは、その識別子をチェックして、すでにストロークがあるかどうかを確認し、その場合はポイントを追加します。

それ以外の場合は、新しいストロークを作成し、ポイントを追加し、ストロークの配列にストロークを追加します。

次に、メッセージを送信するためのコードを書きます。

上記の方法、addPointToActiveStrokeに進みます。

すごい！

それでは、アプリを構築して実行し、共有されたDrawTogetherエクスペリエンスの動作を見てみましょう。

だから私は2つのデバイスに行き、自分自身とFaceTime通話を始めます。

電話アプリに行って、それから自分に電話します。

そして、私は他のデバイスで答えるつもりです。

マイクの電源を切ってください。

今、このデバイスで、私は共有DrawTogether体験を始めるつもりです。

左下のアイコンをタップします。

そして、他のデバイスでは、グループセッションに参加します。

そして今、私は自分自身でチックタックトーをするつもりです。

私が先に引っ越します。

私が勝ったようですね。

かっこいい。私たちのコードは機能しているようです。

まずメッセージを定義し、次にメッセージを受信し、最後にメッセージを送信することで、GroupSessionMessengerを使用してセッションを設定する方法について話しました。GroupSessionMessengerを使用する際に考慮すべき他のいくつかのことについて話しましょう。

ボンネットの下で、GroupSessionMessengerは、グループ内のすべてのアクティブな参加者に信頼性の高いFIFO命令のメッセージ配信を提供します。

送信するメッセージには制約があります。大きすぎると、送信APIからエラーがスローされます。

GroupSessionMessengerは、より小さなペイロードを対象としており、ファイル、画像、ビデオなどの大きなアセットのストリーミングには使用しないでください。

メッセージを送信する際に考慮すべきもう1つのことは、フロー制御とレート制限です。

ループのようにメッセージのバーストをすばやく連続して送信すると、送信APIからエラーがスローされる可能性があります。

最後に、GroupSessionMessengerで使用するメッセージを定義するときは、アプリケーションプロトコルにバージョン管理サポートを追加することを検討してください。

これにより、アプリケーションは、古いバージョンのソフトウェアを実行しているデバイスとのインターオプをサポートできます。

今、私はそれをアダムに渡します。アダムは、あなたのグループアクティビティの経験を磨く方法についてあなたに話します。

アダム:ありがとう、アンガス!

それでは、あなたのアプリがカスタムエクスペリエンスのために必要とするかもしれないいくつかの最後の仕上げについて話しましょう。

まず、遅いジョイナーについて話しましょう。

レイトジョイナーは、セッションの開始後にアクティビティセッションに参加するデバイスです。

適切な経験を確実にするために、すべてのデバイスが同じデータで動作しているように、遅いジョイナーに最新情報を提供する必要があります。

このシナリオの会計処理は、一貫したユーザーエクスペリエンスを確保するために重要ですが、万能ではありません。

このキャッチアッププロセスに必要なデータは、アプリと経験によって異なります。

それでは、それがDrawTogetherアプリにどのように適用されるか見てみましょう。

グループセッションに2つのデバイスがあるとしましょう。

これらの2つのデバイスは同じ情報を持っています:キャンバスに描かれたスマイリーフェイス。

描画が起こったとき、彼らは両方ともセッションにいたので、彼らは経験を通して同じデータを持っていることがわかります。

では、別のデバイスを追加してみましょう。

この時点で、新しいデバイスはGroupSessionで参加を呼び出しますが、キャンバスには何もありません。

だから私たちは雲を描きます、そして-ああ、それは-それは良くありません

新しいデバイスには以前のコンテキストがなかったので、私たちのスマイリーフェイスには雲があります。

では、バックアップしてもう一度やってみましょう。

新しいデバイスが参加するとすぐにスマイリーフェイスショーが表示されるように、これをどのように修正しますか?

新しいデバイスがグループセッションに参加を呼び出すと、グループセッションに参加した他のすべてのデバイスには、GroupSession fireのactiveParticipantsプロパティが表示されます。

その信号を観察するデバイスは、そのキャッチアップデータ（この場合は既存の描画キャンバス）を新しく参加したデバイスに送信します。

今、新しいデバイスが結合すると、それはすでにそこにスマイリーフェイスがあったので、私たちはその周りに描くことができます!

さて、コードでこれをどのように行うのですか?

最初にする必要があるのは、アプリがキャッチアップメッセージで送信する必要があるデータを理解することです。

私たちはDrawTogetherの経験であり、私たちの目標はキャンバスがすべての人のデバイスで同じであることを確認することなので、先に進んで「CanvasMessage」と呼ばれるMessage.swiftファイルに新しいメッセージを作りましょう。

この構造体には、私たちが持っているすべてのストロークと、どのメッセージが最新であるかを計算するためのヒューリスティックとして使用される「pointCount」を呼び出す変数が含まれます。

すごい！

さて、このメッセージの受信をどのように処理しますか?

Canvas.swiftのCanvasモデルに進むと、Angusが以前に示したように、GroupSessionMessengerを使用してconfigureGroupSessionでメッセージハンドラを設定できます。

ここから、ハンドル関数を呼び出すことがわかりますので、先に進んでそれを実装しましょう。

このコードでは、現在持っているものよりも新しいキャッチアップメッセージのみを受け入れるために、pointCountヒューリスティックから保護していることがわかります。

それが合格したら、キャンバスのストロークをcatchupMessageのストロークで上書きします。

さて、先ほど説明したように、私たちがコミュニケーションを取る必要がある新しい参加者がいるかどうかを把握するために、アクティブな参加者が変わるのを聞く必要があります。

それでは、それをconfigureGroupSession機能に追加しましょう。

このハンドラーでは、新しいアクティブ参加者と古いアクティブ参加者の間のデルタをつかむことがわかります。

これにより、新しく参加した参加者にのみキャッチアップメッセージを送信できます。

すごい！

今、私たちはメッセージを形成して送信するだけです。

このメッセージには現在のキャンバスの状態が含まれており、新しい参加者にのみ送信されます。

そして、それだけです!

それはキャッチアップです!

では、特定の活動のためにグループセッションを行うためのすべての部分が整ったので、活動を完全に変更する場合はどうすればよいですか?

これは、描画キャンバスの変更や映画の変更のようなものかもしれません。

当社のAPIは、アクティビティを変更する2つの方法を提供します。新しいグループセッションを作成するか、既存のグループセッションの全員のアクティビティを更新することができます。

では、その2つについて話しましょう。

コンテンツを変更する最初の好ましい方法は、グループセッションを開始したのと同じAPIを呼び出すことです：groupActivityのprepareForActivation。

このアプローチは、GroupSessionの出入りのためのクリーンな障壁を提供するため、参加者間の一貫した状態について推論しやすくなるため、古いGroupSessionから必要のない長引く状態やメッセージを心配する必要はありません。

これは、ユーザーがアクティビティから戻って、新しいメモや映画を検索するなど、次のアクティビティを見つけるのに非常に役立ちます。

これはまた、システムに大きな変更の兆候を与え、ユーザーに通知するために使用されます。

この呼び出しの後、グループセッションを開始するのと同じ方法で、GroupActivityのセッション非同期シーケンスを介して新しいGroupSessionを受け取ります。

さて、アプリケーションに、複数の曲が相互に再生されるなど、移行するアクティビティのリストがある場合はどうなりますか?

GroupSession APIは、GroupSessionのアクティビティプロパティを設定するだけで、すべての人に更新をトリガーする簡単な方法を提供します。

そこから、アクティビティプロパティの変更を聞きます。

当社のAPIは、デバイスが常に同じアクティビティに収束することを保証するので、心配する必要はありません。

この2つを概念的に理解したので、どれをDrawTogetherアプリに使うべきですか?

私たちのアプリは、それぞれの新しい描画キャンバスにクリーンなスレートを望んでいるので、新しいセッションAPIは私たちが望むものを正確に提供してくれるでしょう。

それでは、Xcodeにジャンプして、それを実装する方法を見てみましょう。

ここでの最初のステップは、新しいセッションをどのようにトリガーするかを決定することです。

私たちの場合は、クライアントがリセットボタンを使用するときに、先に進んで新しいGroupSessionを作成するようにしましょう。

ControlBarコードを見ると、Canvasモデルを呼び出してローカル状態をリセットするCapsuleButtonがすでにあることがわかります。

では、その機能を変更して、GroupSessionを分解して新しい機能を作成しましょう。

このコードでは、GroupSessionのタスクとキャンセルをキャンセルします。

また、GroupSessionがあるかどうかも確認します。その場合は、それを残して、DrawTogetherタイプのactivateプロパティに呼び出します。

そこから、グループセッションを受けるための通常の流れが行われ、私たちは行っても大丈夫です!

私たちは今、新しいキャンバスに移行するためのクリーンな方法を持っています。

さて、UIを変更して、友人とSharePlay体験を試すことができることをユーザーに示したい場合はどうなりますか?

たとえば、描画アプリでは、キャンバスをここからこれに変更したいと考えています。GroupSessionの対象となる場合、キャンバスを共有するためのボタンが表示されることに気付くでしょう。

では、これをどうやってやるの?

GroupStateObserver APIを使用すると、デバイスがいつグループセッションの対象となるかをパブリッシャーに聞くことができます。

その後、これを使用して、ボタンを動的に表示および非表示にすることができます。

だから、それを実行しに行きましょう!

私たちが見たように、私たちはアプリケーションの左下に小さなボタンが欲しいです。

アプリケーションにはすでにControlBarビューに共有ボタンがあるため、GroupStateObserverに基づいてボタンを表示および非表示にする動作を変更しましょう。

まず、groupStateObserverをビューに追加します。

それでは、GroupSessionの資格があり、まだこのgroupSessionに参加していない場合にのみ、CapsuleButtonを囲んで表示しましょう。

そして、それだけです!

私たちのボタンは、ユーザーに役立つ場合にのみ動的に表示されるようになりました。

さて、このセッションで見たものを見てみましょう。

シンプルな描画アプリを作成する完全なプロセスを経て、グループアクティビティを活用して、これまでにないほど同期して接続するように変更しました。

しかし、もっと重要なのは、あなたの創造性を完全に解き放ち、グループアクティビティでカスタムSharePlay体験を作成するために必要なすべてのステップを踏んだことです。

ジェネリックタイプのカスタムアクティビティの作成、同期通信のためのGroupSessionとGroupSessionMessengerの設定と活用、および真に豊かなユーザーエクスペリエンスを作成するためにアプリが採用すべきエッジケースとAPIについて話しました。

私はあなたが私たちと一緒にこのカスタム体験を作成するのを楽しんだことを願っています、そして私たちはあなたの創造性がグループ活動のフレームワークでワイルドになるのを楽しみにしています!

グループアクティビティについて学ぶ際の次のステップは、「グループアクティビティのデザイン」セッションです。まだ見ていない場合は、「グループアクティビティでメディア体験を構築する」セッションもチェックしてください。

ご不明な点がございましたら、グループアクティビティラボでお問い合わせください。

そして最後に、チューニングしてくれてありがとう、素晴らしいWWDCをお過ごしください。

あなたが何を作るかを見るのが待ちきれません!

♪