10063

♪ ♪

こんにちは！

私の名前はラッセルで、UIKitチームのエンジニアです。

iOS 13では、シートに洗練された外観を導入し、それらを電話に持ち込み、普遍的なプル・トゥ・却下ジェスチャーを追加しました。

これの詳細については、iOS 13のUIの近代化ビデオ、特に9分45秒から始まるプレゼンテーションに関するセクションをご覧ください。

iOS 15では、シートにたくさんのカスタマイズオプションを追加することで、その基盤の上に構築されたので、これまでにない楽しい新しい方法でそれらを使用することができます。

画面の半分しかカバーしない垂直方向のサイズ変更可能なシートを作成できる、ミディアムデテントのサポートを追加しました。

また、調光ビューを削除することもできます。これにより、シートが表示されている間、ユーザーがシートの背後にあるコンテンツを操作できる非モーダルUIを構築できます。

次に、横向きの携帯電話でフルスクリーン以外の外観を取得する方法など、いくつかの新しいビジュアルオプションについて説明します。

そして最後に、通常のサイズクラスのポップオーバーとコンパクトサイズクラスのカスタマイズされたシートの間でシームレスに適応するUIを設定する方法を紹介します。

このすべてを探索するために、デジタルはがきを作成するためのサンプルアプリを作成し、このビデオで利用できます。

はがきごとに、画像、テキスト、フォントをカスタマイズできます。

さて、シートをカスタマイズする前に、まずシートを入手する必要があります。

シートは、UISheetPresentationControllerと呼ばれる新しいUIPresentationControllerサブクラスのインスタンスであり、すべてのカスタマイズオプションがこのクラスのプロパティとして公開されます。

このクラスのインスタンスを取得する典型的な方法は、提示する前にビューコントローラーのsheetPresentationControllerプロパティを読み取ることです。

このメソッドは、ビューコントローラのmodalPresentationStyleがデフォルトでフォームシートまたはページシートである限り、非nilインスタンスを返します。

ここから、インスタンスにさまざまなプロパティを設定してカスタマイズできます。

これは、ビューコントローラーのpopoverPresentationControllerを取得し、そのプロパティを設定するのと同じパターンです。

そして、それで、デテントに飛び込みましょう。

デテントとは何ですか?

デテントは、シートが自然に休む高さであり、これらは完全に拡張されたシートフレームのほんの一部として定義されます。

完全に拡張されたフレームは、ここでiPhoneとiPadで視覚化されており、以前にシートを使用したことがある場合はおなじみのはずです。

iOS 15で2つのシステム定義のデテントを公開しました。シートの完全な高さの約半分である中程度のデテントと、完全に拡張されたシートの高さである大きなデテントです。

シートがサポートするデテントを指定するには、デテントプロパティで必要なデテントの配列を設定するだけです。

このプロパティのデフォルト値は、大きなディテントの配列です。そのため、まったく設定しないと、標準のフルハイトシートが表示されます。

これを中規模と大規模のデテントの配列に設定すると、中規模と大規模の間でサイズ変更可能なシートが表示されます。

しかし、これをミディアムディテントのみの配列に設定することもできます。これにより、ミディアムハイトで表示され、フルハイトにサイズ変更できないシートが得られます。

これをサンプルアプリに適用しましょう。

システムイメージピッカーを標準シートに表示するために、iOS 14 SDKをターゲットにしたコードから始めています。

ボタンをタップすると、この最初の関数が呼び出され、画像ピッカーを作成し、ピッカーのデリゲートをselfに設定し、ピッカーを表示します。

次に、画像が選択されると、ピッカーdidFinishPickingデリゲートメソッドが呼び出され、選択した画像を画像ビューに設定し、ピッカーを閉じます。

それを走らせましょう。

写真ボタンをタップすると、フォトピッカーがアプリ全体をカバーします。

私の旅行が最近非常にバーチャルだったことに注目してください。

そして、私が写真を選ぶと、フォトピッカーは却下し、私がはがきで選んだ写真を明らかにします。

しかし、別の写真を選びたい場合はどうなりますか?

私は再びこの全体の流れを経なければなりません。

そして、写真のライブラリとはがきを同時に見せることができれば、本当にうれしいです。

そして、ミディアムデテントで、私はできます。

これは以前と同じコードですが、いくつかの変更があります。

ピッカーを提示する前に、そのsheetPresentationControllerにアクセスし、そのディテントを中と大に設定します。

また、ピッカーのFinishPickingデリゲートコールバックでは、写真を選択するときにフォトピッカーを却下したくないので、フォトピッカーを却下する行を削除しました。

今、これを実行して写真ボタンをタップすると、私のライブラリは半分の高さで表示され、私は写真を選ぶことができます、そして出来上がり。

私はまだ下の図書館で私のはがきでそれを見ることができます。

そして、別の写真を試してみたい場合は、ワンタップと同じくらい簡単です。

また、私のディテント配列には大きなディテントが含まれているため、バーをドラッグしてこのシートをフルハイトにサイズ変更できます。

さらに、スクロールビューは一番上にスクロールされるため、スクロールビューをスクロールするとシートも展開されます。

システム共有シートのようなアクションのシートの場合、これはリストの下部にあるより高度なアクションを徐々に開示する素晴らしい機能です。

しかし、このフォトライブラリの例では、バーからドラッグしてシートのサイズを明示的に変更しない限り、はがきが常に表示されるように、スクロールはシートを展開しない方がいいかもしれません。

この代替動作を取得するには、1つの追加プロパティを設定するだけです: PrefersScrollingExpands- WhenScrolledToEdge。

デフォルトでは、このプロパティはtrueなので、falseに設定すると、スクロールがシートを拡張するのを防ぎます。

これで、フォトピッカーはスクロールしてもサイズを変更しませんが、バーをドラッグしてフォトライブラリをよりよく表示できます。

しかし、今、写真をタップしても、何かが起こったことは明らかではありません。

これは、写真をタップするとフォトピッカーが却下され、私の選択が受信されたことを明確に示す以前の動作とは対照的です。

私が欲しいのは、私の選択が受信されたことを示し、私の選択がはがきに表示されるようにするために、写真をタップしたときにシートのサイズをミディアムデテントに変更することです。

そして、選択したデテントをプログラムで変更することで、これを達成できます。

したがって、写真がタップされるたびに呼び出される画像ピッカーデリゲートメソッドに戻ると、ここにコードを追加してsheetPresentationControllerを取得し、選択したDetentIdentifierをmediumに設定できます。

これを試してみましょう。

写真をタップすると、遷移に気づく。

うわー！

その移行はとても速かったので、私はもう少しで眉毛を失いそうになった。

実際にはまったくアニメーション化されませんでした。

プロパティの設定をsheet.animateChangesブロックにラップすることで、このトランジションを簡単にアニメーション化できます。

これにより、必要に応じて標準アニメーション曲線でシートをメディアデテントまでアニメーション化し、ルートシートのスケーリングバックアップなど、スタック内の他のシートもアニメーション化します。

バターのように滑らか。

もう1つの良いことは、調光ビューを削除して、選択した写真をフルカラーで表示することです。

これを行うには、最小のUndimmed- DetentIdentifierと呼ばれるもう1つのプロパティがあります。

デフォルトでは、このプロパティはnilです。これは、すべてのディテントがディミングされていることを意味しますが、ディミングを削除する場合は、ディミングしたくない最小のディテントの識別子に設定します。

この場合、ミディアムに設定します。

ピッカーを持ち出すと、ミディアムデテントで調光がないことに注意してください。

タダ！

しかし、大きなデテントにサイズを変更すると、調光はまだ消えます。

このプロパティでは、調光を視覚的に削除するだけでなく、シート内のコンテンツだけでなく、シート外のコンテンツとも対話できるため、高度なノンモーダルエクスペリエンスを構築できます。

これはフォントピッカーでさらに深刻で、フォントピッカーがアップしている間にテキストの範囲を選択し、その範囲にフォントを適用し、選択を調整し、フォントを再度適用できるUIを構築しました。

これがどのように達成されるかの詳細については、サンプルアプリをダウンロードしてください。

また、中程度の高さのシートが自動キーボード回避をサポートしていることも注目に値するので、ここでフォントを検索すると、シートはキーボードを考慮して自動的に成長し、キーボードが閉じると、シートは自動的に下に折りたたまれます。

だから、それはデテントに関する多くの情報でしたが、今、私は風景のiPhoneのシートのための新しいオプションの外観から始めて、シートのための他のいくつかの新しい視覚的なカスタマイズオプションに注意を向けたいと思います。

iOS 13では、すべてのシートを横向きにフルスクリーンにし、シートが下端の画面にのみ取り付けられる代替の外観が利用可能になりました。

この新しい外観を得るには、prefersEdgeAttached- InCompactHeightをtrueに設定するだけです。

今、これを設定するだけで、常に安全なエリアと同じくらい広いシートが得られます。

幅が presentedViewControllers preferredContentSize に続くシートをご希望の場合は、widthFollows- PreferredContentSize- WhenEdgeAttached を true に設定します。

これにより、シートのデフォルト幅が狭くなり、この幅をさらにカスタマイズするためにpreferredContentSizeを設定できます。

これらのプロパティに加えて、必要に応じてグラバーを表示するプロパティもあります。

グラバーはしばしば必要ではありませんが、スクロールがシートのサイズを変更しない場合など、シートのサイズ変更可能であることは明らかではない場合、グラバーを表示することはサイズ変更の有用な指標になります。

今、シートの角に注目してください。

私たちが公開したもう1つのオプションは、コーナー半径をカスタマイズする機能です。

アプリがより丸みを帯びた外観の場合は、その美学に合わせたいと思うかもしれません。

システムは積み重ねられたコーナーが一貫して見えるので、このフォトピッカーがルートシートを押し戻すために拡大した場合、ルートシートは一致するより大きなコーナーを持つことに注意してください。

最後に、iPadでデテント付きのシートを作成することは可能ですが、多くの場合、コンパクトでシートに適応するポップオーバーが求められ、潜在的にデテントのようなものでカスタマイズされます。

サンプルアプリでこのアプローチを取りましょう。

iPadで画像ピッカーのポップオーバーを取得するには、いくつかの小さな変更を加える必要があります。

まず、ピッカーのmodalPresentationStyleをポップオーバーに設定します。

次に、sheetPresentationControllerをつかむ代わりに、これはnilを返すので、modalPresentationStyleはシートではないので、popoverPresentationControllerを取得します。

ポップオーバーのソースをbarButtonItemに設定し、popoverでadaptiveSheet-PresentationControllerと呼ばれる新しいプロパティをつかみます。

このプロパティは、ポップオーバーがコンパクトなサイズのクラスで適応するシートのインスタンスを返し、以前のシートと同じように設定します。

写真ボタンをタップすると、フォトピッカーがポップオーバーに表示され、シーンのサイズを変更すると、中程度の高さのシートに適応します。

うまくいきます！

そして、ピッカーを展開して写真を選択すると--ああ、いや!

以前に実装したように、自動的に中程度の高さにサイズ変更されませんでした。

うーん。

Picker didFinishPickingデリゲートメソッドに戻りましょう。

ああ！

アダプティブシートを取得するには、このコードのpopoverPresentationControllerのadaptiveSheet-PresentControllerも読む必要があります。

今、私が写真を選択するときに注意してください。

万歳！再びミディアムにサイズ変更されます。

さて、以前は簡単に構築できなかったシートを使用して、新しいタイプのUIを簡単に構築できる多くのことについてここで話しました。

中程度の高さのシートやノンモーダル体験の恩恵を受けるエリアについては、独自のアプリを確認してください。

今日、アプリに半分の高さのカスタムカードがある場合は、これらの新しく強化されたUIKitシートに置き換えてください。

ご覧いただきありがとうございます、そして私はあなたがシートで構築するすべてのクールな新しいものを見るのを楽しみにしています。