10257

♪ベース音楽の演奏♪

♪

マリン・ユーバンクス:みなさん、こんにちは。

ClassKitチームのエンジニアであるMarinです。ファイルベースのアプリ用にClassKitに追加した新しいAPIをお見せできることを嬉しく思います。

今日は、スクールワークと、それがClassKitでどのように使用されているかについて説明します。

次に、ファイルベースのアプリ用の新しいAPIの詳細なレビューを行います。

次に、サンプルの実装を順を追って説明します。

そして最後に、ClassKitの開発者モードを使用して新しいAPIをテストする方法を紹介します。

まず、スクールワークの概要を簡単に説明します。

スクールワークは、教師が生徒がアプリを使って学習する課題を共有できる教育アプリです。

アプリがClassKitフレームワークを採用し、CLSContextsと呼ばれる割り当て可能なコンテンツをアドバタイズし、アクティビティの進捗データの報告を開始すると、教師はそのコンテンツを割り当て、アプリによって報告された進捗データを表示できるようになります。

アプリがClassKit対応の場合、教師はカリキュラムでアプリを使用する可能性が高くなります。

そして、まもなく、スクールワークはさらに使いやすくなり、教師のワークフローを合理化し、指導に情報を提供し、アプリから教師にデータを提供するための多くの新機能が追加されます。

スクールワークに精通したので、アプリのデータがスクールワークにどのように流れ込むかを見てみましょう。

アプリはClassKitフレームワークにデータを送信します。

ClassKitは、そのデータをスクールワークアプリに表示します。

その後、データは生徒と教師に提示されます。

これは、ClassKit対応アプリのいくつかの割り当てを含むスクールワークのビューです。

課題の1つをタップすると、ClassKitを採用し、学生の進捗データを報告したアプリの例を見ることができます。

このユースケースの詳細については、少し後で説明します。

スクールワークを確認したので、新しいファイルベースの進捗APIについて話しましょう。

App Storeには19万以上の教育アプリがあります。

そして、多くの人がClassKitのコンテキストベースのAPIを採用していますが、全員が持っているわけではありません。

私たちは、特にファイルと対話するアプリと、ClassKitをどのように採用したいかについてフィードバックを受けましたが、コンテキストはあなたのユースケースにはあまり合いませんでした。

さて、あなたのアプリがファイルベースであるため、ClassKitの採用を保留しているなら、私たちはあなたのためだけに新しいAPIを追加しました。

この新しいAPIは、ファイルと対話するすべてのアプリ用です。

ファイルを編集したり、ファイルを開いて表示したりできるアプリがあれば、ファイルベースのアプリの新しいAPIが気に入るはずです。

この新しいAPIを採用することで、スクールワークで割り当てられたときに、アプリ内で使用されるファイルの生徒の進捗データを報告することができます。

教師がClassKit対応アプリからコンテンツを割り当てると、追加の洞察が提供されます。これは彼らにとって勝利であり、アプリの素晴らしい新しいユースケースです。

注意すべき重要なことの1つは、アプリがOpen in Placeを採用しなければならないということです。

アプリがOpen in Placeをサポートしている場合、生徒と教師の間で共有された正確なファイルは、コピーではなくアプリで開きます。

これは、ファイルに進捗データを追加するための新しいAPIです。

それはfetchActivityと呼ばれ、CLSDataStoreにあります。

ここに示されているこのAPIの非同期と非同期の両方の代替バージョンがあります。

ファイルのファイルURLをこのAPIに渡すと、CLSActivityが返されます。

CLSActivityを取得したら、進捗データを追加できます。

では、アプリが送信できる進捗データの種類を見てみましょう。

すでにClassKitを採用している場合、これは利用可能な現在の進捗データ型のレビューになります。

ClassKitを初めて使用する場合、これらのクラスは現在CLSContextsで使用されていますが、同じデータ型をファイルに適用することもできます。

ここにはCLSActivityがあります。

これは、特定のファイルに関連付けられているすべての進捗データをカプセル化するために使用されるクラスです。

CLSActivityに追加できるデータの種類がいくつかあります。

まず、期間があります。

これは、学生が割り当てられたファイルの作業に費やした時間です。

時間はすべてのファイルタイプで報告する必要があります。

このAPIを使用するには、CLSActivityに存在する開始メソッドと停止メソッドを呼び出すだけです。

次に進歩があります。

これは0と1の間の値です。

進捗状況は通常、ファイルを通じて学生の進捗状況を決定できる場合に使用されます。

たとえば、オーディオまたはビデオファイルがあり、学生が50%の方法を得たとします。

再生の進行状況を0.5と報告します。

進捗を追加するには、進捗プロパティを直接設定するか、開始から終了までの範囲を追加できます。

重複する範囲または同じ範囲を複数回追加できます。

正しい進捗状況が生徒と教師に報告されるように、ロジックを処理します。

また、編集できるファイルがある場合に便利なprimaryActivityItemもあります。

primaryActivityItemを設定すると、このデータが生徒と教師に強調表示され、スクールワークアプリのUIの主要部分に表示されます。

追加のActivityItemsプロパティもあります。

これは、追加のメタデータを追加するのに役立つCLSActivityItemsの配列です。

primaryActivityItemを追加するには、CLSActivityにprimaryActivityItemプロパティを設定します。

additionalActivityItemを追加するには、CLSActivityのaddAdditionalActivityItem関数を呼び出すと、追加するactivityItemを渡します。

primaryActivityItem プロパティと additionalActivityItem プロパティには、CLSActivityItem の 3 つのサブクラスのうちの 1 つへの参照があります。

次のサブクラスのいずれかを追加できます。まず、CLSBinaryItemがあります。

これは、任意のバイナリデータ型を表すために使用されます。

これの使い方の例は、クイズの質問かもしれません。

生徒が正しかったか間違っていたとしましょう。

または、CLSQuantityItemを追加することもできます。

これは、一般的な数値に使用されます。

これは、ドキュメントのページ数、スライド数、または合計単語数に使用できます。

最後はCLSScoreItemです。

このクラスは、合計の一部として表されるすべてのものに使用されます。

例えば、クイズのスコア。ユーザーは10点満点中8点を取った。

これらのサブクラスの任意の組み合わせをアクティビティ、そのうちの1つ、またはすべてに追加できます。

追加できるデータの種類がわかったので、このAPIをアプリに採用するコードサンプルを見てみましょう。

ここには、テキストファイルを開いて編集できるサンプルアプリがあります。

生徒がテキストファイルを開いたら、タイマーを起動します。

学生は通過し、ファイルを編集します。

生徒がファイルを閉じようとしているとき、私は合計単語数を記録し、タイマーを停止します。

ファイルを開き、学生がそれとやり取りを開始するときに呼び出されるコードの一部に移動しましょう。

私はopenFile関数を持っています。

これは私が時間を追跡し始めるところです。

アプリでは、ファイルを開くためにすでに持っているコードの一部に移動し、ここでタイマーを開始するために少しコードを追加します。 

まず、ファイルURLのCLSアクティビティを取得します。

アクティビティを取得したら、開始を呼び出すと時間の追跡を開始し、その後、CLSDataStoreの保存を呼び出すと、行った変更をコミットします。

先に進んで、実装をテストするときに後で戻ってくるブレークポイントをここに追加しましょう。

また、生徒が終わったらタイマーを停止し、primaryActivityItemを追加したいです。

それでは、学生がファイルを閉じようとしているときに呼び出される私のコードの一部に移動しましょう。

ここでは、CLSDataStore.shared. fetchActivityを呼び出し、すでに存在する場合はprimaryActivityItemをつかんで更新するか、まだ存在しない場合は新しいCLSQuantityItemを作成します。

CLSQuantityItemを取得したら、その値を更新し、アクティビティのprimaryActivityItemとして設定できます。

アクティビティに進捗状況を追加できます。

そして最後に、タイマーを止めるためにストップを呼びます。

その後、必ずセーブに電話します。

CLSDataStoreで保存を呼び出しない場合、先ほど行った変更は永続しません。

ここにもブレークポイントを追加します。

これを使用して、学生の進捗データの提出をデバッグするのに役立ちます。

サンプルアプリにAPIを採用したので、スクールワークと開発者モードを使用して実装をテストする方法を見てみましょう。

まず、ClassKit環境の資格を開発に設定する必要があります。

これはXcodeの内部にあります。

デフォルト値はプロダクションです。

開発者モードとスクールワークを使用してテストできるように、開発資格の値を変更します。

次回コードを実行すると、開発者モードで実行されます。

テストが終わったら、これを本番に戻すことが重要です。

次に、iPadで開発者モードをオンにする必要があります。

設定アプリを開き、開発者> ClassKit APIに移動します。

スクールワークで私たちの役割を教師に変更するために教師を選択します。

では、スクールワークアプリを開きます。

スクールワークが始まると、教師のUIが表示されます。

また、右上隅の[割り当ての作成]ボタンをタップすると、[ファイル]ボタンをタップして、アプリがサポートするファイルを追加する割り当てを作成できます。

次に、追加するファイルを選択し、クラスと課題のタイトルを入力します。

必要に応じて、オプションで指導テキストを追加することもできます。

そして、右上隅のボタンをタップして、この課題をクラスに公開します。

課題を作成したので、学生としての役割を切り替えて、進捗データの提出の実装をテストすることができます。

では、設定アプリに戻りましょう。

[設定] で、[開発者] > [ClassKit API] を選択し、[学生] をタップします。

これは今、学業における私の役割を学生として行動するように変えました。

スクールワークアプリに戻ります。

UIの右上隅に課題の作成ボタンがなくなったため、学生としてログインしていることがわかります。

画面の中央に、作成したばかりの課題が表示され、それをタップすると、課題の詳細が表示されます。

ファイルアイコンをタップすると、進行状況データの報告を開始するアプリにディープリンクされます。

ファイルが私のアプリで開き、私のコードはタイマーを開始するために呼び出されます。

ここでは、タイマーを開始するためにセーブを呼び出した後、ブレークポイントがヒットするのを見ることができます。

そして、Playを押してからアプリに戻ると、Student Progressバナーが上からドロップダウンします。これは、保存が成功し、タイマーが開始されたことを示しています。

その後、エッセイを完成させるためにテキストの束を追加します。

私のサンプルアプリには、ファイルの編集が終わったら生徒がタップする完了ボタンがあります。

だから、左上隅にある完了ボタンをタップします。

この時点で、私のcloseFile関数が呼び出されます。

wordCountをprimaryActivityItemとして保存し、タイマーを停止するために、2番目のブレークポイントがヒットしたことがわかります。

その後、プレイを押してスクールワークに戻ることができます。

スクールワークでは、アプリから提出された進捗データを見ることができます。

まず、私は時間を41分と見ています。

これは、私が開始、停止、保存を正しく呼び出していることを検証します。

次に、primaryActivityItemとして設定した単語数が表示されます。

primaryActivityItemとして設定したCLSActivityItemサブクラスは、UIのメイン部分に表示されます。

私の単語数が558単語として見ることができるという事実は、私のCLSQuantityItemの提出が正しく機能していることを検証します。

さて、私たちの役割を教師に戻して、私のアプリによって提出されたデータが教師にどのように表示されるかを見てみましょう。

画面の中央には、すべての学生の平均時間と平均単語数があることがわかります。

その下には、課題のすべての学生の行があります。

学生のセルには、ある学生が提出したデータが表示されます。

また、学生セルをタップすると、アプリによって報告された進捗データを見ることができます。

primaryActivityItem、時間、および可読性グレードレベルとしてリストされている1つの追加のActivityItemがあります。

そして、それが開発者モードを使用してClassKitの統合をテストする方法です。

資格を本番に戻すことを忘れないでください。

まあ、いいね！

今日は、新しいAPIから開発者モードでのテストまで、多くのことを取り上げました。

教育のためにアプリを考慮しなくても、教育者がそうする可能性は十分にあり、ClassKitを有効にすると、アプリがカリキュラムに統合する準備が整うことを意味します。

だから、必ず私たちのAPIを採用してください。

そして、ありがとう。

フィードバックレポートをありがとうございます。その他のフィードバックは提出してください。

私たちはあなたからの連絡が大好きです。

また、コンテキストベースのAPIについて詳しく知りたい場合は、「ClassKitの新機能」に関する以前のセッションと、2018年の講演「ClassKitの紹介」をご覧ください。

ありがとう、そして素晴らしいWWDCを!

♪