10202

♪ ♪

私はRavi Kandadai Madhavanです。このビデオでは、Xcodeの静的アナライザを使用してアプリのバグを見つけて修正する方法を紹介します。

まず、静的アナライザを使用してバグを見つけ、それらを理解する方法を実演します。

次に、Xcode 13の新しいチェックについて説明します。これは、コード内のより多くの種類の問題を見つけるのに役立ちます。

最後に、アナライザをカスタマイズして、開発ワークフローとよりよく統合する方法について説明します。

それでは、アナライザーを使ってバグを見つける方法を見てみましょう。

スタティックアナライザは、実行せずにソースコードを分析することでバグを発見できるXcodeのツールであり、アプリのテストや品質保証を行う前でもバグを明らかにすることができます。

また、まれでテストでカバーされていないコードパスの問題を見つけることもできます。

アナライザは、SwiftとObjective-Cの混合プロジェクトでも、C/C++とObjective-Cコードのバグを見つけます。

私が開発しているアプリを使って、アナライザーが動作しているのを見てみましょう。

私は、太陽系の探索を可能にするSwiftとObjective-Cで書かれた既存のアプリを改善しようとしています。

これはアプリのXcodeプロジェクトです。

静的アナライザを実行して、コードに何か問題があるかどうかを確認します。

走るのはとても簡単です。

製品に移動して[分析]を選択するか、キーボードショートカットCommand-Shift-Bを使用してください。

Xcodeのステータスバーでアナライザが実行されているのを見ることができます。

プロジェクトを分析することは、それを構築するのと非常によく似ています。

アナライザは、現在アクティブなスキームのターゲット内のすべてのソースファイルをスキャンし、バグを探します。

ステータスでわかるように、アナライザは私のプロジェクトで問題を発見しました。

Xcodeのイシューナビゲーターにアクセスして、それについてもっと学ぶことができます。

お見せしたように、プロジェクトでアナライザを実行するのに必要なのは、ワンクリックだけです。

そして、このワンクリックで、セキュリティ上の問題、論理的なバグ、APIの誤用など、いくつかの種類のバグを見つけることができます。

アナライザはバグを見つけるだけでなく、それらを説明することもできます。

私のアプリで見つかったバグに戻って、それを理解してみましょう。

ここでの問題は、Objective-CメソッドpositionAtDateが想定されていないときにnilを返していることです。

メソッドの戻り値は、メソッドの定義でnullではないと宣言されています。

しかし今、私はこの方法がどのようにnilを返すのかを理解したい。

アナライザの問題を展開し、バグにつながる一連のイベントを確認できます。

イベントは、発生したステートメントとともに、エディタにも表示されます。

矢印は、イベントがどのように順序付けられているかを示しています。

これらのレポートを下から上まで読む方が簡単だと思います。

最後のイベントは、返された値、位置がnilであることを示しています。

以前のイベントは、位置を初期化するためのメソッドregularPositionAtDateが、そのレシーバーオブジェクトがnilであるため呼び出されていないためであることを示しています。

矢印を見ると、これはスイッチのデフォルトのケースに沿って起こります。

レポートの先頭に戻ると、レシーバーオブジェクトがnilに初期化され、デフォルトのケースに沿ってそのまま残っていることがわかります。

今、私はスイッチ内で球形または不規則ではないオブジェクトを扱っていないことを理解しています。

これを修正するために、デフォルトのケースを球面ケースと同じにします。

アナライザを再実行して、問題が修正されたことを確認します。

アプリの開発中にこのバグが検出されたことにかなり安心しました。

これは、null以外の値を返すように注釈されたObjective-Cメソッドからnilを返すと、メソッドがSwiftから呼び出されたときに予期しないランタイム動作が発生する可能性があるためです。

ありがたいことに、静的アナライザを実行すると、私のアプリのユーザーに影響を与える前に、このバグが明らかになりました。

Xcode 13では、アナライザをさらに良くし、あなたのためにいくつかの真新しいチェックがあります。

アナライザは、コード内のより多くのロジックバグをキャッチできるようになりました。

不要な分岐条件など、無限のループや冗長なコードを検出できます。

アサートの副作用を報告することができ、C ++コードでは、移動および前進演算子の使用でエラーをキャッチする可能性があります。

これらの新しいチェックの一部は、AppleのClangコンパイラへのオープンソースの貢献です。

これらの新しいチェックがキャッチできるバグの例をいくつか見てみましょう。

一般的に、アサートを使用してコードに対する期待を検証することをお勧めします。

ただし、アサートに変数やメモリへの書き込みなどの副作用がないことを確認する必要があります。

たとえば、ここに示されている、天体の配列を横断し、関連する月の数を数えるコードスニペットを考えてみましょう。

月を持つ物体の数が惑星の数以下であることをチェックするNSAssertがあります。

しかし、この主張には、衛星でオブジェクトを追跡するカウンターをインクリメントするという副作用があります。

このような更新は、リリースビルド構成で失われる可能性があり、コードの実行を高速化するためにアサートを無効にすることができます。

したがって、このコードはリリースビルドでカウンタをまったく増やさない可能性があります。

デバッグビルドに表示されないため、開発中にこのようなバグを見逃すのは簡単です。

Xcode 13を起動すると、アナライザはコードでそのような問題を見つけて報告することができます。

このチェックは、NSAssertsだけでなく、CとC++のアサートにも機能します。

これらのバグは修正が簡単で、ここに示すように、副作用をアサートの外に移動させるだけです。

無限ループはもう一つの一般的なバグです。

複雑なロジックを持つループがあるときにそれが起こるのを見たことがあるかもしれません。

たとえば、ここに示されているネストされたループは、2次元グリッドに値を入力しようとします。

これは、変数値が実際のループカウンタである列ではなく内部ループによってインクリメントされるバグを隠します。

アナライザは、そのような間違いを検出し、あなたに説明できるようになりました。

一度見つけたら、このバグはとても簡単に修正できます。

値を列に置き換えるだけです。

これらのチェックは単純な間違いを見つけましたが、私たちはそれらに本当のバグを見つけました。

これで、あなたもそれらを使用し、バグを見つけて、アプリを開発する際に修正することができます。

Xcodeは、開発ワークフローに合わせてアナライザを微調整するための多くのカスタマイズを提供しています。

プロジェクトのビルド設定から、プロジェクトのすべてのビルドと一緒にアナライザを実行させることができます。

関連する設定をすばやく絞り込むには、検索機能を利用してください。

たとえば、検索キーワードとして「分析」を使用すると、アナライザに関連するオプションだけを見ることができます。

「ビルド」中に分析を有効にするには、ビルド設定をオンにするだけです。

増分ビルドと同様に、分析は変更されたファイルでのみ実行されます。

これにより、コードが変更された後にアナライザーをすばやく簡単に実行できます。

アナライザは、浅いものと深いものの2つの分析モードを提供します。

シャローモードは高速ですが、複数の機能にまたがるバグの探索を避けます。

ビルドと分析の時間に敏感なプロジェクトでは、このモードを使用してください。

先に述べたように、アナライザにはさまざまな種類のバグを見つけるためのチェックがあり、そのうちのいくつかはオプトインです。

ビルド設定から選択的に有効または無効にすることで、プロジェクトに合ったチェックを微調整できます。

たとえば、プロジェクトにセキュリティクリティカルなコードがある場合は、セキュリティ問題のチェックを有効にします。

一方、いくつかの問題がコードに関連していないことがわかった場合は、あまり役に立たないチェックを個別に無効にして、他のチェックの恩恵を受けることができます。

プロジェクト全体ではなく、単一のファイルを分析することもできます。

[製品] > [アクションの実行] メニューから分析するファイルを選択します。

これを使用して、プロジェクトを構築する必要もなく、変更をすばやく確認できます。

これは、ヘッダーファイルを変更する場合に特に便利です。

それをインポートするすべてのファイルの再分析をスキップします。

Xcodeの静的アナライザは、開発中の非常に早い段階でコードのバグを明らかにすることができます。

ボタンをクリックするだけで実行し、多くの種類のバグを見つけます。

そして、あなたのワークフローに合わせてカスタマイズすることを忘れないでください。

Xcode 13では、アナライザをさらに改善し、論理的なバグを見つけるための多くの新しいチェックを追加しました。

アナライザを使用して、ユーザーに届く前にアプリのバグを修正してください。

ありがとう、そしてWWDCの残りの部分を楽しんでください!

[明るい音楽]。