10143

♪ベース音楽の演奏♪

ニシャント・ネロガル:こんにちは、WWDCへようこそ。

私の名前はニシャントで、AVFoundationチームのエンジニアです。

今日は、HLSバリアントを見ていきます。

まず、AVFoundation APIを使用してHLSバリアントを検査する方法を見て、後で、ダウンロードでHLSバリアントを使用する方法を見ていきます。

では、バリアント検査から始めましょう。

皆さんは、典型的なマスタープレイリストがどのように見えるかに精通している必要があります。

ここに例があります。

この特定のプレイリストには、2つのバリエーションがあります。

バリアントの1つはステレオオーディオを備えたSDRバリアントで、もう1つはドルビーアトモスオーディオを備えたドルビービジョンバリアントです。

この特定のプレイリストを表すアセットは、アプリでこのようなものが表示される場合があります。

よく見ると、アセットには4K、ドルビービジョン、ドルビーアトモスのバッジがあることがわかります。

以前、あなたはバンドからそのような情報を得る必要がありました。

iOS 15では、HLSプレイリストを直接検査して推測できます。

そのために、マスタープレイリストの場所を指すAVURLAssetから始めます。

後で、バリアントのプロパティからHLSプレイリストを取得できます。

このAVAssetVariantは、ここで見られるように、マスタープレイリストからそうであるようにHLSバリアントを表しています。

したがって、異なるメディア属性を表す複数のプロパティがあります。

メディアビットレートなどの属性の一部は、直接アクセスできます。

ビデオやオーディオの演出に関連するものなど、他の属性は、独自のサブクラスにグループ化されています。

それらはそれぞれVideoAttributesとAudioAttributesと呼ばれています。

ご覧のとおり、それぞれに関連プロパティがあり、資産を理解するために使用できます。

これで、AVFoundationでHLSバリアントを検査する方法がわかりました。

ダウンロードでそれらをどのように使用できるか見てみましょう。

オフライン再生用のHLSコンテンツのダウンロードは2016年からサポートされています。

HLSダウンロードAPIに精通していない場合は、WWDC 2020のトピックに関する以前の講演をチェックすることをお勧めします。

iOS 15では、HLSダウンロードAPIを使用して、さらに強力にしています。

通常、ダウンロード用に選択されたHLSバリアントに影響を与えたい。

これは、ビジネス上の要件によるものかもしれませんし、ユーザーにより多くの選択肢を提供したいだけかもしれません。

以前は、downloadTaskオプションを使用してそのような入力を提供できました。

HDRのオプション、ロスレスオーディオのオプション、その他いくつかの属性がありました。

iOS 15では、NSPredicatesを使用してバリアントの選択を拡大しています。

あなたはすでにコアデータの述語の使用に精通しているかもしれません。

そうでなければ、心配しないでください、あなたは今日それらについて学ぶでしょう。

始めるために、バリアント修飾子インターフェースを紹介しましょう。

このインターフェイスを使用すると、AVFoundationにバリアント設定を指定できます。

そして、私が言ったように、それらはNSPredicatesを使用して構築することができます。

いくつかの例を見て理解しましょう。

ここでは、ピークビットレートを5メガビット未満と表現するNSPredicateがあります。

これを使用してバリアント修飾子を構築し、AVFoundationに5メガビット未満のバリアントを好むように指示します。

十分に簡単ですよね?

別の例を見てみましょう。 もう一度見てみましょう。

ここでは、HDRビデオ範囲のNSPredicateを作成します。

そして、以前と同様に、それのバリアント修飾子を構築できます。

また、複数の述語を組み合わせて複合述語を作成し、それらを使用してバリアント修飾子を作成することもできます。

バリアントの任意のプロパティを使用して述語を作成できます。

述語フォーマット文字列を使用して簡単に表現できないオーディオチャンネル数などのプロパティについては、カスタムコンストラクタがあります。

バリアント修飾子については、ヘッダードキュメントで調べることができます。

バリアント修飾子を取得したら、それを使用してコンテンツ設定と呼ばれるものを作成します。

各コンテンツ構成は、ビデオ、オーディオ、および字幕のレンディションのセットを表します。

さて、例を挙げて理解しましょう。

これは、先ほど見た2つの述語を組み合わせたバリアント修飾子です。

ええ、これはコンパウンドです。ハハハ。

5メガビット未満のHDRバリアントを好むことをAVFoundationに通知します。

また、英語とフランス語のオーディオと英語の字幕のレンディションを表す一連のメディアセレクションもあります。

これらは両方とも、コンテンツ設定オブジェクトを作成するために使用できます。

これらのコンテンツ設定を複数作成し、downloadTaskに提供できます。

これらの複数のコンテンツ構成は、ダウンロード構成インターフェイスによって結び付けられています。

これはすべてをまとめる根です。

AVURLAssetで作成され、アセット名とオプションで画像が必要です。

アセット名と画像は設定アプリに表示されます。

これにより、ユーザーは設定アプリの1か所ですべてのダウンロードを管理できます。

そしてもちろん、downloadTaskは複数のコンテンツ設定で設定できます。

よく見ると、コンテンツ構成の1つがプライマリとして指定され、残りは補助になります。

両者の違いは、通常、ビデオ、オーディオ、および字幕のレンディションのプライマリセットをダウンロードし、追加のオーディオまたは字幕のレンディションでそれらを補完したいということです。

追加のレンディションを補助コンテンツ構成として指定することで、AVFoundationに複数のビデオレンディションのダウンロードを最適化し、ダウンロードしないように指示します。

例を挙げるにつれて、より明確になります。

これが完全な例です。

まず、AVURLAssetとタイトルでダウンロード設定を作成することから始めます。

主なコンテンツ構成は、先ほど見たものと同じです。

英語とフランス語のオーディオと英語の字幕レンディションで、5メガビット未満のHDRバリアントをダウンロードするように構成されています。

この特定の例では、英語オーディオをロスレス形式でダウンロードするための補助コンテンツ構成で補完したいと思います。

これで、ダウンロードしたい両方のコンテンツ構成があります。

optimizesAuxiliary ContentConfigurationsをtrueに設定してください。

ちなみに、デフォルトでは真実であり、AVFoundationはロスレスバリアントを選択できるため、ロスレスバリアントのビデオレンディションはプライマリコンテンツ構成と同じです。

Falseに設定すると、ロスレスバリアントが独立して評価され、重複したビデオレンディションがダウンロードされる可能性があります。

これにより、私たちが望まないダウンロードサイズが大きくなる可能性があります。

OK、ダウンロード設定が完了したら、それを使用してdownloadTaskを作成できます。

ダウンロードを開始するには、downloadTaskを再開します。

iOS 15以降では、NSProgressインターフェイスを使用してdownloadTaskの進捗状況を観察することもできます。

NSProgressオブジェクトはKVO観測可能で、それを使用してユーザーインターフェイスを更新できます。

先に進みます。

述語で表現するのが難しいかもしれないバリアントを選択するためのビジネスロジックを持っている人もいるかもしれないことを理解しています。

このような場合は、明示的にダウンロードするバリアントを選択することもできます。

この例では、すでにプライマリバリアントと補助バリアントとそれに合うメディアの選択を選択しました。

バリアントで直接修飾子を作成することで、AVFoundationにそのままダウンロードするように指示できます。

ダウンロードしたデバイスで再生できるように、バリアントを選択するように注意してください。

それが私たちが今日持っているすべてです、皆さん。

最後に、HLSバリアントを検査し、それらを使用してdownloadTaskを設定する方法を調べました。

その過程で、downloadTask設定用のさまざまなインターフェイスに遭遇しました。

1つ目はバリアント修飾子でした。

これは、バリアントの好みを表現するために使用されます。

その後、コンテンツ構成インターフェースを見ました。

コンテンツ構成は、バリアント設定とメディア選択の選択肢を結び付けます。

最後に、ダウンロード設定を見ました。

ダウンロード設定は、すべてを結びつけるルートインターフェースです。

最後になりましたが、NSProgressを使用してdownloadTaskを監視できることも学びました。

詳細については、ヘッダードキュメントを確認してください。

彼らはとてもよくコメントされています。

見てくれてありがとう、バイバイ!

♪