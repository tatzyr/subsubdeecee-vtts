10176

♪ ♪

こんにちは、私はSwiftUIチームのエンジニア、ハリーです。

「SwiftUIでのクラフト検索体験」へようこそ。

検索は今年SwiftUIでまったく新しく、これらの機能の使用を開始する方法を紹介することに興奮しています。

時には、アプリ内で特定の何かを見つけたいこともありますが、多くのアプリには大量のデータコレクションが含まれているため、探しているものを正確に見つけるのが難しくなる可能性があります。

最新のアプリのトレンド、次のお気に入りの曲、または朝の通勤に適したポッドキャストを見つけるかどうかにかかわらず、検索を実装することはまさにそれを行うのに役立ちます。

最適な検索体験は、アプリの構造と内容によって異なります。

しかし、一般的に、すべての経験には、検索クエリを定義する検索フィールドが含まれます。

これで、SwiftUIで直接検索を実装できます。

見てみましょう。 

この講演では、SwiftUIのすべての検索機能の基礎を形成する新しい検索可能な修飾子を紹介します。

ナビゲーションビューが検索可能な修飾子とどのように統合されるかを紹介します。

最後に、検索候補を追加することで、検索可能な修飾子の機能を拡張します。

Searchableは、すべてのプラットフォームで利用可能なSwiftUIの新しいビュー修飾子です。

これにより、表示コンテンツを検索可能としてマークすることができます。

コンテンツは、それが何を意味するのかを正確に定義します。

この講演を通して、各プラットフォームでこの修飾子の例を探ります。

さて、この修飾子をよりよく理解するために、天気について話しましょう!

iOSでの検索の素晴らしい例は、新しい天気アプリで見つけることができます。

都市のリストを表示するときに、検索バーに入力し始めると、リストに追加する新しい都市が検索されます。

Weatherが検索可能な修飾子を使用してこの機能を強化する方法を説明するために、UIの構造を分解しましょう。

天気は、ナビゲーションバーを提供するナビゲーションビューから始まります。

天気は、ナビゲーションビューのコンテンツとしてカスタムリストを追加します。

そして、そのリストの中で、そのセルの上にForEachを追加します。

最後に、Weatherは検索可能な修飾子をナビゲーションビューに追加します。

すべての検索可能な修飾子の中核は、検索フィールドの設定です。

検索可能な修飾子は、設定された検索フィールドを受け取り、環境を介してそれを渡し、他のビューを各プラットフォームに最適な方法で使用します。

ここでは、ナビゲーションビューはその検索フィールドを理解し、検索バーとしてレンダリングします。

ビューが設定された検索フィールドを使用しない場合、検索可能な修飾子は、ツールバーに検索フィールドをレンダリングするデフォルトの実装を提供します。

現在、検索フィールドは多くの場合、検索関連のUIの唯一の部分ではありません。

何らかの形式の検索結果を表示することは、一般的なデザインパターンです。

天気はこのパターンに従い、空でない検索クエリが表示されるたびに、カスタムリストを切り替えて、現在のクエリの結果を含む別のリストを表示します。

天気が検索可能な修飾子によって販売された情報を使用して、このUIを実現する方法を見てみましょう。

これが天気のカスタムリストです。

検索可能な修飾子は、ユーザーが積極的に検索しているかどうかに基づいて、表示されるビューを動的に変更するために使用するisSearchingと呼ばれる新しい環境プロパティを設定します。

天気は、isSearching環境プロパティと検索のテキストを条件付きで結果ビューを表示します。

独自の結果をレンダリングするときは、ユーザーが検索インタラクションから戻った後にメインUIの状態が変更されないように、オーバーレイを使用することを検討してください。

ナビゲーションビューが新しい検索可能な修飾子とどのように統合されるかについて、もう少し話しましょう。

これを行うには、私が精力的に取り組んできたアプリを紹介したいと思います。

私はそれを色と呼んでいます。

このアプリでは、ユーザーはパレットと呼ばれるお気に入りの色セットのライブラリを管理できます。

部屋のさまざまなペイント、アプリのテーマで遊んだり、新しいM1 iMacの色を選ぶのを手伝ってもらいたいかもしれません。

あなたの欲望に関係なく、Colorsはあなたのためのアプリです。

色の基本的な構造は2列のナビゲーションビューで、最初の列であるルートビューは、iPadOSとmacOSのサイドバー、または他のプラットフォームのナビゲーションスタックのルートです。

サイドバーには、私のカラーパレットのライブラリが見えます。

詳細ビューでは、現在選択されているカラーパレットと、それらの色が視覚的な違いを持つユーザーにどのように表示されるかを見ることができます。

人々がアプリを使い始めると、私は何かに気づき始めました。

人々は色が大好きです。

彼らは常にライブラリに色を追加していますが、ライブラリが大きくなるにつれて、人々がそれを見つけるためにライブラリ全体をスクロールする必要があるため、特定のカラーパレットを見つけるのが難しくなります。

この時点で、検索機能を追加する時が来たと判断しました。

この機能は、私のアプリを使用している人々がすぐに理解できるように、プラットフォームの慣習に従ってほしいです。

検索可能な修飾子を使用してこの機能を実装する方法を見てみましょう。

ここに、Colorsアプリの一部として構築したナビゲーションビューがあります。

検索を実装するために、検索可能な修飾子をナビゲーションビューに追加します。

以前と同じように、検索クエリを裏付ける状態へのバインディングを提供します。

繰り返しになりますが、これはiOSとiPadOSの検索バーとしてレンダリングされます。

ナビゲーションビューが検索可能な修飾子のコンテンツである場合、検索フィールドをその列の1つに関連付けます。

どの列を使用するかは、ナビゲーションビューに提供される列の数によって異なります。

私は2列のナビゲーションビューを持っているので、検索バーはiOSとiPadOSの両方のサイドバー列に関連付けられています。

デフォルト以外の列に関連付けられた検索フィールドが必要な場合は、既存のツールバー修飾子と同様に、目的の列に検索可能な修飾子を配置できます。

このアプリでは、ナビゲーションビューで検索可能にしておきます。

Weatherと同様に、isSearching環境プロパティを使用して、サイドバーに検索結果を動的に表示します。

macOSでの検索可能な修飾子の同じ配置は、ツールバーの最も末尾の位置に配置された検索フィールドをレンダリングし、ウィンドウが縮小すると自動的に崩壊するなど、そのプラットフォームで期待される動作になります。

ここでは、macOSでのより典型的な体験のために、アプリの詳細ペインに検索結果をレンダリングします。

watchOSは、ツールバーのビューの上部に検索フィールドを配置するという点で、iOSと同様に動作します。

ここで、SwiftUIは検索フィールドを関連付ける最初の列を選択します。

プラットフォーム全体でこれらの異なる動作を生成するために、検索可能な修飾子を配置した場所を変更しなかったことに注目してください。

私のアプリの構造はこれらのプラットフォーム間で変更され、二重列のナビゲーションビューのままでした。

SwiftUIはこの構造とさまざまなプラットフォーム規約を理解しているので、私に代わってそれらの実装を処理しました。

tvOSを見ると、他のプラットフォームでの私のアプリの構造がより適切になる可能性があることに気づきました。

tvOSは通常、検索をタブビューのタブとしてレンダリングしますが、私のアプリにはタブビューがありません。

私のアプリを少し微調整するだけで、それを修正できます。

2列のナビゲーションビューをレンダリングする代わりに、タブビューをナビゲーションビューのコンテンツとして1列のナビゲーションビューをレンダリングすることで、より典型的なtvOS体験を作ることができます。

タブビューでは、既存のサイドバービューを配置し、新しい検索タブを追加します。

検索タブは、誰かが最初にそのタブに移動したときに表示されるプレースホルダビューを表します。

最後に、ナビゲーションビューをラップする代わりに、検索可能な修飾子を移動して検索タブをラップします。

空でない検索クエリが入力されたら、ビューを移行して検索結果を表示します。

これで、各プラットフォームに検索機能を追加しました。

私のアプリのナビゲーション構造が一貫しているSwiftUIの宣言的な性質のおかげで、私はSwiftUIに頼ることができ、検索可能な修飾子の実装がその特定のナビゲーション構造に適したインターフェイスを選択できるようにしました。

アプリの構造が変わったtvOSでは、検索可能な修飾子について学んだことを別の構造に適用しました。

私が「検索可能」と定義したものだけが、その構造で変わりました。

検索可能な修飾子を理解したので、最後のトピック「検索候補」に進みましょう。

私のアプリで検索を使用した後、一部のユーザーは、検索が提供する新機能を本当に気に入っているが、検索できるものに対して途方に暮れることがあると報告しています。

多くのアプリは、検索候補を使用して、提供できる検索クエリの種類に人々を導くのに役立ちます。

これらの提案は、macOSのようなメニュー、iOSのようなリスト、またはwatchOSのようなリストを表示するボタンとして表示される可能性のある、完了した検索クエリを表します。

提案は、人々が検索できるものの種類のアイデアを与えます。

SwiftUIは、アプリに検索候補を追加する簡単な方法を提供します。

見てみましょう。 

私のアプリを見ると、テキストで検索可能な修飾子を設定したことがわかります。

検索可能な修飾子は、私が含め始めることができる提案と呼ばれるオプションのパラメータを提供します。

提案パラメータについては、ビューを提供します。

これはいくつかの静的ボタンかもしれないし、おそらく、私のアプリデータベースやサーバーから来る提案の動的なセットの上にForEachになるかもしれません。

SwiftUIはこのビューを見て、表示する提案があるかどうかに基づいて表示します。

たとえば、watchOSは、空でない提案を提供すると、検索フィールドにアイコンをレンダリングします。

ここでの一般的なパターンは、対話するときに、検索可能な修飾子に提供されたテキストバインディングを検索提案のテキスト値で更新するボタンのForEachを提供することです。

実際、このパターンが非常に一般的であることを期待しているので、これを行うsearchCompletion修飾子を追加しました。

searchCompletion修飾子は、非対話型ビューで使用できます。

そのビューを、検索テキストを更新し、現在提示されている提案を却下するボタンに変換します。

ユーザーが最初に提案と対話し、その提案に基づいて検索結果の完全なセットを取得するアプリを作成する場合は、新しいonSubmit修飾子を使用して、検索結果を取得するタイミングを知ることを検討してください。

検索の値をonSubmit修飾子に渡すと、ユーザーが検索クエリを送信するたびに、指定したクロージャが呼び出されます。

これは通常、検索候補を選択するか、ハードウェアキーボードでEnterキーを押すと発生します。

また、新しいonSubmit修飾子をテキストフィールドまたは検索関連以外の提出物の安全なフィールドと組み合わせて使用することもできます。

検索完了修飾子と一緒に提案パラメータを使用すると、アプリに強力な検索提案機能を追加する簡単な方法が提供されます。

SwiftUIが現在提供している検索機能の簡単なツアーを楽しんだことを願っています。

要約すると、検索可能な修飾子を使用すると、ビューコンテンツを検索可能として記述できます。

ナビゲーションビューは、検索可能な修飾子と統合して、ナビゲーションビューの内容に基づいてプラットフォームに適したエクスペリエンスを提供します。

環境のisSearchingプロパティを使用して、ユーザーが検索しているときにアプリのUIを動的に調整します。

検索完了修飾子と検索可能な修飾子の提案パラメータを使用して、検索候補をアプリに追加します。

さあ、外に出て、すべてのSwiftUIアプリに検索を追加して、素晴らしいWWをお過ごしください。

[明るい音楽]。