10267

♪ ♪

こんにちは、私の名前はホリーで、継続的インテグレーションテクノロジーチームのマネージャーで、後でチームメイトのジェフ・マクギニスが参加します。

今日は、あなたのような開発者、Appleプラットフォーム用のアプリやフレームワークを構築している人のために設計された、使いやすい継続的な統合と配信サービスであるXcode Cloudを紹介できることを嬉しく思います。

このセッションでは、継続的インテグレーションの紹介から始め、Xcode Cloudをご紹介します。

次に、プロジェクトをセットアップし、コードを変更し、Xcode Cloudを使用してチームと協力する方法を学びます。

始めましょう。

継続的インテグレーションまたはCIは、問題が早期に発見され、修正されるように、コードの変更を定期的に統合する慣行です。

このプラクティスを採用することで、チームは協力して作業しながら、高品質の製品を作成することができます。

典型的なCIワークフローは、あなたまたはチームメンバーがコード変更をリポジトリにプッシュしたときに実行される一連の自動化されたステップです。

これらの手順では、ビルド、テストの実行、またはコードの変更がチームの確立された品質レベルを満たしていることを確認するために必要なその他のアクションなどを行うことができます。

CIを使用すると、変更の統合はリスクが低く、次のリリースは安定していることを安心できます。

さて、CIがあなたにとってどのように見えるかを考えるために、アプリのライフサイクルを見てみましょう。

開発者として、複数のソースからのフィードバックで作業している可能性があります。

Xcodeでバグを修正して機能を作成し、プルリクエストについてチームからコードレビューのフィードバックを受け取り、TestFlightを介して新しいバージョンを配布し、テスターのフィードバックを統合します。

高品質のアプリやフレームワークを作成するには、コードとフィードバックを生産的に反復するチームの能力が不可欠です。

そこでXcode Cloudの出番です。

Xcode Cloudは、Appleの開発者ツール間の点を接続しながら、CIのアイデアに基づいて構築し、プロジェクトを構築、テスト、配布、フィードバックを収集し、迅速に反復するための完全な開発パイプラインを提供します。

機能のツアーに参加して、何ができるかを学びましょう。

あなたはほとんどの時間をXcodeでの開発に費やし、Xcode CloudはXcodeにあります。

ここでは、Xcode Cloudの動作を見ることができます。

複数のワークフローが設定されており、ビルドが実行され、問題をキャッチしています。

また、チームが行っているすべての仕事について新しい洞察を得ることができます。

ワークフローは、どのアクションを実行するか、いつ実行するかをXcode Cloudに指示する設定です。

簡単なオンボーディングを簡単に通過し、最初のワークフローを迅速に起動して実行することができます。

その後、戻ってきて編集したり、さまざまなユースケースをサポートするための新しいワークフローを作成したりできます。

ワークフローを実行した結果は、ビルドと呼ばれます。

Xcode Cloudは、コード署名と複数のオペレーティングシステムバージョンとXcodeリリースへのアクセスを提供するAppleマネージドクラウドインフラストラクチャでビルドを実行します。

レポートナビゲーターの[クラウド]タブでアプリをクリックすると、すべてのワークフローのステータスと最新のビルドをサイドバーで確認できます。

アプリをクリックすると、ビルドグループの概要も開きます。このビューには、ワークフローだけでなくgitブランチによっても、開発チームの作業方法によって整理されたすべてのビルドが表示され、多くのブランチで1つのワークフローを使用できますが、結果を別々に見ることができます。

概要の上にあるマインフィルターをクリックして、リストをフィルタリングして、コードの変更によって開始されたビルドのみを表示することもできます。

または、レポートナビゲーターで人物アイコンを選択します。

ビルドグループの概要から1つのレベル下にあるのは、ワークフローの単一実行のビルドレポートです。

これは、コード変更に固有の結果を深く掘り下げることができる場所です。

テストレポート、ログを表示したり、問題を引き起こしたコードに直接ジャンプしたりできます。

ジェフは後でビルドレポートの詳細を詳しく説明します。

先ほど見たものはすべてXcodeだけでなく、App Store Connectでも入手できます。

これには、ビルドの開始と表示、ワークフローの管理、アーティファクトの表示とダウンロード、チームとの結果の共有、通知設定の管理が含まれます。

また、すでにTestFlightで作業している場合、Xcode CloudはApp Store Connectのすぐ隣にあるタブで、すばやくアクセスできます。

App Store Connectでは、個人通知の設定を設定することもできます。

ビルドの失敗に対してSlack通知を設定するのが好きなので、コードをプッシュした後も作業を続けることができますが、修正すべきことがあればすぐに警告されます。

チームの全員が、自分に最適な通知を設定できます。

外出先でも、Xcodeで設定していないプロジェクトのビルドを可視化したい場合でも、プロジェクトにコードをコミットしていないチームのメンバーでも、App Store ConnectのXcode Cloudはフル機能のWebベースのエクスペリエンスを提供します。

Xcode Cloudを作成したとき、開発プロセスとチームとのコラボレーションのために設計しましたが、プライバシーを中核に構築されています。

あなたのソースコードはあなたのプロジェクトの中心です。

そのため、Xcode Cloudのすべての側面は、データが確実に保護されるように設計されています。

ビルド環境は一時的なものです。

ワークロードは完全に分離され、環境は取り壊され、ビルド間でゼロから作成されます。

ソースコードは決して保存されません。

Xcode Cloudは、一時的なビルド環境内でのみコードをフェッチします。

ビルドデータは保存時に暗号化され、専用のCloudKitデータベースに保存されます。

そして、あなたは自分のデータを管理しています。

データはいつでも削除でき、システムから完全に削除されます。

Xcode Cloudを導入したので、ジェフに渡してセットアップを進めます。 セットアップを進めます。

Xcode Cloudへのオンボーディングを始めましょう。

Xcodeとの強力な統合のおかげで、始めるのにいくつかの簡単な手順しかかかりません。

プロセスは、製品メニューのXcode Cloudセクションにアクセスし、ワークフローの作成を選択することから始まります。

次に、ローカルプロジェクトで検出されたこれらのオプションから、オンボーディングするアプリを選択します。

今日は、私のチームが開発している「Fruta」という新しいスムージー注文アプリを選びます。このアプリはiOSとmacOSの両方をサポートしており、両方のプラットフォームを一度にオンボーディングします。

私たちのアプリは、私のために自動的に作成されたデフォルトの最初のワークフローから始まります。

私のローカルプロジェクトを検査することで、Xcode Cloudは私のチームの既存の構成に合わせてこれらの初期ワークフロー設定を調整することができます。

ワークフローは、開始条件、環境、実行する一連のアクション、および展開や通知などのポストアクションで構成されています。

そして、Xcode Cloudがメインブランチへのすべてのプッシュを開始条件として選択し、私の環境用にリリースされた最新のXcode、およびiOSとmacOSの両方のアーカイブアクションを見ることができます。

これらの設定を変更するオプションがありますが、これは私には良さそうなので、続けます。

ワークフロー編集を深く掘り下げるには、会議の後半で「Explore Xcode Cloud Workflows」セッションをチェックしてください。

次に、Xcode Cloudにソースコードへのアクセスを許可します。

これは、プライマリリポジトリ、サブモジュール、プライベートSwiftパッケージなど、プロジェクトを構築するために必要なすべてのソースリポジトリをカバーする1回限りのアクションです。

公的にアクセス可能なリポジトリでは、追加の承認は必要ありません。

Xcode Cloudは私のプロジェクト内の2つのプライベートリポジトリを発見したので、次に、ソースがホストされているGitHubに明示的な権限を付与します。

アクセスの付与をクリックすると、次のステップの詳細をApp Store Connectに移動します。

このプロセスはソースプロバイダーによって異なり、何らかの理由でいつでもアクセスを取り消すことができることに注意することが重要です。

Xcode Cloudへのソースコードアクセスの許可はウェブ上で完了し、このアシスタントがプロセスを案内します。

まず、Apple IDをソースアカウントに接続します。これは、Xcode Cloudでパーソナライズされたエクスペリエンスを可能にするために使用されます。

このステップは、プロバイダーのネイティブ認証フローとXcode Cloudの安全な暗号化を活用するので、私のコードと個人情報が保護されたままであることを知っています。

次に、GitHub組織にXcode Cloudアプリケーションをインストールし、選択したリポジトリにアクセスできるようにします。

すごい！

これらの手順が完了すると、私のGitHubアカウントはすべて設定されています。

Xcodeでオンボーディングをローカルで終わらせましょう。

リポジトリの準備が整いました。続けます。

最後のステップでは、Xcode Cloudは私のアプリケーションとバンドルIDをApp Store Connectに登録することを提案します。

私たちのアプリケーションはすでに作成されているので、ここで詳細を確認します。

すべてが良さそうです。

私のアプリがXcode Cloud用に構成されたので、オンボーディングプロセスをまとめることができ、最初のビルドが開始されます。

私の最初のビルドが完成したようです。

結果を詳しく見てみましょう。 

ビルドグループの概要には、アクティブなビルドと完了したビルドが一目で表示され、最初のエントリをクリックすると、ビルドの概要ページが開きます。

この概要では、期間や環境構成などのビルドに関する簡単な詳細を示し、下部には、関連するすべてのアクションとポストアクションのステータスが表示されます。

また、右上には、実行を再構築し、ローカル環境でこのリビジョンをチェックするのに役立つボタンがあります。

概要を残し、「Archive-iOS」を渡すなどのアクションノードを展開すると、この特定のアクションの概要が表示されます。

そして、ビュー内では、この実行によって生成されたログとアーティファクトを見つけることができます。

ログページは、このアクション内のすべてのタスクをきちんと整理し、注意が必要な領域に焦点を当てるために上部にフィルターを使用できます。

また、アーティファクトページでビルドによって生成されたバイナリ、ログファイル、その他のアーティファクトにも簡単にアクセスできます。

これはすべて、チームメイトと私がXcodeでCIコンテンツにアクセスするための非常に便利な方法になります。

それでは、アクションの概要にアクセスして、Macのアーカイブアクションが失敗した理由を調査しましょう。

ログビューと同様に、効率的なトリアージのために、これらの問題をタイプ別にフィルタリングできます。

私たちの最初のCIビルドは、以前にMacアプリで見逃したインポートの問題を見つけたようで、Xcodeで結果をトリアージしているので、問題内でこのジャンプボタンを使用して、修正する必要があるコードに直接移動できます。

物事をクリーンアップするために簡単なコード変更を行います。

そして、CIビルドを良いスタートにしたいので、先に進んでコミットしてリモートリポジトリにプッシュします。

そして、変更をプッシュした直後に、Xcode Cloudが私のために新しいビルドを開始したことがわかります。

そして、私はすべての変化をライブでフォローし続けることができます。

私は自分の素早い進歩にかなり興奮しています。

Appleのクラウドインフラストラクチャに基づいてCIビルドを実行することで、私たちのチームはこれまで以上に効率的にプロジェクトに協力します。

さて、ホリーに戻って楽しみに参加してください。

Geoff、私たちのプロジェクトFrutaのためにXcode Cloudをセットアップして実行してくれてありがとう。

同じチームのメンバーとして、私はMacでFruta Xcodeプロジェクトを開き、ジェフと私たちのチームの残りの部分が取り組んできたすべてのワークフローとビルドを見ることができます。

クラウドタブのレポートナビゲーターでは、プロジェクト名をクリックすると、ワークフローはチーム内で共有されるため、ジェフが作成したデフォルトのワークフローが表示されます。

ジェフがインポートエラーを修正したときに開始したビルド2が正常に完了したようです。

通過するビルドが見つかったので、ワークフローを編集してそれが何をするかを確認し、Frutaの追加カバレッジを得るためにどのような改善ができるかを調べましょう。

ワークフロー名を右クリックして、ワークフローの編集を選択できます。

ワークフローにもっとわかりやすい名前を付けることから始めましょう。

リリースに使用するいくつかのブランチを構築してテストするので、このワークフローを「リリース」と呼びましょう。

では、開始条件を編集しましょう。

サイドバーから開始条件セクションを選択して、設定を表示します。

開始条件は、ワークフローを実行するために何が起こる必要があるかを定義することを忘れないでください。

デフォルトは、コードの変更がメインブランチにプッシュされたときに開始するように設定されています。

私のチームもリリースブランチを使用しているので、ここにも追加しましょう。

カスタムブランチセクションのプラスボタンをクリックし、テーブル行にブランチ名を入力するだけです。

それはスタートコンディションに良さそうです。

では、行動に移りましょう。

デフォルトのワークフローは、プロジェクトが実行されているすべてのプラットフォームのアーカイブアクションを自動的に作成します。

これは構築するのに最適な基盤ですが、追加のカバレッジを追加するには、ここにいくつかのテストを追加したいと思います。

サイドバーのアクションヘッダーの右側にあるプラスボタンをクリックし、テストアクションタイプを選択します。

テストアクションでは、プラットフォームを選択できます--iOSをやりましょう--そして正しいスキーム、私たちの場合はFruta iOSを選択します。

サイドバーには、必要なものをすべて記入していないため、新しいテストアクションの横にまだ赤いXがあります。

私が設定する必要がある最後の設定は、これらのテストを実行するためのいくつかのデバイスを追加することです。

宛先テーブルの下にあるプラスボタンをクリックすると、推奨されるiPhoneシミュレーターが自動的に追加されます...

そして、もう一度クリックすると、おすすめのiPadが追加されます。

これらを変更して、特定のデバイスシミュレータを選択することもできます。

私のアプリがiPhone 12でうまく機能することを確認するために、最新のiPhoneを選びましょう。

私が追加したすべての目的地は、最新のOSバージョンを使用するように自動的に設定されていることに注意してください。

サイドバーでワークフローを確認でき、すべてが良さそうなので、右下の[保存]ボタンをクリックして変更を保存しましょう。

ワークフローに変更を加えたので、開始するためにコードを変更しなくても機能するようにしたいです。

レポートナビゲーターでワークフローを右クリックし、ビルドの開始を選択することで、手動で行うことができます。

次に、実行するブランチを選択するよう求められます。

そのブランチをワークフローに追加したばかりなので、「release/v1」で試してみましょう。

そしてここから、[ビルドの開始]をクリックして開始します。

素晴らしい、私たちの新しいビルドが実行されているように見えます。

さて、ビルドグループの概要には、リリース/v1ブランチの新しいセクションがあり、私が始めたばかりの新しいビルドであるビルド3は、実行中の状態でここに表示されます。

これが完了したら、リリースブランチがどうなっているかよくわかります。

その後、リリースワークフローに追加したり、チームの仕組みをサポートするために新しいワークフローを作成したりできます。

Xcode Cloudは、私たちのアプリの継続的な統合プラクティスを採用することを本当に簡単にしました。

数回クリックするだけで、ジェフは私たちをセットアップし、ワークフローが見つけた問題を修正しました。

その後、彼がすでに行ったすべてのことを簡単に確認し、ワークフローをより堅牢にすることができました。

高品質のアプリやフレームワークを作成するには、コードとフィードバックの両方を生産的に反復するチームの能力が不可欠です。

Xcode Cloudを使用すると、CIを簡単にセットアップできます。これはまったく新しいプラクティスであるか、プロセスをシームレスにするかにかかわらず、生産性を高め、ユーザーが製品で素晴らしい体験を得られることに自信を持つことができます。

このセッションが、Xcode CloudとContinuous Integrationに慣れるのに役立ったことを願っています。

カナダのバンクーバーにある私たちのチームから、そしてジェフと私を代表して、あなたに感謝し、WWDC 2021の残りの部分を楽しんでください。

[明るい音楽]。