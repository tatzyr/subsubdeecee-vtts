10013

♪ ♪

こんにちは、ようこそ。

App Clipsチームのエンジニア、ブライアン・ゴールドバーグです。

軽くて高速なアプリクリップを構築するための素晴らしいヒントやテクニックをお見せするのが待ちきれません。

始めましょう。

アプリクリップは、顧客がアプリが提供するものにすばやくアクセスして体験するための素晴らしい方法です。

アプリクリップは、必要な瞬間に発見され、ダウンロードできるアプリの小さな部分です。

アプリクリップはOSに深く統合されています。

アプリクリップコード、QRコードをスキャンするか、NFCタグをタップすることで、Safariやメッセージだけでなく、現実の世界でも呼び出すことができます。

アプリクリップは、マップやSiriの提案にも表示されています。

このセッションには、顧客に素晴らしい体験を構築し、提供するのに役立つベストプラクティスとトラブルシューティングのヒントが満載されています。

サイズ制限の下であなたのクリップを手に入れるための計画をお見せします。

アプリクリップがウェブページに表示されていないか、コードをスキャンしたときにアプリクリップカードが表示されない可能性があります。

おそらく、新機能の採用に伴う追加の複雑さを引き受けながら、コードベースの品質を維持するためのヒントを探しています。

そして、App Clipsに特異的でユニークな、どのような機能を活用できるかを知りたいかもしれません。

ゼロから構築する場合でも、既存のアプリにクリップターゲットを追加する場合でも、開発者が日常的に直面する現実世界の問題を説明し、より良いクリップやアプリを構築するための実用的な次のステップを提供します。

ユーザーがモバイルネットワークのカバレッジが良好な地域にいる場合でも、ダウンロード速度は異なる場合があります。

アプリクリップをすぐにオンデマンドで提供できるようにするために、アプリクリップの最大サイズは限られています。

したがって、開発者として、サイズに合わせてコンテンツを最適化することが重要です。

あなたのクリップがオンデマンドで配信できるほどコンパクトであるかどうか、開発の早い段階で、そして開発中に頻繁に知っておくのは良いことです。

あなた方の多くは、ソフトウェア開発におけるプロファイリングと最適化の反復プロセスに精通しています。

Xcodeを使用してサイズレポートを生成し、デバイスバリアントごとにIPAをエクスポートできるプロセスを紹介したいと思います。

次に、アプリクリップのサイズを小さくするために実行できる一連の基本および高度な最適化を説明します。

目標は、クリップが制限を超えた場合、アプリの提出時間に驚かされることを避けることです。

私たちが見るべき楽しい例をまとめました。

これは、サイズ制限を超える多くのgotchasを持つFrutaサンプルのバージョンです。

Gotchasは、いくつかの重要なポイントを説明するのが簡単です。

あなたのアプリは間違いなくより複雑で、さらに多くの機能を持っているので、さらなる探求の出発点として私の例を使ってください。

Xcodeを起動して、サイズレポートを生成し、IPAファイルをエクスポートする手順を実行し、これらのgotchasを発見し、それらを一緒に修正する方法を学びましょう。

まず、完全なアプリスキームを選択します。

次に、[製品]メニューに移動し、[アーカイブ]を選択します。

これは、スキームエディタで指定された設定を使用してプロジェクトを構築します。

主催者が開いたら、[アプリの配布]をクリックします。

開発を選択してください。

次に、アプリクリップを選択します。

[アプリ シンニング] ドロップダウンで、互換性のあるすべてのデバイスのバリアントを選択します。

ビットコードからの再構築がチェックされていることを確認してください。

アーカイブの準備が完了したら、[エクスポート]をクリックします。

次に、エクスポートするファイルシステム上の場所を選択します。

次に、Finderでエクスポートフォルダを開きます...

そして、App Thinning Size Report.txtを開きます。

各デバイスバリアントのセクションがあります。

各セクションの最後から2行目は、そのバリアントの非圧縮サイズを教えてくれます。

それが私たちが興味を持っていることです。

サイズを見ると、これは私に2つのことを教えてくれます。

1つ、私はサイズ制限を超えています。

第二に、すべてのデバイスのバリエーションがほぼ同じサイズであるため、アプリのシンニングの影響は見当たりません。

サイズレポートを閉じて、その理由をもう少し深く掘り下げてみましょう。

アプリのサブフォルダを開きます。

バリアントIPAの拡張子の1つを.zipに変更し、確認します。

ダブルクリックして解凍します。

ペイロードフォルダを開き、Controlキーを押しながらクリックしてパッケージの内容を表示します。

よく見てみましょう。

私の画像は個々のバンドルリソースのようです。

これらを資産カタログに入れれば、スペースを節約できるかもしれません。

インストール可能な製品に属さないドキュメントのzipとREADMEファイルが表示されます。

私のクリップで使用されているフレームワークがあります。

それもある程度のスペースを占有しているに違いない。

いくつかのローカリゼーションフォルダが存在し、チェックを外したままにしておくと、これらのファイルが増加することがあることを知っています。

コンパイルされた実行可能ファイルは比較的小さいです...

しかし、それをさらに小さくする方法があるかもしれません。

少しでも役に立ちます。

続けて、これらの問題のいくつかを解決するために何ができるか見てみましょう。

サイズレポートを生成し、IPAを調べるプロセスは、アプリクリップのサイズを小さくするために実行できるいくつかの手順を特定したため、非常に役に立ちました。

まずいくつかの基本的なステップから始めて、より高度なテクニックに移りましょう。

ビルド設定を再確認し、アセットカタログを使用する利点を確認し、属していない最終製品への道からファイルを除外し、コードと設定を確認し、サイズを縮小するためのリファクタリングを行います。

私たちがカバーする最適化は、アプリとアプリクリップの両方に適用されるので、これらのヒントを両方のタイプの製品に自由に適用してください。

では、各トピックをより詳細に探りましょう。

App Clipパッケージのコンパイルされたコード部分は、確かにクリップのサイズへの最大の貢献者ではありませんでした。

それは間違いなく資産であり、私たちはすぐに手に入れるでしょう。

しかし、少しでも役に立ちます。

デフォルトでは、Xcodeは最小で最速の最適化設定を使用してビルドされますが、それが私のプロジェクトで設定されていることを確認するために再確認しましょう。

完全なアプリがアクティブなスキームとして設定されていることを確認し、Optionキーを押しながらクリックしてスキーム設定を表示します。

アーカイブビルドはリリースするように設定する必要がありますが、ある時点で変更し、元に戻すのを忘れたようです。

私はまた、ビルド設定で少し実験していて、リリース最適化レベルをデフォルトから外しました。

小さなバイナリサイズと高速ランタイム実行の最適な組み合わせを使用するように、元に戻しましょう。

ほとんどの場合、私の場合と同様に、画像、オーディオ、ビデオなどのアセットが最も多くのスペースを占有します。

これらのアセットがApp Clipのサイズに与える影響を減らすために取ることができる最も重要なステップは、アセットカタログを使用することです。これには2つの理由があります。

1つは、アセットカタログに追加するメディアは、Xcodeビルドプロセスの一部として自動的に最適化されます。

そして第二に、顧客があなたのアプリやクリップをダウンロードすると、彼らがダウンロードした製品は、自分のデバイスに適した資産のみを含むように十分に小さくなります。

これはアプリシンニングとしても知られており、私たちは確かにそれを利用すべきです。

私のプロジェクトでは、私は本当にそれらの画像をアセットカタログに入れるべきでした。

私たちは実際にさらにうまくやることができます。

2番目のアセットカタログを作成し、アプリとアプリクリップの間で共有されているすべての画像をこのカタログに移動します。

両方のカタログを並べて持ちましょう。

アイコンと色を共有カタログに移動します。

次に、成分とスムージーの画像を共有カタログに入れます。

レシピ画像は完全なアプリでのみ必要なので、アプリクリップのサイズにカウントされないように、共有されていないカタログに入れます。

アセットライブラリにコピーした画像を必ず削除します。

そして最後に、ターゲットのメンバーシップエディタを使用して、App Clipから共有されていない資産カタログを除外します。

アセットカタログを深く掘り下げるには、アプリのストレージの最適化とアプリアセットの最適化に関するセッションをご覧ください。

以前、ファイルシステムでIPAを検査したところ、READMEファイルやzipを含むドキュメントなど、属していないものがいくつかあります。

Xcodeのターゲットメンバーシップエディタを使用して、これらのファイルをすべてのビルド製品から除外しましょう。

実行されるタスクに必要なコードのみをApp Clipターゲットに含めていることを確認してください。

ビルドフェーズを見て、App Clipに貢献しているすべてのソースファイルの概要を把握すると便利です。

不必要に見えるものがあれば、ソースのリストから削除して再構築します。

Frutaのレシピと報酬機能は、完全なアプリには必要ですが、App Clipには必要ではないので、それらのファイルを削除しましょう。

コンパイラに手伝っててもらうこともできます。

ビルドエラーがある場合は、ファイルが必要だったか、削除すべきものがあるか、App Clipターゲットから条件付きでコンパイルする必要があるコードがあるかもしれません。

時間が経つにつれて、ローカライズされた文字列ファイルは、重複や未使用の文字列で膨らむ可能性があります。

文字列ファイルを検査し、不要なものはすべて削除します。

アセットカタログで行ったのと同様に、アプリクリップに完全なアプリのローカライズされた文字列を含めないように、専用の文字列ファイルを作成できます。

アプリクリップの提出準備をするために、今日実装できる基本的な最適化をいくつか説明しました。

さて、この反復プロセスの一環として、もう一度測定し、サイズレポートを見て、まだ必要な場所にいないとします。

大丈夫です。

私はあなたが考慮すべきいくつかの高度な最適化戦略を持っています。

まず、外部の依存関係を評価し、そのサイズを考慮に入れます。

アプリクリップはアプリの一口サイズのバージョンなので、クリップの機能に必要なものだけをリンクしていることを確認してください。

アプリクリップのサイズに追加されていたSmoothyAccountLoginフレームワークを覚えていますか？

ほとんどの場合、目標を達成するのに役立つAppleのフレームワークがすでにOSに統合されています。

これらの組み込みフレームワークの1つを使用することは無料で、アプリとアプリクリップがより軽く、より速くなります。つまり、より速くダウンロードし、より速く起動し、顧客が手元のタスクをより迅速に完了できるようにします。

Appleでサインインを使用すると、ユーザーはApple IDだけでサービスに簡単にサインインできます。

支払いの場合、Apple Payは、あなた、開発者、そして顧客の両方にとって迅速かつ簡単です。

ネットワークを経由で通信するには、NSURLSessionを使用してください。

3Dグラフィックスには、RealityKitとMetalを活用してください。

より詳細な認証フローについては、ASWebAuthenticationSessionをご覧ください。

アプリクリップのサイズが制限を超えるのは、ほとんどの場合、アセットであり、コードではありません。

多くの場合、これらの資産は画像です。

基本的な手順では、組み込みの最適化とアプリのシンニングを利用するために、すべての画像をアセットカタログに移動しました。

時にはそれだけでは不十分で、画像のサイズを小さくするためにさらに行動を起こす必要があります。

ソース画像を保存するときに使用するフォーマットとオプションは、サイズと品質の両方に大きな影響を与えることがよくあります。

では、どのように最良の選択をしますか?

一般的に言えば、PNG画像はJPEG画像よりも多くのスペースを消費するので、フォーマットが透明性を提供する特定の機能が必要な場合は、PNGを使用してください。

または、JPEGの非可逆圧縮が許容できない品質の低下をもたらす場合。

これらの例には、高周波機能、鮮明なエッジ、および定義されたハイライトが含まれています。

PNGのロスレス圧縮は、これらの機能をJPEGよりもはるかに良く保持します。

そして、PNGをテーマにしている間は、写真以外の素材にはPNG8を検討してください。

右側の画像は、ファイルサイズを大幅に縮小するためにPNG8として保存されました。

画像をエクスポートするときは、並べて比較して、最適化が持ちこたえていることを確認してください。

色深度の減少は多くのスペースを節約できますが、量子化アーティファクトに悩まされない特定の画像にのみ適しています。

写真素材の場合、スペースを節約する必要がある場合は、JPEGを使用し、非可逆圧縮に少し傾けてください。

画像を保存する際に、コンテンツ作成ツールのデフォルトを受け入れる必要はありません。

私の場合、品質が著しく低下することなく、ファイルサイズを大幅に縮小しました。

さまざまな最適化の下で画質が維持されるように、プロジェクトで使用できるかもしれない小さなトリックをお見せしましょう。

私は一時的にパイナップルをより高い圧縮率として保存されたマンゴーに置き換えました。

これにより、実際のアプリで簡単なA / B比較を行い、変更が品質の低下をもたらさなかったことを確認できます。

ビデオの場合は、HEVCのような最新の規格を使用してエンコードします。

原則として、AACまたはMP3コーデックを使用してオーディオを圧縮し、ビットレートの低下を試します。

多くの場合、超高ビットレートは必要ではなく、ビットレートの低いクリップは品質の顕著な低下をもたらすことはありません。

インターフェイスコントロール、ロゴ、アイコンなどの特定の種類の画像の場合、SVG形式で表すと、大幅なスペースの節約につながる可能性があり、ベクター形式であるため、どのサイズでも素晴らしくレンダリングされます。

SVG形式といえば、私たちはそれをとても愛しているので、SFシンボルをバックアップするためにそれを選びました。強くお勧めします。

2,000以上の設定可能なシンボルから選択できます。

テキストラベルと自動的に整列する幅広いウェイトとスケールがあり、ダイナミックタイプは箱から出してすぐにサポートされています。

プロジェクトでSFシンボルを使い始めるためのコードをいくつか紹介します。

このコードスニペットは、同様のテキストスタイルをラベルとシンボル画像の両方に適用する方法を示しています。

ベースライン制約は、ラベルとシンボル画像を完璧に整列させます。

アセットカタログに画像のいくつかのバリエーションを含める代わりに、1つのベースイメージを含め、実行時に必要なバリエーションを構築します。

これがどのように実践されているかの素晴らしい例については、Frutaのサンプルをチェックしてください。

オレンジ色の成分のプレゼンテーションごとに別々の画像を使用する代わりに、このコレクションビューに1つ、垂直テキストとコントロールを備えたフル画像ビューにもう1つ、成分カードバックに3つ...

この1つの画像は、3つの異なる用途のバッキングアセットとして機能します。

その結果、実行時にバリエーションを構築することで、大幅なスペースの節約が達成されます。

最後に、他のすべての手順を完了し、クリップのサイズ制限を超えるアセットがまだある場合は、コンテンツ配信ネットワークからそれらのアセットを怠惰にロードすることを検討してください。

たとえば、良質だが解像度の低いプレースホルダアセットをApp Clipで出荷し、新しいAsyncイメージAPIを使用して、起動後にこれらのアセットを徐々に置き換えます。

詳細については、SwiftUIセッションの新機能を確認してください。

そしてヒント：ネットワークリンクコンディショナーを使用して、さまざまな帯域幅シナリオでApp Clipをテストし、顧客が手元のタスクを完了するのに遅延が発生していないことを確認します。

これらの高度な最適化により、最初のトピックの終わりに達しました。

アプリのサイズを小さくするために、開発者ドキュメントでさらに探求し、より多くのテクニックを発見することができます。

App Clipを本番環境にリリースし、SafariでWebサイトを表示するときに期待どおりに提供されていないとします。

あるいは、QRコードをスキャンして、App Clipカードを見る代わりにSafariに誘導されたのかもしれません。

一般的に、これらの問題は、エクスペリエンスの登録と関連するドメイン構成といういくつかの異なるバケットに分類されます。

簡単な用語の復習をしましょう。その後、問題を解決するために実行できるいくつかの手順を説明します。

App Store Connectでは、2種類のエクスペリエンスを追加できます。

すべてのアプリクリップにはデフォルトのエクスペリエンスが必要です。

デフォルトのエクスペリエンスでは、SafariのWebページから呼び出されたとき、または誰かがメッセージでWebページへのリンクを送信したときに、App Clipカードに入力するメタデータを指定します。

QRスキャン、NFC、アプリクリップコードなどの物理的な呼び出しを利用するには、高度なエクスペリエンスを追加する必要があります。

登録はデバイスに伝播するのに時間がかかるため、App Store Connectで行われた変更はすぐには利用できないことに注意してください。

体験の登録について詳しくは、App Store Connectの新機能のセッションと、App Clipの構成とリンクを参照してください。

App Clipを表示するUIを表示する前に、OSは呼び出しドメインがApp Clipに検証可能に関連付けられていることを確認します。

言い換えれば、Safariで表示されたURL、またはQRコードでエンコードされたURLは、資格とAASAファイルとアプリとアプリクリップとの安全な関連付けを持っている必要があります。

これが正しく設定されていない場合、クリップは表面化されません。

この安全な関連付けの確立の詳細については、「ユニバーサルリンクセッションの新機能」と「App Clipsセッションの設定とリンク」を参照してください。

すべてを設定し、Safariをチェックして、App Clipカードがこのようにインラインで表示されることを期待しているとします。

しかし、残念ながら、あなたはあなたのウェブページを見るだけで、他には何も表示されません。

では、何が問題なのか、どのようなトラブルシューティング手順を踏むことができますか?

まず、メタタグの構文を確認し、このテンプレートに似ていることを確認してください。

黄色のプレースホルダを、それぞれ完全なアプリのApp Store IDとApp ClipのbundleIDに置き換えます。

メタタグが正しく構築されていることを確認するために使用するテクニックを紹介します。

Safariでウェブページに移動し、ウェブインスペクタを開きます。

ヘッドエレメントを展開し、ソースをよく見てください。

次に、ノード属性をチェックして、メタタグが正しく解析され、App Clip bundleIDがXcodeとApp Store Connectに表示されているものとまったく同じであることを確認します。

転送またはリダイレクトはドメインの検証に干渉していますか?

ドメイン検証機構に関する限り、Example.comはwww.example.comと同等とは見なされません。

ここで覚えておくべき重要なことは、コンテンツを提供するドメイン、リダイレクトチェーンの最後にあるドメインは、AASAファイルを提供し、関連するドメインのエンタイトルメントに含まれるドメインでなければならないということです。

また、プライベートブラウジングが有効になっている場合、Safariは完全なアプリクリップカードやスマートアプリバナーを表示しないことを忘れないでください。

それでも立ち往生している場合は、ASCポータルでAASAが検証に合格していることを確認してください。

SWCutilコマンドラインツールを使用して、予想される場所でWebサイトからAASAファイルを取得できます。

これは、App Store Connectによって実行される操作と非常によく似ています。

これを使用して、App Store Connectがファイルを取得するのを妨げるエラーがないことを確認できます。

applicationIDの代わりに指定されたbundleIDなどの一般的な間違いがないか、JSON出力を確認してください。

詳細については、App Store Connectセッションの新機能とユニバーサルリンクセッションの新機能をチェックしてください。

今、アプリクリップコード、QRコード、NFCタグなどの物理的な呼び出しのために、ここに期待される経験があります。

完全に設定されていない場合、顧客がカメラでアプリクリップカードを見る代わりに、ウェブページがSafariで提供されます。

多くの場合、これが発生する理由は、物理コードにエンコードされたURLに対して高度なエクスペリエンスが作成されていないためです。

QRコードのURLがウェブサイトのURLと同じで、エクスペリエンスがSafariで完璧に表示される場合でも、App Store Connectで高度なエクスペリエンスを作成して、物理コードを強化する必要があります。

Safariの呼び出しをトラブルシューティングしていたときのこのスライドを覚えていますか？

ウェブトラフィックの場合、ドメインの検証の前にすべてのリダイレクトが続きます。

物理的なコードのドメイン検証の処理方法における微妙でありながら重要な違いをお知らせしたいと思います。

QRコードのURLで一意のドメインを使用していて、プラットフォーム間で一貫性を提供するためにそれをウェブサイトに転送しているとします。

あなたはすでに、ウェブから直接入力する顧客のために、そのドメインからAASAファイルを提供しています。

さて、微妙な違いが生まれます。

コードスキャンでは、App Clipのエンタイトルメントに正確なドメインを追加し、このドメインからもAASAファイルを提供する必要があります。

この背後にある理由は、物理的なコードをスキャンしているユーザーに迅速なフィードバックを与えるためです。

また、通常、リダイレクトチェーンに従うことになるネットワーク要求の実行を避けます。

高度なエクスペリエンスやサイトの関連付けの変更は、デバイスに伝播するのに時間がかかります。

スキャンしたURLが高度なエクスペリエンスとして追加されたことを確認しても、App Clipカードが表示されない場合は、開発者設定でエクスペリエンスキャッシュをクリアしてみてください。

次のトピックに進みます。

あなたはプロジェクトでいくつかの追加の複雑さを引き受けました、そして利点は、あなたが今より近代的でプラットフォームに従う経験を持っていることです。

ここまで達成するために一生懸命働いてきた品質のレベルを維持しながら、余分な機能を受け入れるために取ることができるいくつかのステップをお見せしたいと思います。

基本的なレストランアプリの機能を示す図を見てみましょう。 基本的なレストランアプリの機能機能を示す図を見てみましょう。

この例では、お客様はレストランのメニューを閲覧することから始めます。

次に、ハンバーガーやカクテルをカスタマイズしてからチェックアウトできます。

その後、注文状況と注文ピックアップのオプションが表示されます。

さて、レストランが2つの機能を追加して体験を向上させたいとしましょう。QRコードでテーブルで支払い、カスタマイズしたハンバーガーをリンクとして友人に送って、彼らも注文できるようにすることです。

これらの機能の両方がチェックアウトステップに直接起動することに依存しているため、これには大幅な再設計が必要になります。

要求された機能は、アプリクリップにとって本当に素晴らしい機会ですが、それを現在のデザインにシューホーンにすると、多くの追加の複雑さが生じます。

アプリをより柔軟にするために、どのような措置を講じることができますか?

まず、アプリの各コンポーネントが独立しており、直接起動できる、平坦化されたモジュラー機能を作成することをお勧めします。

このアプローチは、アプリクリップがどのように呼び出され、状態が提供されるかの基本であるディープリンクにはるかに適しています。

URLでエンコードできるメニュー項目のリストを提供することで、直接呼び出されるチェックアウトモジュールを設計します。

注文をビジュアルコードに埋め込まれたURLとして表現することで、顧客にテーブルで小切手を支払うことができます。

食品がURLでエンコーダ可能になったら、このパラダイムを使用して、顧客が注文したものを友人と共有して、同じものを購入できるように促すことができます。

オーバーヘッドがほとんど残っていないため、アプリをまだダウンロードしていない顧客にオンデマンドでこの機能を提供することで、アプリクリップを採用し、リーチを増やすことができます。

オーバーヘッドを最小限に抑えながら、追加の機能のロックを解除するために、アプリケーションの設計について少し違った考え方をするいくつかの方法を示しました。

それでは、アプリクリップの提供に関わる定型コードの一部を最小限に抑える方法を見てみましょう。

アプリのコードでは、通常、アプリがバックグラウンドで起動または再開されたときに呼び出されるこれらのメソッドを使用して、ライフサイクルイベントに応答している可能性があります。

アプリクリップを採用すると、これらのまったく同じライフサイクル方法の別のセットが追加されます。

UserActivityからURLを抽出し、その抽出されたURLを使用して状態を導き出し、UIを表示するApp Clipのライフサイクルメソッドにコードを配置したくなるかもしれません。

コンセプトは健全ですが、その前に、アプリとApp Clipの起動の両方を処理するコードが共有されるようにリファクタリングすることをお勧めします。

これにより、App Clipとフルアプリ間の別々の起動パスで同様の機能を維持しようとするバグや頭痛の種が排除されます。

ユーザーアクティビティをパラメータとして取るresponseToのようなメソッドを作成することを検討してください。

このメソッドをアプリの主なエントリポイントとして使用し、関連するすべてのライフサイクルメソッドから直接呼び出してクリップします。

今、あなたはアプリとクリップの両方に共通するコードを実行しており、オーバーヘッドを大幅に削減します。

おそらく、顧客がテーブルで小切手を支払うのを容易にするために、URLからレストランのメニュー項目を抽出することで、そのユーザーアクティビティに応答します。

これはすべて共有されているコードなので、一度変更を加えると、アプリとアプリクリップの両方でメリットを得ることができます。

品質を維持しながらプロジェクトに最新の機能を採用することに関する議論は、テストに言及せずには完了しません。

あなたに思い出させたいアプリクリップに特有の2つのテクニックがあります。

反復開発の場合、Xcodeでビルドして実行するときは、_XCAppClipURL環境変数を選択した呼び出しURLに設定します。

クリップを実行すると、ここで設定したURLは、顧客のデバイスと同じようにクリップに渡されます。

開発中のクリップが本番デバイスと同様にOSによって表面化されるのを見るには、開発者設定に移動し、ローカルエクスペリエンスを作成します。

顧客が自分のデバイスでApp Clipをどのように使用するかをよりよく理解するために、クリップを提出する前にこれを試してみる必要があります。

そうでなければ、カメラでコードをスキャンするなど、クリップを呼び出す方法の多くをテストする素晴らしい機会を逃しています。

また、Safariの新しいApp Clipカードエクスペリエンスのように、本番環境で利用可能になる前に、シードビルドの新機能を試すのに最適な方法です。

私はちょうどアプリクリップをテストするための地元の経験がどれほど素晴らしいかについて表面をスキミングしました。

詳細については、今年のApp Clipsセッションの新機能を参照してください。また、App Clipsのテストに関する詳細な説明については、「App Clipの起動体験のテスト」というタイトルの開発者ドキュメントを参照してください。

最後に、すべての開発者が利用すべきApp Clipsに固有の機能がいくつかあります。

App Clipsが導入されたとき、App Clipsのためだけに2つの合理化された権限項目が利用可能になりました。

これらの項目は、一時的な通知と位置確認と呼ばれます。

顧客がApp Clipカードで右を利用するための事前承認を提供することができます。

一時的な通知を使用すると、App Clipが最後に起動されてから24時間通知を送信でき、位置確認は、顧客が正確な位置を尋ねたり、知ったりすることなく、お客様が期待するエリア内にあることを確認するのに役立ちます。

これは、間違ったガソリンスタンドでの偶発的な支払いや、間違った町のFrutaショップからスムージーを注文するのを防ぐのに役立ちます。

開発者として、Info.plistでこの機能にオプトインします。

今、あなたのアプリクリップは、あなたが実際に必要とする以上のものを要求するアラートであなたの経験の起動を中断することなく、これらのユニークな許可にアクセスできます。

位置確認は、NFCタグ、アプリクリップコード、QRコードなどの物理的な呼び出しでのみ利用できます。

お客様は、現在のセッションまたはすべてのリクエストのロケーション確認をオプトアウトできます。

confirmAcquiredのエラーをチェックして、これらの状態を適切に処理し、何が起こったのか、そしておそらくより有利な条件で取引を再開するためのオプションについて、顧客に役立つガイダンスを提供してください。

プロファイルとXcodeでの署名に関する簡単なメモ。

ほとんどの人は、プロジェクト設定の「署名と機能」セクションで署名を自動的に管理することを可能にしていますが、これは素晴らしいことです。

署名を手動で管理している場合は、最近のプロフィールを取得してください。

直接的な利点の1つは、顧客がアプリクリップからフルアプリにアップグレードすると、データがより速く移行されることです。

これは、私たちが常に取り組んでいる多くの利点の1つです。

最近のプロファイルを持つことで、アプリとクリップがこれらの改善を利用するために必要な機能を持っていることを保証します。

あなたは今、軽くて高速なアプリクリップを構築するためのいくつかの素晴らしいテクニックを学びました。

すべてをまとめる時が来ました。

私はあなたのクリップをオンデマンドで稲妻のように簡単に配信するのに十分小さくするための基本的かつ高度なテクニックをカバーしました。

App Clipがどこでどのように呼び出されていることを確認する方法をお見せしました。

アプリクリップとユニバーサルリンクを採用するために、プロジェクトをディープリンクに備えるためのベストプラクティスをいくつか示しました。

そして、App Clipsのユニークで合理化された機能を取り上げました。

今日Xcodeを起動し、これらのヒントのいくつかを使用して、App Clipをより軽く、より速くできることを願っています。

今年のApp Clipsの新機能に関する同僚のYongjunのセッションを必ずチェックしてください。

ありがとう、そして素晴らしいWWDCをお過ごしください。

[明るい音楽]。