10232

みなさん、こんにちは！私の名前はアヤカで、Mac用のショートカットを紹介するためにここにいることをとても嬉しく思います。

まず、Mac用のショートカットの概要と、今年ショートカットにもたらす他のエキサイティングな新しいアップデートのいくつかから始めたいと思います。

ショートカットを使用すると、反復的なタスクを自動化し、さまざまなアプリの機能をつなげて問題を解決できます。

それはあなたの技術の使い方を創造的にすることができます。

そして、Mac用のショートカットは、自動化をこれまで以上に楽しくアクセスしやすくします。

アプリを初めて開くと、iPhoneからすでに同期されているすべてのショートカットが表示されます。

このアプリには、新しいMac固有のショートカットなど、すぐに使用できる新しいショートカットを発見できるショートカットギャラリーも含まれています。

また、独自のショートカットを作成したい場合は、Macでくつろげるように一から再設計されたショートカットエディターを使用することもできます。

ところで、私たちはSwiftUIでMacアプリのほぼ全体を書きました。これにより、iOSとMacアプリの間で統一されたコードベースを維持しながら、各プラットフォームに合わせて詳細を調整することができます。

iOSと同様に、Mac上のどのアプリでもショートカットにアクションを提供できます。

このセッションでは、iOSアプリ、ネイティブMacアプリ、またはMac Catalystで構築されたアプリを開発しているかどうかにかかわらず、アプリのショートカットをサポートすることで、macOSで強力なワークフローを有効にする方法について説明します。

また、AppleScriptやAutomatorなど、私たちが知っていて愛している既存のツールを含め、ショートカットがMacの自動化の全体像にどのように適合するかについても説明します。

今年は、フォーカスとサウンド認識の2つの新しい自動化タイプと、ウィンドウとファイルを管理できるまったく新しい一連のアクションに加えて、後で強調します。

あなたのアプリが、人々が強力なショートカットを作成するためのカスタムアクションを提供する方法も説明します。

ちなみに、アプリがファイルプロバイダーと統合されている場合、これらの新しいファイルアクションは、アプリが提供するファイルで自動的に機能します。

また、既存のSiriKitメッセージインテントを採用したアプリをお持ちの場合は、アプリからのカスタムメッセージ送信アクションを使用して、この機能を自動的に公開します。

また、共有に関するいくつかのエキサイティングな新しいアップデートがあり、開発者がショートカットを構築して共有するのが大好きであることを知っています。

今年は、ショートカットの配布をはるかに簡単にします。

また、ショートカットをファイルとして配布できる新しいファイル形式もあります。

また、プライベート共有を有効にしました。これは、ショートカットを同僚と共有するのに便利です。

見てみましょう。 

これで、特別な設定をオンにしなくても、誰でもショートカットをダウンロードできます。

これは、ウェブサイトやアプリで独自のショートカットを配布できることを意味します。

例えば、あなたのアプリのアクションを使用する素晴らしいショートカットを人々に提供したいとしましょう。

さて、そのショートカットを作成してiCloudに共有すると、Appleはショートカットを公証し、アプリやウェブサイトで機能し、人々が簡単にダウンロードできるようにリンクに変換します。

また、ライブラリからの写真のようにアプリにデータを渡すショートカットをダウンロードしたときに、より具体的な許可プロンプトを表示することで、人々がデータを管理できるようにしています。

そして、もっとあります。

ショートカットをファイルとして共有できるようになりました。これは、iCloudの外部にショートカットを配布する必要がある場合に便利です。

そして、iCloudリンクと同様に、ショートカットファイルは安全であることを確認するためにAppleによって公証されます。

最後になりましたが、連絡先と共有したり、個人的なバックアップを保存したりするために、iCloudにアップロードすることなく、ショートカットを非公開で共有するための新しいモードがあります。

ショートカットファイルは、それらを送信した人の身元で署名されています。

ショートカットに再署名する必要がある場合は、新しいショートカットコマンドラインツールを使用できます。

これらはすべて、今年のショートカットのエキサイティングな新しいアップデートです。

それでは、ショートカットが既存のMacオートメーション技術にどのように適合するかを見てみましょう。

Macには、AppleScript、Shell Scripting、Automatorなど、オートメーションを深くサポートしてきた長い歴史があります。

ShortcutsがAppleScriptsとShell Scriptingを完全にサポートしていることを共有できることを嬉しく思います。

ショートカットエディタ内で直接スクリプトを作成して実行できる、ショートカットに組み込まれた新しいアクションがあります。

次に、Automatorを見てみましょう。

Automatorは、反復的なタスクを自動化するためのワークフローを作成できるMacの既存の自動化ツールです。

ショートカットはMacの自動化の未来です。

しかし、私たちはまだAutomatorとそれに依存するすべての人を深く気にかけています。

Automatorからショートカットへの移行をできるだけスムーズにするために、ほとんどのAutomatorワークフローをショートカットに変換できる移行ツールを構築しました。

たとえば、Finderで選択したPDFドキュメントから画像を作成する優れたワークフローがある場合、ショートカットはそれをインポートし、各Automatorアクションを1つ以上のショートカットアクションに変換できます。

あなたがしなければならないのは、アプリにドラッグするか、右クリックメニューを使用して、ショートカットアプリでワークフローファイルを開くことだけです!

あなたのワークフローはショートカットに変わります。

移行を有効にするために、最も人気のあるAutomatorアクションをすべてショートカット、シェルスクリプトとAppleScriptを実行するアクション、ファイルの管理などを追加しました。

そしてもちろん、これらの行動はすべて私たちの移住者によってサポートされています。

それでは、あなたのアプリがショートカットにどのように適合するか、そしてそれが顧客のために生み出すことができる価値について話しましょう。

アプリがショートカットと統合できる主な方法は、「アクション」を介してその機能を公開することです。

ショートカットにアクションを公開することで、人々はアプリの機能をより速く使用し、アプリを使用して強力なワークフローを作成し、最後に、他のアプリと組み合わせてアプリを使用することができます。

これらをもっと詳しく見てみましょう。

macOSには、人々がショートカットを実行できる場所がたくさんあります。

アプリからアクションを公開すると、突然、ショートカットアプリ自体、ショートカットメニューバー、キーボードショートカットの入力、Spotlightでの検索などから使用できるようになります。

だから、あなたはこれまで以上に多くの場所であなたの機能をより速く使用するために人々を開放しています。

さらに、アプリのアクションは、強力なマルチステップのショートカットの一部として使用できます。

人々が自分のタスクを管理できるto-doアプリを作ったとしましょう。

アプリの機能をアクションとして公開すると、突然、人々はそれらのアクションを使用して強力なワークフローを作成できます。

たとえば、明日予定されているすべてのto-doを見つけ、優先度を高く設定し、ワンクリックでリストに表示するショートカットを作成できます。

アクションをフックできるさまざまな方法があるため、いくつかのアクションを公開するだけで、アプリの機能に何千もの新しいユースケースを有効にすることができます。

アプリからアクションを公開することで、アプリの機能を他のアプリと組み合わせて使用できるようにすることもできます。

たとえば、画像編集アプリを作成し、アプリのカスタム画像フィルターを適用するアクションを公開すると、突然、人々はそのアクションを使用して、写真を選択し、画像フィルターを適用し、ソーシャルメディアに投稿するこのようなワークフローを作成できます。

したがって、これらは、アクションを公開することで、人々があなたのアプリで何ができるかをスーパーチャージする方法のほんの一例です。

アプリで人々に力を与えるために提供できるアクションの種類について詳しく知るために、素晴らしいアクションの設計をカバーするセッションを必ずチェックしてください。

今からイアンに渡して、実際にこれらのアクションを構築する方法を教えてくれます。

こんにちは、私はイアンです。今日は、Macアプリのショートカットアクションを構築する方法を紹介します。

後で、統合のために心に留めておくべきいくつかの特別な考慮事項について説明します。

アクションの構築から始めましょう。

iOSと同様に、ショートカットのアクションは、SiriKitとも呼ばれるIntentsフレームワークを使用して構築されます。

このセッションでは、人々が行う必要があるタスクのリストを追跡し、それぞれが独自の期日を持ち、それらのタスクを他の人と共有できる共同タスク管理アプリを開発しているふりをします。

人々がMacのどこからでも私のアプリの機能を使用できることは本当に重要です。

ショートカットと統合することで、ユーザーがアプリでタスクを含むマルチステップのショートカットを構築できるようにすることができます。

アプリを見ると、ユーザーがやり取りするコンテンツの主なタイプはタスクです。

各タスクには、いくつかの重要な属性があります。

まず、タイトルがあります。これは、何をする必要があるかを説明するテキストです。

タスクには、期日と、タスクを他の人と共有するためのリンクもあります。

アプリ内のタスクに関連して実行できる操作もたくさんありますが、これは動詞と考えることができます。

新しいタスクを追加したり、既存のタスクを編集または削除したり、特定の条件に一致するタスクを取得したり、もちろん、アプリは特定のタスクを表示したりできます。

だから、それらの動詞のそれぞれについて、私はアクションを作成するつもりです。

これらは、ユーザーが呼び出すことができる原始的な操作を形成し、これらのアクションは、人々がそれらを一緒に使用できるように設計されています。

たとえば、これら2つをペアリングすることで、タスクを取得し、それを削除することができます。

タスクを作成するだけで、誰かがメモから選択したテキストを受け取り、必要に応じてテキストを大文字にし、ユーザーに期日の入力を依頼する自動ワークフローを作成できます。

その後、ショートカットはそのテキストと期日をタスクの作成アクションに渡すことができ、タスクを作成する意図を私のアプリに配信します。

私のアプリでタスクが作成されると、私の意図は共有URLを含むタスクを返し、ショートカットはそのリンクをメッセージ内の誰かに送信できます。

さて、それはほんの一例です。

ショートカットには非常に多くの異なるアクションがあるため、人々はタスクの作成アクションをほぼ無限の方法で利用することができます。

アプリが公開するアクションがわかったので、それらを実装し始めます。

実装の最初のステップは、アプリのインテント定義ファイルを作成することです。

このファイルをXcodeプロジェクトに追加すると、ソースコードと一緒にコンパイルされます。

このプレゼンテーションでは、Mac用のかなり基本的なSwiftUIアプリがあります。

ただし、使用するUIフレームワークに関係なく、インテントを追加するプロセスは非常に似ています。

まず、インテント定義ファイルを作成します。

テンプレートペインで、意図の定義を検索します。

デフォルト名は問題ありません。

コンパイルされるように、必ずアプリのターゲットに追加してください。

これが新しい空のインテント定義ファイルです。

ファイル内では、アプリが実装する各インテントと、この場合はタスクなどに使用される他のタイプを定義する必要があります。

このアプリには、このタスクタイプを参照するいくつかのインテントがありますので、まずタスクタイプを定義します。

これを行うには、左下の「+」ボタンをクリックし、「新しいタイプ」を選択します。

各タイプは自動的に識別子とdisplayStringプロパティを持ちます。

displayStringプロパティはタスクのタイトルに対して機能しますが、期日と共有リンクのタイプにさらにプロパティを追加する必要があります。

まず、タスクをいつまでに完了しなければならないかを指定する期日プロパティを追加します。

これは日付と時刻を表すので、日付コンポーネントタイプを選択します。

また、他の人と共有できるタスクへのリンクであるURLも追加します。

最初のタスクが完了したので、ダジャレは意図していないので、私は先に進んで意図を定義します。

これは、タスクを作成できる意図です。

「タスクの作成」という名前を付け、カテゴリを「作成」に変更します。

また、意図が何をするかを説明する簡単な説明も書きます。

ユーザーは、アプリが実装するアクションのリストを見ているときにこれが表示されます。

次に、意図のパラメータを定義します。

意図を関数のように考え、パラメータを関数がその作業を行うために渡さなければならない引数と考えてください。

新しいタスクを作成するには、私のアプリはタイトルと期日を知る必要があるので、それぞれにパラメータを作成します。

共有リンクは、タスクが作成されたときにアプリが生成されるため、事前に収集する必要はありません。

タイトルのパラメータを追加することから始めましょう。

タイプとして文字列を選択します。

各タイプのパラメータには、それに関連付けられたいくつかの設定オプションがあります。

それが理にかなっているなら、デフォルト値を指定できます。

しかし、この場合は、空の文字列として残しておきます。

次に、期日パラメータを日付コンポーネントタイプで追加します。

そして、ここにプロンプトを追加するので、ユーザーが事前に日付を入力しない場合、アプリは実行時に日付を尋ねることができます。

両方のパラメータが定義されたので、ほぼ完了です。

最後に、ショートカットアプリのセクションまでスクロールして、さらにいくつかのことを記入する必要があります。

まず、入力パラメータを指定します。

多くの場合、ユーザーはどこか他の場所からテキストを受け取り、それを私たちのアクションに渡すので、私は入力としてタイトルパラメータを選択します。

これにより、ショートカットを構築する際のエクスペリエンスが改善されるため、ユーザーがショートカットで以前のアクションのテキストをすでに持っている場合は、アクションを追加すると自動的に入力されます。

最後にすべきことは、要約を定義することです。

この文字列は、ショートカットでこのアクションを見たときにユーザーに表示されます。

私はそれを「期日でタスクを作成する」と呼びます。

タスクを作成するには両方のパラメータが必要なので、それらの両方を要約に入れているので、アクションを見ると常に表示されます。

要約に入れたくないパラメータがある場合は、遠慮なく省いてください。

これを行うと、ユーザーはアクションを展開して編集できるようになります。

意図を定義すると、Xcodeは実装で使用するクラスとプロトコルを生成します。

今、私はアプリを構築するつもりです。

これにより、続行する前に意図の定義に問題がないことを確認します。

ビルドログでは、いくつかの新しいコードが構築されているのが見えます。

これらのソースファイルは、インテント定義に入れられたものに基づいてXcodeによって生成されます。

Xcodeは、タスクタイプとCreateTaskIntentのソースコードを生成しました。

これらの新しいタイプは、アプリのコードベースで使用できるようになりました。

さらに、意図が定義されたので、ショートカットアプリを起動し、新しいショートカットを作成し、新しいタスク作成アクションを検索できます。

コードを書いていないので、まだ機能しません。

次に、アプリは着信インテントをディスパッチして処理する必要があります。

このコードは、誰かがショートカットまたはSiriを介してアクションを実行するときに実行されます。

アプリは、どのプロセスが意図を処理するかを決定する必要があり、2つのオプションがあります。

第一に、それらをアプリ内で処理するか、第二に、別のインテント拡張を構築します。

アプリ内インテント処理により、アプリはアプリデリゲートに配信される着信インテントに応答してその状態を操作できます。

ほとんどのアプリはこれから始まり、必要に応じてインテント拡張機能に移行する必要があります。

インテント拡張機能は、アプリに代わってインテントを処理できる軽量でスタンドアロンのプロセスです。

インテントが実行されるたびにプロセスを起動する必要があるため、アプリ自体を起動する必要がないため、インテント拡張機能の構築は可能な限り効率的にするのに役立ちます。

アプリとインテント拡張機能は、着信するインテントごとにインテントハンドラオブジェクトをインスタンス化して返すように求められます。

これを行うために実装すべきAPIを見てみましょう。

アプリ内インテント処理には、インテントハンドラを返すことができるAppDelegateメソッドがあります。

macOS Montereyでは、このAPIはNSApplicationDelegateでも利用可能になりました。

インテント拡張の場合、INExtensionのサブクラスはhandlerForIntentメソッドをオーバーライドできます。

アプリ内インテント処理とインテント拡張機能の違いの詳細については、WWDC 2020の「エンパワーメント」セッションをご覧ください。

次に、アプリに入り、アプリ内のインテント処理を実装します。

最初にする必要があるのは、アプリのサポートされているインテントとしてCreateTaskIntentを追加することです。

これにより、この意図がアプリデリゲートに配信されるべきであることをシステムに知らせます。

次に、メインアプリのソースコードに移動します。

まず、アプリのアプリデリゲートを作成します。

これはSwiftUIアプリのライフサイクルを使用しているため、オブジェクトをSwiftUIに接続するためのデリゲートアダプターも作成する必要があります。

インテントを受け取るには、インテントフレームワークをインポートし、handlerForIntentメソッドを実装します。

ディスパッチメソッドができたので、次のステップはインテントのハンドラを実装することです。

この例では、インテントを処理するための新しいクラスを作成しますが、これはアプリ内の任意のオブジェクトにすることができます。

インテントハンドラーは、「ハンドリング」という単語で終わるこのインテントのために生成されたプロトコルに準拠する必要があります。

Create Taskのインテントについては、CreateTaskIntentHandlingという名前です。

次に、intentがCreateTaskIntentの場合、handlerForIntentメソッドを更新して新しいIntentHandlerオブジェクトを返します。

Xcodeは、どのメソッドを実装する必要があるかを知らせるはずです。

意図処理プロトコルには、解決、オプションの提供、確認、処理の4種類の方法を含めることができます。

パラメータごとに解決方法が生成されます。

これは、パラメータが有効かどうかを確認し、そうでない場合は何をすべきかをシステムに指示するチャンスです。

この目的のために、2つの解決方法があり、1つはタイトル用、もう1つは期日用です。

Titleパラメータの場合、アプリは値がnilではなく、空でないことを確認する必要があります。

タイトルが空の場合、needsValueを返し、ユーザーに値を入力するように促すようにシステムに指示します。

期日パラメータについては、期日が検証され、それがゼロではないことを確認するために同様のものが実装されます。

期日に関するアプリの要件を見ると、解決方法はまた、すべての期日が未来であることを確認し、日付が過去の場合はユーザーにエラーを表示する必要があります。

これを行うには、インテント定義ファイルに戻り、カスタム検証エラーを追加します。

コード、invalidDate、および期日は将来でなければならないというエラーメッセージが表示されます。

これで、アプリは先ほど追加したカスタム検証エラーでサポートされていない結果を返すことができ、日付が無効であるというエラーメッセージが表示されます。

別のタイプの方法は、オプションを提供することです。

ダイナミックオプション設定が有効になっているパラメータには、これが表示されます。

パラメータのいずれかに有限の可能な値のセットしかなく、ユーザーが独自の任意の値を入力できるようにしたくない場合は、そのパラメータの動的オプションを有効にできます。

これにより、インテントの実行中にこれらの可能な値を指定できるprovide optionsというメソッドが作成され、ショートカットはユーザーに値の1つから選択するように求めます。

パラメータが個別に解決された後、オプションで確認方法を実装することもできます。これは、すべてがうまく見えることを確認し、意図を処理し、問題が発生した場合にエラーをスローできるはずです。

たとえば、ネットワーク接続が必要な場合は、実際にネットワークに到達できるかどうかを確認する必要があります。

最後に、ハンドルメソッドは、意図があなたに指示していることを実際に行う場所です。

ハンドルメソッドは、アプリにタスクを作成し、成功を返します。

アクションがタスクを作成した後、後のアクションが共有URLなどの属性を使用できるように、タスクを出力として提供する必要があります。

インテントエディタに戻って、インテントの応答セクションに移動します。

ここでは、作成されたタスクのプロパティを追加します。 

以前に作成したタスクタイプを選択します。

ショートカットで使用できるように、そのプロパティをインテントの出力として選択します。

そして今、コードに戻ると、応答にはタスクオブジェクトを割り当てることができるタスクプロパティがあります。

これが完了すると、あなたの意図はショートカットアプリにアクションとして表示されるはずです。

だから、それをテストし、人々がそれを使用できるすべての方法を試すのに時間を費やすようにしてください。

テストを開始するには、ショートカットアプリをもう一度開き、タスクの作成アクションを見ます。

タスクの名前と日付を入力します。「明日の午後3時」です。

実行ボタンを押すと、タスクは正常に作成されます。

しかし、日付を「昨日の午後3時」に変更すると...

予想通り、エラーメッセージが表示されます。

だから、ショートカットでアクションを構築するためのものです。

最後に、今日はMacでショートカットを開発する際に心に留めておくべきいくつかの考慮事項について説明します。

Mac Catalystで構築されたアプリ、ファイルを扱うアプリ、iOSとMacの両方に展開するアプリ、ショートカットを実行する必要があるアプリやツールなど、4種類のアプリについて説明します。

まず、Mac Catalystを使用してiOSアプリをMacに持ち込む場合、知っておくべきことがいくつかあります。

macOS Montereyでは、Mac Catalystで構築されている場合、アプリは同じIntents APIを使用できるようになりました。

新しいアプリを構築している場合は、すべてがiOSと同じように機能するはずです。

ただし、アプリがすでにMacで利用可能で、iOSのIntentsフレームワークと統合されている場合は、Macに来る過程でIntentsの統合をまとめた可能性があります。

したがって、macOS Montereyで実行しているときは、この機能を再度有効にするためにコードを監査してください。

私が強調したいもう1つのタイプのアプリは、ドキュメントベースのアプリです。

以前のデモでは、タスク管理アプリは、アプリ内に完全に存在するタスクで動作します。

しかし、他の多くのアプリは、ディスク上のファイルとして存在するドキュメントで動作します。

iOS 15とmacOS Montereyでは、インテントのファイルパラメータを使用すると、ユーザーは特定のファイルを選択してアプリのアクションに渡すことができます。

アプリがデータベースではなく、主にファイルベースのドキュメントを扱う場合は、ファイルで動作する一連のアクションを構築することを検討してください。

たとえば、スプレッドシートアプリは、ドキュメントを開いたり、特定のファイルの行にデータを追加したりするアクションを作成できます。

サードパーティのショートカットがファイルでどのように機能するかのもう一つの本当にクールな例は、サウンド分析からこのセッションで示されています。

iOSとMacの両方に存在するアプリを開発している場合、両方のプラットフォームでアクションを機能させるには、アプリの両方のコピーに同じインテントを展開する必要があります。

これにより、あるプラットフォームでショートカットを構築し、他のプラットフォームで同じように動作させることができます。

これを行うには、両方のアプリに同じ正確なインテント定義をコンパイルし、インテントが同じ名前とパラメータを共有していることを確認する必要があります。

場合によっては、アプリはプラットフォーム間で異なるバンドル識別子を持つ場合があり、これは問題ありません。

ショートカットはこれを処理しますが、同じ名前のインテントは、同じApple Developerチームを介して展開されたアプリ間でのみ共有されることに注意してください。

また、アプリのあるバージョンから別のバージョンにユーザーをアップグレードする必要がある場合、iOS 15では、2つのアプリが同じ開発者からのもので、同じインテント名を使用している限り、アプリのショートカットは自動的に一方から他方に転送されます。

最後に、アプリやコマンドラインツールからショートカットを実行したい場合は、考慮すべき2つの方法があります。

まず、ショートカットは、MacアプリとAppleScriptsがショートカットを一覧表示して実行できるスクリプトインターフェイスを公開します。

さらに、シェルスクリプトやコマンドラインツールでショートカットを一覧表示して実行できるショートカットコマンドラインツールもあります。

ショートカットを実行する機能の恩恵を受けるアプリやスクリプトを開発する場合は、スクリプトインターフェイスを使用する必要があります。

「ショートカットイベント」プロセスと通信することで、アプリはユーザーが設定したショートカットのリストを取得し、ショートカットの実行を開始できます。

AppleScriptでは、「ショートカットイベント」プロセスに名前でショートカットを実行するように指示することで、これを達成できます。

Scripting Bridgeフレームワークを使用すると、ショートカットイベントプロセスに、SwiftまたはObjective-Cアプリから直接ショートカットを実行するように依頼できます。

サンドボックスアプリの場合、「com.apple.security.scriptingターゲット」という資格を追加する必要があります。

ショートカットのリストにアクセスして実行するには、「com.apple.shortcuts.run」ターゲットを追加する必要があります。

最後に、macOS Montereyには、ショートカットを一覧表示し、名前で実行できるコマンドラインツールも含まれています。

コマンドラインツールやスクリプトがある場合は、このインターフェイスを介してショートカットと統合できます。

最後に、ショートカットがMacで利用可能になり、どんな種類のアプリを持っていても、ショートカットエコシステムに参加する必要があります。

アプリにアクションを追加することで、人々がアプリでできることを増やすことができます。

ショートカットは、人々があなたのアプリで創造的になることを可能にします。

人々があなたの行動でどのようなショートカットを構築するかを知ることができて喜んでいるかもしれません。

[パーカッシブミュージック]。