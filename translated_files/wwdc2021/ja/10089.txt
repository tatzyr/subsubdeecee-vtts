10089

こんにちは。

私の名前はアニーで、健康記録チームのソフトウェアエンジニアです。

今日、同僚のケーリーが参加し、HealthKitを使用して検証可能な健康記録を共有できるようにする方法を紹介します。

検証可能な健康記録に飛び込む前に、iOS 11.3用に2018年に発売した健康記録機能を簡単に再導入したいと思います。

健康記録を使用すると、ユーザーはプロバイダーに接続し、臨床記録を健康アプリに安全にダウンロードして、簡単に保存して視覚化することができます。

これはすべて、HL7のFast Healthcare Interoperability ResourcesやFHIRなどの業界標準に基づいて構築されています。

ユーザーの許可があれば、アプリはユーザーがHealthKitでダウンロードしたこれらの健康記録にアクセスできます。

既存の健康記録APIの詳細については、WWDC 2018のビデオ「HealthKitによる健康記録へのアクセス」をご覧ください。

iOS 15では、健康記録の作業を活用して、SMART Health Cardsの仕様に基づいて実装された健康アプリで検証可能な記録のダウンロード、保存、共有を可能にします。

検証可能な健康記録とは何か、そして現在HealthKitで照会できる健康記録データとどのように異なるのかを探りましょう。

まず、検証可能な健康記録には、患者リソースと1つ以上の臨床リソースを含む複数のFHIRリソースが含まれています。

これらのリソースは、SMARTヘルスカードと呼ばれるものにバンドルされています。

発行者、またはラボや医療提供者などの検証可能な健康記録を作成する機関は、このSMART Health CardにJSON Web Signature（JWS）として暗号署名します。

最後に、発行者は、患者とその臨床データに関する必要な情報のみを含むように、検証可能な健康記録を生成します。

これらの点をより明確に把握するために、例を見てみましょう。

この例では、この記録には2つのFHIR予防接種リソースが含まれており、ワクチンの投与ごとに1つずつです。

また、ワクチンを受けた人を特定するためのFHIR患者リソースも含まれています。

その後、これらのリソースはSMARTヘルスカードに組み合わされ、生の形では次のようになります。

SMART Health Cardペイロードには、ヘルスカードに期待するデータの種類を宣言するURLを含むタイプや、FHIRバージョンと予防接種と患者リソースを含むバンドルリソースを含む資格情報サブジェクトなどの情報が含まれています。

その後、SMARTヘルスカードはJWSとして署名され、ヘッダーとペイロードの2つのコンポーネントがあります。

JWSヘッダーには、JWSに署名するために使用されるアルゴリズム、発行者の公開鍵の署名に使用されたことを示す公開鍵の指紋、およびペイロードを圧縮するために使用されるアルゴリズムが含まれています。

圧縮されたJWSペイロードには、資格情報サブジェクトとともに、発行者の公開鍵が配置されている発行者URL、発行日、オプションの有効期限など、他の請求データが含まれています。

生の形では、これは検証可能な健康記録がどのように見えるかです。

詳細については、このセッションに関連付けられているリンクからSMARTヘルスカードの仕様にアクセスすることをお勧めします。

検証可能な健康記録がどのように見えるかを見直したので、これらの記録を健康アプリにインポートする方法をお見せしましょう。

1つの選択肢は、既存の健康記録機能を使用することです。

ユーザーは、健康記録対応プロバイダーに接続することで、検証可能な健康記録を健康アプリにダウンロードできます。

このオプションは、現在米国、英国、カナダにある健康記録機能が利用可能な場合にのみ利用可能であることに注意してください。

ユーザーは、.smart-health-cards拡張子を持つファイルをダウンロードするか、スマートヘルスカードファイルに埋め込まれたQRコードをスキャンするオプションもあります。

これにより、健康アプリに次のシートが表示され、ユーザーは詳細を表示し、これらのレコードをダウンロードするかどうかを選択できます。

これら2つのオプションは国際的に利用可能です。

最後に、HealthKitでこのデータへのアクセスをリクエストするにはどうすればよいですか?

新しいHealthKitクエリ、HKVerifiableClinicalRecordQuery、および新しいHKSampleサブクラス、HKVerifiableClinicalRecord for iOS 15を導入しています。

他のHKQueryサブクラスとは異なり、このクエリを使用するには、検証可能な健康記録のHealthKitアクセス資格をリクエストする必要があります。

SDKのパブリックヘッダーには引き続きアクセスできますが、結果ハンドラーはエンタイトルメントなしで承認拒否エラーを返します。

開始方法については、このセッションに関連するリンクを参照してください。

クエリとサンプルクラスを深く掘り下げる前に、検証可能な健康記録の承認を見てみましょう。これは、健康記録に慣れているものとはわずかに異なります。

まず、検証可能な健康記録は、ユーザーがタイプではなく個々のサンプルを選択してアプリと共有するサンプルごとの承認パターンを観察します。

このタイプの承認は、ユーザーにデータのより詳細な制御を提供し、プライバシーを保護する上で重要です。

現在のHealthKit認証パターンは、2つのステップで構成されています。まず、読み取りと共有するタイプのユーザー認証を要求し、認証が付与されたらサンプルを照会します。

検証可能な健康記録では、この最初のステップは必要ありません。

代わりに、HKVerifiableClinicalRecordQueryのインスタンスが作成されて実行されると、承認シートが表示され、ユーザーはアプリと共有する個々のレコードを選択できます。

共有後、選択したレコードはクエリの結果ハンドラに返されます。

さらに、検証可能な健康記録の承認は1回限りです。

これらのレコードをサードパーティのアプリと共有しても、長期アクセス許可は設定されません。

HKVerifiableClinicalRecordQueryの各実行により、次の承認シートが提示され、ユーザーが選択したレコードが結果ハンドラに返されます。

承認を確認したので、HKVerifiableClinicalRecordQueryをもっと詳しく見てみましょう。

HKVerifiableClinicalRecordQueryを初期化するには、まず、検証可能な健康記録に存在するデータの種類として以前に定義したレコードタイプの文字列配列を提供する必要があります。

提供されたすべてのレコードタイプが存在するレコードのみが承認シートに表示されます。

他のHealthKitクエリと同様に、承認のためにサンプルのセットをさらにフィルタリングするために述語を追加するオプションもあります。

日付間隔内で関連する日付を持つレコードの述語を作成するための便利なコンストラクタを提供しています。

クエリが実行され、ユーザーが「一度共有」をタップすると、承認されたHKVerifiableClinicalRecordsが結果ハンドラに返されます。

レコードには、サブジェクトと発行者に関する基本情報、そしてもちろん、検証およびデコードする生データを含むJWSプロパティが含まれています。

検証可能な健康記録機能とそのAPIがどのように見えるかを確認したので、テストデータをインポートし、APIを使用してレコードを要求し、レコードのJWSを確認する方法をCaryに渡します。

ありがとう、アニー。

みなさん、こんにちは。

私の名前はケーリーで、健康記録チームのエンジニアでもあります。

今日は、検証可能な健康記録の操作方法を説明します。

したがって、この新機能で作業を開始する最善の方法は、いくつかのテストデータをHealthKitにロードすることです。

アニーが述べたように、始めるために使用できる3つの異なる方法があります。

米国、カナダ、または英国にいる場合は、健康アプリの既存の健康記録機能を使用してプロバイダーに接続するだけです。

私たちが追加したもう1つの新しい方法は、.smart-health-cardファイルをダウンロードすることです。その例は、smarthealth.cards仕様のウェブサイトで見つけることができます。

3番目の方法は、QRコードをスキャンすることです。

では、データを取りに行きましょう。

このデモでは、新しいQRコードのインポートを試すことから始めることができます。

iOS 15を実行しているデバイスから始めて、このQRコードをスキャンします。

スキャンするとすぐに、健康アプリに直接開くようにプロンプトが表示されます。

健康アプリに切り替えると、すぐにこの健康カードのインポートを案内し始めます。

「健康に追加」オプションを選択すると、インポートプロセスが完了します。

ブラウズタブまでスクロールして、予防接種セクションでインポートされたレコードを見ることができます。

先に進んでこのカテゴリをタップすると、ワクチンを接種し、その署名が健康アプリによって確認されていることがわかります。

署名入りのレコードが健康アプリにインポートされたので、自分のアプリからこれらのレコードをリクエストする準備が整いました。

では、アプリがこの新しいAPIにアクセスする方法の例を見てみましょう。

まず、HealthKitをインポートすることから始めます。

次に、HealthStoreを作成します。標準のHealthKit認証APIを使用している場合は、すでに慣れているかもしれません。

また、レコードタイプのリストを作成して、ユーザーがあなたと共有するデータの種類を指定します。

承認時に、これらのレコードタイプにのみ一致する共有するデータのリストが表示されます。

次に、サンプルを共有するための有効な日付範囲を指定する述語を作成します。

この例では、過去7日間に実施されたラボが要求されていることがわかります。

次に、構築されたrecordTypesと述語を使用してクエリを作成し、完了を使用して、提示されたサンプルがアプリと共有されているかどうかを確認します。

最後に、クエリを実行すると、承認シートが表示され、結果を選択してアプリと共有できます。

このダイアログは、このメソッドが実行されるたびに表示されます。

署名された臨床データを取得したので、アプリ内で署名を確認するためのコードを書くことができます。

レビューのために、デジタル署名は、デジタル情報の真正性を検証する数学的な方法です。

このプロセスは、サーバーや他のモバイルデバイスなど、どのデバイスでも実行できますが、アプリ内から実行する方法を見てみましょう。

これは4つの主要なステップで達成できます。

まず、Codableを使用して臨床データを解析します。

次に、署名されたJSON Webトークンペイロードを解凍します。

第三に、発行者のウェブサイトから発行者の公開鍵をダウンロードします。

そして最後に、CryptoKitを使用して署名を確認します。

まず、JSON Web署名仕様で正式に定義されている署名付きレコードのデータモデルを定義する方法を見てみましょう。

この構造体は、ヘッダー、ペイロード、署名の3つの主要な部分で定義されています。

Swift Codableを使用して解析を行うことができ、署名検証中に使用するためにヘッダーとペイロードの元の表現を保持する必要があります。

最も重要なことは、コンパクトなシリアル化された形式からJWSを解析するための初期化子を追加することです。

次に、JWSヘッダーを表すために使用される構造体を作成します。

コンパクトなシリアル化からの初期化時、および署名検証プロセス中にこれが必要になります。

ヘッダーには、指定された署名アルゴリズム、公開鍵の親指印を保持するために使用されるキーIDフィールド、および圧縮アルゴリズムが見つかることが期待できます。

公開鍵の拇印は、発行者のキーのどれがJWSに署名するために使用されたかを識別するために使用されます。

このプロセスには、ES256署名アルゴリズムとDEF圧縮アルゴリズムが必要で、どちらもファーストパーティのSwiftライブラリでサポートされています。

それでは、コンパクトなシリアル化からJWSを解析するために必要なコードを見てみましょう。

シリアル化された文字列を構成部分に分割することから始めます。それぞれがBase64URLでエンコードされています。

JSONDecoderとBase64URLを作成してヘッダーとペイロードをデコードした後、ヘッダーがペイロードが正しく圧縮されていることを示しているかどうかを確認できます。

圧縮を確認した後、提供されたサンプルプロジェクトで見つけることができるユーティリティメソッドを使用してペイロードを解凍します。

次に必要なのは、ヘルスカードのペイロードをモデル化するための構造体です。

ここで最も重要な2つの部分は、キーを取得するために使用できる発行者のWeb識別子を保持する発行者フィールドであり、もう1つはすべての患者データを保持するVCフィールドです。

VCフィールドを解析し、その内容を分析する方法の詳細については、WWDC 2020の「燃やされることなくFHIRを扱う」トークをチェックしてください。

JWSを解析する方法を見たので、その真正性を確認する準備が整いました。

JWS構造体に検証方法を追加する拡張機能の作成を見てみましょう。

発行者のウェブサイトに直接連絡して署名キーを取得するため、Combineを使用してこのプロセスの非同期の側面を支援し、CryptoKitを使用して署名検証を支援することができます。

検証方法の中では、常に発行者のウェブアドレスである発行者の識別子を引き出すことから始めます。

ここでは、独自のメソッドを追加して、URLが個人的に信頼できるものであるかどうかを確認し、結果を受け入れたくないものである場合は中止することができます。

次に、標準の.wellknown/jwks.json URLパスを追加して、発行者のキーを取得するURLを作成します。

このパスサフィックスは仕様で定義されており、すべての発行者で同じである必要があります。

よく知られているURLを構築したので、発行者に接続し、キーをダウンロードし、署名の確認を完了することができます。

このメソッドの作成を完了するには、発行者のよく知られたjwkエンドポイントに接続するURLSession dataTaskPublisherを作成します。

その後、それをデータにマッピングし、jsonDecoderを使用してJWKのセットにデコードし、最後にブール値にマッピングして、署名が有効かどうかを示すことができます。

最終的なマップブロック内では、JWSヘッダーが示すものに基づいて発行者のキーを選択します。

最後の作品は、署名を検証するためにCryptoKitを使用することです。

JWS仕様によると、データの符号付き部分は、Base64URLエンコードされたヘッダーとペイロードをピリオドで結合することによって形成されます。

次に、この講演に付随するサンプルプロジェクトで見つけることができるユーティリティメソッドを使用して、ダウンロードしたJWKキーをCryptoKit P256署名キーに変換します。

最後に、CryptoKitのisValidSignatureメソッドを使用して署名の検証を行います。

データモデルとその真正性を検証するために必要なすべてのロジックが定義されたので、すべてをまとめることができます。

新しいAPIを呼び出す方法の以前の例を見て、このコメントを新しい検証メソッドの呼び出しに置き換えることができます。

APIは選択したすべてのサンプルのリストを返すので、リストから最初のサンプルを選択できます。

次に、データから文字列に解析します。

次に、コンパクトなシリアライゼーション初期化子を使用して解析します。

最後に、新しい検証方法を呼び出し、発行されたブール結果をリッスンします。

そして、そのように、署名された臨床データの一部を取り、発行者の署名キーをダウンロードし、これらのレコードの署名を検証する方法を見てきました。

さて、私は要約するためにアニーに物事を返します。

ありがとう、ケーリー。

締めくくる前に、検証可能な健康記録に関するプライバシーについて話したいと思います。

うまくいけば、このセッションを通して、検証可能な健康記録機能はユーザーのプライバシーを念頭に置いて構築されていることを明確にしました。

まず第一に、SMART Health Cardの仕様は、発行者が各レコードに含めるべき情報を最小限に抑えるデータプロファイルを使用します。

健康アプリは機密性の高い健康データを保護するように設計されているため、電話がロックされると、健康アプリ内のすべての健康とフィットネスデータが暗号化され、検証可能な健康記録が含まれます。

検証可能な健康記録にアクセスするには、この機密性の高い健康データが悪用されないようにするための追加の義務を伴う資格への申請が必要です。

そして最後に、ユーザーは検証可能な健康記録をアプリと共有する方法をさらに制御できます。

今日取り上げたことを復習しましょう。

iOS 15では、健康記録の上に構築され、検証可能な記録を健康アプリにインポートし、開発者が新しいAPIでこのデータを読み取る機能を導入しています。

まとめると、次にできることは次のとおりです。

まず、検証可能な健康データエコシステムの詳細については、SMARTヘルスカードの仕様を確認してください。

テスト記録を健康アプリにインポートして、自分で試してみてください。

これらのテスト記録を照会して検証する方法を示すサンプルアプリをダウンロードしてください。

そして最後に、アプリを出荷する準備ができたら、検証可能な健康記録のHealthKitアクセス権をリクエストしてください。

ご覧いただきありがとうございます、そして素晴らしいWWDCをお過ごしください。

[音楽]。