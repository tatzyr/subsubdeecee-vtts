10023

♪ベース音楽の演奏♪

♪

タヌ・シンハル:みなさん、こんにちは。

私の名前はTanuで、Apple TVチームのSwiftUIエンジニアです。

今日は、SwiftUIで焦点を当てて作業するいくつかの新しい方法について話します。

SwiftUIの素晴らしい点の1つは、箱から出してすぐに無料でどれだけの機能を手に入れるかです。

組み込みコンポーネントのデフォルトの動作は、SwiftUIのプラットフォーム規約に関する知識に基づいており、さまざまなコンテキストで賢明で使い慣れた全体的な経験をもたらします。

焦点を見ると、この知性が働いています。

フォーカスは、アプリがキーボード、リモコン、ゲームコントローラー、アクセス可能なスイッチコントロール、およびタッチ入力とは異なり、特定の画面座標に結びついていないその他のソースから入力を取ることができるシステムです。

多くの場合、フォーカスビューは特別な装飾で描画されるため、入力がどこに向けられるかを簡単に予測できます。

ほとんどの場合、SwiftUIはあなたに代わってフォーカスを管理します。

誰かがテキストフィールドをクリックしたり、Tabキーを押したり、調整可能な時計コンプリケーションをタップしたり、Siri Remoteをスワイプしたりすると、SwiftUIはフォーカスがどのように影響され、次の配置がどのように表示されるかを決定します。

これは、慣習によって正しい行動を決めることができる単純なケースに最適です。

しかし、フォーカスに関するより加速された体験を望むケースもあります。

メモアプリのこの例では、新しいメモボタンを選択すると、新しく作成されたメモにフォーカスを自動的に移動します。

このタイプの動作には、確かにカスタム実装が必要です。

ここでは、ユーザーがリモコンを右にスワイプしたときに、左下のボタンから画面の上部近くのコンテンツにフォーカスを移動したいシナリオがあります。

ミュージックボタンとアプリタイルは互いに隣接していないため、SwiftUIはフォーカスをどこに移動するかを自動的に推測することはできません。

遠隔フォーカスターゲットをリンクする前に、より多くの情報が必要です。

そして、iOSのこの例では、ユーザーがイベントを選択したときにキーボードをなくしたいだけです。

今年導入する新しいAPIのおかげで、SwiftUIでこれらすべてを行うことができます。

この講演では、2種類のユースケースに焦点を当てます。

直接入力せずに特定のビューにフォーカスを移動する方法を確認し、小さなビューから大きなナビゲーションターゲットを作成して、ユーザーの手の届かないところに何もないようにします。

まず、ユーザーの注意を引くためにフォーカスを移動したい例を見てみましょう。

私たちは休暇に行く準備ができていて、バケーションプランナーアプリに取り組み始めました。

このアプリはすべてのAppleプラットフォームで動作し、旅行を予約するだけでなく、目的地を閲覧することができます。

このアプリを起動すると、アカウントにログインできるように、メールフィールド、パスワードフィールド、Appleでサインインボタンが表示されます。

このログイン画面で、入力された電子メールが正しい形式ではないことが判明した場合は、プログラムでフォーカスを電子メールフィールドに戻します。

この動作を実現するには、FocusState APIを使用します。

ログインビューの既存のコードには、TextFieldとSecureFieldを持つVStackが含まれています。

次に、このビューにFocusStateプロパティラッパーを追加します。

FocusStateは、今年導入した新しいAPIです!

これは、現在の焦点の位置に応じて変化する特別なタイプの状態です。

FocusStateを使用して、フォーカスされたフィールドの識別子を保持します。

focusedField変数は、この例で作成した列挙型です。

FocusStateには、文字列、整数、またはその他のハッシュ可能な値タイプを使用できます。

FocusStateの値はオプションであることに注意してください。

一般に、FocusStateに使用されるタイプは、ハッシュ可能とオプションの両方でなければならず、フォーカスが画面の無関係な部分にある場合はnilが使用されます。

次に、TextFieldとSecureFieldにフォーカスされた修飾子を追加します。

今年も新しく、この修飾子は、フォーカスの配置とfocusFieldプロパティの値の間のリンクを作成します。

このシンプルなリンクは、アプリで他の決定を下すために現在のフォーカスの配置を使用できることを意味するため、強力なツールです。

ログインフォームでその展開を見ることができます。

画面が最初に表示されると、フォーカスがないため、focusFieldの値はnilです。

しかし、誰かが電子メールのテキストフィールドをタップすると、そのフィールドに焦点が当てられ、キーボードが表示されます。

フォーカスされたテキストフィールドはFocusState値にバインドされているため、FocusedFieldの値は自動的に更新され、電子メールテキストフィールドの識別子が保持されます。

フォーカス配置とFocusStateの間のリンクは、両方の方法で機能します。

これは、フォーカスの変化に反応することに限定されないことを意味します。FocusStateプロパティを更新するだけで、プログラムでフォーカスを移動できます。

たとえば、プログラムで focusedField の値を .password に設定すると、SwiftUI は SecureField が設定している新しい値に関連付けられていることを知り、フォーカスは自動的にパスワード フィールドに移動します。

フォーカスバインディングが整ったので、それらを機能させることができます。

バケーションプランナーアプリでは、ユーザーがデータを送信すると、それを検証します。

メールが期待どおりの形式でない場合は、focusFieldをメールに設定します。

これは、まだそこにない場合は、電子メールのテキストフィールドにフォーカスを送り返します。

さらに、メールが無効な場合は、メールフィールドを境界線で強調表示したいと思います。

この境界線は、フォーカスがメールフィールドにある場合にのみ表示したいと考えています。

これを行うには、境界線を作成するときにfocusdFieldの値を簡単に読み取ることができます。

このすべてがどのように一緒になるか見てみましょう。

メールフィールドには有効なアドレスがないことに注意してください。

現在、フォーカスはパスワードフィールドにあります。

Goを押すと、focusFieldが設定されている場所でonSubmitコールバックがトリガーされます。

これにより、カーソルは電子メールフィールドに戻ります。

メールフィールドが集中している間、その周りに赤い境界線が見えます。

ただし、電子メールフィールドからフォーカスを移動すると、フォーカスフィールドは電子メール識別子と等しなくなり、赤い境界線が消えます。

すべてのフォームデータが有効なシナリオでは、単にキーボードを却下したいと考えています。

キーボードを閉じるには、FocusState変数をnilに設定します。

focusedFieldはオプションであるため、焦点がこのビューを離れたことを示すためにnilを使用します。

ビデオでは、メールアドレスが更新されたことに注意してください。

今回提出すると、FocusState変数をnilに設定したため、キーボードは却下されます。

アプリにテキストフィールドがある場合、フォーカスをプログラムで制御することがどのように役立つかを見てきました。

ただし、FocusStatesはテキストフィールドだけではありません。

iOS、tvOS、watchOS、またはmacOSのフォーカス可能なビューのフォーカスをプログラムで制御するために使用できます!

次のセクションでは、アプリにおけるフォーカスベースのナビゲーションの役割について説明します。

バケーションプランナーアプリのtvOSバージョンを見てみましょう。 

私たちは、あなたが訪問したいかもしれないいくつかの目的地からの写真を追加することで、テレビの余分なスペースを活用しました。

ログインする前でも、[写真の参照]ボタンをクリックすると、より多くの写真を見ることができます。

最初はメールフィールドに焦点が当てられていることに注意してください。

Siri Remoteを右にスワイプすると、フォーカスが「写真の閲覧」ボタンに移動します。

しかし、それはデフォルトでは機能しません。

これは、指向性フォーカスナビゲーションが隣接関係に基づいているためです。

スワイプしてフォーカスを移動する場合、フォーカスは、指定された方向に隣接してフォーカス可能なものがある場合にのみ移動します。

このアプリのフォーカス可能なビューを見てみましょう。

左側のログインフィールドに隣接するフォーカス可能なビューがないため、下部のボタンは到達できません。

この画面をナビゲート可能にするために、ブラウズボタンのフォーカス可能な領域を拡張し、ログインフィールドに隣接します。

これは、新しいFocusSections APIを使用して行われます。

それがどれほど簡単か見てみましょう。

ここには、テレビ用のバケーションプランナーコードの簡略化されたバージョンがあります。

2つのVStackを持つHStackが含まれています。1つはログインフィールド用、もう1つは画像とボタン用のVStackです。

ボタンの周りにより大きな論理フォーカスターゲットを作成し、ボタンがログインフィールドに隣接しているかのようにフォーカス振る舞うようにします。

これは、ボタンを含むVStackにfocusSection()修飾子を追加するだけで実行できます。

focusSection() 修飾子が任意のビューに追加されると、フォーカス可能なサブビューが含まれている場合、そのビューのフレームはフォーカスを受け入れることができるようになります。

また、ボタンを左にスワイプするときにフォーカスをログインフィールドに戻したいので、最初のVStackに別のfocusSection()修飾子を追加します。

このアプリを実行すると、ユーザーはリモコンを左右にスワイプすることで、入力フィールドとブラウズボタンの間でフォーカスを移動できます。

物事をまとめるとき、異なるプラットフォームで異なって見えることが多いフォーカスについて考えることをお勧めします。

SwiftUIには、ほとんどの場合、優れたデフォルト動作が組み込まれています。

新しいフォーカス状態とFocusSections APIは、フォーカスを活用してさらに合理化されたエクスペリエンスを作成するのに役立ちます。

アプリに取り組みながら、フォーカスがユーザーの行動に影響を与える多くの方法を観察してください。

このセッションで、ユーザーが最も重要なことに集中するのに役立つツールが備わったことを願っています。

見てくれてありがとう、そして素晴らしいWWDCを！

♪