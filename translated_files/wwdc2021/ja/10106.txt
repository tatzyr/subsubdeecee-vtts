10106

♪ベース音楽の演奏♪

♪

ギャレット・デビッドソン：こんにちは、私は認証エクスペリエンスチームのエンジニアであるギャレットです。私たちが取り組んできたことを垣間見ることができることに非常に興奮しています。Appleがパスワードからの業界全体の移行をサポートするために取っている最初のステップです。

今日アプリやウェブサイトにサインインするたびに、おそらくパスワードを入力しているでしょう。

象徴的なユーザー名とパスワードフィールドのペアは、すぐに認識でき、本当に使いやすく、ほとんどの人はそれに遭遇したときに何をすべきかをすぐに知っています。

しかし、開発者、ユーザー、および業界全体は、アカウントにサインインするために迅速に認証できるこの大きな利便性は、アカウントのセキュリティにコストがかかることを集合的に学びました。

認証技術が長年にわたって進化するにつれて、業界が学んだ基本的な教訓がいくつかあります。

まず、特にそれらの秘密が共有されている場合、秘密を保護することは困難です。

今日のほとんどの認証は、アカウントの作成時にパスワードなどの秘密を共有し、すべての認証中にその秘密を再共有するユーザーとサーバーに依存しています。

その秘密が共有されるたびに、意図した受信者以外の誰かがその秘密を知る危険性があります。

偽のメールや電話、誤解を招くウェブサイトなどのフィッシングは、間違った当事者が秘密を知るための最も一般的な方法です。

そして、パスワードのような秘密が出てきた場合、弱いパスワードを使用したり、複数のアカウントで同じパスワードを再利用したりすると、すぐに問題が悪化する可能性があります。

実際、2020年のVerizon Data Breach Investigation Reportによると、ハッキング関連のデータ侵害の80%以上が、資格情報のブルートフォースや、紛失または盗難された資格情報の使用に関連していました。

こうである必要はありません。 

認証技術は、これらのリスクのいくつかを軽減するために進化し続けています。

当初、パスワードは主に人々の頭の中に保存されていました。

しかし、人々は一般的に、すべてのアカウントの強力でユニークなパスワードを思いつき、覚えておくのが得意ではないことがわかりました。

パスワードマネージャーは、アカウントごとに強力で一意のパスワードを作成し、いくつかの形式のフィッシングの可能性についてのヒントを提供することができます。

iCloudキーチェーンのパスワードマネージャーはAppleデバイスに組み込まれており、サードパーティが独自のパスワードマネージャーをシステムに統合するためのAPIを利用できるようにしました。

サービス所有者は、パスワードとOTPなどの追加要素を要求するなど、ログインフローに追加の手順を追加することもできます。たとえば、SMSや生成されたワンタイム検証コードなどです。

macOS MontereyとiOS 15には、iCloudキーチェーンパスワードマネージャーにコードジェネレータが組み込まれています。これは、チームメイトのErynの「iCloudキーチェーン検証コードによる安全なログイン」ビデオで詳しく知ることができます。

一部のアプリやウェブサイトは、代わりに、Appleでサインインなどのフェデレーション認証を通じて認証を完全に第三者に外部委託することを選択します。

フェデレーション認証により、信頼を少数の高度に保護されたアカウントに限定することができます。

しかし、このビデオでは、非フェドレーション認証オプションに焦点を当てます。

これらがどのように比較されるかについて話しましょう。

それらはすべて非常に使いやすく、ほとんどのデバイスで動作し、多かれ少なかれ常にあなたと一緒にいます。

しかし、セキュリティレベルはもっと良いかもしれません。

覚えておくことができるパスワードは、おそらくすべてのアカウントで強力で一意ではありません。

パスワードマネージャーは、強力でユニークなパスワードを作成するために使用できますが、パスワードを保護するために使用するパスワードと潜在的に追加の要因と同じくらい強力です。

また、シングルユースコードも役立ちますが、まだ入力可能、フィッシング可能、共有秘密であるため、パスワードと同じ問題の多くが発生します。

また、パスワードが頭の中にある場合は、パスワードを忘れることができます。

これは、アプリやウェブサイトが別の回復フローを必要とすることを意味し、今日では通常、電子メールのリンクです。

これにより、アカウント全体のセキュリティレベルを電子メールプロバイダーのセキュリティレベルに引き下げることができますが、これは一般的にあなたが制御するものではありません。

一部のパスワードマネージャーと第2要素ソリューションは回復に役立ちますが、同様の問題に直面する傾向があります。

記憶されたパスワードはまた、いかなる種類のフィッシング抵抗も提供しません。

パスワードマネージャーは、合法に見えるフィッシングサイトでパスワードの入力を申し出ないなど、フィッシングに関するヒントを提供できますが、誰かが自分でパスワードを手動で入力してフィッシングされるのを防ぐことはできません。

ワンタイムコードには同様の問題がありますが、導入できる最新の緩和策がいくつかあります。

そして最後に、これらの方法はすべて、ユーザーとサーバーの間の共有秘密に依存しているため、その共有秘密の最も弱い保護よりも根本的に強くはありません。

そのチャートを念頭に置いて、パスワードの問題に対する実際の解決策の特性について話しましょう。

まず、パスワードの置き換えは設計上安全である必要があります。

すべてのベストプラクティスに従えば、パスワードは合理的に安全です。

しかし、経験は、それが誰にとっても常に行うのはかなり難しいことを示しています。

パスワードの置き換えは、最初からそのセキュリティを構築する必要があります。

しかし、私たちは使いやすさも後退したくありません。

パスワードはとても使いやすいので、長い間私たちと一緒にいます。

私たちはそれを失いたくない。

簡単であることには、常に利用可能であり、どこでも使用可能であることが含まれます。

今日、パスワードを知っているか、パスワードを検索できる限り、サインインしたいデバイスがそれをサポートしているとかなり想定できます。

新しいデバイスでの認証に対する追加の摩擦は、すぐにサインインしたいだけの人々の養子縁組を傷つけるでしょう。

そして最後に、回復は後付けとして追加されるものではなく、一流の機能であるべきです。

人々は間違いを犯し、悪いことが起こり、パスワードの解決策は、全体的なセキュリティを損なうことなく人間が人間であることを扱うのに十分なフォールトトレラントでなければなりません。

今日の最も強力なセキュリティオプションの1つは、特に高いセキュリティコンテキストで2番目の要因として一般的に使用されるセキュリティキー、ハードウェアドングルまたはフォブです。

これらは、誰にでも開かれたWeb認証（またはWebAuthn）標準に基づいています。

そして、それらのほとんどは、最初の学習曲線の後にかなり使いやすいです。

そして、それらは単なるパスワードよりもはるかに安全です。

この強みのほとんどはWebAuthnから来ていますが、これについてはもう少しお話しします。

最新のウェブブラウザは、ほとんどの最新のデバイスでセキュリティキーもサポートしています。

macOSとiOSのSafariは、しばらくの間、USB、NFC、およびLightningセキュリティキーをサポートしていました。

ほとんどのセキュリティキーは複数の接続方法もサポートしているため、1つのハードウェアキーをさまざまなデバイスで使用できます。

WebAuthnとパスワードを比較してみましょう。

WebAuthnの最大の利点の1つは、共有秘密の代わりに公開鍵と秘密鍵のペアを使用することです。

今日パスワードがどのように機能するかを調べる場合は、まずパスワードを入力します。

その後、通常、ハッシュと塩漬けのようなものによって難読化され、結果の塩漬けハッシュがサーバーに送信されます。

今、サーバーのコピーが難読化されているにもかかわらず、あなたとサーバーの両方が秘密のコピーを持っており、あなたは両方ともその秘密を保護する責任を等しく負っています。

これは私たちが処分しているものです。

公開鍵と秘密鍵のペアでは、パスワードの代わりに、デバイスは鍵のペアを作成します。

これらのキーの1つは公開されています。ユーザー名と同じくらい公開されています。

それは誰とでも共有でき、秘密ではありません。

もう1つの鍵は非公開です。

この秘密鍵は秘密であり、あなたのデバイスによって保護されています。

あなたのデバイスは、サーバーでさえも、このキーを他の人と共有することはありません。

アカウントを作成すると、デバイスはこれら2つの関連するキーを生成します。

その後、公開鍵をサーバーと共有します。

現在、サーバーには公開鍵のコピーがあり、公開情報であるため、パスワードと同じ保護要件はありません。

秘密鍵はデバイスに残り、そのデバイスだけがそれを保護する責任があります。

後で、サインインしたいときは、サーバーに秘密のものを送信しません。

代わりに、デバイスがアカウントの公開鍵に関連付けられた秘密鍵を知っていることを証明することで、それがあなたのアカウントであることを証明します。

その交換はこのように機能します。

まず、自分のアカウントにサインインします。

その後、ウェブサイトは私のデバイスに、それが実際に私のアカウントであることを証明するように求めます。

これは、私の秘密鍵が何であるかを実際に言わずに、私のデバイスが私のアカウントの公開鍵に関連付けられた秘密鍵を持っていることを証明するために、私が「挑戦」と呼ばれるものを実行することによってこれを行います。

これを行うには、サーバーはシングルユースチャレンジを送り返します。

私のデバイスは秘密鍵を持っているので、その挑戦を取り、私の秘密鍵を使用して、挑戦の「署名」と呼ばれるものを行います。

私のアカウントに有効な署名を作成できるのは秘密鍵だけです。

その後、この署名はサーバーに送り返されます。

サーバーはすでに私の公開鍵を持っているので、この署名をその公開鍵と照合することができます。

私の公開鍵を持っている人は誰でも、署名がその鍵と一致するかどうかを簡単に確認できます。

ただし、私だけが秘密鍵を持っているので、チャレンジの有効な署名を作成できるのは私だけです。

したがって、私の秘密が何であるかを学ぶことなく、誰でも簡単に私の身元を確認することができます。

そして最後に、署名が実際に私の公開鍵と一致すると仮定すると、サーバーは私がサインインしていることを示しています!

私の秘密鍵が私のデバイスから離れたことがないことに注目してください。

サーバーは、私の秘密（秘密鍵）が実際に何であるかを学ぶことなく、これが私のアカウントであることを確認することができました。

公開鍵と秘密鍵のペアは、資格情報がデバイスによって作成および管理されることを意味し、秘密鍵はサーバーと共有されることはありません。これらの鍵は、推測可能、再利用、弱い、またはサーバーが侵害されることに対して脆弱になることはありません。

WebAuthnはまた、人間ではなく、ブラウザとオペレーティングシステムに信頼を根付しています。

このソフトウェアは、資格情報が作成されたウェブサイトやアプリでのみ使用可能であることを厳密に強制し、誰かが間違ったウェブサイトで認証を試みることさえ防ぎます。

また、WebAuthnのすべての資格情報は公開鍵と秘密鍵のペアであるため、サーバーは認証機密を保持する責任を負いません。

これは、秘密を安全に保つためのサーバー側の作業が少なくなり、攻撃者が盗むための認証秘密がないため、サーバーは攻撃者にとって価値の低いターゲットであることを意味します。

セキュリティキーをそのチャートの他の項目と比較してみましょう。

それらは最初の学習曲線の後にかなり使いやすいです。

それらは、すべてのAppleデバイスと多くの最新の非Appleデバイスで動作します。

しかし、彼らは必ずしもいつもあなたと一緒にいるとは限りません。

常に追加のハードウェアを購入して持ち歩く必要があります。

これは採用のための参入障壁になる可能性があり、パスワードと比較して使いやすさの一歩後退です。

しかし、セキュリティレベルはとても良いです。

セキュリティキーの資格情報は、複数のアカウント間で簡単に推測したり再利用したりしないことが保証され、OSレベルでフィッシング保護が組み込まれています。

しかし、そのセキュリティには代償が伴います。

資格情報が単一のセキュリティキーに関連付けられ、そのセキュリティキーが紛失、盗難、または破損した場合、それらの資格情報はすべてそうです。

採用者は、追加のセキュリティキーを購入し、安全な場所に保管し、両方を同時に失わないことを期待するなど、バックアップシステムを用意する必要があります。

しかし、WebAuthnのおかげで、彼らは非常に強力なフィッシング抵抗を提供し、サーバーに保存された秘密の必要性を排除します。

iOS 14.5では、iOSのすべてのブラウザで動作するようにセキュリティキーのサポートを拡張しました。

macOS MontereyとiOS 15の新機能では、macOSとiOSのすべてのアプリでセキュリティキーAPIを初めて利用できるようにしています。

このAPIは、Web上のWebAuthn APIと同等のネイティブとして、AuthenticationServicesフレームワークのASAuthorization APIファミリーに追加されています。

ASAuthorizationは、パスワード、Appleでサインイン、セキュリティキーなど、システムがサポートするあらゆるメカニズムでサインインするためのワンストップショップです。

ただし、セキュリティキーなどの追加のハードウェアを持ち歩くことは、必ずしもすべての人に当てはまるとは限りません。

このAPIは、ユーザーのユーザビリティのトレードオフが特別なセキュリティニーズを上回る、特に高セキュリティのコンテキストでのアプリに役立つと考えており、そのカテゴリに該当する場合は試してみることを楽しみにしています。

さて、キーペアを使用したパスワードレス認証は、認証技術の次の大きなものです。

この標準は、アカウントのセキュリティを推し進めることを目標に、プラットフォームベンダーとサービスオーナーの両方からの業界全体の共同作業でした。

WebAuthnのサポートは、オペレーティングシステム、アプリプラットフォーム、ウェブブラウザ、ウェブサイト全体で増加しています。

このビデオの残りの部分で私が話すこと、そしてここで紹介することに本当に興奮しているのは、ポストパスワードの世界へのAppleの貢献のプレビューです。すべてのiPhone、iPad、MacにWebAuthnのセキュリティを構築する新機能なので、パスワードの代替としてどこでも使用できます。

それは「iCloudキーチェーンのパスワード」と呼ばれています。

この新機能は、「パスワード」と呼ばれる新しいタイプの資格情報をiCloudキーチェーンに保存します。

パスキーは、標準が提供する驚くべきセキュリティと、すべてのデバイスでバックアップ、同期、作業の使いやすさを組み合わせたWebAuthnの資格情報です。

私たちはそれらをiCloudキーチェーンに保存しています。

iCloudキーチェーンの他のすべてと同様に、それらはエンドツーエンドで暗号化されているため、Appleでさえそれらを読むことができません。

あなたの秘密はあなたの秘密です。

そして、それらはとても使いやすいです。

ほとんどの場合、ワンタップまたはクリックするだけでサインインできます。

また、WebAuthnとiCloudキーチェーンの統合セキュリティのおかげで、今日のほとんどのパスワードプラスセカンドファクタソリューションよりも強力です。

また、ワンタップでサインインできるため、今日のほとんどすべての一般的な形式の認証よりも簡単で、速く、安全です。

そのチャートに追加しましょう。

先ほども言ったように、とても使いやすいです。通常、ワンタップまたはクリックするだけでサインインできます。

macOS MontereyとiOS 15の一部としてリリースするものは、すべてのAppleデバイスで動作します。

もちろん、すべての人のパスワードを置き換えるために、この技術は、iCloudキーチェーンをサポートしていないデバイスを含むすべてのデバイスで動作する必要があります。

その機能はmacOS MontereyとiOS 15には存在しません。

すべてのAppleデバイスに組み込まれているため、iPhone、iPad、またはMacが近くにあるときはいつでも利用できます。

追加のハードウェアは必要ありません。

これは、WebAuthn標準とiCloudキーチェーンの両方の一部であるすべての高度な保護に基づいて構築されています。

また、iCloudキーチェーンでバックアップされているため、すべてのAppleデバイスを紛失しても、資格情報を取り戻すことができます。

セキュリティキーと同じ強力なプラットフォーム提供のフィッシング耐性を持っています。

また、公開鍵と秘密鍵のペアを使用しているため、サーバーが認証秘密を保存するビジネスから抜け出し、攻撃者にとって価値の低いターゲットにもなります。

だから、これがその仕組みです。

これは私たちのお気に入りの認証デモアプリであるシャイニーで、そのソースコードはこのビデオの関連リンクで見つけることができます。

まず、アカウントを作成する必要があります。

ユーザー名を入力し、[アカウントの作成]ボタンをタップします。

次に、信頼できるシステムシートには、資格情報とそれを使用できる場所に関する情報が表示されます。

続行、Face IDをタップして、完了です。

私は本当にそれについて考える必要はありませんでしたが、私は今、私のiCloudキーチェーンに安全に保存されているこのアカウントの非常に強力な公開/秘密鍵の資格情報を持っています。

このアプリに戻ってサインインしたいときは、同じように簡単です。 

シートが出てくると、サインインしているアプリの名前やアカウントなど、非常に明確な質問をされます。

それが私の望みなので、Continue、Face IDをタップして、完了です。

それでおそれ！

これは、人々がこれらの新しい資格情報を作成して使用するために必要なすべてです。

また、システム管理の公開鍵と秘密鍵のペアであるため、再利用や推測はできず、アプリやウェブサイトの侵害に対して脆弱ではなく、非常に強力なフィッシング保護がオペレーティングシステムとブラウザに組み込まれています。

ブラウザと言えば、これらの資格情報はウェブでも機能します。

ここでは、WebAuthnを採用したシャイニーウェブサイトのホームページのSafariにいます。

サインインボタンをタップすると、作成したばかりの資格情報、またはセキュリティキーを使用するオプションが表示されます。

ここで「続ける」、Face IDをタップすると、アプリと同じようにサインインしています。

これは、iOS上のすべてのウェブブラウザアプリでも機能します。

そして、それはMacでも動作します!

これらの資格情報はiCloudキーチェーンに保存されているため、すべてのデバイス間で同期され、あらゆる種類のMacアプリやSafariのウェブで動作します。

では、実装を覗いてみましょう。

まず、プラットフォームが提供する強力なフィッシング保護がアプリで動作するためには、デバイスはアプリとウェブサイトの間に強い関連性が必要です。

これは、「webcredentials」アソシエーションタイプを使用して、関連付けられたドメインを通じて行われます。

ここではあまり詳しく説明しませんが、数年前の「アプリのパスワード自動入力の紹介」ビデオを見て、もっと学ぶことができます。

次に、アカウントの作成について話しましょう。

ここのコードは実際にはかなり簡単です。

それを分解しましょう。

createAccount機能には、サーバーからフェッチされたシングルユースチャレンジ、アカウントのユーザー名、および通常、バックエンドのアカウントの識別子であるユーザーIDの3つの入力が必要です。

まず、リクエストオブジェクトを作成するにはリクエストプロバイダーが必要です。

relyingPartyIdentifierはWebAuthnの設定によって異なりますが、通常はドメイン名です。

そのプロバイダを使用してregistrationRequestを作成し、リクエストを承認コントローラーに渡します。

最後に、承認コントローラにデリゲートとpresentationContextProviderを設定し、リクエストを開始します。

これにより、以前のシートがポップアップし、資格情報を作成するように求められます。

トランザクションが終了すると、新しい資格情報の詳細が記載されたデリゲートコールバックが届きます。

さて、サインインは非常によく似ています。

ほんの少しのことを変える必要があります。

registrationRequestを作成する代わりに、サインイン時に使用されるWebAuthn用語であるassertionRequestを作成します。

assertionRequestにはチャレンジのみが必要です。

そして、あなたが変える必要があるのはそれだけです。

承認コントローラへのこのパラメータが配列であることを強調したいと思います。

パスワードやAppleとのサインインなど、アプリがサポートするさまざまな認証メカニズムのリクエストのリストをここに渡すことができます。

以前のシートには、現在利用可能な資格情報が入力されます。

唯一の注意点は、公開鍵の登録要求を非登録オプションと混在させることはできないということです。

さて、最後に、承認が完了したら、デリゲートオブジェクトへのコールバックについて話しましょう。

クレデンシャルは、提供された承認オブジェクトのプロパティです。

ユーザーが新しいプラットフォームクレデンシャルを登録した場合、プラットフォームクレデンシャル登録を受け取ります。

既存のプラットフォームクレデンシャルでサインインした場合、プラットフォームクレデンシャルアサーションを受け取ります。

または、彼らがあなたがサポートする何か他のものでサインインした場合は、ここでもそれを処理できます。

いずれにせよ、ウェブと同じようにクレデンシャルオブジェクトから必要なプロパティを読み、それらの値をサーバーに送信し、それらを検証し、操作を完了する必要があります。

そして、それが仕組みです。

さて、もう少し詳しく説明したいだけです。

パスワードからの移行には時間がかかり、詳細を正しく理解することが重要です。

macOS MontereyとiOS 15では、iCloudキーチェーンのパスキーはテクノロジープレビューとしてリリースされ、デフォルトではオフになっています。

iOSでは、設定アプリの開発者設定セクションに新しいスイッチがあります。

これをオンにすると、これらの同期されたキーをアプリとウェブの両方で使用できます。

そしてmacOSでは、スイッチはSafariの開発メニューにあります。

まず、Safariの「詳細設定」で「開発」メニューをオンにする必要があります。

この設定は、Safariの環境設定の「詳細」ペインの下部にあります。

次に、開発メニューで同期プラットフォーム認証を有効にするオプションがあります。

テストするときは、必ずこの機能をオンにしてください。

macOS MontereyとiOS 15では、これらのパスキーはテスト用であり、本番アカウント用ではありません。

このプレビューの重点は、iCloudキーチェーンでバックアップされたWebAuthnの実装である認証技術です。

パスワードからの業界全体の移行には、このプレビューの一部ではない、思慮深く一貫して適用されたデザインパターンが必要になります。

そして最後に、これはプレビューなので、オフにしたときに優雅に動作することを確認しました。

プラットフォーム登録要求はエラーを返し、他のクレデンシャル要求タイプと混合した場合でも、スイッチがオフのときにプラットフォームアサーション要求は静かに無視されます。

だから、次にできることは次のとおりです。

公開鍵ベースのフィッシングに強い資格情報は、アカウント認証の次のフロンティアです。

開発者ドキュメントと、このビデオからリンクされているサンプルコードをチェックして、始めるのを手伝ってください。

また、まだお持ちでない場合は、サーバーにWebAuthnの実装を起動して、WebAuthnベースの資格情報の試しを開始できます。

さて、私のお気に入りの部分：iCloudキーチェーンのパスキーのこのテクノロジープレビューを試して、ウェブサイトやアプリの既存のワークフローにどのように適合するかを確認してください。

試してみる際に、開発者フォーラムとフィードバックアシスタントでご意見をお聞かせください。

私たちは本当にあなたから話を聞きたいです。

先に述べたように、これはパスワードを置き換えるための複数年にわたる取り組みの第一歩であり、皆さんが言わなければならないことに非常に興味があります。

見てくれてありがとう!

♪