10203

こんにちは。

Xcode OrganizerでTestFlightのクラッシュをトリアージすることへようこそ。

私の名前はマットで、Xcodeのエンジニアです。

今日は、Xcodeオーガナイザーに組み込んだ新しいツールのいくつかを紹介します。これにより、アプリのすべてのターゲット間でクラッシュをトリアージし、TestFlightユーザーからのフィードバックを活用して、ビルドのクラッシュ修正をより迅速に行うことができます。

次に、MetricKitで行った新しいTerminationsオーガナイザーと進歩を紹介します。

アプリがTestFlightを利用してベータ版をテストしている場合、テスターからのクラッシュフィードバックが本当に貴重であることを知っているでしょう。

テスターがクラッシュした後にフィードバックを書くと、App Store Connectでそのフィードバックを表示し、クラッシュログをダウンロードして、何が起こったのかの分析を開始できます。

後で、このワークフローをスーパーチャージするXcodeで行った変更をお見せします。

まず、Xcode 13の前に利用可能な機能の概要を簡単に説明したいと思います。

Crashes Organizerでは、App StoreとTestFlightの両方のアプリのクラッシュをサポートしています。

アプリクリップやアプリ拡張機能からのクラッシュなど、すべてのプラットフォームでアプリのクラッシュを表示します。

オーガナイザーは、問題をランク付けして、最も優先度の高いクラッシュを表示し、それらのクラッシュがさまざまなデバイスやOSバージョンにどのように分散されているかを示します。

そして、そのクラッシュを攻撃し始めることを決めたら、Xcodeプロジェクトで直接開くことができます。

これらの優れた機能はすべて、開発者アカウントでXcodeにサインインするだけで、すぐに機能します。

素晴らしいアプリを作る旅は、一度出荷すると、顧客は常にあなたが可能だとさえ知らなかった方法でそれを壊すように見えるので、時には長くてでこぼこになることがあります。

Xcode 13では、クラッシュしないという目標に近づき続けることができるように、クラッシュオーガナイザーをさらに良くしたかったのです。

これにより、クラッシュログの配信をほぼ瞬時に作成し、クラッシュに関するより豊富なデータを提供し、これらの再現が困難な問題を解決するのに役立つより多くのコンテキストを提供するという使命が設定されました。

Crashes OrganizerのXcode 13に追加した素晴らしい新機能をすべてお見せできることを嬉しく思います。

6つの大きな改善点をあなたと共有します。

まず、TestFlightの迅速な配信がクラッシュします。

テスターのいずれかがTestFlightビルドをクラッシュした場合、そのクラッシュを数分後にオーガナイザーに配信します。

このクイッククラッシュ配信により、最終日からすべてのTestFlightクラッシュを表示できるようになり、選択したクラッシュがいつ発生したかを示す1時間ごとのグラフが表示されます。

Xcode 13では、1年分のクラッシュ履歴を利用できるようにしています。

タイム期間別にクラッシュをフィルタリングして、昨年発生したすべてのクラッシュを確認できるようになりました。

1年分のクラッシュを表示できるため、検査官のグラフ領域に時間分布が表示され、月単位でクラッシュの有病率が表示されます。

私たちは、アプリのすべての部分の健全性をよりよく理解するためのより多くのツールを提供したかったのです。

そのため、今年はCrashes Organizerにフィルターを追加して、アプリの特定の部分に集中できるようにします。

オーガナイザーは、すべてのバージョンとビルドでクラッシュリストをフィルタリングしたり、個々の過去のリリースにドリルダウンしたりすることもできます。

また、時計アプリ、アプリクリップ、共有拡張機能など、アプリに同梱されている拡張機能のいずれかでフィルタリングすることもできます。

iOSアプリがこれらの驚異的なAppleシリコンMacでどのように実行されているかを確認することもできます。

アプリの問題のトリアージの一部は、誰が特定のクラッシュの影響を受け、そのクラッシュがさまざまなカテゴリに分散されているかの全体像を把握することです。

そのため、今年は、ユニークなクラッシュがアプリのバージョンとTestFlightとApp Storeにどのように分散されているかを確認する機能を追加しました。

皆さんは、ソロアーティストとして、大規模なチームで、そしてその間のすべてで、いくつかの素晴らしいアプリを出荷しました。

Xcode 13では、オーガナイザーから直接クラッシュレポートを共有する機能を追加することで、互いに協力する新しい方法を導入しています。

ツールバーの新しい共有ボタンを使用すると、クラッシュをチームのメンバーと直接共有したり、単にやることリストに追加したりできます。

そして、これらのリンクの1つをクリックすると、オーガナイザーはダウンロードしてこの問題に焦点を当て、このクラッシュに焦点を合わせ、調査を開始することができます。

TestFlightは、開発者が新しいクラッシュやバグを見つけるのに役立つテスターの手に新機能や修正を迅速に入手するための貴重なツールです。

TestFlightでアプリをベータテストすることは、開発者がApp Storeに甘いアップデートを出荷するという自信を植え付けるのに役立ちます。

Xcode 13で、TestFlightのクラッシュフィードバックをCrashes Organizerに直接持ち込むことを発表できることを非常に嬉しく思います。

App Store Connectは、クラッシュフィードバックを含むすべてのTestFlightフィードバックを表示します。

生のフィードバックとクラッシュログをApp Store Connectから直接ダウンロードし続けるか、今年の新しい「Xcodeで開く」ボタンを使用して、関連するクラッシュをオーガナイザーで開くことができます。

クラッシュフィードバックの表示がこれまで以上に簡単になりました。

クラッシュオーガナイザーには、TestFlightのクラッシュフィードバックに特化した新しい検査官がいます。

このインスペクタを開くと、選択したクラッシュにヒットしたテスターから提出されたすべてのフィードバックが表示されます。

これにより、クラッシュレポートと一緒に1つの統一されたフィードバックリストを表示し、クラッシュを修正するために必要な余分な情報をすばやくふるいにかけることができます。

再現が困難な問題を追跡する際に、この追加されたコンテキストは非常に貴重であると考えています。

だから、クールな新しいものがたくさんあります。

飛び込んで、新しいクラッシュオーガナイザーでいくつかのクラッシュのトリアージを始めましょう。

私はチームのアプリFrutaに取り組んでおり、最近App Storeに新しいバージョンを出荷しましたが、Xcode Cloudを使用してTestFlightに新しいバージョンを継続的に展開しています。

今日は、アプリクリップに最近のクラッシュがあったかどうかを確認したいので、オーガナイザーを開いて何が起こっているのか見てみましょう。

ウィンドウメニューバー項目を選択し、オーガナイザーを選択することでこれを行うことができます。

左側のサイドバーから、Xcodeが私のiOSアプリFrutaのCrashes Organizerを開いたことがわかります。

ウィンドウの上部にあるツールバーには、今年利用可能なすべての新しいフィルターオプションが表示されます。

フィルターバーの下にはクラッシュリストがあり、過去2週間のすべてのクラッシュがすべてのバージョン、ビルド、製品に表示されています。

このリストをすばやくスキャンすると、さまざまな種類の問題を見ることができます。

リストのクラッシュには、アプリクリップ、ウォッチアプリ、またはアプリ拡張機能から来たかどうかを示すさまざまなバッジが表示されます。

これにより、クラッシュが影響しているアプリのどの領域かをすばやく特定できます。

クラッシュリストの右側に、ログビューが見えます。

これは、私がクラッシュリストで選択したクラッシュのフレンドリーで簡略化されたビューを示しています。

そして最後に、ログビューの右側にインスペクタが表示され、選択したクラッシュに関するあらゆる種類の興味深い情報が表示されます。

オーガナイザーに精通したので、App Clipの最近の問題をすべて見てみたいと思う。

時計アプリ、アプリクリップ、アプリ拡張機能など、私のアプリに同梱されているすべての製品を一覧表示する製品フィルターをツールバーで開くことができます。

先に進んで、ここでアプリクリップを選択します。

アプリクリップを選択すると、クラッシュリストがフィルタリングされ、過去2週間のアプリクリップのクラッシュのみが表示されました。

ここのリストの最初のクラッシュは、私たちのトップクラッシュです。

タイトルの下に、主催者は、このクラッシュが過去2週間で21台、最終日に7台に影響を与えていることを知らせています。

さて、コードを掘り下げ始める前に、私の調査を導き、いくつかの文脈の手がかりに導くのに役立ついくつかの質問を自問したいと思います。

まず、これはどのくらいの期間問題になっていますか?

ウィンドウの右側にあるインスペクタのグラフ領域に向かうと、グラフの凡例から、このクラッシュがバージョン2.0で最初に登場し、最新のTestFlightビルド2.0.1に影響していることがわかります。

次の質問、これは私のプロダクションアプリに影響しますか、それともTestFlightだけですか？

フィルターをリリースに変更して、これがTestFlightとApp Storeの両方のビルドに影響していることがわかります。

したがって、この問題は非常に重要であり、お客様はそれを経験しており、最新のApp Storeリリースで退行した可能性があるようです。

では、ログビューに焦点を当てましょう。

ログビューは、クラッシュした正確なフレームを便利に強調表示しています。

また、バックトレースの上のスレッド番号、スレッド番号6を見ることで、これがバックグラウンドスレッドで起こったことも知っています。

お気に入りを同期している間にこれがクラッシュしているのがわかりますが、私があまりにも頻繁に作業するコードの領域ではないので、これを再現する方法がよくわかりません。

このクラッシュについてより多くの洞察を与えてくれる、自分自身に尋ねる質問がもっと思い浮かばないので、より多くの文脈を得ることが本当に役立つでしょう。

幸いなことに、リストのこのクラッシュの横にフィードバックアイコンがあるので、テスターの1人がこのクラッシュを経験し、フィードバックを提出したことを知っています。

これは、私がこのクラッシュに取り組み始めるために必要な文脈の欠けている部分かもしれません。

インスペクターエリアに向かい、新しいフィードバックインスペクターを開くことで、彼らのフィードバックを見ることができます。

私はちょうど1分前にそれを見た人を含め、いくつかのテスターがこの同じクラッシュを打ったことがわかります。

検査官では、各フィードバックレポートのプレビューを見ることができ、1つをクリックすると、ポップオーバーで詳細を見ることができます。

この最新のフィードバックをクリックすると、ポップオーバーが開き、インストールした正確なバージョンとビルド、デバイスモデル、バッテリーレベル、利用可能なディスク容量など、このテスターのクラッシュの豊富なコンテキストがすべて表示されます。

これらはすべて、クラッシュを診断する際に役立つ手がかりになります。

この場合、テスターがセルラーにいたのがわかりますが、彼らのコメントには「トンネルを通り抜けていて、お気に入りのボタンを押しました。

数秒後、それは墜落した。

うーん。もし彼らがトンネルを通過していたら、ネットワーク接続が悪かったかもしれません。

これで、すべての手がかりを組み合わせて、お気に入りのボタンを押すと、最終的にクラッシュするバックグラウンドタスクがトリガーされることを知ることができます。

コードに飛び込み始めるには十分だと思います。

プロジェクトで開くボタンを使用して、このクラッシュをFruta Xcodeプロジェクトで直接開きます。

さて、Xcodeが開き、左側のデバッグナビゲーターにバックトレースが表示され、ソースファイルとクラッシュコードの正確な行がハイライトされたエディタが表示されています。

では、なぜこのコードがクラッシュするのですか?

さて、私たちは致命的なエラーでわざとクラッシュしているようですが、これは興味深い選択です。

syncFavorites関数を簡単に通過して、何をしようとしているのかを理解しましょう。

まず、背景スレッドにジャンプします。

次に、このスムージーをお気に入りのディスクとして保存しているようです。

次に、バックエンドを更新し、ディスパッチグループを使用してこれらの操作を同期しています。

その後、10秒のタイムアウトでこれらの操作を待ち、時間がかかる場合はクラッシュします。

これはかなり不公平です。

私たちのテスターのフィードバックを思い出して、彼らがスムージーをお気に入りにしたとき、彼らはトンネルを通過していたと言いました。

彼らがトンネルを通過していた場合、おそらくネットワーク接続の質が悪かったため、バックエンドとの同期には間違いなく10秒以上かかる可能性があります。

このクラッシュは今、完全に理にかなっています。

タイムアウトが短すぎて適切に処理されていないことがわかったので、これを修正しましょう。

最近コンバインスキルを練習しているので、コンバインを使ってこれを修正したいと思います。

すごい。

だから今、私たちは2つのパブリッシャーの結果をマージしており、タイムアウト（現在は30秒）になると、クラッシュではなく完了ハンドラーを呼び出します。

問題は解決しました。

主催者に戻って、この問題を解決済みとしてマークしましょう。

ああ、私の上司がちょうど私にメールを送ったようです。

ああ、クレイグはデモでクラッシュした。

ありがたいことに、私の上司はオーガナイザーの新しい共有機能を使用して、クレイグがヒットした正確なクラッシュを私に送ったので、私はそれを掘り下げる必要はありません。

このリンクをクリックすると、オーガナイザーは、そのリンクに埋め込まれた単一のクラッシュのフォーカスされたビューを作成します。

私は実際に以前にこのクラッシュを見たことがあります。

先日これを修正し、解決済みとしてマークしました。

私はまた、根本的な問題を思い出すことができるように、クラッシュに親しみやすい名前を付けました。

私は先に進んで、私がすでにこれを修正したことを上司に知らせます。

そこで、オーガナイザーの新しいフィルターを使用してApp Clipのクラッシュをトリアージする方法、インスペクタで新しい分布グラフを使用する方法、TestFlightのフィードバックを使用して、そうでなければ再現するのが難しかった問題を解決する方法を見てきました。

それでは、新しいTerminations OrganizerとMetricKitの改良点を見てみましょう。

新しい終了オーガナイザーは、顧客に影響を与える可能性のあるアプリの終了の傾向を示しています。

Crashes Organizerで表示されるクラッシュは、プログラミングの失敗の結果ですが、アプリのプロセスを終了する方法は他にもあります。

終了は、「起動時にタイムアウト」や「システムメモリ制限を打つ」などの理由で分類されます。

アプリの終了イベントのこれらのカテゴリを以前のバージョンと比較して、回帰を見つけることができます。

これらの終了の一部はバックグラウンドで発生しますが、場合によっては、アプリが画面上にある間に発生する可能性があります。

終了オーガナイザーは、あなたがそれらを修正する計画を立てることができるように、違いを理解するのに役立ちます。

回帰に飛び込みたい場合は、今年のアプリケーションパフォーマンスサバイバルガイドセッションをチェックし、終了の詳細については、セッションをチェックすることをお勧めします。なぜ私のアプリが殺されるのですか?2020年から。

よく知らない場合は、AppleフレームワークMetricKitを使用して、コードのクラッシュログを収集できます。

あなたがする必要があるのは、MetricKitをインポートし、MetricKitマネージャーのリスニングを開始し、MetricKit診断ペイロードが受信されたときにcrashDiagnosticsプロパティを使用することだけです。

今年の新機能、クラッシュ診断は集約されなくなり、毎日1回配信されませんが、アプリの次の起動時に配信されるため、クラッシュログにすばやくアクセスできます。

また、MetricKitがmacOSをサポートするようになったことを発表できることを嬉しく思います。

MetricKitの使用の詳細については、2020年からのMetricKitの新機能のセッションをお勧めします。

クラッシュを追跡して表示する方法は他にもたくさんあります。

デバイスウィンドウから、またはデバイスから直接ログを共有することで、接続されたデバイスのクラッシュにアクセスできます。

XCTestは、テストの実行中に発生したクラッシュを収集し、コンソールアプリを使用してMacとシミュレーターからクラッシュを表示できます。

これらの追加ツールの詳細については、2018年の「クラッシュとクラッシュログを理解する」セッションをご覧ください。

今日、私たちはいくつかの素晴らしい新機能を見ました。

新しいスピーディーなクラッシュログ配信、TestFlightフィードバック統合、および配布メトリクスが、エクスペリエンスの修正クラッシュを劇的に改善し、最終的にアプリの健全性とユーザーエクスペリエンスを向上させることを願っています。

ご覧いただきありがとうございます。

そして、成功への道は常に建設中であることを覚えておいてください。

[パーカッシブミュージック]。