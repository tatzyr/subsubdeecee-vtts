10278

こんにちは。私はApple Designチームのデザイナー、Camille Moussetteです。

このセッションでは、アプリにオーディオと触覚フィードバックを追加するための実用的な手順と設計上の考慮事項を説明します。

歴史的に、アニメーション、サウンド、ハプティックスを含む豊富なアプリ体験を提供することは、デザインとエンジニアリングの両方の観点から非常に困難でした。

iPhoneのCore Hapticsを使用すると、見た目、音、リアルに感じる魔法の瞬間を簡単に作成できるようになりました。

これらのスキルを説明し、練習するために、HapticBounceと呼ばれる以前のコードサンプルプロジェクトから派生したiOSアプリを使用します。

ミニゲームのようにし、ビジュアル、サウンド、ハプティクスをうまくデザインするためのキャンバスを提供するために、いくつかの追加が行われました。

新しいデモはHapticRicochetと呼ばれています。

HapticRicochetは、iPhoneで命を吹き込み、iPhoneの向きに基づいて動き回るボールの物語です。

ボールは転がり、物理的な世界で期待するように、オーディオと触覚フィードバックで電話の壁から跳ね返ります。

ボールを叩いたら...

それはより大きなボールに成長します。

もう一度タップすると、ボールにシールドが追加されます。

そのシールドは壁と衝突するたびに損傷し、枯渇し、最終的にボールは崩壊して死にます。

また、背景の任意の場所をタップして有効または無効にするテクスチャを背景に追加しました。

このセッションでは、シールドの追加とローリングテクスチャの有効化という2つのメカニックだけに焦点を当てます。

先に進む前に、議題を確認しましょう。

まず、Apple内でよく使用する主要なオーディオと触覚設計の原則を確認します。

豊富なマルチモーダルフィードバックを可能にするフレームワークであるCore Hapticsを簡単に紹介します。

セッションのコアでは、XcodeのHapticRicochetプロジェクトを検討し、シールドとローリングテクスチャの瞬間のフィードバックをどのように追加、設計、洗練するかを確認します。

マルチモーダルエクスペリエンスの設計は難しい場合がありますが、うまくやると、ユーザーエクスペリエンスが本当に向上します。

それは魔法のように、楽しく、ちょうどいい感じです。

1つの例は、iOSの懐中電灯ボタンです。

ビジュアルアニメーション、サウンド、触覚フィードバックを組み合わせて、明確で正確で簡潔な統一された体験を提供します。

これは、デザインとエンジニアリングの努力を伴う反復的で創造的なプロセスです。

通常、あなたはそれらを聞くのではなく、触覚を感じるでしょうが、デモンストレーションの目的で、これらの触覚を音に変換したので、このビデオで聞くことができます。

あなたのアプリ体験で魔法と喜びを達成するために、ここに作業を導くための3つの原則があります。

彼らは社内で役に立ちましたし、彼らもあなたを助けることができることを願っています。

それらは因果関係、調和、そして有用性です。

フィードバックが有用であるためには、その原因が明らかでなければなりません。

それは、フィードバックのソースや原因を明確かつ明白にすることです。

最も単純な形式は、ボールが壁と電話の境界に当たったときにフィードバックを得ることです。

それは関連する音と触覚との衝突です。

同様に、ハプティックスローリングテクスチャは、背景のビジュアルが表示されている場合にのみ表示されます。

あなたは、グリッドがその感覚を生み出したことを理解しています。

私たちの第二の原則である調和は、私たちの感覚が一貫性があり、一貫性があり、与えられた経験を作成するために協力しているときに最もよく機能することを強調しています。

見た目と音を感じるべきです。そして、その響きは感じるべきです。

小さなボールは小さく感じ、小さく聞こえるはずです。

大きなボールは、それが本当の余分な質量を持っているように、音を鳴らし、より重く感じるはずです。

私たちの第3の原則であるユーティリティは、あなたのアプリ体験に明確な価値を提供することです。

できるからといってフィードバックを追加しないでください。

それはすぐに圧倒的で不快になる可能性があります。

ボールの成長など、アプリの重要な瞬間のために触覚とオーディオを予約してください。

次に、コアハプティクスを復習しましょう。

Core Hapticsは、アプリのカスタム触覚とオーディオフィードバックを設計できるiPhoneとiOSのテクノロジーです。

これは、エンジン、プレーヤー、パターン、イベントの4つの基本的な要素を中心とした強力なAPIです。

それらを簡単に復習しましょう。

最高レベルの要素はエンジンです。

それが電話の物理アクチュエータへのリンクです。

次は選手がいます。

開始、停止、一時停止などの再生制御に使用されます。

次に、パターンとイベントがあります。

パターンは、時間の経過とともにイベントのコレクションです。

イベントは、エクスペリエンスを指定するために使用される構成要素です。

イベントには多くの種類があります。

最も一般的なものは、一時的で連続的です。

実際には、ここにイベントで作られたパターンの具体的な例があります。

MacOS 12で利用可能なQuickLook Visualizerを使用して、.ahapファイルで指定された触覚パターンを確認しています。

AHAPはApple Haptic Audio Patternの略です。

もう一度見てみましょう。 

Finderで.ahapファイルを選択し、キーボードのスペースバーを押します。

では、パターン内の項目を詳しく見てみましょう。

青の最初のイベントは一時的なイベントです。

オレンジ色の2番目のイベントは連続したイベントです。

パターンはJSON構文を使用しています。

一時的なイベントはこのコードから作成されます。

これは、コアハプティクスの概要をまとめたものです。

より詳細な情報については、オンラインでドキュメントを確認してください。

このセッションの練習では、パターンの読み込み、変更、演奏に焦点を当てます。

XcodeとHapticRicochetの時間です。

HapticRicochet-Startフォルダからプロジェクトを開きます。

iPhoneでプロジェクトをコンパイルして実行できることを確認してください。

シミュレーターはハプティックスでは動作しません。

触覚を感じるには、物理的なiPhone 8以降が必要です。

電話が無音になっておらず、音量レベルが高いことを確認してください。

計画は、ViewControllerファイルと.ahap、.wav、.pngアセットファイルを操作することです。

ゲームとそのすべての相互作用に精通していることを確認してください。

ボールをタップし、背景をタップし、電話を傾けることができることを忘れないでください。

準備ができたら、シールド変換に飛び込みましょう。

調和の原理を使ってシールドの瞬間を解剖し、デザインの詳細を見ていきます。

ビジュアルでは、持続時間が500ミリ秒で、右上にこのように見えるアニメーションがあります。

触覚のために、私たちは新しい状態への変換を強調したいと思います。

オーディオについては、エネルギーの利得と堅牢で保護された最終状態を伝えたいと考えています。

この練習のために、私たちは異なる資質を伝える2つの異なる資産を作成しました。

私たちはそれらを見て、シールド体験に最も適したものを見ていきます。

しかし、まず、シールドのフィードバックをロードして再生する方法を見てみましょう。

機能的には、コードは2つの部分に分かれています。

まず、ビルディングブロックを初期化し、次に、そのシールド変換を再生してレンダリングする機能です。

initializeShieldHaptics関数では、まずShieldTransientファイルからパターンを作成します。

次に、そのパターンでshieldPlayerを作成します。

フィードバックはこの時点で再生する準備ができています。

関数シールドは、変換をレンダリングする準備ができたら呼び出されます。

触覚とオーディオのフィードバックは、shieldPlayerでstartPlayerを呼び出すことで再生されます。

これは、プロジェクトで頻繁に再利用する便利な機能です。

その後、ビジュアルアニメーションが再生されます。

それでは、ShieldTransientの資産を見てみましょう。

これは、触覚フィードバックとオーディオフィードバックの経験を定義します。

触覚はこのように感じるはずです:そして、オーディオはこのように聞こえるはずです:私はその音が好きです。

それはボールの堅牢性と保護のゲインのように感じます。

もう一度聞きましょう。

問題は、触覚と音が本当に一致しないことです。

触覚は3つのトランジェントでできています...

オーディオは連続的で進歩的ですが。

2つの感覚の間には調和がない。

ShieldContinuousと呼ばれる代替資産を見てみましょう。

それは継続的な触覚進行を持っています...

そして、減衰する不安定なオーディオ。

繰り返しになりますが、触覚とオーディオが本当に一致していないことを感じ、聞くことができます。

しかし、私はハプティックが好きです。

それは盾を得るための良い変革のように感じます。

もう一度触覚を聞きましょう。

私の計画は、その連続的な触覚パターンを使用しますが、最初の資産からの音を使用することです。

2つのアセットを使用して、最初のパターンから好きなオーディオを取り、2番目の連続した触覚パターンで使用します。

私が実際にそれをどのように行うか見てみましょう。

まず、テキストエディタでShieldContinuous.ahapファイルを開き、ファイルの最後までスクロールします。

触覚で再生するオーディオファイルを指定するこのイベントが表示されます。

オーディオファイルのファイル名でEventType AudioCustomを使用しています。

ParameterValueを使用してボリュームを指定および調整できます。

優先オーディオを使用するには、ファイル参照をShieldB.wavからShieldA.wavに変更します。

改訂された最終的な資産はこんな感じです。

触覚...

そして、オーディオは首尾一貫しています。

彼らはお互いを支え、強化し合います。

オーディオとハプティックを組み合わせたものを一緒に聴きましょう。

必要な最後の変更は、作成した最終資産を使用することです。

InitializeShieldHaptics関数に戻り、ShielTransientを使用する代わりに、ShieldContinuousファイルを指定してロードします。

ヴォイラ！ここにあります。

私は今、デバイスでコンパイルして実行しています。

私はちょうどいいと感じる調和のとれたシールドの変容で終わります。

触覚、オーディオ、ビジュアルは、ボールにシールド保護の追加を伝えるためにうまく機能しています。

次に、アプリにローリングテクスチャを追加する方法を確認します。

HapticRicochetは、転がる質感ではなく、壁との衝突から始まります。

背景をタップすると、水玉模様のテクスチャが表示され、ボールが転がるにつれて追加の触覚フィードバックが得られる。

私たちは、技術的な性質の2つの問題に遭遇し、解決します。

もう1つは、経験の設計に関連しています。

initializeTextureHaptics関数では、まずテクスチャahapファイルからパターンを作成します。

次に、そのパターンでShieldPlayerを作成します。

updateTexturePlayer関数は、テクスチャがアクティブなすべてのフレームで呼び出されます。

ボールの速度に基づいて触覚の強度を更新するために使用します。

結果を見てみましょう。-結果を見てみましょう。

私が気づいている問題は、数秒後にテクスチャが消えることです。

なぜこんな風に起こっているのか知っています。

その行動を修正する簡単な方法があります。

私たちが持っている問題は、.ahapファイルのテクスチャに2秒の触覚コンテンツしかないことです。

その行動を変え、無限に再生させる方法があります。

パターンプレーヤーの高度なバリアントは、一時停止、再開、その他のコールバックなどの追加機能を提供します。

HapticRicochetでは、高度なパターンプレーヤーをループ機能のためだけに使用します。

この変化を歩きましょう。

まず、texturePlayerの宣言をCHHapticAdvancedPatternPlayerタイプに変更します。

次に、同じテクスチャファイルを使用しますが、今回はAdvancedPlayerを作成します。

これで、そのAdvancedPlayerでループ動作を有効にすることができます。

良いことは、残りのコードがすべて同じままであることです。

結果を見てみましょう。-結果を見てみましょう。

ローリングテクスチャは、今回は明らかな一時停止や縫い目なしでループで再生されます。

私が取り組みたい2番目の問題は、テクスチャのルックアンドフィールに関連しています。

触覚パターンのアセットは非常に密度が高く、2秒間で100件近くのエントリがあることがわかります。

私たちの視覚的な背景の質感は非常に粗く、横にいくつかの点があるだけです。

ドットパターンがより緻密であれば、経験は改善され、より現実的になると思います。

backgroundImageに使用したリソースファイルを、このファイルのFineバージョンを使用するように変更します。

アプリを実行すると、新しい密度の高いテクスチャが使用されます。

見てみましょう。 

問題や問題が発生した場合は、プロジェクトの最終バージョンをHapticRicochet-Finalフォルダに含めました。

このセッション中に行ったすべての変更があり、iPhoneでコンパイルして感じる準備ができています。

あなた自身の触覚体験を探求し、デザインする余地はまだあります。

ゲームの他の変換を見て、あなた自身の新しい触覚と音のフィードバックをデザインしてみてください。

要約すると、私はあなたのアプリで素晴らしいマルチモーダル体験を設計するためにあなたを導くことができるオーディオと触覚設計の原則を導入しました。

iOSでカスタムフィードバックを追加するためのAPIであるCore Hapticsの基礎を見直しました。

シールドとローリングテクスチャの仕組みに焦点を当てたHapticRicochetプロジェクトを使用して実践しました。

追加情報とリソースについては、ヒューマンインターフェイスガイドラインと開発者ドキュメントを参照してください。

最後に、Core Hapticsの立ち上げをカバーするWWDC 2019セッションを再検討することができます。

ご覧いただきありがとうございます。

[パーカッシブミュージック]。