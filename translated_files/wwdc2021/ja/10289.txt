10289

♪ベース音楽の演奏♪

♪

ジェフ・ロバートソン：SwiftUIで素晴らしいMacアプリを構築するための講演の第2部へようこそ。

SwiftUIチームのエンジニア、ジェフです。

同僚のマチューによるこの講演の最初の部分を楽しんでいただければ幸いです。

まだパート1を見ていない場合は、ここで立ち止まって今すぐ行ってください。その講演で議論されている変更に基づいて構築します。

私たちのガーデニングアプリは、マチューの話が始まってから長い道のりを歩みてきました。

SwiftUIは、非常に短い時間でかなりの機能を備えたアプリを構築することを可能にしました。

しかし、ユーザーはさまざまな方法で私たちのアプリを使用する傾向があり、特に優れたmacOSアプリがこれを説明するでしょう。

それを念頭に置いて、マチューがパート1で概説した原則を維持しながら、すべての人のためにアプリを構築する方法のいくつかを見てみましょう。

まず、システム全体と独自のアプリ内の変更を処理することで、完全にカスタマイズ可能なmacOSアプリであることの意味を見ていきます。

ユーザーがドラッグアンドドロップでデータを操作するための追加のワークフローを追加することは、柔軟なユーザーエクスペリエンスを提供するもう1つの方法です。

次に、アプリのデータをエクスポートできるようにすることで、ファイルシステムを操作する方法を探ります。

そして最後に、Continuity Cameraのサポートを追加して、アプリに画像をインポートするためのシームレスなワークフローを作成します。

私が最初にお話ししたいのは、特定のAPIではなく、SwiftUIで構築されたアプリがmacOSのカスタマイズ性にどのように適合するかについてです。

ここでは、ガーデニングアプリとシステム環境設定を開いています。

ダークモードに切り替えると、アプリがインターフェイスを自動的に更新するのを見ることができます。

システム環境設定を開いている間に、サイドバーのアイコンサイズを大きく更新します。

ダークモードと同様に、私たちのアプリは私がシステム環境設定で設定したものに自分自身を調整しました。

私は開発者として、自動的に取得するので、そしてユーザーとして、私が使用しているアプリが私自身の個人的な好みを考慮に入れることを意味するので、これらの小さなタッチが大好きです。

システム環境設定を離れてアプリに集中する前に、アクセントカラーがマルチカラーに設定されていることを指摘したいと思います。

この機能により、開発者はアプリ固有のアクセントカラーを設定できます。オペレーティングシステムは、アプリのボタン、選択ハイライト、サイドバーのグリフをカスタマイズします。

アプリでアクセントカラーをサポートしたいので、プロジェクトでアセットカタログを開き、AccentColorを選択します。

そして、アプリのテーマに合わせて、コンテンツをシステムグリーンに変更します。

ご覧のとおり、サイドバーのアイコンと選択はすべて変更を拾いました。

アプリがオペレーティングシステム全体に影響を与える変更に自動的に反応する方法を見てきましたが、アプリ固有の設定はどうですか?

ユーザーがガーデニングアプリをカスタマイズできるように、インターフェースを追加することを説明しましょう。

ここでは、GardenAppファイルを開きました。

そして、WindowGroupのシーンの横に、設定シーンを追加します。

そして、このシーンは、選択すると、私たちのビューでウィンドウを開くメニュー項目を提供します。

設定したSettingsViewを使用し、私のモデルも渡します。 も渡します。

さらに、設定シーンでは、アプリのメインメニューに適切なメニュー項目を追加し、コマンドコンマの標準キーボードショートカットで設定します。

これは私たちに素晴らしいスタートを与えてくれます。

では、インターフェイスを定義するSettingsViewを見てみましょう。 インターフェイスを定義します。

macOSでは、特にアプリが異なるカテゴリに分けることができる多くの設定を提供する場合、異なるペインを切り替えることができるように、アプリがツールバーアイコン付きの設定インターフェイスを提供するのが一般的です。

だから、ここでの私のメインビューのために、私はTabViewを使うつもりです。

そして、私はそれに2人の子供を与えるつもりです。1つはGeneralSettings用、もう1つはViewingSettings用です。

また、ウィンドウツールバー領域のタブの内容については、tabItemを使用します。

そして、この内容は単なるラベルにすることができます。

表示するテキスト（この場合は「General」）とsystemImageを与えます。GeneralSettingsには「gear」を使用します。

そして、ViewingSettingsでも同じことをしましょう。

tabItemとラベルを追加します - 私たちはそれを「表示」と呼びます - そして、「眼鏡」のsystemImageだと思います。

わかった。だから今、私たちは2つのタブの内容を持っています。

今すぐ一般設定に記入しましょう。

ユーザーにとって良いことは、現在庭が選択されていないときにデフォルトとして使用する庭を定義する機能です。

このために、私はピッカーを追加するつもりです...

そして、最初の項目はテキスト(「なし」)だと思います。

そして、他の人のために、私は私たちのデータのすべての庭の上にForEachを追加するつもりです。

そして、各庭について、テキストを追加して、庭の名前と表示年を与えるだけです。

また、ここに庭のIDが付いたタグを提供する必要があります。

したがって、「なし」の値については、なしのタグを付けることができます。

そして、私たちの他の庭のために、私たちはそれに庭のIDに対応するタグを与えます。

最後に、ピッカーの選択にいくつかの状態を提供する必要があります。

このような設定インターフェイスを提供する場合、アプリが起動とOSの更新でユーザーの選択を記憶できるように、状態を持続することが重要です。

SwiftUIでは、これはAppStorageプロパティラッパーを使用することで実現できます。

このプロパティラッパーは、UserDefaultsシステムを使用して値を保持します。これはまさに私たちがここで望むものです。

したがって、選択バインディングのために、AppStorageプロパティラッパーを追加します。

これには鍵が必要です。

「defaultGarden」と呼び、「選択」と呼びます。

また、オプションのGarden.IDです。

そして、これが行うことは、ユーザーのデフォルトシステムを使用して選択値を保持することです。

また、ピッカーに固定サイズを追加し、フォームにいくつかのパディングを追加します。

ここでContentViewに切り替えて、AppStorageを追加して、使用したのと同じキーを渡します。

私たちはそれを「defaultGardenID」と呼び、オプションのGarden.IDでもあります。

そして、ここで私が選択のためにこのバインディングを持っているところで、私はこれをバインディングに置き換えるつもりです、そして「get」は最初にselectedGardenIDを使用することになります。

そして、それが設定されていない場合は、defaultGardenIDにフォールバックします。

そして、セッターについては、選択したGardenIDのみを更新します。

私たちは実際にdefaultGardenを更新したくありません。

だから私は「selectedGardenID = $0」と言うつもりです。

わかった。

私は私たちのアプリを実行するつもりです。

ここで環境設定メニュー項目を開き、デフォルトの庭として屋内植物を選択します。

そして、新しいウィンドウを開くと、屋内植物が選択されていることがわかります。

設定を介してカスタマイズサポートを提供することは、ユーザーにとって柔軟なエクスペリエンスを構築する素晴らしい方法の1つです。

もう1つの方法は、同じアクションの代替ワークフローを提供することです。

私たちの講演の最初の部分では、マチューは選択した庭に植物を追加するためのメインメニュー項目を追加する方法を示しました。

これは私たちのアプリにとって素晴らしい機能ですが、一般的なmacOSユーザーインタラクションを介して同様の機能を提供できる別の方法を見てみましょう:ドラッグアンドドロップ。

ここではテーブルを使用しているので、ドラッグソースとドロップ先であることをサポートするためにいくつかの調整を行います。

私が最初に行うことは、イニシャライザからこの「植物」を削除することです。

次に、最後に降りて、行ビルダーを追加します。 

この行ビルダーの内容については、ForEachを追加し、以前から持っていた植物を使用します。

そして、各植物のために、私はそれでTableRowを作成するつもりです。

では、itemProvider修飾子を追加して、各TableRowsをカスタマイズします。

そして、私はここでplant.itemProviderだけを返すつもりです。これは私のモデルに設定した計算されたプロパティです。

したがって、これらの行のそれぞれがドラッグソースであることをサポートしています。

私は今、植物を引きずり出すのに十分な変更を加えましたが、何も受け入れなければ、これはあまり役に立ちません。

テーブルにドロップサポートを追加して、それを修正しましょう。

onInsert修飾子は、ドラッグアンドドロップ方程式の残りの半分です。

コンテンツタイプのリストを取り、ここにPlant.draggableTypeを渡します。これは私のモデルで設定したカスタムタイプです。

また、2つのパラメータが渡されるクロージャも必要です。

1つはドロップが発生したインデックスで、もう1つはアイテムプロバイダーのリストです。

次に、Plant.fromItemProvidersに電話してモデルを作成し、これらのアイテムプロバイダーをここに渡します。

これにより、モデルを更新するために使用できる植物のリストが返されます。

発生したインデックスでgarden.plants.insert（contentsOf：plants）と呼びます。

これで、屋内植物で新しいウィンドウを開き、裏庭の花壇からいくつかの花を選択し、ドラッグしてコピーすることができます。

ドラッグアンドドロップは、アプリ内でデータを移動するのに最適な方法ですが、アプリとオペレーティングシステムの間でデータを移動するのはどうですか?

私たちのユーザーは、おそらくバックアップの目的で、または別のアプリにインポートするために、このすべてのデータをエクスポートできることを嬉しく思います。

このワークフローを容易にするために、他のアプリケーションと共有できる共通のファイル形式でデータベースをエクスポートするためのメインメニュー項目を追加しましょう。

コマンドプロトコルに準拠したメニュー項目を含むタイプをすでに作成しました。

ここのコマンドでは、ImportExportCommandsを追加し、それを私たちのストアに渡します。

今すぐそのファイルに切り替えましょう。

そして、本文については、CommandGroupを追加し、システムが提供するimportExportの配置を置き換えます。

そして、これは、ファイルメニューの予想される場所にメニュー項目を追加することです。

したがって、コマンドグループの内容については、セクションとボタンを追加します。

「エクスポート」のラベルを付け、その後に楕円を付けます。

楕円は、その項目を選択するとウィンドウまたは保存ダイアログが開くことをユーザーに示します。

そして、ボタンはいくつかの状態を変更することができます - 「isShowingExport = true」と言う - そして、その状態をここにも追加しましょう。

だから今、私たちはいくつかの状態を変更しているボタンを持っています。

また、ここにfileExporter修飾子を追加します。

そして、私はそれをそのisPresentedパラメータで私たちの状態にバインディングを与えるつもりです。

isShowingExportです。

文書も必要です。

これは、ファイルドキュメントプロトコルまたは参照ファイルドキュメントプロトコルのいずれかに準拠する必要があるタイプです。

私はすでに私の店にコンフォーマンスを追加したので、ここでそれを渡します。

さらに、コンテンツタイプが必要です。

CSVタイプのみのStore.readableContentTypes.firstに渡します。

そして最後に、操作の結果が渡され、成功または失敗を示すクロージャが必要です。

これで、エクスポートメニュー項目を選択し、保存するファイルを与え、「plants.csv」と言い、エクスポートを押すと、ファイルがディスクに保存されます。

アプリとオペレーティングシステムの間でデータを移動するという話題になっている間、最後に1つ議論したいことがあります。

私たちのアプリには、植物に関するテキストデータがたくさんありますが、画像を追加するのも素晴らしいことです。

ユーザーは、時間の経過とともに植物の写真を撮って進捗状況を追跡することができます。

このインポートフローを有効にする1つの方法は、Continuity Cameraです。

この機能により、ユーザーはiOSデバイスで植物の写真を撮り、アプリに直接インポートすることができます。

ユーザーがギャラリービューで植物を選択したときに、このフローを有効にするメニュー項目を追加する方法を見てみましょう。

importExportCommandsの後、ImportFromDevicesCommandsを追加すると、メインメニュー項目が表示されます。

さらに、GardenDetailファイルに切り替えて、ここで私たちの体の最後に、importsItemProviders修飾子を追加し、これはインポートをサポートしたいタイプのリストを取ります。

私は何かが選択されているかどうかに基づいてこれをするつもりですので、私はここで私たちの選択を使用するつもりです。

そして、それが空であれば、空の配列を返します。

そして、空でない場合は、システム上のすべての画像タイプのリストであるPlant.importImageTypesを返します。

そして、この修飾子はクロージャを受け取り、アイテムプロバイダーのリストを渡します。

これらのプロバイダーを取り、Plant.importImageFromProvidersに電話し、プロバイダーに渡すと、イメージをディスクに保存したURLが返されます。

次に、選択したすべてのIDをループしてモデルを更新します。

...そして、プラントへの参照を取得し、そのimageURLを更新します。

屋内植物園を選択し、ギャラリーモードに切り替えます。

そして、私は物事をもう少し大きくするつもりです。

ここで私の植物を選択してください。

メインメニュー項目で、「iPhoneから読み込む」>「写真を撮る」を選択します。

そして、あなたは私たちのギャラリーが更新されているのを見ることができます。

これが素晴らしいMacアプリを定義するさまざまな方法のいくつかの素晴らしいツアーだったことを願っています。

あなたのアプリがmacOSプラットフォームをより良くするすべての方法を楽しみにしています。

素晴らしいWWDC 2021をお過ごしください。

♪