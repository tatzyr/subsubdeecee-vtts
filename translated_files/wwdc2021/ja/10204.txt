10204

♪ ♪

こんにちは、私の名前はBalrajで、Xcodeチームのエンジニアです。

今日は、Xcode 13でのアプリの配布についてお話ししたいと思います。

アプリを配布するにはさまざまな方法がありますが、今日は、App Store Connectにアプリをアップロードする方法、App Store Connect以外の配布オプション、および配布を自動化する方法について説明します。

また、Xcode 13の配布ワークフローに追加した新機能についても確認しますので、初めてアプリを配布する場合でも、100回配布する場合でも、このセッションのコンテンツは価値があります。

最近、私はかなりたくさん焼いてきたので、ベイカーと呼ばれる他の人を始めるためのアプリを作成することに触発されました。

ベイカーは、人々がさまざまな種類のパンや焼き菓子を作るのを手伝います。

私は最近、Baker iOSアプリの最初のビルドを完了し、広範囲にテストし、フィードバックのためにベータテスターにアプリを配布したいと考えています。

ベータテストでは、アプリのベータビルドを配布し、フィードバックを得るためのサービスであるTestFlightでアプリを利用できるようにしたいと考えています。

BakerのビルドをTestFlightで利用可能にするには、まずビルドをApp Store Connectにアップロードする必要があります。

App Store Connectでは、TestFlightでBakerのビルドを管理したり、開発者チームの設定を構成したりできます。

App Store Connectは、App Store用のBakerのビルドを管理する場所でもあります。

したがって、BakerをTestFlightまたはApp Storeで利用できるようにするかどうかにかかわらず、まずBakerのビルドをApp Store Connectにアップロードする必要があります。

BakerのベータビルドをXcodeのApp Store Connectにアップロードするので、アプリを開発しているところから配布プロセスが始まります。

Xcode 13には、App Store Connectやローカルマシンでセットアップを実行せずにBakerをアップロードできる、配布にいくつかのエキサイティングな新しい変更があります。

Xcode 13の最初の新しい追加は、アップロードする前にXcodeで直接アプリレコードを作成できることです。

次に、Xcodeは配布プロセス中にアプリのビルド番号を管理できます。

そして最後に、クラウド署名では、証明書と秘密鍵がクラウドに保存されます。つまり、自動署名を使用するときにローカルで手動で設定する必要がなくなります。

XcodeからBakerアプリをApp Store Connectにアップロードすることで、これがどのように機能するかを見てみましょう。

ベイカープロジェクトを開いて、アップロードする準備ができています。

最初に必要なのは、配布のために処理できるBakerアプリのビルドです。

このタイプのビルドを実行するには、BakerがサポートされているiOSデバイスで実行できることを確認する必要があるため、まずツールバーの任意のiOSデバイスの実行先を選択します。

次に、メニューバーで[製品]を選択し、[アーカイブ]をクリックします。

アーカイブは、開発者が署名したアプリケーションのリリースビルドであり、配布時に使用されるアプリとチームに関するメタデータが含まれています。

アーカイブ操作が完了すると、Xcodeオーガナイザーが自動的に表示されます。

構築されたアーカイブは自動的に選択され、配布に使用したいものです。

右側のインスペクタでは、バージョン、バンドルID、チーム名、右上隅にある配布用の大きな青いボタンなど、アーカイブに関する情報も表示されます。

アーカイブの保存に加えて、主催者は、クラッシュ、エネルギー、洞察、メトリクスなど、すべてのアプリのさまざまなアプリ分析を表示できる場所でもあります。

ベイカーはベータテストを受けているので、私は間違いなくアプリがどのように実行されているかについての洞察を得るためにここに戻ってチェックします。

配布を開始するには、現在選択されているアーカイブを使用して、[アプリの配布]ボタンをクリックします。

配布の最初のステップは、ベイカーを配布する方法を選択することです。

App Store Connectがデフォルトの方法であり、アップロードしたい場所なので、選択したままにしておきます。

Ad HocやEnterpriseなど、このウィンドウに表示されるアプリを配布するさまざまな追加方法があり、これらについては後で詳しく説明します。

App Store Connectへのアップロードを続けるには、配布アシスタントの右下隅にある[次へ]をクリックします。

その後、アップロードするかエクスポートするかを尋ねるステップに進みます。

アップロードは、私のアーカイブを取り、アップロード用にパッケージ化されたアプリの形式であるIPAに署名して生成し、App Store Connectに送信しますが、エクスポートもIPAを構築し、まったく同じ方法でコンテンツに署名します。

唯一の違いは、XcodeがIPAをApp Store Connectにアップロードするのではなく、マシン上の指定されたディレクトリに移動することです。

このIPAは、後でトランスポーターを使用してApp Storeに送信できます。

今すぐBakerをApp Store Connectにアップロードしたいので、アップロードを選択したままにして、[次へ]をクリックして続行します。

Xcodeは、App Store Connectのステータスを確認し、さまざまな配布設定手順を実行します。

Xcode 13の新機能では、App Store Connectでアプリレコードを作成するプロンプトが表示されます。これは、Bakerの実際のビルドをアップロードする前に必要です。

アプリレコード作成ステップは、ベイカーアーカイブとシステム設定から派生したアプリ名、バンドルID、主要言語などのプロパティのデフォルト値を提供します。

デフォルトのオプションに満足しているので、[次へ]をクリックします。

Xcodeは、App Store Connectで必要なアプリレコードを作成するようになりました。

アプリレコードは、ベイカーのアップロードされたすべてのビルドを表示できる場所であり、TestFlight、アプリ内購入、価格情報などを設定できる場所です。

BakerアプリのレコードがApp Store Connectで利用可能になり、私のアプリのリストに表示されます。

新しく作成されたBakerアプリレコードは、Bakerのすべてのビルドが管理される場所になるため、後続のアップロードを実行するときに新しいアプリレコードを再度作成する必要はありません。

XcodeがBakerアプリレコードを作成し、App Store Connectの設定を検証した後、アーカイブの内容とアプリの配布方法によって決定されるオプションのリストが提供されます。

ビットコード用にビルドしたいのですが、アプリのクラッシュレポートが詳細で説明的になるようにシンボルを含めたいし、Bakerのビルド番号がすべてのフレームワークで一貫していることを確認したいので、デフォルト値を選択したままにして、[次へ]をクリックして続行します。

私は今、ベイカーにどのように署名したいかを尋ねるページに連れて行かれました。

署名は、Bakerが信頼できる開発者から来ていることを検証し、ソフトウェアが安全に実行できることを確認するために使用されます。

私に提供された2つのオプションは、自動署名と手動署名です。

自動署名により、Xcodeは私のために署名を処理できますが、手動は署名プロセスを完全に制御したいときのためのものです。

Xcodeで署名を処理してもらいたいので、自動署名をチェックし続け、[次へ]をクリックして続行します。

Xcodeは、BakerアーカイブをIPAに変換し、配布のために署名します。

配布ワークフローの自動署名は、ローカルマシンのセットアップなしで署名が機能するいくつかのエキサイティングな変更を受けています。

署名プロセスには、私が信頼できる開発者であることを検証するための証明書と秘密鍵が必要です。

ローカルで署名するときは、配布証明書と秘密鍵がマシンにインストールされていることを確認する必要があります。配布ワークフローに入る前に手動設定が必要になることがよくあります。

Xcode 13では、自動署名を使用する場合、証明書の設定は必要ありません。

証明書と秘密鍵は、署名操作が行われるクラウドに安全に保存できるようになりました。

これは、自動署名を使用する場合、証明書をまったく設定する必要がないことを意味します。

この新しいスタイルの署名は、App Storeのアップロード、開発者ID、エンタープライズ配布など、Xcodeのすべての配布方法でサポートされています。

クラウド署名は、すべての署名資産を管理し、アプリに署名することで、舞台裏で完全に機能します。

これがどのように機能するかをもっと詳しく説明しましょう。

Xcodeは、開発者が署名したBakerアプリをアーカイブに保存し、部分的な署名を生成します。

この部分的な署名には、アプリ内のコンテンツのハッシュが含まれています。

その後、これらのハッシュのコピーが当社のサーバーに送信され、プライベートキーと証明書を使用して、クラウドでアプリに署名します。

次に、署名の残りの部分を返し、それを部分的な署名に挿入して署名プロセスを完了します。

現在、自動署名とクラウド署名を使用することで、App Store Connectにアップロードできる完全に配布署名されたBakerアプリがあります。

App Store Connectで管理者またはアカウントホルダーの役割を持つ人は誰でも、デフォルトでApp Store Connect配布のクラウドサインをすることができます。

開発者の役割を持つ人にクラウド署名を使用してBakerをアップロードしてもらいたい場合は、クラウド管理配布証明書へのアクセスチェックボックスをオンにして、App Store Connectで許可を付与できます。

Xcodeは、Bakerアプリのパッケージングとクラウド署名を完了し、App Store Connectにアップロードする前にサマリーページを表示します。

使用された証明書の種類、バージョン番号、Bakerアプリが署名された資格などの情報を見ることができます。

私は見たものに満足しているので、先に進んでアップロードをクリックします。

今、XcodeはBakerの最初のビルドをApp Store Connectにアップロードします。

今、App Store Connectにアクセスすると、以前に作成したアプリレコードXcodeでBakerの最初のビルドを見ることができます。

ここから、TestFlightのBakerを設定し、ベータテストを開始することができます。

App Store Connect for TestFlightおよびApp Storeでアプリを設定する方法については、説明のガイドを参照してください。

TestFlightとベータテストでBakerを取得した後、私は多くのバグとフィードバックに対処しました。

私は今、必要なアップデートで私のアプリの別のビルドをアップロードしたいです。

そのプロセスは、私たちが今経験したこととほとんど同じように見えます。

必要な変更でアプリをアーカイブし、Xcodeオーガナイザーを通じて配布します。

2つの違いがあります。

まず、アプリレコードを再度作成する必要はなく、第二に、App Store Connectは各ビルドを保持し、バージョンとビルド番号を使用して区別するため、Bakerのビルド番号が異なることを確認する必要があります。

アーカイブする前に、プロジェクトファイルのビルド番号を変更することでこれを行うことができます。

しかし、ビルド番号を管理したくない場合は、配布ワークフローがこれを行うことができます。

Xcode 13の新機能、XcodeがApp Store Connectですでに使用されているビルド番号で配布していることを検出した場合、または増加していない場合は、アーカイブ内のビルド番号を有効なものに増やすことを提案します。

[バージョンとビルド番号の管理]オプションを見て、Xcodeが選択するビルド番号を確認してください。

配布ワークフローにビルド番号を管理させると、Bakerの最初のアップロードとまったく同じプロセスに従い、App Store ConnectでBakerの2番目のビルドができました。

ベータビルドをリリースし、フィードバックに対処するこのサイクルは、App Storeリリースに必要な望ましい品質を満たすビルドが得られるまで続きます。

BakerをApp Storeで入手するには、App Store ConnectでTestFlightビルドの1つを宣伝したり、以前とまったく同じ方法でオーガナイザー内の別のビルドをApp Store Connectにアップロードしたりできます。

BakerがApp Storeに登場したら、Bakerアプリに新機能、バグ修正、機能強化の追加作業を続けることができます。

TestFlightまたはApp Storeの次のアップロードの準備ができたら、Xcodeで同じプロセスに再び従うことができます。

クラウド署名、アプリレコードの作成、ビルド番号管理など、Xcode 13の配布ワークフローに新しく追加されたことで、App Store Connectで事前のマシンセットアップやセットアップなしでアプリを配布できるようになりました。

これにより、アプリの配布がこれまで以上に合理化されます。

Xcodeは、さまざまな配布オプションを提供します。

Macアプリから始めて、アプリを配布するための他のオプションのいくつかを見てみましょう。

Bakerを含むほとんどのiOSアプリは、デフォルトでAppleシリコンMacで利用できます。

この設定を構成するには、Bakerアプリレコードの「プライバシーと可用性」セクションに移動できます。

しかし、BakerをIntel Macでも利用できるようにしたいので、Mac CatalystバージョンまたはBakerのネイティブMacバージョンを作成できます。その後、アプリを世界に配布する方法について2つのオプションがあります。

iOSとまったく同じ方法でクラウド署名して配布することで、Mac BakerアプリのビルドをMac App Storeに配布できます。

iOSアプリと同じバンドルIDを使用する場合、私のMacアプリはiOSバージョンと同じアプリレコードを使用します。

これはまた、アプリ内課金などの特定の機能が2つのプラットフォーム間で共有されることを意味します。

また、MacOS Montereyで新しく利用可能になったため、MacアプリをTestFlightで利用できるようにすることもできます。

これは、すべてのAppleプラットフォームでBakerのベータテストにTestFlightを使用できることを意味します。

Mac App Storeの外でBakerをダウンロードしたい場合は、開発者IDを使用してアプリを配布することを選択できます。

開発者ID配布クラウドは、開発者ID証明書でベイカーに署名し、公証と呼ばれるプロセスでマルウェアをチェックするためにアプリをアップロードします。

Bakerが署名され、公証されると、macOSはどのMacでも実行されるアプリを信頼します。

開発者IDと公証を使用した配布の詳細については、「公証に関するすべて」セッションをご覧ください。

開発者IDとMac App Storeは、macOSの2つの主要な配布方法であり、どちらもアプリを世界に提供するための素晴らしいオプションです。

Macで配布するさまざまな方法を検討したので、iOSでアプリを配布する方法をもう少し見てみましょう。

時々、私はチームメイトにベイカーの配布署名入りビルドを直接送りたいです。

これは、バグ修正のテスト、実験的な新機能のテスト、またはその他のさまざまな理由で行うことができます。

このユースケースでは、アドホックディストリビューションを使用したいと思います。

アドホック配布では、デバイスタイプごとに私のチームに登録された最大100台のデバイスで実行するためにBakerに署名することができます。

Xcodeを使用して、アドホック配布オプションを選択し、アプリをエクスポートし、登録デバイスを持つチームメイトの1人にBakerを送信できます。

最後に、私のチームはキャンパスエクスプローラーというアプリを持っていて、社内で配布したいと考えています。

Xcodeは、このように配布する2つのオプションを提供します。カスタムアプリとエンタープライズ配布です。

カスタムアプリを使用するには、App Store Connectに配布し、そこでカスタムアプリを設定できます。

第二に、エンタープライズプログラムを通じて非公開で配布する場合は、オーガナイザーでエンタープライズ配布方法を選択できます。

カスタムアプリの配布の詳細については、「Apple Business Managerを使用したカスタムアプリの配布」セッションをご覧ください。

私たちは今、さまざまな方法で、さまざまなビルドのためにベイカーを配布しています。

時間が経つにつれて、配布時に同じオプションと方法を継続的に選択するので、配布プロセスの自動化を開始したいと思います。

ディストリビューションの自動化は、1つの継続的なワークフローでアプリを構築、テスト、配布できるため、継続的インテグレーションサービスを使用する場合は特に素晴らしいです。

新しいXcode Cloud CIサービスは、これに最適です。

アプリケーションを構築してテストしたら、Xcode CloudはApp Store Connectへのアプリの自動配布をサポートします。

Xcode Cloudでアプリを設定して配布する方法については、「Explore Xcode Cloud workflows」セッションをご覧ください。

別のCIサービスを使用して配布を自動化したり、マシンでローカルで自動化したりする場合は、Xcodeコマンドラインツールxcodebuildを使用できます。

`xcodebuild -exportArchive`コマンドは、配布を自動化するために使用されるために使用され、アーカイブ、エクスポートオプションplist、および資格情報を取り込みます。

Bakerの最初のアップロード時のように、Xcodeでアーカイブを作成するか、xcodebuildのアーカイブコマンドを使用してビルドすることができます。

ビルドされたアーカイブを参照するには、「-archivePath」引数を使用し、ビルドされたアーカイブにパスを渡します。

次は、アプリを配布するためのレシピのようなエクスポートオプションplistです。

これは、Xcodeの配布ワークフローで手動で選択したすべてのオプションが指定されている場所です。

IPAをエクスポートすると、選択したすべてのオプションを使用して、エクスポートオプションplistがエクスポートされたディレクトリに保存されます。

BakerをApp Store Connectにアップロードすると、エクスポートオプションplistが作成され、アップロードの選択、ビットコードの有効化、自動署名の選択などのオプションが追跡されました。

xcodebuildがこのplistを使用すると、Xcodeで行ったのとまったく同じオプションを選択して配布されます。

エクスポートオプションplistで利用可能なオプションのリストについては、コマンドラインで`xcodebuild -help`を実行できます。

エクスポートオプションplistを指定するには、plistファイルへのパスとともに`-exportOptionsPlist`引数を渡す必要があります。

最後に、クラウド署名を成功させ、App Storeにアップロードするために、xcodebuildが有効な資格情報にアクセスできることを確認する必要があります。

これを行うには2つの方法があります。

最初の方法は、xcodebuildを実行する前にXcodeにサインインすることであり、セッションは一定期間私のマシンに持続します。

Xcodeでサインインすると、必要なフラグは「-allowProvisioningUpdates」のみで、xcodebuildがApple Developer Webサイトと通信する許可を与えます。

Xcode 13の新機能では、App Store Connectキーを使用して、Xcodeにサインインすることなくxcodebuildにサインインできます。

キーはApp Store Connectから取得し、xcodebuildに渡すことができます。

必要な3つは、`-authenticationKeyIssuerID`を使用してxcodebuildに渡される発行者ID、`-authenticationKeyID`を使用して渡されるキーID、そして最後に、APIキーのダウンロードボタンを使用してAPIキーをダウンロードする必要があります。

ダウンロードしたファイルへのパスは、`-authenticationKeyPath`を使用してxcodebuildに渡すことができます。

Xcodebuildは、開発者のウェブサイトと通信する必要があるため、プロビジョニングの更新を許可する必要があります。

それとすべてのApp Store Connectキーを取得すると、xcodebuildがアプリを配布するために必要な資格情報が必要になります。

アーカイブ、エクスポートオプションplist、および資格情報を得たので、完全なxcodebuildコマンドを構築するために必要なすべてを持っています。

これは、ベイカーの配布を自動化するコマンドのためにまとめられたすべての要素です。

週に1回、ベータテスターにアップデートを提供し続けたいので、このコマンドを使用してこれを行うようにCIを設定します。

そして、それがXcode 13を使用してアプリを配布するすべての方法です。

TestFlightとApp Store用のApp Store Connectへの配布から、開発者ID、アドホック、エンタープライズなどの配布方法まで。

次に、最後に、配布プロセスを自動化するために、xcodebuildまたはXcode Cloud CIサービスを使用できます。

Xcode Cloudを使用してアプリを配布する方法の詳細については、「Xcode Cloudワークフローの探索」セッションをご覧ください。また、他の配布方法の詳細については、「App Distribution - Ad HocからEnterpriseへ」セッションには素晴らしい情報があります。

聞いてくれてありがとう、そして素晴らしいWWDCを！

[明るい音楽]。