10064

♪ ♪

こんにちは。

私はデビッド・ダンカンで、同僚のエリック・デュディアックと一緒に、UIKitがiOS 15でボタンをより良くするすべての方法について話し合います。

謙虚なボタンは、大小のアプリの定番です。

ボタンは、おそらくユーザーの入力を求める最も一般的な方法です。

ボタンには、大小、画像、テキスト、またはその両方、背景の有無にかかわらず、虹のあらゆる色など、さまざまな形式があります。

いくつかの特定のスタイルに焦点を当てることから始めましょう。

iOS 15では、UIKitはこれら4つの基本的なスタイルを提供しているようになりました。

あなたがすでに知っていて愛しているプレーンスタイルに加えて、新しいグレー、着色、塗りつぶされたスタイルです。

しかし、UIKitはiOS 15でボタンをよりスタイリッシュにするだけではありません。

それはまた、それらをより強力にします。

ダイナミックタイプがデフォルトでサポートされ、複数行のテキストサポートがボタンシステムに組み込まれています。

アクセシビリティは、すべてのアクセシビリティ機能のより良いサポートと、デフォルトでよりアクセスしやすいボタンの生成によって強化されました。

そして、これらすべての新機能により、ボタンはこれまで以上にカスタマイズ可能であるため、あなたが望むスタイルを正確に得ることができます。

それでは、そのプライマーで、新しいボタンシステムへの入り口であるUIButtonConfigurationに会いましょう。

あらゆる形とサイズのボタンのプレミアサプライヤーであるボタンエンポリアムへようこそ。

Button Emporiumは常に最高のボタンを持ちたいので、UIButtonConfigurationを採用するようにアプリを更新しましょう...

非常に重要なサインインボタンから始めます。

現在、アプリはこのコードでサインインボタンを生成し、「サインイン」というタイトルのプレーンなシステムボタンを生成します。

しかし、これは非常に重要なボタンなので、新しい塗りつぶしスタイルを使ってもっと目立たせましょう。

そして、私たちは終わりました!

UIButtonは、提供する構成で既存のAPIで設定されたタイトルと画像を自動的に統合し、すべてのコードを一度に更新することなく、ボタンのスタイルを簡単に更新できるため、UIButtonConfigurationを簡単に開始できます。

しかし、コードを更新する準備ができたら、UIButtonConfigurationにはスタイルだけではありません。

次にそれを見てみましょう。それは、次は

これは現在の「カートに追加」ボタンです。

今ではかなり基本的なボタンですが、UIButtonConfigurationが提供する新機能を利用して、ボタン購入体験をターボチャージします。

まず、他のボタンを補完するので、着色されたスタイルを使用します。

まず、着色されたボタン構成を作成し、そのタイトルを設定し、以前にボタンをどのように設定したかを一致させます。

次に、記入した設定でボタンを作成します。

これはすでにかなりの改善ですが、トップを乗り越えましょう。

私たちが行う次の改善は、ボタンに画像を追加し、それが一目で何をするかを簡単に決定することです。

私たちのデザイナーは本当に後付けの位置に画像を望んでいるので、画像プロパティの設定に加えて、imagePlacementプロパティも設定し、画像を必要な場所に正確に配置します。

しかし、新しい「カートに追加」ボタンに追加したい機能がさらに2つあります。

1つ目は、UIButtonConfigurationのサブタイトル機能を使用して、複数のアイテムを注文したときに何が起こるかをプレビューすることです。

2つ目は、ボタンが押されたときに、輪郭を描かれた画像から塗りつぶされたバージョンに切り替えることです。

そのために、適切なタイミングで画像プロパティを更新する必要があります。

これらの変更のいずれかが発生したときにボタンを正しく更新するために、configurationUpdateHandlerを追加します。

configurationUpdateHandlerは、ボタンが更新が必要なときに呼び出され、一元化された変更を行うことができます。

通常、ボタンの設定を変更するので、通常、開始設定を取得することから始まり、変更された設定の設定で終わります。

ここでは、ボタンの既存の設定から始めますが、同じように簡単に新しいものを作成し、代わりにすべてのパラメータを記入することができます。

まず、ボタンに正しい画像を設定しましょう。

ボタンを押すと、isHighlightedはtrueを返し、カートシンボルの塗りつぶしバージョンを設定します。

それ以外の場合は、概説されたバージョンを使用します。

isHighlightedはUIButtonの状態であるため、その値が変更されたときにconfigurationUpdateHandlerが呼び出されるように自動的に手配します。

次に、itemQuantityDescriptionが変更されたときにサブタイトルを更新します。

しかし、itemQuantityDescriptionはUIButtonのプロパティではありません。

値が変更されたときにconfigurationUpdateHandlerを呼び出すようにどのように手配しますか?

お客様が購入するボタンの数を変更すると、アプリはitemQuantityDescriptionを更新します。

[カートに追加]ボタンも確実に更新されるように、didSetハンドラーはsetNeedsUpdateConfigurationを呼び出し、configurationUpdateHandlerの呼び出しを手配し、ボタンの更新をトリガーします。

Button Emporiumでは、気に入らなかったボタンに会ったことがなく、UIButtonConfigurationでは、好きなものがたくさんあります。

次のボタンを更新する前に、他の機能をすばやく取り上げましょう。

ボタンにアクティビティインジケーターが表示されるようになり、アプリがビジーであるというフィードバックを簡単に提供できるようになりました。

ボタンの設定でshowsActivityIndicatorをtrueに設定するだけで、インジケーターが表示され、必要に応じて画像を置き換えます。

ボタンのレイアウトの側面を調整するのは簡単で、ボタン内のコンテンツの配置をより詳細に制御できます。

ここでは、contentInsetsがボタンの端にスペースを確保する方法を見ることができ、imagePaddingとtitlePaddingを使用すると、これらの要素間のスペースを増やすことができます。

また、UIKitはこれらのコンポーネントを自動的にレイアウトしますが、タイトルが互いにどのように整列するか、およびボタンのコンテンツがコンテンツ領域内でどのように整列するかを制御できます。

セマンティックなスタイリングにより、細部を掘り下げることなく、まとまりのあるスタイルのボタンを簡単に作成できます。

シンプルな塗りつぶしボタンから始めて、baseBackgroundColor、baseForegroundColor、cornerStyle、およびbuttonSizeを設定してカスタマイズされたボタンを生成し、余分な労力をかけずに押したり無効にしたりなどのテーマ別の状態を自動的に取得します。

しかし、多くの自動化があっても、非常に重要な「チェックアウト」ボタンのように、必要なものを正確に持っていなければならないときのために、詳細なカスタマイズを行うのは簡単です。

ボタンエンポリアムのお客様が最小限の手間でボタンを入手できるように、チェックアウトボタンは大きくて見つけやすいです。

それを構築するには、塗りつぶされたスタイルから始めて、そのサイズを大きく設定し、その画像とタイトルを記入します。

ボタンをタップすると、カートの処理を開始し、アクティビティインジケーターを表示したいと考えています。

これを有効にするには、configurationUpdateHandlerを追加して、設定のshowsActivityIndicatorプロパティを管理します。

以前と同様に、isCartBusyプロパティの変更は、チェックアウトボタンでsetNeedsUpdateConfigurationを呼び出して、必要に応じてアクティビティインジケータのオンとオフを確認します。

そして、青はいいですが、私たちは印象を残すようにしたいです。

したがって、正確な色が背景に使用されるように、UIButtonConfigurationのUIBackgroundConfigurationのbackgroundColorを設定しましょう。

その方がずっといい。

UIButtonConfigurationがボタンをこれまで以上に良く見せる方法について話し合ったので、エリックに渡して、ボタンができる他の新しいことについて話します。

ありがとう、デビッド。

ボタンの外観をカスタマイズする方法を確認したので、ボタンの機能をカスタマイズする方法を調べてみましょう。

ほとんどのボタンは単純なプッシュボタンですが、時にはボタンに少し余分な動作が必要です。

最初に調べるのは、トグルボタンです。

これらのボタンは、UIControlから選択した状態を保持します。

ボタンを押すたびに自動的にオンとオフを切り替えます。

また、必要に応じてプログラムで変更することもできます。

オン状態とオフ状態の組み込みスタイルに加えて、UIButtonConfigurationを利用して、これらのオン状態とオフ状態のプレゼンテーションをカスタマイズできます。

iOSのトグルボタンの概念は新しいものではありません。

ミュージックアプリの歌詞ボタンのようないくつかのボタンに気づいたかもしれません。

このようにプレーヤーで歌詞のオンとオフを切り替えます。

機能的には、これはUISwitchと同じように機能しますが、UIのスペースを節約し、アプリのデザインにはるかに適しています。

トグルボタンは、カレンダーのこのようなUIBarButtonItemsでも機能します。

上部のバーでは、日の詳細を有効または無効にすることができます。

それを押すと、詳細の表示が切り替えます。

この場合、UIBarButtonItemには、選択した状態に対して読み取りまたは設定できる新しい選択プロパティがあります。

それでは、ボタンエンポリアムを更新して、トグルボタンを採用しましょう。

私たちのアプリでは、購入したいボタンの種類を閲覧できます。

しかし、閲覧している間、私は現在在庫があるものを熟読したいだけです。

ここでは、絶対にすべてを表示することと、在庫があり、出荷する準備ができているものを切り替えるためのトグルボタンを追加しました。

これはトグルボタンの素晴らしい使い方です。

1つの利点は、それがボタンであるため、ラベルがその一部であり、ここで何が切り替えられているかを非常に明確にすることです。

では、どうやって作ったのか調べてみましょう。

ここでは、ボタンの設定の基本があります。

トグルボタンにするには、changesSelectionAsPrimaryActionをtrueに設定するだけです。

今はトグルボタンです。

それでおそれ。

選択した状態を内部モデルに合わせて設定することもできます。

さて、オンとオフの2つの状態だけで、もう少し複雑なものが欲しいかもしれません。

切り替えるオプションが増えたボタンについては、ポップアップボタンを使用できます。

ポップアップボタンは、iOSにすでに存在するプルダウンボタンに近いものです。

これらは押すとメニューが表示されます。

ポップアップボタンはそれをさらに一歩進め、メニュー要素の1つだけが選択されていることを確認します。

また、現在の選択をタイトルと画像として表示します。

ポップアップボタンの構築は、実際にはプルダウンボタンの構築の延長です。

それらについては、メニューがボタンに割り当てられます。

メニューをデフォルトのアクションにするには、showsMenuAsPrimaryActionプロパティをtrueに設定します。

ポップアップボタンは、changesSelectionAsPrimaryActionプロパティをオンにするだけで、さらに一歩進みます。

必要なのはそれだけです。

それらはUISegmentedControlのように機能しますが、セグメント化されたコントロールに収まる選択肢が多い場合に便利です。

また、選択肢に固有の階層がある場合にも役立ちます。

このスタイルのボタンのいくつかの例が今日存在します。

たとえば、電話アプリはポップアップボタンを使用して、発信通話のSIMを切り替えます。

そして、ここでボタンはメニューを表示します。

セカンダリを選択すると、回線が切り替わります。

その結果、ボタンは新しい発信回線に更新されます。

ラベルと画像が更新され、新しい選択が表示されます。

同様に、Button Emporiumではこれを使用しています。

ボタンを閲覧しているときは、さまざまな色のボタンがあります。

色の数は選択できる固定セットですが、セグメント化されたコントロールには大きすぎるかもしれませんが、本当にインラインで変更したいほど小さいです。

これは、選択をボタンのタイトルにしたいので、ポップアップボタンの素晴らしい使い方です。

その後、すべての色の選択を提示することができます。

そして、新しい選択では、私たちのアプリは色の選択のために更新することができます。

そのコードを調べてみましょう。

ここでは、実際に更新できる簡単なプルダウンメニューを作成するためのコードがあります。

トグルボタンと同様に、changesSelectionAsPrimaryActionをtrueに切り替えます。

そして今、それはポップアップボタンです。

リストの最初の色だけでなく、特定の色をデフォルトの選択にしたい場合は、メニューを設定するときにその色を「オン」に事前に割り当てることができます。

これにより、デフォルトの選択になります。

常に正確に単一の要素を持つ現在の選択された要素についてボタンのメニューを尋ねることで、選択を確認できます。

また、コードで新しいものを設定する必要がある場合は、ボタンのメニュープロパティから要素の状態を変更するだけです。

ポップアップボタンはInterface Builderでも作成できますが、この場合、固定リストを使用する代わりにサーバーから色を動的に取得したいので、コードで行います。

Interface Builderで新しいボタンシステムとボタンタイプの使用の詳細については、「スタイルでインターフェイスを構築する」ビデオをご覧ください。

これらの新しいボタンタイプの最良の部分の1つは、Mac Catalystで自動的に動作することです。

Macユーザーは、プルダウン、ポップアップ、トグルボタンなど、ボタンが特定の方法で見え、動作することを期待しています。

これらのiOSボタンを使用すると、自動的にMacバージョンに更新されます。

ここでは、プレゼンテーションを通して使用してきたように、iPadアプリから選択したボタンがあります。これには、デフォルトのボーダーレスボタンと、新しい構成を使用するボタン、ポップアップボタンとプルダウンボタンが含まれます。

そして、Mac Catalystの手動変更はありません。

経験豊富なMacユーザーが期待する通りです。

プルダウンボタンとポップアップボタンのMacインジケーターを含む、標準のベゼルボタンがあります。

しかし、場合によっては、iPadボタンの余分なカスタマイズは、Macアプリでもより適切かもしれません。

そのため、ボタンは動作スタイルを自動のデフォルトからiPadに変更することをサポートします。

これは、先ほど作成したチェックアウトボタンのように、アプリ内の非常に目立つカスタムボタンに役立ちます。

Mac Catalystアプリの構築とカスタマイズの詳細については、「Mac Catalystの新機能」ビデオをご覧ください。

ポップアップボタンの例で気付いたかもしれませんが、機能の多くはUIMenuの新機能と既存の機能の上に構築されています。

UIMenuは、多くの素晴らしいインタラクションのために、UIButtonとUIBarButtonItemと本当にうまくペアになります。

ポップアップボタンとプルダウンボタンの両方を作成するために、ボタンの動作を調整する方法を検討しました。

iOSとiPadOSでは、これらの動作は視覚的なカスタマイズとは独立しているため、UIButtonConfigurationと簡単に組み合わせて、さまざまなボタンスタイルを作成できます。

これらのボタンは、より明確にするためにメニュー項目に字幕を持つ機能など、メニューの改善の恩恵も受けます。

さらに、iOSとiPadOSのサブメニューナビゲーションも改善され、メニュー内に階層を作成できるようになりました。

また、場合によっては、プルダウンボタンのサブメニューを単一選択メニュー自体として動作させたい場合があります。

これは、たとえば、アクションメニュー内に「ソートバイ」メニューがある場合に便利です。

新しいメニューの改善のいくつかは、これをはるかに簡単に作成します。

これは、コードのサブメニューを使用したカスタムプルダウンバーボタンアイテムです。

いくつかのアクションがあり、次に結果をソートするためのサブメニューがあります。

そのサブメニュー内のメニュー項目を手動でオンとオフにするのではなく、このサブメニューを作成するときに単一の選択用であることを示します。

これで、ポップアップボタンと同じ自動選択動作を取得しますが、サブメニュー内だけです。

選択した要素は1つだけ許可され、選択した要素はユーザーがタップすると更新されます。

ポップアップメニューで以前に行ったのとまったく同じ方法で、コードで更新またはアクセスできます。

また、メニューに独自のサブメニューがある場合、単一選択の動作が機能します。

サブツリー全体で一度に選択できる要素は1つだけです。

また、selectedElementsプロパティにはサブメニューの選択が含まれているため、サブメニューがないのと同じくらい簡単にアクセスできます。

だから、それがあなたのアプリでより良いボタンを作る方法です。

ボタンに構成を追加して、スタイリングをより詳細に制御し、プラットフォームとの一貫性を保ちながら、より豊かなスタイリングのロックを解除します。

また、既存のピッカーインターフェイスまたはコントロールをポップアップボタンまたはトグルボタンに置き換えて、より合理化されたインタラクションを得る方法も検討します。

これらの変更により、削除または簡略化できるUIButtonサブクラスが見つかる可能性があります。

また、システムはボタンをよりよく理解できるため、Mac Catalystの変換が自動的に向上します。

ご参加いただきありがとうございます。ボタンの世界を深く掘り下げて楽しんでいただければ幸いです。

[明るい音楽]。