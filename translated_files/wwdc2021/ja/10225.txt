10225

G'day。

「グループ活動でメディア体験を調整する」というセッションへようこそ。

私の名前はヘイデンで、ここアップルのグループ活動チームのエンジニアです。

今日は、ユーザーがデバイス間で一緒にコンテンツを見たり聞いたりできる同期メディアアプリを作成する方法について説明します。

目標は、ユーザーがどこにいても物理的に一緒にいるかのように感じることです。

GroupActivities APIは、共有エクスペリエンスを作成するためのSwiftフレームワークです。

再生調整とグループセッション管理のためのAPIを介して、メディアの調整を担当します。

また、iOS、iPadOS、macOS、tvOSなど、幅広いAppleプラットフォームでサポートされています。

同僚のモリッツに電話して、このトークに添付されているサンプルアプリからビデオを共有することで、GroupActivities APIのデモから始めましょう。

モリッツが空いているかどうか見てみましょう。

こんにちは、モリッツ！

ねえ、ヘイデン！

家に帰ってサンプルアプリを開きます。 

アップルパークのドローン映像のリストであることがわかります。

劇場の映像をモリッツに見せるつもりです。

それはどのように見えますか、モリッツ?あなたはそれを見たいですか?

それは素晴らしいですね。私は本当にそれが大好きです。

しかし、私が先週リングからアップロードした新しいものを見ましたか？

ああ、それは素晴らしく見えます!

私は再生を開始し、私たちのビデオは私たちのデバイス間で同期されます。

私が一時停止すれば、モリッツのためにも一時停止します。

そして、彼が前進すれば、それは私のためにも前進するでしょう。

すごそうだね。OK、ありがとう、モリッツ!

うん、それは素晴らしかった。さようなら、ヘイデン。

調整されたメディア再生アプリを作成する際に考える必要がある3つの主な部分があります。

まず、新しいGroupActivities APIを実装します。

2つ目は、ピクチャ・イン・ピクチャを活用して、あなたの経験をできるだけシームレスに共有する方法です。

そして第三に、私の同僚のモリッツは、再生調整の仕組みと新しい再生調整オブジェクトの機能を深く掘り下げます。

GroupActivitiesアプリのライフサイクルを見て、GroupActivities APIに慣れましょう。

ここでは、最初のデモと同じように、FaceTime通話に2台のiPhoneがあります。

私のデバイスは左側にあり、同僚のモリッツは右側にあります。

私のデバイスで、共有アプリを開きます。

その後、アプリでアクティビティをグループに共有します。

GroupActivitiesフレームワークは、アクティビティのセッションオブジェクトを作成し、それを私のアプリに配信します。

一方、セッションオブジェクトはモリッツに共有され、フレームワークは彼のデバイスで同じアプリを開くのを処理します。

最後に、フレームワークはモリッツのアプリをGroupSessionに渡します。

現在、同じGroupSessionで通信できるアプリが2つあります。

それでは、GroupActivitiesフレームワークを採用するために必要な手順を見てみましょう。

最初のステップは、メタデータとともにGroupActivityを作成することです。

では、GroupActivityとは何か、それをどのように定義するかについて話しましょう。

GroupActivityは、ユーザーが一緒に経験しているアイテムを表すSwiftプロトコルです。

これは、映画や歌のような単一のコンテンツになります。

エクスペリエンスを設定するために必要なプロパティをこのタイプに含める必要があります。

たとえば、ここにビデオのURLを含めると、セッションに備えてビデオを読み込むことができます。

フレームワークがネットワーク経由でデータを送信するためには、Codableに準拠しています。

これは、プロパティもCodableに準拠している必要があることを意味します。

必要なプロパティが2つあることに気づくでしょう。

ActivityIdentifierは一意の型識別子であるため、システムはこのアクティビティを参照する方法を知っています。

GroupActivityMetadataには、リモートデバイスのシステムUIでこのアクティビティを表示する情報が含まれています。

これは、今年Swift Concurrencyで導入されている新しい非同期効果のある読み取り専用プロパティ機能の例であることに気付くでしょう。

詳細については、今年のWWDCでのセッション「Meet async/await in Swift」を参照してください。

だから、あなたはグループアクティビティを定義しました。

次に、GroupActivityのアクティブメソッドを呼び出して、通話に共有したいと思っています。

GroupActivityを有効にすると、フレームワークはGroupSessionオブジェクトを作成し、ローカルデバイスとリモートデバイスの両方に配信されます。

システムはアプリの起動を担当し、システムUIはアクティビティのメタデータを表示します。

しかし、最初に、私たちが覆い隠した何かがあります。

あなたのアプリは、あなたがFaceTime通話中であることをどのように知っていますか?

そして、ユーザーがコンテンツを選択すると、グループに共有するつもりはなく、代わりにローカルで表示したい場合はどうなりますか?

PrepareForActivation機能は、システムがユーザーの意図を解決できるようにすることで、これらの問題を解決します。

prepareForActivation APIの例を次に示します。

スイッチステートメントには、処理する必要があるケースが3つあります。

最初のアクティベーション無効は、ユーザーがFaceTime通話に参加していない場合、またはシステムがローカルで消費することを決定した場合に実行されます。

2番目のactivationPreferredは、ユーザーがFaceTime通話をしていて、それをグループに共有したいときに取られます。

キャンセルは、ユーザーが共有アクションをキャンセルしたときに実行されます。

これはすでに、アクティビティを共有するGroupActivitiesアプリを作成するのに十分な知識です。

では、Xcodeにジャンプして、実際にお見せしましょう。

GroupActivitiesのサポートを追加する前に、プロジェクトを簡単に実行します。

映画を選択して視聴できるシンプルな映画鑑賞アプリです。 視聴アプリです。

視聴する映画のリストと、ビデオプレーヤーを表示する映画の詳細ページで構成されています。

今、このアプリでは一人でしか映画を見られないので、それを変えましょう。

グループアクティビティの資格が設定されていることに気付くでしょう。

そして、Movie.swiftにGroupActivityを追加します。

最初にすべきことは、GroupActivitiesをインポートすることです。

そして、GroupActivity、MovieWatchingActivityを追加します。

ムービープロパティがあり、そのプロパティを使用してメタデータを入力します。

今、この活動を共有しましょう。

CoordinationManagerに行き、prepareToPlay機能を見つけます。

現在、この機能はムービーをキューに入れることですぐに再生を開始します。

代わりに、これをスライドで示したprepareForActivation機能に置き換えます。

アクティベーション無効なケースですぐに映画をキューに入れるのを見ることができます。

そして、activate()は、ユーザーがFaceTime通話に共有したいときに呼び出されます。

トークの後半では、再生を開始するために映画をキューに入れますが、今のところ、アプリをそのまま実行するとどうなるか見てみましょう。

私はモリッツのデバイスをつかみ、2台のiPhoneの間でFaceTime通話を開始しました。

家に帰ってから、携帯電話でサンプルアプリを起動します。

先ほど見たリングのビデオを共有し、モリッツのデバイスでアプリを起動します。

グループアクティビティを受け取ったことがわかります。 

しかし、正しいビデオが読み込まれず、再生の同期もありません。

では、今、それをアプリに追加する方法を学びましょう。

グループアクティビティの受信について学ぶべき主なことは、GroupSessionオブジェクトとGroupSessionの受信方法、GroupSessions非同期シーケンスです。

これは、典型的なGroupSessionのライフサイクルを示す高レベルの図です。

ローカルデバイスとリモートデバイスの両方がグループセッションを受け取ります。

その後、アプリは再生に備えて設定する必要があります。

そして最後に、準備ができたら、グループセッションに参加してください。

GroupSessionは、グループアクティビティのデバイス間のリアルタイムセッションを表すオブジェクトです。

最新のグループアクティビティ、接続状態、セッションに接続されているアクティブな参加者のセットなど、セッションに関する状態を提供します。

すぐにわかるように、再生の同期にも使用されます。

GroupSession AsyncSequenceは、GroupSessionsをアプリに配信します。

アプリはGroupSessionオブジェクトを直接インスタンス化することはありませんので、これがGroupSessionsを受け取る唯一の方法です。

ローカルデバイスとリモートデバイスの両方で、このシーケンスから最新のGroupSessionを入手する必要があることに注意することが重要です。

AsyncSequenceは、前述のSwift Concurrencyトークで取り上げられています。

GroupSessions AsyncSequenceで待っているのは、コードで次のようになります。

GroupActivityがアクティブになると、システムはAsyncSequenceからawaitループにGroupSessionを返します。

GroupSessionを受け取ったので、それを使用して再生同期を設定する方法を学びましょう。

AVFoundationのこの最新リリースでは、AVPlaybackCoordinatorと呼ばれる新しいタイプが導入されています。

モリッツはトークの後半でこのオブジェクトに関する詳細情報を提供しますが、今のところ、同期再生を可能にするGroupSessionを再生コーディネーターに添付する方法を紹介します。

再生コーディネーターにアクセスする方法は、AVPlayerのplaybackCoordinatorプロパティです。

次に、groupSessionをコーディネーターに添付するには、 coordinateWithSession を呼び、GroupSession を渡します。

そして、それだけです。

ボンネットの下で、フレームワークはあなたのために再生調整とリアルタイムネットワーキングのすべての複雑さを処理します。

セッション管理への最後のステップがあり、それは最終的にセッションに参加しています。

当初、GroupSessionは接続されておらず、代わりに「待機中」状態です。

「join()」を呼び出すと、GroupSessionをグループに接続し、リアルタイム接続を開始し、グループ内の他のデバイスからメッセージを送受信できるようにします。

GroupSessionが正常に参加すると、再生の同期が開始されます。

このセッション管理コードをサンプルアプリに追加しましょう。

CoordinationManagerで、セッションの非同期シーケンスを待機ループに追加しましょう。

これは、ローカルまたはリモートデバイスからアクティブ化されたときに、アプリのGroupSessionsを提供することを忘れないでください。

このgroupSessionをCoordinatorManagerに保存して、変更をMoviePlayerViewControllerに伝播します。

設定したら、playbackCoordinator .coordinateWithSessionを介してセッションオブジェクトをAVPlayerに添付します。

その後、待機ループに戻って、セッションオブジェクトからムービーを取得します。

アクティビティはセッション中に変更される可能性があるため、コンバインパブリッシャーを使用してアクティビティを取得します。

次に、再生を開始するために映画をキューに入れます。

そして最後に、私たちはセッションに参加します。

GroupSessionを受信して再生を同期するコードを設定したので、デバイスでアプリを実行して、何が起こるか見てみましょう。

繰り返しますが、2つのデバイスはFaceTime通話中であり、最初のデバイスでは、サンプルアプリを開き、リングビデオを共有します。

モリッツのデバイスがグループアクティビティを受け取ったので、アプリを起動します。

そして今回は、両方のデバイスが正しいビデオを表示します。

次に、「再生」を押すと、再生同期が機能することがわかります。

そして、一方を一時停止すると、もう一方を一時停止します。

または、私は先に進むことができ、それは両方で先に進みます。

そして、再生は完璧に同期しています。

GroupSessionについて最後に注意すべきことは、セッションがどのように終了するかです。

グループセッションを終了するには2つの方法があります。

1つ目はleave()です。

これにより、ローカルユーザーがセッションから切断されますが、通話の残りの参加者のセッションはアクティブなままになります。

2つ目はend()です。

これにより、地元の参加者だけでなく、通話全体のセッションが終了します。

高度なGroupActivitiesアプリの作成の詳細については、次のWWDCセッション「グループアクティビティでカスタムエクスペリエンスを構築する」を参照してください。

GroupSessionのアクティビティを変更する方法、GroupSessionの状態を観察する方法、グループ間で任意のメッセージを送信できるGroupSessionMessengerなどの高度な機能を使用する方法について説明します。

私はそれを強くお勧めします。

ギアを切り替えて、ピクチャ・イン・ピクチャを活用して、ビデオGroupActivityの共有をできるだけシームレスにする方法を見てみましょう。

GroupActivitiesアプリでピクチャー・イン・ピクチャーが考える価値があるのはなぜですか?

さて、ピクチャー・イン・ピクチャーをサポートすることで、コンテンツは共有された直後に再生を開始できます。

ユーザーを現在のコンテキストから取り出さないため、再生を開始するために明示的なユーザーインタラクションは必要ありません。

これにより、ユーザーは追加のステップを節約し、コンテンツを共有するための摩擦のない体験が得られます。

ピクチャー・イン・ピクチャーの設定の詳細については、「AVKitによる直感的なメディア再生の配信」に関する2019年のWWDCセッションを参照してください。

しかし、ピクチャ・イン・ピクチャがGroupActivititiesとどのように機能するかにはいくつかのニュアンスがあるので、今それらを調べてみましょう。

GroupActivitiesフレームワークは、バックグラウンドでメディアアプリにセッションを配信し、アプリにピクチャ・イン・ピクチャを設定する機会を提供します。

GroupSessionがバックグラウンドで再生を開始できることを示している場合は、ピクチャ・イン・ピクチャを設定してから、通常のGroupActivitiesフローを通過する必要があります。

システムは、フルスクリーンでアプリを起動することなく、ピクチャ・イン・ピクチャでコンテンツの再生を開始するため、ユーザーはシームレスなエクスペリエンスを取得し、現在のコンテキストから外されることはありません。

しかし、場合によっては、ユーザーがアプリにサインインする必要があるか、ユーザーからの追加手順がないとコンテンツが利用できない場合があるため、ピクチャー・イン・ピクチャーを設定できないことがあります。

このような場合、GroupSessionは、アプリがフォアグラウンドをリクエストするためのAPIを提供します。

ピクチャー・イン・ピクチャに組み込んだもう1つの便利なことは、システムダイアログを介してGroupSessionの終了と終了を処理するため、ピクチャ・イン・ピクチャがアクティブなときにセッションの終了や終了を心配する必要はありません。

そして今、私はそれを同僚のモリッツに渡して、再生コーディネーターオブジェクトを深く掘り下げます。

こんにちは、私の名前はモリッツ・ヴィッテンハーゲンで、AVFoundationチームのエンジニアです。

ヘイデンは、複数のデバイスでの再生を自動的に同期させるオブジェクトとしてAVPlaybackCoordinatorを紹介し、デモで機能しているのを見てきました。

トークのこの部分では、コーディネーターが実際にボンネットの下で何をしているのか、そしてそれがあなたのコードとどのように相互作用するのかを解明します。

ほとんどの場合、コーディネーターがAVPlayerとどのようにやり取りするか、調整された再生のためにアセットを選択する方法、個々の参加者が一時的に調整を一時停止する方法に焦点を当てます。また、AVPlayerを使用していないときに調整を実装する方法についての簡単な洞察を提供します。

AVPlaybackCoordinatorは、デバイス間で再生状態を共有するオブジェクトであり、誰もコンテンツを見逃さないことを目標に、それらのデバイス間で再生開始を調整します。

コーディネーターには2つのサブクラスがあります。

AVPlayerPlaybackCoordinatorのインスタンスは、常に特定のAVPlayerに関連付けられ、すべてのリモート状態管理を処理します。

これにより、調整された再生に飛び込む最も簡単な方法になり、ここから始めることを強くお勧めします。

AVDelegatingPlaybackCoordinatorについてはあまり話しませんが、このサブクラスは、AVPlayerではない他の再生オブジェクトを制御する柔軟性を提供します。

デバイスの設定をもう一度見てみましょう。

残りの講演では、GroupSessionを通じてGroupActivitiesオブジェクトを表現します。

また、UIにAVPlayerItemを再生するAVPlayerが表示されると仮定し、これが新しいAVPlayerPlaybackCoordinatorが登場する場所です。

ヘイデンが先に示したように、コーディネーターのコーディネートウィズセッションに電話すると、2つのAVPlayerを効果的に接続し、それらはお互いに影響を与え始めます。

基本的なルールは、コーディネーターがトランスポート制御APIを傍受するので、レートまたは現在の時刻を変更するAPIです。

これらのコマンドを取り、他の誰かと調整する必要があるかどうかを把握し、適切なタイミングでAVPlayerで有効にします。

例を見てみましょう。 例を見てみましょう。

ここでは、ヘイデンと私は一緒にGroupSessionに参加しており、GroupActivityがどのURLをロードするかを教えてくれたので、同じAVPlayerItemをキューに入れました。

さて、私のデバイスがAVPlayerのレートプロパティを変更した場合、再生コーディネーターはそのコマンドを傍受し、プレーヤーが再生をすぐに開始することを許可しません。

代わりに、プレイヤーにWaitingToPlayAtSpecifiedRateのtimeControlStatusを入力するように求めます。

UIは通常、待機しているスピナーでこのtimeControlStatusを表します。

その後、コーディネーターはヘイデンのiPadにコマンドを送信します。

AVPlayerPlaybackCoordinatorはコマンドを受け取り、同様にヘイデンのAVPlayerにレートを変更して待機状態に入るように求めます。

コーディネーターは、コンテンツを見逃すことなく、全員が同時に再生を開始することを目標に、再生の準備をする時間を全員に与えます。

誰もが行くのが良いとき、すべてのデバイスが一緒に再生を開始します。

セッション内のすべてのコーディネーターは平等です。つまり、ヘイデンもコマンドを開始できます。

今回は彼に探してもらいましょう。

繰り返しますが、シークAPIは傍受され、コーディネーターは接続されたコーディネーターとコマンドを共有する間、AVPlayerを強制的に待機させます。

誰もがシークを完了するための時間が与えられ、すべてのデバイスが再び行く準備ができたら、全員の再生が再開されます。

AVPlayersが異なるアイテムをプレイしているとき、あなたは自分自身に尋ねるかもしれません。

そして答えは、コーディネーターは、両方のプレイヤーが同じコンテンツをプレイしている場合にのみ、他のプレイヤーに状態を適用するということです。

アイデンティティの概念については後で詳しく説明します。

今のところ、同じURLからアイテムを作成すると、コンテンツは同じだと思います。

つまり、アイテムAに対して送信したコマンドは、レシーバーがアイテムAもプレイしている場合にのみ適用されるということです。

そして、アイテムをBに変更すると、アイテムAからすべての状態が無視されます。

アイテムごとにコマンドを区別することで、参加者の安全な参加とアイテム間の移行が可能になるため、これを行います。

私の言いたいことをお見せしましょう。

これは再び私たちの例ですが、今回はヘイデンがすでにプレイしていることから始めます。

再生コーディネーターに参加して同じセッションに接続すると、ヘイデンと同じ現在のアイテムを再生していないため、AVPlayerには何も起こりません。

同じアイテムを作成しても、そのアイテムが私のプレーヤーで最新ではないため、影響はありません。

これは、私が他の誰にも結果をもたらすことなくアイテムを探すことさえできることを意味します。

アイテムがAVPlayerで最新になった場合にのみ、コーディネーターはその作業を開始し、適切な状態を適用しようとします。

ルールは、コーディネーターがある場合、常にグループ状態から始めることです。

そして、ヘイデンはすでにグループセッションでプレーしていたので、コーディネーターはアイテムをエンキューイングする前から私自身の構成よりも彼の状態を好みます。

これは、私のコーディネーターがヘイデンのデバイスと一致するようにAVPlayerとAVPlayerItemの任意の設定を上書きすることを意味します。

そして、それで、私たちは両方とも同じ状態にあり、一緒に遊ぶことができます。

アイテムの遷移でこれを繰り返しましょう。

二人ともアイテムAの終わりに近づくにつれて、私のAVQueuePlayerは次のアイテムをプレイする準備をしています。

通常、ヘイデンも準備することを期待していますが、この例では、ヘイデンのiPadがネットワークが悪く、次のアイテムをまだ読み込めないと仮定しましょう。

だから、今、私はアイテムAの終わりにいるので、私はすでにアイテムBをキューにしていて、それはプレイする準備ができています。

しかし、アイテムが最新ではないため、コーディネーターはまだ何もしていません。

私のプレイヤーが新しいアイテムに移行したときにのみ、コーディネーターは再び仕事をします。

そして今回は、アイテムBの既存の状態が見つからないので、私のプレイヤーが提案している状態を継続します。

コーディネーターはこの新しい状態をヘイデンと共有していますが、彼はまだアイテムAを表示しているため、影響を受けません。

しかし、彼が最終的に私のアイテムと一致するように移行すると、彼のコーディネーターは再び既存の状態を彼のプレーヤーに適用します。

そして、それで、誰もが再び同期して遊んでいます。

結局のところ、これが私の最初の行動喚起です。

アイテムの変更と輸送制御コマンドの順序に注意してください。

アイテムをキューに入れ、自動的に再生を開始する関数 beginPlayback があるとしましょう。

このコードは、ユーザーが再生するものを選択するたびに、またはGroupSessionが新しいアクティビティを通知するたびに呼び出されます。

最初に開始時間を求めることが重要です。同様に、アイテムがキューされる前にプレイヤーレートを変更して、初期設定が他の誰にも影響を及ぼさないようにします。

この順序で行う場合、再生コーディネーターは、私たちが最初であり、私たちの状態を他の人と共有する必要があるかどうか、または別の状態がすでに存在するかどうかを決定し、代わりに私たちの状態を上書きする必要があります。

また、トランスポート制御コマンドを監査し、グループ内の全員に影響を与えるかどうかを検討してください。

通常、API呼び出しは、再生UIから発信された場合、グループに影響を与えるはずです。

したがって、ユーザーが一時停止した場合、他の全員も一時停止する必要があります。

その場合は、通常どおりAVPlayer APIを呼び出すだけです。

では、再生UIから来ていない他のAPI呼び出しはどうすればよいですか?

通常、アプリがいくつかのシステムイベントに遭遇したため、これらは自動一時停止です。

このような自動一時停止は、通常、他の参加者に影響を与えないはずです。

ユーザーが他の人と一緒に遊んでいるような状況では、まずまったく一時停止しないことを検討する必要があります。

他の誰もがプレイし続けているので、一時的にコンテンツを見ることができないなど、何らかの欠点があっても、ユーザーはグループに固執することを好むことがよくあります。

一時停止する以外に選択肢がない場合は、2つの選択肢があります。最初にアイテムを削除するか、調整された再生サスペンションを開始します。この講演の後半で説明します。

再生コーディネーターの仕組みがわかったので、調整された再生のためのコンテンツについて話しましょう。

前に述べたように、アセットが同じURLから作成された場合、異なるデバイス上の2つのプレイヤーアイテムは同じであると考えています。

このデフォルトはうまく機能しますが、この動作を変更したい状況があります。

たとえば、アプリは、デバイスにコンテンツをダウンロードしてキャッシュする選択肢をユーザーに提供する場合があります。

したがって、アセットをローカルキャッシュにダウンロードし、ヘイデンがまだクラウドからコンテンツをストリーミングしている場合、同じURLを使用しなくなりました。つまり、再生コーディネーターは再生状態を同期させません。

同様に、URL表現がまったくないAVMutableMoviesまたはAVCompositionsの状態を調整するためのエキサイティングなユースケースを持っている人もいるかもしれません。

繰り返しになりますが、再生コーディネーターはここで何をすべきかわかりません。

この問題を解決するには、AVPlayerItemの識別子としてカスタム文字列を指定できます。

この文字列が存在する場合、コーディネーターはそれを使用して2つの項目が同じコンテンツを表すかどうかを決定し、URLを無視します。

これを行うには、AVPlayerPlaybackCoordinator DelegateプロトコルとそのplaybackCoordinator identifierFor playerItem機能を実装します。

コーディネーターは、プレイヤー内のアイテムをキューに入れるたびに、デリゲートに識別子を尋ねます。

再生コーディネーターが2つの項目が等しいと考えるときはいつでも、1つのデバイス上の時間が他のデバイスで同じ時間と一致することが重要です。

これは、サーバーによって再生ストリームに自動的に注入されるコンテンツに注意する必要があることを意味します。

したがって、ヘイデンと私が同じURLを要求しても、サーバーが私のストリームのみに広告を注入することを決定した場合、私が広告を再生するにつれてデバイスは同期し、ヘイデンはメインコンテンツを続行します。

この問題にアプローチする正しい方法は、広告やその他のインタースティシャルを別のプレーヤーに移動することです。

これにより、主な資産は影響を受けません。

今、私が広告に再生すると、私の電話は広告の期間中、別のプレーヤーに切り替わります。

そして、広告が終わると、コーディネーターは簡単に他の人のタイミングに再参加することができ、私たちは同期に戻ります。

HLSコンテンツを再生している場合、AVPlayerは新しいAVPlayerInterstitialEvent APIを通じてこれを手伝うことができます。

詳細については、HLSトークのダイナミックプレロールとミッドロールをチェックしてください。

要約すると、URLが正しい情報をカバーしていない場合は、カスタム識別子を使用してコンテンツを一致させます。

時間が誰にとっても同じであることを確認してください。

また、パーソナライズされたインタースティシャルをプレイしたい場合は、メインコンテンツが影響を受けないように、別のプレーヤーでプレイしてください。

そして最後に、ライブコンテンツを調整するときに日付タグを使用して、コーディネーターが正しいタイミングを他の人と共有できるようにします。

これまでのところ、私たちは誰もがずっと同期し続けることができる完璧な再生ケースだけを扱ってきました。

残念ながら、それは必ずしも可能ではありません。

ヘイデンと私が一緒に遊んでいますが、猫ゾロに餌をやるようにというアラームが鳴ります。

AVAudioSessionのルールでは、私のアプリは一時停止する必要があり、グループでプレイしている場合でも、これらのルールは引き続き適用されます。

しかし、私たちは私の一時停止が他の人に影響を与えることを望んでいません。

みんなの小さな一時停止をグループ全体に転送すると、あまりにも多くの迷惑が発生します。

だから、代わりに、ヘイデンのiPadが再生し続けることを望んでいます。

そして、アラームを閉じると、再生が追いつき、全員が再び同期して再生する必要があります。

では、このような行動をどのように実装できますか?

AVCoordinatedPlaybackSuspensionという新しいオブジェクトを使用します。

このような停止は、ある参加者のコーディネーターと他の参加者のコーディネーターの分離を表しています。

参加者はグループから分離されており、プレイヤーレートの変更やシークはもはや他の誰にも影響しません。

同様に、グループからのレート変更は、AVPlayerのレートや時間は変更されません。

この例では、アラームがまだ再生されている間にヘイデンが私のプレーヤーを起動できないことを意味します。

サスペンションには、自動サスペンションと自分で追加するサスペンションの2種類があります。

自動サスペンションは、プレイヤーが自動的に一時停止すると、AVPlayerPlaybackCoordinatorによって追加されます。

私たちはすでにオーディオセッションの中断の例を見ましたが、これは新しいAVPlayerインタースティシャルAPIを介してネットワークストールやインタースティシャルを再生することにも当てはまります。

再生コーディネーターによって追加されたサスペンションは、プレーヤーが再生を再開すると終了し、プレーヤーがタイミングを現在のグループ状態に一致させます。

私たちの例では、これは、アプリがアラームを却下することからの終了中断通知を処理した後、プレイヤーレートが1つに戻ったときに、自動的にグループに再参加することを意味します。

システムが調整された再生サスペンションを使用する方法の2つの例をお見せしましょう。

これは、リングのドローン映像を再生するサンプルアプリです。

前に話し合った割り込みの例を見てみましょう。

数秒でタイマーが鳴るように設定したので、それを待ちましょう。

ああ、行くよ。

これは私の左側のiPadを一時停止しましたが、ご覧のとおり、他のデバイスはまだ楽しく再生されています。

そして、タイマーを閉じると、左側のデバイスでの再生が前方にジャンプして他のデバイスに再接続し、完全に同期しています。

これは、システムがサスペンションを利用する唯一の方法ではありません。

AVKitは、スクラブ中にランダムなビデオフレームがみんなの前で点滅するのを防ぐためにそれらを使用します。

スクラブは、私がやり取りしているデバイスでのみ中間フレームを表示することにすでに気づいているかもしれません。

したがって、スクラバーに触れると、右側のデバイスは再生を続け、左側のデバイスはスクラブフレームを表示します。

スクラバーを手放すときだけ、新しい時間が他のデバイスと共有され、みんなの再生が再開されます。

これらは、システムがサスペンションを使用する方法の例です。

さて、自分でどのように採用するかを見てみましょう。

では、Xcodeに飛び込んで、実際にそれをやりましょう。

1人の参加者が見逃したものを再視聴できる機能を実装したかったとしましょう。

私たちが見ているドローンの映像には、特にエキサイティングな瞬間があったのかもしれません。

これまでに話し合ったすべてのコーディネーターの行動で、戻って再びプレイすることはすべての人に影響を与えます。

そして、これが正しいことかもしれないことを強調したいと思います。

ユーザーをできるだけ一緒に保つようにしてください。

しかし、すべての人を取り戻すことは選択肢ではないとしましょう。

だから、私たちが代わりに構築するのは、数秒で取り戻し、みんなとバックアップに参加するまで2倍のスピードでコンテンツを再生する方法です。

私はすでに、ユーザーが何かを見逃したことを示すために使用できるボタンをUIに追加しました。

MoviePlayerViewControllerでこの機能に接続されています。

それを埋めましょう。

これはちょうどプレーヤーのロジックです。

何時を探すかを把握し、取り戻し、プレイヤーレートを2に設定します。

追いついたら、レート1で再生を再開するだけです。

これまでのところ、再生コーディネーターがこれらのAPI呼び出しを傍受するので、これはすべて誰にでも起こります。

ここがサスペンションの出番です。

引き返す直前に、選手を他の人から引き離したい。

そして、コーディネーターの開始サスペンション機能でそれを行います。

理由が必要であり、その理由を提供するために、新しい文字列定数でReason構造体を拡張するだけです。

この場合、何が発生したのか。

これで、開始サスペンションコールでそれを使用することができます。

コーディネーターは現在停止されているため、プレーヤーのためだけに、安全にレートを探して設定することができます。

他の人と会う準備ができたら、コーディネーターにもう一度グループを聞くように合図する必要があるので、suspension.end()を呼び出します。

実際にはプレイヤーレートの変更はもう必要ないことに注意してください。

サスペンションを終了すると常に他の全員に再加入するため、プレイヤーレートの変更も現在のグループレートが何であれ変更されます。

さて、これを試してみましょう。

みんな一緒に遊ぶ。

リングへのアプローチのようなエキサイティングなイベントを見逃し、新しい出来事のボタンをタップします。

だから、ご覧のとおり、私が操作しているデバイスは、コンテンツを繰り返すためにジャンプします。

追いつくためにより速く再生されますが、他のデバイスは影響を受けません。

そして今、私たちはすでに再び完全に同期しています。

したがって、AVPlaybackCoordinatorのサスペンションを開始すると、そのプレーヤーをグループから分離し、他の誰にも影響を与えずにレート変更やシークを発行しても安全です。

停止を終了すると、グループの現在の時間とレートに再び加わります。

そして、このスライドの新機能では、サスペンションを終了するときに、オプションでグループに新しい時間を提案することができます。

これは、再生コントロールを手放したときにのみ、全員の時間を変更するスクラブサスペンションを実装する方法です。

これは、AVPlayerトランスポート制御コマンドが実際に他の参加者と共有されるときの概要です。

まず、ヘイデンがトークの冒頭であなたに示したように、グループセッションを通じてAVPlayerPlaybackCoordinatorを他の参加者に接続する必要があります。

第二に、AVPlayerの現在のAVPlayerItemは、他の参加者のプレイヤーアイテムと同じURLを持っている必要があります。

または、独自の識別子を提供する場合は、同じカスタム識別子を持っている必要があります。

アイテムがキューに入れられると、調整された再生停止を開始する場合を除き、すべてのシークとレートの変更がグループ内の全員に影響します。

そして、AVPlayerPlaybackCoordinatorの議論を締めくくるために、調整された再生に関連する他のAPIの簡単なツアーです。

1人のユーザーの停止中に他の参加者を待機させたい場合は、コーディネーターのsusbensionReasons ThatTriggerWaitingプロパティを使用してこれを設定できます。

これは、参加者が異なる長さの広告を持っている場合、誰もコンテンツを見逃さないように要求する方法です。

他の参加者の状態の詳細については、コーディネーターのその他の参加者のプロパティと対応する通知をご覧ください。

AVCoordinatedPlaybackParticipantは、特に上記のサスペンションReasonsThatTriggerWaitingを使用する場合は、UIに通知するのに役立つかもしれないsuspensionReasonsのリストを提供します。

コーディネーターがAVPlayerに待機を要求するたびに、それはプレーヤーのreasonForWaitingToPlayに反映され、新しいWaiting ForCoordinatedPlaybackの理由が反映されます。

他の参加者の状態に関係なく、待機をオーバーライドしてすぐに再生を開始するには、プレイヤーのplayImmediately atRate機能を使用します。

これにより、他の参加者がコンテンツを見逃す可能性があるので、このAPIを使用するときは注意してください。

AVPlayerには、新しいrateDidChangeNotificationもあり、別の参加者がいつそれを引き起こしたかなど、レート変更に関する詳細情報を提供します。

同様に、AVPlayerItemのTimeJumpedNotificationは、タイムジャンプが他の参加者に由来するかどうかも教えてくれます。

AVPlayerPlaybackCoordinatorでは使用できないAVPlayer APIがいくつかあります。

iOSのデフォルトのタイムピッチアルゴリズムは、以前は低品質のゼロレイテンシでした。

この値はiOS 15で廃止されました。

LowQualityZeroLatencyは調整された再生ではサポートされていないため、この非推奨の値にコードをリセットすることに注意する必要があります。

代わりに、他のアルゴリズムの1つを使用してください。

また、AVPlayerPlaybackCoordinatorでAVPlayerのsetRate(time:atHostTime:)機能を使用しないでください。これは、再生コーディネーターが外部起動同期と互換性のないプレーヤーのタイミングを担当することが不可欠であるためです。

AVPlayerについてのこのすべての話の後、AVPlaybackCoordinator、AVDelegatingPlaybackCoordinatorの2番目のサブクラスにすばやく入りましょう。

私たちが議論した多くの概念は、再生コーディネーターの委任に適用されますが、プレーヤーを観察する代わりに、委任コーディネーターは、再生状態に関する情報を提供し、再生オブジェクトに状態を自分で適用する必要があります。

カスタム再生オブジェクトのセットアップは、次のようになります。

UIは、下にある他のシステムレンダリングAPIの1つを使用するプレーヤーを制御します。

委任再生コーディネーターは、UIとプレーヤーの実装の間に収まります。

名前が示すように、AVDelegatingPlaybackCoordinatorでは、再生、一時停止、シーク、バッファリングのための再生コマンドを受信するデリゲートプロトコルを実装する必要があります。

プレイヤーに直接プレイコマンドを送信する代わりに、UIは最初にコーディネーターに伝えます。

コーディネーターは、再生オブジェクトの時間やレートを変更する前に、最初に他の接続されたプレイヤーと交渉する必要があるかどうかを決定します。

また、プレイヤーが新しい現在のアイテムに移行するたびにコーディネーターに伝え、コーディネーターがどのコマンドを送信するかを知る必要があります。

以前と同様に、項目は任意の文字列で識別されます。

コーディネーターがコマンドを送信すると、元のUIと受信者のUIに影響するはずです。

そして、プレイする時間になると、すべてのプレイヤーに同じように影響を与えるはずです。

再生オブジェクトをフォローさせ、コマンドのUIを適切に更新するのはあなたの責任です。

委任コーディネーターは、デバイスがすでに準備ができている場合でも、バッファリングを開始するように指示することがよくあります。

これは、コーディネーターがまだ他の接続された参加者を待っていることを意味し、あなたの側で何もすることがなくても、あなたのUIはそれを反映する必要があります。

最後の警告の言葉。

プレイヤーを一時的に一時停止して再開するルート変更などのイベントには注意してください。

要求されたタイミングに固執し、必要に応じてグループのタイミングを再適用するのはあなたの責任です。

何らかの理由で追いつくことができない場合は、停止を使用してコーディネーターにそれを伝える必要があります。

委任再生コーディネーターも自動サスペンションを追加しません。

これは、関連するシステムイベントの停止を自分で開始および終了する必要があることを意味します。

必要に応じて、AVFoundationが提供する理由を使用してください。

また、あるデバイス上の委任再生コーディネーターを別のデバイス上のプレーヤー再生コーディネーターに接続することは可能ですが、プレーヤー再生コーディネーターエンドでカスタム識別子を使用する必要があります。

締めくくりましょう。

調整されたメディア再生アプリを構築するには、GroupActivityを使用して再生するコンテンツを定義し、グループに提案します。

アプリが起動したらすぐにGroupSessionsを追跡して、ユーザーがFaceTime通話をしていて、一緒にプレイしたいときを学習します。

そして最後に、再生コーディネーターをGroupSessionに接続して、すべての人にコンテンツを同期させます。

ありがとう、そしてWWDCの残りの部分を楽しんでください。

[音楽]。