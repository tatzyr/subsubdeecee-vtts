10259

♪ ♪

こんにちは。

私の名前はカシア・ワワーです。

私はキーボードUIチームのエンジニアで、今日はキーボードレイアウトの素晴らしい世界へのガイドになります。

私は今日、フレームベースの過去から自動レイアウトの未来にキーボードをもたらすことについてあなたと話すことに非常に興奮しています。

私たちは新しいガイドについて話すことからツアーを始めます。

次に、キーボードをレイアウトに完全に統合するためにできる新しいことのいくつかについて確認します。

そして最後に、キーボードが本当に何であるかについて話します-哲学的に言えば、考慮すべきキーボードの種類、そしてあなたがすぐに考えないかもしれないいくつかのケースについて話します。

では、ツアーを始めましょう。

多くのことと同様に、これは古代の過去から始まります。

以前にアプリでキーボードで作業したことがある場合は、通知を登録し、通知の情報から適切なオフセットとアニメーションを導き、数学を行い、最後にそれを使用してレイアウトを調整することです。

今、通知が固執しています。

私たちはそれらを廃止していません。

興味があれば、2017年の「より良いテキスト入力体験への鍵」で、それらについてもっと学ぶことができます。

カスタムガイドで通知を使用する方法の簡単な例を見てみましょう。

さて、このコードを置き換えようとしているので、このコードをコピーしないでください。

しかし、iOS 15の前にキーボードを扱う方法は次のとおりです。

通知に応答するためのカスタムガイドとアンカーを作成します。

その後、適切な通知に登録します。

通常、少なくともwillShowとwillHideですが、時にはフレームの変更など。

次に、通知からフレーム情報を取得し、キーボードが画面から離れている場合は、自分のビューとセーフエリアガイドを調整していることを確認することで、上記の通知に応答します。

そして、通知からアニメーション情報を取得し、最後にガイドを一致するように変更します。

今、それはトンではありませんが、それはすぐに複雑になる可能性があります。

本日、自動レイアウトコレクションに新しく追加されたUIキーボードレイアウトガイドを発表できることを嬉しく思います。

さて、私たちがこれに飛び込むとき、あなたの興奮を抑制してみてください。

キーボードレイアウトガイドはiOS 15で真新しいです。

レイアウトガイドです。

既存のレイアウトのビューとガイドを制約できます。

レイアウトガイドに慣れていない場合、レイアウトガイドは、ビューを使用せずにレイアウト内のスペースを表す方法です。

それはビューと同じアンカーをすべて持っています。

キーボードレイアウトガイドは、レイアウトがそれを説明できるように、キーボードがアプリで占めるスペースを表します。

そして、それだけです!

ほとんど。

代わりにこれを使うために見たコードの更新について話しましょう。

これがその通知コードです。

まだコピーしないで、緑色のチェックマークを待ってください。

だから、今、あなたは先に進んで、あなたが追跡していたアンカーを取り除くことができます。

そして、レイアウトガイドからビューのkeyboardLayoutGuideに変更します。

そして、私たちはもう通知に登録する必要はありません。

そして、私たちも彼らに答える必要はありません。

そして、それだけです。

そのコードはすべて、この1行に帰着します。

実際にそれを見る準備はできましたか?

通知コードを使用するときにキーボードを表示すると、次のようになります。

そして、ガイドを使ってそれを持ち出すのはこんな感じです。

ローカリゼーション以外に、それらは事実上同じに見えたことに気づいたかもしれませんが、それがポイントです。

それほど多くのことをする必要はありませんし、同じ結果が得られます。

では、ガイドの更新について話しましょう。

それはUIビューのプロパティです。

そして、ほとんどの場合、ガイドのtopAnchorを使用するように更新するだけです。

このガイドは、引き上げや却下などのキーボードアニメーションと一致し、高さの変化にも続きます。

キーボードが背が高い時もあれば、短い時もあるからです。

しかし、ガイドは表示されるサイズに合うように適応します。

そして、キーボードのドッキングを解除すると、デフォルトでは、ガイドが画面の下部にドロップされ、ウィンドウの幅になり、トップアンカーに結び付けたものはすべて続きます。

セーフエリアのインセットを説明するので、もう心配する必要はありません。

基本的な使用のために、それはおそらくあなたが知る必要があるすべてです。

しかし今、私たちは楽しいことについて話すことができます。

なぜ私たちは通常のレイアウトガイドだけでなく、新しいクラスを使用することを選んだのですか?

さて、私たちはあなたが今までキーボードでできた以上のことができるようになりたかったのです。

私たちの次の目的地は、あなたのアプリへの完全なキーボード統合です。

なぜ私は「統合」と言うのですか?

さて、私は人々が避ける必要があるものとして、またはレイアウトと戦っているものとしてキーボードについて話しているのをよく聞いたことがありますが、キーボードはあなたのアプリの一部です。

UIキーボードレイアウトガイドの背後にある主な動機の1つは、開発者であるあなたに、ユーザーがテキストを入力するためのさまざまな方法に応答する機能を提供し、以前はできなかった方法で、キーボードをレイアウトの一部として完全に考えることです。

私はあなたがこれらの新機能をどのように活用するかを見て本当に興奮しています。

では、次の目的地として、キーボードレイアウトガイドが単なるレイアウトガイドではない理由は何ですか?

UIキーボードレイアウトガイドを使用すると、新しいプロパティを使用して、すべての化身でキーボードを完全にフォローすることができます: followsUndockedKeyboard。

デフォルトではfalseですが、trueに設定すると、ガイドはドッキング解除またはフローティング時にキーボードに従い、キーボードがどこにいてもレイアウトがどのように反応するかを詳細に制御できます。

底への自動ドロップはもうありません。

ドッキングを解除するときに非表示のキーボード通知を聴かないでください。

レイアウトガイドはキーボードがある場所です。

しかし、その情報を持つことは、レイアウトがさまざまなタイプのキーボードにどのように反応しているかをもっと意識する必要があるということです。

したがって、UIキーボードレイアウトガイドは、別の新しいレイアウトガイドのサブクラスです。UIトラッキングレイアウトガイドです。

画面を移動するときに変更したい制約を追跡するため、トラッキングレイアウトガイドと呼んでいます。

特定のエッジの近くにいるときにアクティブになり、それを離れるときに非アクティブになる制約の配列、および/または特にエッジから離れているときにアクティブになり、その近くにあるときに非アクティブになる配列を与えることができます。

これで何ができるかの例と、それを達成するために必要なコードを見てみましょう。 

これはテストアプリです。

私はテキストフィールドとキーボードに座ることができるいくつかのコントロールを持っています。

しかし、画面の上部に近づくと、画面から外れないように下部にドロップしてほしい。

そして、キーボードが左右に移動すると、UIの残りの部分を少しずらして、もう少しスペースを増やしたいです。

では、このすべてはどのように達成されますか?

私たちはここでいくつかのコードを見るつもりです。

次のスライドでは、editViewはテキストフィールドとコントロールを持つビューで、imageViewは画像ビューです。

さて、ここで識別子を使用する必要があることに注意してください。サンプルコードに表示されますが、これはスライドにより適しています。

垂直軸で起こっていることから始めましょう。

まず、editViewの下部をキーボードレイアウトガイドの上部に結びつける配列を定義します。

次に、ガイドが上から離れているときにのみアクティブになるように設定し、その近くにあるときに無効になります。

次に、キーボードがビューの上部に近づいたときに、必要な制約の別の配列を定義します。

したがって、キーボードレイアウトガイドの上部の代わりに、セーフエリアの下部を使用します。

ここに助けになるための簡単なビジュアルがあります。

これがガイドとeditViewです。

現在、トップから離れているので、a awayFromTopConstraintsはアクティブです。

しかし、ガイドを一番上に近づけると、aawayFrom制約が無効になり、nearTopConstraintsが有効になり、ビューの一番下に移動します。

頂上から離れると、その逆が起こります。

では、水平方向の動きを見てみましょう。

キーボードが前端と後辺の両方から離れているときは、editViewをキーボードの中央に配置したい。

imageViewもビューの中央に配置したい。

したがって、私はこれらの制約を定義し、先頭と末尾の両方から離れているときにアクティブになるように設定します。

では、エッジに近づいたときに何が起こるかを設定しましょう。

後縁にいるときに、editViewをトレーリングに移行し、リードに導きます。

では、まず、それを処理しましょう。

imageViewをキーボードの邪魔にならないようにしたいので、どちらかの端の近くにいるときは、キーボードの中心から反対側に移動し、キーボードが後縁にあるときに先頭につながり、その逆も同様です。

次に、適切なエッジに近づいたときにこれらをアクティブに設定します。

キーボードがその領域に渡るとアクティブになり、離れると無効になります。

そして、それだけです!

独自のレイアウトへの超高度なキーボード統合。

それがどのように見えるかをもう一度見てみましょう。 

私のeditViewがあります。

それはフローティングキーボードにとどまり、上に向かって移動すると、下に落ちます。

そして、私たちが左右に移動するにつれて、私たちが今話した調整が起こります。

かなりかっこいい！

次に、キーボードの「near」と「awayFrom」の意味について話しましょう。

ドッキングされたキーボードは、下部に近く、他の端から離れていると考えられています。

ドッキング解除とスプリットキーボードは、すべてのエッジから離れるか、上端に近づくことができます。

フローティングキーボードの場合、どのエッジからでも近くまたは離れていることができ、同時に2つの隣接するエッジの近くにいることさえできます。

これは、あなたが知っておくべきいくつかの潜在的に興味深い紛争につながる可能性があります。

さて、これはすべて、followingsUndockedKeyboardをtrueに設定した場合にのみ適用され、残りの話では、それが私たちが作る仮定です。

わかりました。最終ストレッチ:完全なキーボード統合のための考慮事項。

キーボードはキーボードです--そうでなくなるまで。

ドッキングされていないキーボードに従うことを選択した場合、考えるべき余分なことがいくつかあります。

では、レイアウトを設計するときは、どのようなことに注意を払うべきですか?

フローティングキーボードはすべてから離れることができることを常に覚えておいてください。

それがすべての端から離れている場合、あなたは正しくレイアウトされるのに十分な情報を持っていますか?

また、キーボードが下端から離れているとき、または上端に近いときにはどうなりますか?

キーボードのtopAnchorに結びついているものにも注意する必要があります。

なぜなら、それはそこに行くことができます!

だから、気をつけてください。

それを解決する方法は、キーボードが離れているときに制約を設定することです。ボトムエッジから、これらのビューをキーボードのtopAnchorからsafeAreaLayoutGuideの下部に移動します。

ユーザーはいつでもキーボードを動かすこともできるので、それが特定の場所であることを当てにすることはできません。

あなたもそれを心に留めておきたいと思うでしょう。

ここに珍しい標本があります:スプリットキーボード。

分割されたキーボードとドッキング解除されたキーボードは、上部に近づきすぎるまで、すべてのエッジから離れています。

ドッキングキーボードと同様に、常に先行と後続から離れています。

新しいことについて話しましょう。 について話そう

今年はカメラを使ってアプリにテキストを取り込む新しい方法があります。

それはまだキーボードなので、まだガイドを使うことができます。

通常のドッキングキーボードと同じですが、ほぼフルスクリーンにできる数少ないキーボードの1つです。

今年のカメラによるテキスト入力の活用の詳細については、「アプリのキーボード入力にカメラを使用する」をご覧ください。

新しいことを続けて、ハードウェアキーボードが取り付けられているときはどうですか?

さて、今年は新しく、もはや常に全幅ではないアダプティブショートカットバーがあります。

使用している言語とバーにあるボタンの数に基づいて幅が変わります。

以前は、常に画面の全幅でしたが、現在、ドッキングされていないキーボードに従っている場合は、実際にバーの実際の先頭と後続の端を使用できます。

それで、エッジでここでの話は何ですか?

これは常に底の近くにあり、通常の位置では、他の3つのエッジから離れています。

しかし、それは崩壊可能です!

折りたたむと、前縁または後縁の近くにあることもあります。

ちなみに、これはキーボードのwidthAnchorの使用に注意したいいくつかの理由の1つです。

それは非常に小さい場合も、画面の全幅の場合もかまいません。

さて、ツアーの最も楽しい部分に入りましょう:あなたが画面上の唯一のアプリではなく、ドッキングされていないキーボードに従っている場合はどうでしょうか?

まず、キーボードはアプリのスペースを離れることができることを覚えておいてください。

それが起こったとき、私たちはそれを却下されたかのように扱うつもりです。

第二に、アプリが最も狭い場合、上端と下端が再生されますが、キーボードがアプリの上にあるかどうかにかかわらず、先頭と末尾は遠ざかります。

また、ガイドは、画面上の唯一のものではない場合、キーボードのどの部分がアプリのウィンドウの上にあるかに合わせてサイズが設定されています。

私が何を意味するのかを示すために、いくつかのビジュアルを見てみましょう。

これはすべて、followsUndockedKeyboardがtrueに設定されている場合にのみ適用されます。

していない場合、ガイドは画面の下部、ウィンドウの全幅にあります。

フルスクリーンでキーボードが浮いて真ん中にあるとき、あなたはすべてから離れています。

awayFromの制約はすべて有効になり、近い制約はすべて無効になりました。

別のアプリが画面上にあるとき、あなたがより広いアプリであれば、キーボードがすべてから離れるのに十分な幅があります。

しかし、水平エッジに近づくには、移動量を減らす必要があります。

これは肖像画にも似ています。 

しかし、ハーフスクリーンでは、同じ場所のキーボードがあなたの最先端の近くにあり、ガイドはアプリの上にあるキーボードの一部にのみ一致するようにサイズになりました。

あなたが狭いアプリであるとき、ガイドは常にiPhoneやドッキングキーボードと同じ水平端から離れていると見なされますが、あなたはまだ上端の近くにいることができます。

そして、繰り返しになりますが、ガイドはアプリ上の一部のみを考慮するサイズであることに注意してください。

そして、キーボードをドッキングし、それが再びフルサイズになると、リード、トレーリング、トップからも離れています。

そして、繰り返しになりますが、レイアウトガイドが再びあなたのアプリの上にあるものに合わせてサイズが変更されていることに注意してください。

スライドオーバーアプリであれば、そのためにもサイズが変更されます。

前の例とデモコードでは、これはすべてうまく処理されるはずです。

あなたはこれらのシナリオのいずれかにいるかもしれないことを心に留めておく必要があります。

これで、アプリをキーボード統合の次のレベルに引き上げる準備が整ったはずです。

だから、キーボードレイアウトガイドを使ってください。

アプリが可能であれば、UIトラッキングレイアウトガイドの高度な機能を活用してください。

そして、最も重要なことは、キーボードのレイアウトをキーボードとの戦いや回避として考えているなら、代わりにそれをレイアウトに統合することを考え始めてください。

そして、あなたがすでにそのように考えていたなら、今、あなたはあなたの完全なビジョンを実現するためのさらに多くのツールを持っています。

それは私たちのツアーの終わりに私たちをもたらします。

終了する前に、すべての個人的なアイテムを持っていることを確認し、ギフトショップを訪問することを忘れないでください、そして素晴らしいWWDCを持っています。

[エーテルパーカッション音楽]。