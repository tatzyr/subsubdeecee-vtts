10221

♪ベース音楽の演奏♪

♪

トーマス・ナウデ:こんにちは、WWDCへようこそ。

私はアップルのローカリゼーションチームのトーマスです。今日は、ローカライズされた文字列を合理化する方法を紹介します。

アプリを多くの言語で動作させる最も簡単な方法が表示されます。

UIコードを書くことから始めます。

次に、ターゲットの文字列を整理する方法を見ていきます。

その後、Xcodeに私たちのために重い作業をさせます。

最後に、高度な弦の新しいテクニックを学びます。

これらすべてで、私たちはあなたのアプリが素晴らしい翻訳のために準備ができていることを保証します。

テキストは私たちの生活のどこにでもあるので、これは非常に重要です。

私たちは、現実世界でコミュニケーションを取り、情報を得るためにテキストを使用します。

それは明らかに、私たちが毎日読むすべてのアプリ、通知、記事で私たちの接続されたデバイスでより真実です。

これまで以上に、テキストが読みやすく、正確で、アクセスしやすいことが重要です。

これらすべての看板の中で小さな店を見つけようとして、この通りで完全に迷子になっていることを想像してみてください。

アプリのユーザーでも同じかもしれません。

テキストはそのようなコア機能であり、ユーザーを導き、親しみやすさをもたらします。

このようにして、アプリのローカライズは、特にApp Storeが提供するすべての市場で、世界中のすべてのユーザーにリーチする機会です。

開発者として、私たち開発者は物事に名前を付けることを楽しんでいるので、あなたはすでにテキストに精通しています。

私たちはテキストを「文字列」と呼びました。

タイトル、ボタン、ユーザーコンテンツ、オンラインコンテンツ、検索クエリ、グラフィック、アクセシビリティラベルなど、文字列はどこにでもあります。

アプリ内のすべての文字列を映画の字幕として考えてください。

あなたが見る映画では、すべての字幕を適切な言語で、適切なタイミングで、適切な文脈で、映画全体を通して一貫していることを望んでいます。

これはここでもまったく同じです。

あなたの文字列は、あなたのビジュアルコンテンツに意味を伝え、ユーザーがあなたのアプリの通りをナビゲートするのを助けます。

それでは、開発者の観点から、ローカリゼーションプロセスが何であるかを見てみましょう。

ユーザーインターフェイスは、ビューに文字列を表示します。

これらの文字列は独自のファイルにあります。

これは、すべての言語に一般的なビジュアルコンテンツと特定の翻訳との間の懸念を分離するのに役立ちます。

その間に、Foundationフレームワークはユーザーインターフェイスとすべての文字列をリンクします。

この講演では、これらの各コンポーネントについて詳しく説明します。

それは多くのように見えますが、私たちはすべてを段階的に明らかにします。

では、ユーザーインターフェイスで文字列を定義することから始めましょう。

最新のAppleテクノロジーを組み合わせることで、ローカライズされた文字列を簡単に表示できます。

二度とローカリゼーションについて二度考える必要がないように、アプリでこれらのテクニックを使用することをお勧めします!

さて、UIで定義した文字列はローカライズする必要があります。

目に見える文字列には2つのタイプがあります。

1つは、ビューを作成するときに直接定義されます。

ここでは、SwiftUIとStoryboardでラベルを定義しました。

そして、はい！どちらもローカライズ可能です。

簡単だって言ったでしょ！

2番目のタイプの文字列はより一般的で、SwiftUIのモデルコードだけでなく、AppKitやUIKitでも見つけることができます。

文字列を変数に格納するか、関数から返す必要があるかもしれません。

これらすべての場合、NSLocalizedStringを使用できます。

iOS 15とmacOS Montereyの新機能では、Swift、String(localized:)の洗練された方法を使用できます。

少しの間、SwiftUIの最初の方法に焦点を当てましょう。

インターフェイスに提示するものはすべて確かにビューであり、これがテキストラベルであろうとボタンであろうと、デフォルトではすべてローカライズ可能で、将来の翻訳された文字列をホストする準備ができています。

これはデフォルトで有効になっているため、プレビューなどのモックコンテンツがある場合は、逐語を使用してオプトアウトしてください。

これにより、翻訳者にとって不要な作業を回避できます。

この関連セッションでは、より多くのテクニックを学ぶことができます。

基本をカバーしたので、この文字列をよりダイナミックにする方法を学びましょう。

現在、注文するためのローカライズされたボタンを表示しています。

あなたは私がコンサートを愛していることを知らないかもしれません、そして私はアーティストが友達と一緒に暮らすのを見るのがもっと好きです!

このアプリでは、友達全員にチケットを何枚注文しているかは明らかではありません。

だから、私が選択したチケットの数を含めるようにそのボタンを改善しましょう。

それは簡単でした。

Swiftで慣れているように、文字列に変数を挿入しました。

ここでは、カウントは実行時に実際の数3に置き換えられます。

すべてのオプションを見たので、共通の落とし穴を呼び出したいと思います：文字列（フォーマット：）。

(Format:) の文字列は素晴らしいですが、ローカライズされた文字列に使用することを意図していません。

テキストの方向と数字が異なる可能性があるアラビア語の例で理由を見てみましょう。

良いニュースは、String(localized:)を使用すると、両方とも自動的に管理されることです。

これで、「3」という数字は、設定のユーザーの好みの数字に従って、ボタンにアラビア語で正しく書かれています。

String(localized:)は、複数形と文字列の各部分の分離もサポートしています。つまり、単語は双方向テキストでシャッフルされません。

最後に、変数を過剰に使用しないように注意してください。

文字列を接着するのは便利ですが、翻訳の問題につながる可能性があります。

ここでは、「注文」という言葉は、今すぐ注文するか、後で注文するかにかかわらず、いくつかの言語で異なって書くことができます。

2つの別々の文字列を使用する方が安全です。

わかった。私が今まで密かにあなたから隠していたことを私たちが見る必要がある1つの主要な、最後の側面があります。

あなたが定義した文字列は、あなた以外の誰かによって翻訳される必要があります。

翻訳者は、文字列を文字列ごとに翻訳している間、目の前に完全なアプリUIを持っておらず、すべての文字列で一貫性を保つ必要があります。

だから、コードコメントを追加して同僚があなたのコードを理解するのを助けるのと同じように、あなたは彼らを助ける必要があります。

文字列に関係なく、常にコメントを定義する必要があると主張します。

そして、ストーリーボードのファイルを忘れないでください。IDインスペクタにコメントフィールドがあります。

翻訳者を助けるためのヒントをいくつか共有しましょう。

まず、コメントは文字列が表示されている場所を説明する必要があります。

例えば、これはボタンですか?ラベル？ボイスオーバーのテキスト？

これがアクション - 命令 - またはステートメント - 注文 - を知ることは重要です。

第二に、彼らは文脈を説明するべきです。

注文を押すと、取引を完了しますか、それともリストを並べ替えますか？

最後に、コメントは変数を説明する必要があります。

ローカライザーがあなたの文字列を見ると、あなたのコードが表示されないので、手がかりを得るために変数の名前が表示されず、代わりに一般的なプレースホルダだけです。

では、ここでの最後の例では、「注文」の前の数字は何を表していますか?

これは過去の注文数ですか?

注文したばかりのチケットの数は？

はい！コメントのおかげで、私はそれがチケットの総数であることを知っています。

多くの言語の翻訳者は、「チケット」という言葉の性別に応じて正しく翻訳することができます。

時には、最も簡単なのは、コメントに変数の例の値を書くことです。

それを念頭に置いて、そこにあります。

UIコードはローカライズの準備ができています。

次に、UIコードを文字列とは別に維持する方法を学びます。

基本的には、弦が住む場所を整理することができます。

これを行うには、Foundationがコードが正しいローカライズされた文字列ファイルをロードすることを確認する方法を見てみましょう。

もちろん、ローカリゼーションは言語から始まります。

プロジェクト設定に移動して、新しいものを追加できます。

Xcodeを見てみましょう。 では、Xcodeを見てみましょう

プロジェクトを選択し、プラス(+)ボタンをクリックしてローカリゼーションを追加します。

メニューは最新バージョンで多くの新しい言語を獲得したことがわかります。

見てみましょう...ローカリゼーションのアプリリストでは、一番上のBaseで始まります。

実際、UI要素は言語間で共有されているため、ここに住んでいます。

たとえば、Storyboardファイルは共有され、Siri Intentsファイルも共有されます。

その後、ベースに追加する必要があります。

したがって、すべての共有アセットの「ローカライズ」ボタンをクリックしてください。

わかりましたが、一方、あなたの文字列は共有されていません。

文字列は1つの言語に属します。

だから、あなたの弦は英語で、すべての弦はアラビア語になります。

特定の言語の文字列でアプリをテストするには、SwiftUIでプレビュー環境を変更するか、アプリスキームの設定を変更することができます。

デバイスがアプリがサポートしていない言語の場合、Foundationは最良の選択肢を見つけようとします。

私の電話がメキシコスペイン語の場合、財団はラテンアメリカのスペイン語、次にスペイン語、そしてあなたのアプリ開発言語、例えば英語にフォールバックしようとします。

最後に、文字列がサーバーから来る場合は、ユーザーの優先言語を尊重するようにしてください。

すごい。

私たちは、各言語が文字列のコレクションを持っているのを見てきました。

これらの文字列は、「テーブル」と呼ばれるファイルにさらに整理できます。

この機能を使用して、すべての文字列を好きなように整理できます。

たとえば、各機能、または各画面のテーブルを持つことができます。

これはデフォルトではオプションであるため、すべての文字列はLocalizableという名前のテーブルに置かれます。

具体的には、これはすべての文字列がLocalizable.stringsという名前のファイルに格納されていることを意味します。

これまでに学んだことを要約する例を見てみましょう。 これまでに学んだことを要約しましょう。

変数、カスタマイズされたテーブル名、コメントを含む文字列を宣言する次のコードがあります。

私のアプリがフランス語をサポートしているとしましょう。

Xcodeでは、英語からのフランス語翻訳を含むUserProfile.stringsファイルが必要になります。

慣習によって名付けられたフランスのリソースフォルダ、fr.lprojに保存されます。

そのコメントはフランス語の翻訳者にとってとても役に立ちました。

彼らはフェミニンを「場所」としてマークするために「e」を使用しました。チケットのフランス語はフェミニンです。

物事を少し盛り上げて、バンドルについて話しましょう。

このパラメータを使用すると、ターゲット間で文字列をロードできます。

バンドルパラメータはデフォルトでメインです。

あなた自身のアプリでは、それは必要ありません。

メインはそのアプリです。

アプリ拡張機能では、メインは独自の拡張機能を指すので、それも必要ありません。

しかし、アプリとその拡張機能の間で文字列を共有したいとしましょう。

拡張機能では、メインアプリのバンドルを提供する必要があります。

そうすることで、2つの間の文字列の重複を回避できます。

フレームワークから文字列を取得することもできます。

その場合、アプリコードでバンドルを指定してフレームワークの文字列を直接タップするか、フレームワークが直接使用できる変数を提供します。

これらのローカライズされた文字列変数は、フレームワーク独自のバンドルを指定することで、フレームワークで定義されています。

モデルを振り返ってみると、今だけそれを更新して、アプリがフレームワークによって提供された文字列を読み込むようにします。

フレームワークは文字列を定義し、翻訳が文字列ファイル内の独自のバンドル内に格納されていることを財団に通知します。

このパラメータがなければ、文字列は代わりにホスティングアプリから取得され、見つかりません。

実際には、このように見えます。

テキストが保存されているバンドルを提供します。

フレームワークは、独自のバンドルに文字列を探します。

そうすれば、あなたのアプリは簡単です。

この文字列は、単純なコード行で使用できます。

さらに、この方法でフレームワークにローカリゼーションを実装する場合、「完了」を含むここに表示される文字列ファイルを作成する必要さえありません。では、その理由を見てみましょう。

文字列を宣言して整理するために、コードでできることはすべて見てきました。

しかし、私たちはあなたの翻訳を保持するファイルを実際に作成する方法を見ていません。

実際には、これらの文字列ファイルを作成する必要がないことがわかりました。

Xcodeは、すべての.stringsファイルを作成できます。

エクスポートローカリゼーションを使用すると、コードを読み取り、すべての文字列を抽出します。

文字列ファイルを維持する必要がないので、これは素晴らしいことです。

UIでコーディングしたばかりの文字列をローカライズするのを忘れていた場合、これはあなたのためです。

あなたが「ゲンストリング」に苦労しているなら、これもあなたのためです。

今年、Xcode 13では、Swift文字列抽出のコンパイラサポートを追加しました。

また、ワークスペースは完全にサポートされるようになりました。

これにより、ロジックと翻訳の間の懸念がさらに分離されます。

Xcodeは、以前に見たSwiftとFoundationのメソッドからテキストを検出して抽出します。

これらのAPIをラップするカスタムコードがある場合、これはデフォルトでは機能しませんのでご注意ください。

通常、メソッドやマクロを使用する必要はありませんが、本当に必要な場合は、ローカライズされた文字列マクロ名の下のビルド設定に追加できます。

残りについては、Xcodeは、Info.plistで定義されたアプリ名とプライバシーの説明、および一般的にXcodeのインスペクタでローカライズされたすべての資産をローカライズするために抽出します。

既存のローカリゼーションがある場合は、すでに新しいUIのXcodeのエクスポートに移行できます。

新しい文字列は既存のファイルに自動的に追加されます。

これは、自分のペースでプロジェクトを変換したい場合に最適です。

ボーナスとして、UIテストのスクリーンショットが含まれるようになりました。

ローカライザーは、文字列があるコンテキストを取得するのに最適で、App Storeでアプリのローカライズされたスクリーンショットを紹介するのは素晴らしいことです。

さて、Xcodeはすべてのローカリゼーションカタログを抽出したので、今度は翻訳者が働く番だと思うでしょう。

実は、君もできるよ！

Xcode 13の新機能で、エクスポートされたローカリゼーションカタログは、Xcodeで直接表示および編集できます。

生成された各ファイル（各テーブル）を左側のバンドルで見ることができます。

そして、あなたの選択のために、あなたは含まれているすべての文字列、画像、およびファイルを見ることができます。

文字列をフィルタリングしたり、並べ替えたり、コメントやスクリーンショットを見たり、翻訳したりすることもできます!

これは、独自のアプリを開発して翻訳する場合に非常に便利です。

文字列を自分で確認してバグ修正することもできます。

翻訳者が翻訳された文字列カタログを返送するときは、Xcodeの製品メニューを使用してプロジェクトにインポートできます。

そしてブーム！文字列ファイル、stringsdicts、およびその他のアセットが作成され、更新されます。

コマンドラインに相当するものを使用して、継続的インテグレーションシステムで自動エクスポートとインポートを実行できます。

定期的に呼び出すことで、プロジェクトは最新の文字列を取得し、新しいUIを翻訳する迅速なターンアラウンドを取得します。

今年のセッション「SwiftUIアプリをローカライズする」で、強化されたワークフローの動作を確認し、入門セッションで詳細を学ぶことができます。

それでおそれ！

あなたは、あなたのアプリで弦がどのように生まれ、生きているかを目撃しました。

最後に、より複雑な文字列を扱う方法を紹介します。 より複雑な文字列を扱う方法を紹介します。

そして、あなたは私たちが店に持っている新機能を気に入ると確信しています。

素晴らしいものから始めましょう!

ローカライズが組み込まれるように、アトリビュート文字列を改善しました。

Markdown構文のサポートで可能になりました!

フォーマットを失うことなく、文字列をローカライズできるようになりました。

1つの単語を太字にするだけで、危険なキャラクター操作はもうありません。

そういえば、ここではアスタリスクを使って「完全」に重点を置いています。「ファンデーションの新機能」をチェックして、リンク、強調、モノスペーステキストなどを追加する方法を学ぶことをお勧めします。

コードで定義した1つの文字列には、文字列ファイルに1つの翻訳があることがわかります。

しかし、時には文字列が複数の表現を持つ必要があります。

これは、定義したルールに適応する文字列のコレクションであるstringsdictファイルで可能です。

例えば、いくつかのチケットを注文したい例を覚えていますか？

英語では、複数のチケットがあり、1枚のチケットに「s」がない場合は、接尾辞として「s」を追加します。

コードをシンプルで正しい状態に保つには、stringsdictを使用してこの複数のルールを定義する必要があります。

アプリをローカライズすると、これらのルールは言語ごとに異なるからです。

ロシア語のケースのいくつかを見てください。

あなたはコードでそれに対処したくありません、それはむしろローカリゼーションが対処すべきものです。

それをどのように実装するか見てみましょう。

コードの変更は必要ありません。上記の既存のコードを引き続き使用します。

まず、あなたのために作られている文字列ファイルと比較して、stringsdictは手動オプトインです。

したがって、Xcodeテンプレートを使用して作成し、インスペクタで「ローカライズ」をクリックしたことを確認してください。

さて、それはすべてあなたがコードで定義した文字列から始まります。

コードに複数の複数の文字列がある場合は、それぞれにこのルートエントリを追加できます。

内部では、提示された実際の値を定義します。

この値は、検索置換メカニズムに従います。

この例では、「チケット」という名前のトークンを1つ定義しました。

それは完全な最後の文字列を保持します。

トークン内にほとんどのテキストを含めるのが最善ですが、翻訳者がプレフィックス、サフィックスを追加したり、複数の変数がある場合にトークンを移動したりする必要がある場合、そのフィールドはローカライズ可能になります。

OK、そのトークンはコードの1つの変数によって異なります。

では、そのチケットトークンを定義しましょう。

まず、いくつかの複数形化を行っていることを確認するだけです。

次に、変数がCスタイルのフォーマッタdを持つ数値であることを示します。

そして最後に、複数のルールを書くことができます。

英語では、必要に応じて、ルール「1」と「その他」と「ゼロ」を宣言することができます。

エントリごとに、チケットトークンの実際の価値を書きます。

その後、チケットが3枚ある場合、英語では「other」を使用し、「Order 3 Tickets」が生成されます。

%Dを数字の3に置き換えます。

言語により多くのケースが必要な場合は、心配しないでください。

Xcodeはエクスポート時にそれらを追加します。

ロシア語では、既存のものの上に「少数」と「多く」が追加されます。

それでおそれ！

私たちの文字列は実行時に複数形になります。

先に進む前に、1つのケースを呼び出したいと思います。

Stringsdictは複数形に使用する必要がありますが、数字を含む文字列を対象としています。

私たちは以前、英語の単数形の「one」のケースを見ました。

確かにロシア語でもナンバーワンですが、21、31などにも使われています。

その場合、1つだけに等しいだけなので、stringsdictを使用することは正しくありません。

この例では、複数形はこれ、両方、またはすべてによって異なります。

番号はありません。stringsdictは使用しないでください。

すべての友人のために21枚のチケットを予約すると、ロシア語で「すべてのチケットを注文する」ではなく「このチケットを注文する」と想像してみてください。

私はあなたに「私のお金はどこにありますか？」と尋ねます。

代わりに、すべての言語で3つの文字列のそれぞれを正しく複数形にするために、このシンプルだが効果的なif/elseを使用してください。

そして、それは複数サポートでしたが、stringsdictは文字列のより多くのバリアントタイプを処理できます。

詳細については、関連するセッションをご覧ください。

これは素晴らしいことですが、私たちはあなたにもっと簡単な方法を提供したかったのです。

はい、財団は今年あなたのために文法のやり方を学びました!

属性文字列にMarkdownサポートを追加すると、infect属性でこの新しい形式を使用すると、このボタンのように実行時に適切な値が計算されます。

これはiOS 15とmacOS Montereyの素晴らしい新機能で、現在一部の言語で利用可能です。

より多くの制御が必要な場合は、stringsdictを使用できます。

私たちは複数のサポートを追加するのをやめませんでした。

私たちは、ソフトウェア文字列をより包括的にしたかった。

例えば、アプリがユーザーを歓迎するとき、それは英語ではかなり簡単です。

しかし、ユーザーの住所条件に依存するため、スペイン語ではありません。

これまでは、パーソナライズされていない文字列を提示しなければなりませんでした。これは正しいですが、ほとんどのスペインのユーザーには高尚です。

文字通り、「私たちはあなたを歓迎します。」

では、ユーザーのために文字列をパーソナライズできるとしたらどうでしょうか?

私たちの新しいマークダウン表記法で、あなたは今それを行うことができます!

文字列は、デバイスの言語設定で選択したアドレスの用語に従います。

したがって、女性で言及されたいユーザーのための「Bienvenida」、男性的な「Bienvenido」、そして私たちが知らない場合は、既存の抑揚の代替手段を使用します。

複数形とアドレスの用語のインライン抑揚は、コードまたは翻訳のいずれかで定義できます。

私たちは、選択した言語へのこの新しい追加に非常に興奮しており、あなたのアプリがそれを使用するのを見るのが待ちきれません。

最後に、私たちは今日、ローカライズ可能な文字列を書くことができるすべての方法を見ました。

しかし、データを提示したい場合は、実際にフレームワークにそれらを書かせるべきです。

当社のフォーマッタは、言語と地域の何百もの組み合わせ、およびさまざまなタイプとユニットを処理します。

だから、ハードコードしないでください。ハードワークをしましょう。

そして、今年からSwiftでフォーマッタを採用することがこれまで以上に簡単になりました。

文字列補間でインラインで使いやすくしました。

今年の「ファンデーションの新機能」をチェックして、新しいお気に入りのAPIを見つけて、今日見たすべてのものの詳細を入手してください。

以前のリリースに展開する必要がある場合や、フォーマッタの詳細が必要な場合は、昨年のセッションを確認してください。

さて、今日取り除いてほしいのは、最新のAPIを使用してコードを書くと、Xcodeがすべての文字列を生成するということです。

バンドル間で文字列を整理する方法を見て、文法と書式設定を簡単にするための新しいAPIを発見しました。

これらすべてのテクニックに従えば、新しい言語を追加すると、コードの変更は必要ありません!

最後に、常にテストします。

文字列のローカライズにどれだけの労力を費やしても、アプリをテストして、すべての言語でうまく動作することを確認する必要があります。

それで、あなたの完全にローカライズされたアプリでコンサートを予約するのが待ちきれません。

WWDCの残りの部分を楽しんでください、ご覧いただきありがとうございます。

♪