10049

♪ベース音楽の演奏♪

♪

ダニエル・リー：「ウィジェットにインテリジェンスを追加する」へようこそ。

私の名前はダニエルで、アップルのプロアクティブインテリジェンスチームのエンジニアです。

このセッションでは、ウィジェットがシステムと連携してユーザーにインテリジェントなエクスペリエンスを提供し、ウィジェットが必要なときに表示できるようにする方法を紹介します。

ウィジェットは多くの場所に住んでいます。

iOSのホーム画面からmacOSの通知センターまで、ウィジェットは一目ですばやく表示できる情報をユーザーに提供します。

iPadOS 15では、ウィジェットはiPadのホーム画面にも表示されます。

あなたのウィジェットが家を呼び出す場所がこれまで以上に増えました。

まず、ウィジェットがシステムでインテリジェントであることの意味について話し、次に、利用可能なAPIで関連情報を寄付することで、ウィジェットのインテリジェンスを有効にする方法を紹介します。

まず、ウィジェットのインテリジェンスについて見てみましょう。

iPhoneとiPadでは、ウィジェットをスマートスタックにまとめて配置し、スクロールしてさまざまな種類の情報を1か所で提供できます。

ユーザーがスタックを編集すると、ウィジェットを追加、削除、または並べ替えることができるだけでなく、スタックのインテリジェントな動作を表示および管理することもできます。

iOS 14では、スマートローテーションが導入されました。

スマート回転により、システムは適切なタイミングで、すでにスタックにあるウィジェットに自動的にスクロールできます。

ウィジェットに回転するタイミングを知るために、システムはウィジェットがタイムラインエントリと一緒に提供する関連性信号を使用します。

また、ユーザーの行動のパターンを学習することで、ウィジェットに回転させることもできます。

これは、ユーザーがウィジェットに対応する情報を表示するたびに、アプリから寄付を受け取ることによって行います。

スマートローテーションでは、スタックに天気ウィジェット、リマインダーウィジェット、カレンダーウィジェットがある場合、天気ウィジェットは、朝起きたときに自分自身を提案するようにシステムに指示して、その日の概要を説明するかもしれません。

9時30分に、カレンダーウィジェットは私が10時に会議があることをシステムに伝えるかもしれないので、私のスタックはカレンダーに回転するかもしれません。

午後、私のリマインダーの1つの期限は午後3時なので、ウィジェットはスタックにリマインダーに回転するように指示するかもしれません。

そして夕方には、天気ウィジェットは雨が降り始めたばかりなので、再び天気を表示するようにシステムに指示するかもしれないので、夕食に出かける場合は傘を持っていくことを知っています。

iOS 15では、ウィジェットの提案と呼ばれる新機能が導入されています。これは、ユーザーがウィジェットを発見し、積極的で関連性の高い情報を受け取るためのまったく新しい方法です。

ウィジェットの提案が有効になっているスマートスタックの場合、システムはまだ含まれていないスタックに新しいウィジェットを挿入できます。

アプリは、アプリからの明示的な寄付を許可して、これを行うことができます。

また、スマートローテーションと同様に、システムはアプリでユーザーの行動パターンを学習することで、ウィジェットの提案を作成することもできます。

ウィジェットの提案では、スタックに天気ウィジェットとリマインダーウィジェットがあれば、一日を通してこれらのウィジェットへのスマートローテーションが表示されます。

しかし、私は10:00にその会議があり、スタックにカレンダーウィジェットがないので、カレンダーアプリは9時30分にウィジェットを積極的にスタックに挿入するようにシステムに指示するかもしれないので、忘れません。

ウィジェットが関連性がなくなったら、システムは私のスタックからそれを削除します。

夕方のワークアウトを終えると、システムはフィットネスウィジェットを表示するかもしれないので、リングを閉じる際の一日の進捗状況を簡単に要約することができます。

そしてその後、スタックは再び元の状態に戻ります。

アプリは、便利なときに一時的にウィジェットを挿入するようにシステムに指示するので、ユーザーが存在すら知らないかもしれないウィジェットを発見するのを助けることができます。

それでは、利用可能なAPIを使用してスマートローテーションとウィジェットの両方の提案を採用し、関連するシグナルをシステムに寄付する方法を見てみましょう。

寄付するときは、ウィジェットが表示できるすべての可能な情報を考慮し、どのタイプが他のタイプよりも提案に適しているかを判断する必要があります。

システムへの寄付方法を選択する際の最終目標は、ユーザーに明らかな価値を持つタイムリーで一目を見やすい情報を提供することであるため、ユーザーが他の人よりも興味深いと感じる可能性のある状況を強調することを検討する必要があります。

たとえば、天気ウィジェットは、差し迫った降雨が、温度だけが目立たないほど変化した時点とは対照的に、提案に適した状況であると考えることができます。

ウィジェットにスマートローテーションとウィジェットの提案を3つの別々の方法で採用できます。

まず、アプリはINRelevantShortcutを寄付して、ウィジェットの1つにウィジェットの提案を作成するタイミングをシステムに伝えることができます。

次に、ウィジェットはTimelineEntryRelevanceを通じて関連性スコアを提供し、ウィジェットがスタックにあるときにスマートローテーションを有効にすることができます。

そして第三に、ウィジェットが設定可能な場合、アプリがINInteractionを使用して設定意図を寄付すると、システムはスマートローテーションとウィジェット提案の両方を通じてウィジェットを宣伝するためにユーザーの行動パターンを学習することができます。

これらのAPIのそれぞれは、強力な方法でウィジェットの存在感を高めますが、それらはすべて少し異なる動作をするので、それを分解しましょう。

ウィジェットの提案のためのINRelevantShortcutsを寄付することから始めましょう。

ウィジェットを設定する意図を使用するかどうかにかかわらず、アプリがユーザーにウィジェットを表示するために関連性の高い状況に気付いた場合、INRelevantShortcutを寄付すると、ホーム画面にウィジェットがまだ表示されていない場合、システムはウィジェットをユーザーのスタックの1つに積極的に挿入できます。

関連するショートカットは、関連する期間を指定するか、ユーザーの行動パターンに基づいてウィジェットを挿入するタイミングをシステムに決定させることができます。

INRelevantShortcutは、静的ウィジェットとインテント構成ウィジェットの両方をサポートしていますが、寄付は構成タイプごとに少し異なるように見えるので、両方のタイプに採用する方法を見てみましょう。

ウィジェットがStaticConfigurationをサポートしている場合は、意図せずに新しいINRelevantShortcutを作成し、widgetKindプロパティをウィジェットの親切な文字列に設定するだけです。

これは、どのアプリのウィジェットを提案するかをシステムに伝えます。

次に、オプションでrelevantProvidersプロパティをINRelevanceProvidersの配列に設定します。

これは、ウィジェットを提案するタイミングをシステムに伝えます。

これをもう少し詳しく説明します。 

ウィジェットがIntentConfigurationをサポートしている場合は、必要なパラメータを使用して設定に使用されるインテントのインスタンスを作成します。

次に、インテントをINShortcutとして渡して、INRelevantShortcutを作成します。

そしてもちろん、静的ウィジェットと同じように、widgetKindとlevanceProvidersのプロパティを設定します。

関連するショートカットを寄付するには、デフォルトのINRelevantShortcutStoreで設定する関連するショートカットの配列に含めます。

寄付されたショートカットを更新するには、ストア内の関連するショートカットの配列を新しい配列に置き換えることができます。

これは、新しい配列で省略することで、以前に寄付された関連するショートカットを無効にできることを意味します。

また、意図を含む関連するショートカットを寄付することで、Siriの文字盤に意図を表面化することもできます。

ウィジェットをいつ挿入できるかをシステムに伝えるには、関連するショートカットにINRelevanceProvidersの配列を設定します。

ここには2つの選択肢があります。

まず、INDateRelevanceProviderを使用して、今後のイベントやニュース速報など、関連性の固定された既知の期間の開始日と終了日を提供できます。

複数のプロバイダーを使用して、複数の関連期間を指定することもできます。

第二に、ウィジェットに表示する新しいものがあることをシステムに伝えるために、関連性プロバイダーの空の配列を提供することを選択することもできます。また、システムは、ユーザーが通常アプリを使用するタイミングに基づいてウィジェットを提案する時間を選択します。

他のすべての関連性プロバイダーは、SiriウォッチフェイスのINRelevantShortcutsをサポートしており、ウィジェットの提案ではサポートされていません。

次に、サンプルアプリを使用して、養子縁組がどのように見えるかを説明します。

私たちは、すべてのクレジットカードの取引と残高を表示し、最近の購入を表示するウィジェットを含むカードと呼ばれるアプリを構築しました。

アプリでINRelevantShortcutsを寄付することで、最近の購入ウィジェットのウィジェット提案を有効にする方法を見てみましょう。

私たちのカードの1つで最近購入された直後にウィジェットを提案したいと思います。

ウィジェットはインテントで設定されているため、ウィジェットの提案を許可するために、まず、インテント定義ファイルで寄付をサポートしていることを確認します。

これは、表示するクレジットカードと購入をフィルタリングするマーチャントカテゴリをウィジェットに伝えるViewRecentPurchasesインテントエディタです。

「Intent is eligible for Siri Suggestions」がチェックされていることを確認したい。

これにより、ホーム画面のウィジェットの提案や、寄付を選択した場合のiOS周辺の他の場所での提案が可能になりますが、後でINInteractionsでそれを取得します。

次に、意図を形成するために必要なパラメータを含むパラメータの組み合わせを作成する必要があります。

ウィジェットを設定するには、クレジットカードとマーチャントカテゴリの両方が必要なため、カードとカテゴリの両方のパラメータでサポートされている組み合わせを作成します。

これで、コードにインテントを作成できます。

このコードでは、私たちのアプリは、ユーザーが購入したばかりであることを通知されました。

寄付をするには、複数のショートカットを寄付したい場合に備えて、INRelevantShortcutsの空の配列を作成することから始めます。

最近の購入ウィジェットの設定に使用した意図を初期化し、必要なパラメータを設定します。

ここでは、最近購入が行われたカードを参照するカードオブジェクトにインテントのカードパラメータを設定し、ウィジェットがそのカードのすべての購入を表示するようにカテゴリをすべてに設定します。

次に、意図してINShortcutを作成し、それを使用してINRelevantShortcutを作成します。

ユーザーがウィジェットで情報を表示するため、ショートカットロールを情報ショートカットロールに設定し、ウィジェットKindを設定します。

システムが購入の30分後に削除できるように、今から30分または1800秒で終了するINDateRelevanceProviderを提供します。

次に、関連するショートカットの配列にショートカットを追加します。

最後に、デフォルトのINRelevantShortcutStoreで関連するショートカット配列を設定してショートカットを寄付し、完了ハンドラーのエラーを処理します。

最近の購入が行われるたびに、システムはウィジェットをスマートスタックに積極的に挿入することで、ウィジェットでウィジェットの提案を行うことができます。

では、TimelineEntryRelevanceについて話しましょう。

ウィジェットがWidgetKitにタイムラインを提供する場合、各タイムラインエントリにTimelineEntryRelevanceを提供することで、ウィジェットの関連性を指定できます。

関連性のあるエントリに注釈を付けることは、エントリ時にウィジェットがスマートローテーションにどれほど価値があるかを示します。

この回転の価値は、ウィジェットが提供するタイムラインの他のすべてのエントリに相対的であるため、どのエントリが他のエントリよりもユーザーに関連する可能性があるかを判断する必要があります。

TimelineEntryRelevanceは、エントリの日付とともに、TimelineEntryのオプションの構造体プロパティです。

関連性構造体には、スコアと期間が含まれています。

構造体フロートスコアは、このエントリが他のエントリとどの程度関連しているかを表しています。

スコアが高ければ高いほど、システムがウィジェットに回転する可能性が高くなります。

返すスコアを決定するときは、正のスコアがスマートローテーションの対象となるタイムラインエントリを示していることを知ってください。

ゼロのスコアは、ウィジェットに表示する情報がないなど、ウィジェットを回転させるべきではないことをシステムに伝え、ウィジェットに回転することはユーザーにとって良い経験ではありません。

提供されたスコアの重要性は、ウィジェットのタイムラインで他のスコアと相対的であることを覚えておいてください。

関連性スコアに使用するスケーリングが何であれ、返すタイムライン全体で一貫していることを確認してください。

ほんの少しで例を挙げます。

関連性構造体の長さは、関連性スコアが有効期間を指定します。

システムは、エントリの日付とともにこれを使用して、スタックをウィジェットに回転させる有効な時間枠を決定します。

期間が過ぎると、将来のエントリで関連性が再び提供されるまで、システムはスコアをゼロとして扱います。

関連性を提供する次のエントリまでスコアを有効に保つために、ゼロの期間を指定できます。

これがコードでどのように見えるかを見てみましょう。

ここには、TimelineEntryプロトコルに準拠したCardRecentPurchasesEntry構造体があります。

プロトコルにはオプションの関連性プロパティが必要なため、構造体で関連性プロパティを宣言できます。

タイムラインエントリを作成すると、タイムラインを作成するときに、エントリにTimelineEntryRelevanceインスタンスを添付できます。

それでは、最近の購入ウィジェットのタイムラインがどのように見えるかを調べて、タイムラインの関連性のために提供できるスコアの例を見てみましょう。

以下は、最近の購入ウィジェットが1日を通して戻ってくる可能性のあるタイムラインの例です。

おそらく、ユーザーはより高い支出を伴う購入をもっと気にかけていると思うかもしれません。

その後、購入のスコアを、費やした金額で直線的に拡大することができます。

今のところ、関連性期間を0のままにしておきましょう。

8時15分に、表示する購入がないので、0のスコアを返します。

9時41分に、52ドルと60セントの購入は、スコアが52.6になることを意味します。

グラフにプロットすると、私たちの買い物は他のスコアと比較して比較的高いスコアを持っていることがわかりますので、システムは他のエントリよりもこのエントリでウィジェットに回転することを優先します。

他のエントリはまだ正のスコアを持っているので、システムは優先順位が低くても、その時点でウィジェットに回転することができます。

また、期間を0に設定しているため、関連性スコアは、関連性の更新を伴う次のタイムラインエントリまで有効です。

別の採点メカニズムを選択できたかもしれません。

購入が50ドルを超える場合は50のスコアを返し、以下の購入の場合は1のスコアを返すとしましょう。

繰り返しになりますが、購入がまったくない場合は0を返します。

食料品と買い物のために50を返し、スープダイナーと映画館での支出のために1を返しました。

スコアグラフを使用すると、スコアが9時41分に50に上昇し、6時52分までそこにとどまることがわかります。

50は私たちのタイムラインで可能な限り最高のスコアであるため、システムはこの時点でウィジェットを表示する可能性が最も高いです。

ウィジェットには最近の購入が表示されるので、ずっと前に購入したものをウィジェットに回転させたくありません。

したがって、購入後30分以内にシステムがウィジェットに回転することを許可しましょう。

これを達成するために、関連性構造体で期間プロパティを使用できます。

エントリごとに30分、または1800秒の関連性時間を設定します。

関連性の期間を30分に設定することで、エントリーを30分間ローテーションの対象としてマークし、その後ローテーションの対象外としてマークするようにシステムに指示します。

これらの例では、購入金額からスコアをベースとしていますが、実際には、タイムラインの関連性スコアはあなたが好きなものにすることができます。

また、どのクレジットカードであるか、購入が行われた場所、購入が行われたとき、または完全に何か他のものを使用することもできます。

それを行う正しい方法はありません。

今、INInteractionsを寄付します。

アプリでは、INInteractionsを通じてスマートローテーションとウィジェット提案の両方を有効にするためにウィジェットを設定するために使用されるインテントを作成して寄付することができます。

アプリは、ユーザーがウィジェットに表示される情報に対応するアプリ内の情報を表示するたびにINInteractionを寄付します。

各寄付は、ユーザーがアプリで情報を表示する傾向があるときを学習するシステムの行動モデルのデータポイントです。

モデルがユーザーがインタラクションを再度実行したいと予測するたびに、システムは意図の提案を作成します。

また、寄付された意図がウィジェットの設定に使用されるものと同じものである限り、システムは予測からスマートローテーションとウィジェットの提案の両方を自動的に生成し、システムに関する他の提案も生成します。

カードプロジェクトでINInteractionを寄付するために、INRelevantShortcutsを寄付するのと同じように、私たちの意図が提案の対象となることを確認し、ウィジェットを設定するために必要なパラメータでサポートされている組み合わせを作成したいと考えています。

ここでは、寄付がシステム内の他の場所に表示されたときの提案UIを最終的に設計することも確実です。

カードアプリでは、ユーザーがカードの最近の購入をすべて表示するたびに、ウィジェットの意図を寄付して、ユーザーが現在ウィジェットが表示する情報に興味を持っていることをシステムに知らせることができます。

まず、意図を初期化します。

ユーザーが現在表示しているカードにカードパラメータを設定し、ユーザーが現在このカードのすべてのトランザクションを表示しているため、カテゴリをすべてに設定します。

その後、INInteractionで意図をラップし、寄付方法を呼び出します。

今、システムは、ユーザーが私たちのアプリでこのカードの最近の購入を見たことを知るでしょう。

しばらくすると、システムはユーザーがいつこれを行う傾向があるかを学習し、最も適切なタイミングで一致するウィジェットを提案することができます。

あなたが行うINInteractionの寄付は、スマートローテーションとウィジェットの提案を有効にするだけでなく、システムはロック画面、スポットライト、Siriショートカットの提案ウィジェットであなたの意図をSiriの提案として表示することもできます。

これは、ウィジェットが意図を採用していない場合でも当てはまります。

INInteractionsを寄付することでアプリに何ができるか、そしてデバイス上のインテリジェンスをさらに活用できることについてもっと学ぶには、「意図を寄付し、アプリのプレゼンスを拡大する」というトークを必ずチェックしてください。したがって、INRelevantShortcut、TimelineEntryRelevance、およびINInteractionは、ウィジェットのスマート回転とウィジェットの提案をサポートできる3つの方法です。

システム内の他の寄付とパフォーマンスの考慮事項により、寄付はウィジェットが表面化されることを保証するものではありません。

しかし、これらのAPIをまとまりのある方法で採用することで、システムと協力して、ウィジェットに可能な限り最高のショットを与えることができます。

開発中は、設定アプリの開発者設定にあるWidgetKit開発者モードをオンにすることで、ウィジェットを浮上させるためのシステムの制限を回避することも役立つかもしれません。

まとめると、ウィジェットの提案は、ユーザーが必要なときにウィジェットを積極的に表示するためのまったく新しい方法です。

また、すでにスタックに追加されているウィジェットの場合、Smart Rotateを使用すると、ユーザーの一日の信頼性が高く信頼できる部分になります。

システムと協力し、デバイス上のインテリジェンスを活用することで、これらの機能により、ウィジェットはより発見しやすく、より積極的になり、インテリジェントなホーム画面体験に貢献できます。

ウィジェットにインテリジェンスを追加する方法を見て、非常に興奮しています。

ありがとう、そして素晴らしいWWDCをお過ごしください。

♪