10118

こんにちは、私はラスティです。

私はCloudKitチームのエンジニアであり、新しいCloudKit開発者ツールと新しいCloudKitスキーマ言語を紹介することに興奮しています。

このセッションでは、クラウドと統合するアプリケーションにとって統合テストが難しい理由について説明します。

次に、CloudKit用の新しいコマンドライン開発者ツールであるcktoolを実演します。

cktoolをXcode内で使用してテスト設定を自動化する方法がわかります。

CloudKitの新しい宣言型スキーマ言語について学びます。

そして、次のステップで物事をまとめます。

始めましょう。

クラウドサービスに依存するアプリケーションを作成する場合、アプリケーションと依存するサービスの間に明示的な契約があります。

統合テストは、これらのサービスとどのようにやり取りするかを検証するのに役立ちますが、これらの統合テストのセットアップを適切に自動化することは、いくつかの理由で難しい場合があります。

まず、アプリが使用しているデータモデルでサーバーを最新の状態に保つことは必ずしも容易ではありません。

アプリの開発中にスキーマを反復する際には、サーバー上のスキーマが、テストの実行時にアプリが使用しているスキーマと正確に一致することが重要です。

また、テストがテストの一部としてそのデータを変更する場合、テストが実行されるたびにクラウド内の一貫したサンプルデータセットに対してテストが実行されていることを確認するのは難しい場合があります。

CloudKitチームは、このすべてをあなたのために簡単にしました。

先ほど導入した新しいCloudKitスキーマ言語を使用すると、アプリケーションコードのすぐ横にあるファイルにCloudKitスキーマを宣言し、それをバージョン管理にチェックインして、プロジェクトの他のすべての変更とともに変更を追跡し、常にアプリのデータモデルがCloudKitスキーマと一致していることを確認できます。

また、新しいcktoolコマンドライン開発者ツールを使用すると、このスキーマ宣言をCloudKitサーバーに送信するプロセスを簡単に自動化し、テストを実行する直前にサーバーに一貫したサンプルデータセットを作成できます。

すぐに飛び込んで、cktoolを使い始めましょう。

まず、cktoolはXcode 13でインストールされます。

Xcode 13をインストールすると、すぐにターミナルからcktoolの使用を開始できます。

Cktoolはxcrunで呼び出されます。

それはいくつかのコマンドを提供します。

たとえば、CloudKitサーバー上のレコードの作成、サーバーに既に存在するレコードのクエリ、新しいスキーマ言語ファイルのインポートとエクスポート、ツール自体の承認の管理などを行うことができます。

cktoolを使用する前に、CloudKitでの承認について理解すべき点がいくつかあります。

cktoolはCloudKitサーバーと直接通信するため、まずツールの承認を得る必要があります。

スキーマインポートなどのコンテナ管理機能を実行するためにcktoolのみを承認するか、さらにコンテナ内のデータにアクセスするツールを承認するかを選択できます。

CloudKitは、この目的のために2つの新しい概念を導入しました。

1つ目は「管理トークン」と呼ばれ、cktoolがCloudKitコンテナを管理するために使用されます。

管理トークンは単一の開発者アカウントに関連付けられ、その開発者が複数のチームのメンバーである場合、開発者チーム全体で使用できます。

管理トークンは、スキーマのインポートやエクスポートなどの設定ユースケースのみを対象としています。

このトークンは、コンテナ内のデータへのアクセスを提供しません。

そのため、アプリのコンテナのユーザーのプライベートデータベースまたはアプリのコンテナのパブリックデータベースにデータを書き込むツールを承認するために使用できるユーザートークンも導入しました。

CloudKitコンソールから管理トークンとユーザートークンを取得できます。

CloudKitコンソールの詳細については、別のWWDC21セッションである「Meet CloudKit Console」をご覧ください。

開発者アカウントの管理トークンとユーザートークンの両方を取得したので、macOSキーチェーンに安全に保存するツールに追加することができ、続行する準備ができています。

私は今、いくつかの面白いことを始めることができます。

例えば、Apple開発者チームのメンバーシップのリストを尋ねます。

そして、私がメンバーであるチームのリストを取り戻します。すごい。

さて、コンテナにデータベーススキーマが定義されていて、変更を加える前にソースコードリポジトリにコミットしたいとしましょう。

Cktoolを使えば、それは簡単です。

このexport-schemaコマンドを使用すると、開発スキーマを「schema.ckdb」というファイルにプルダウンできます。このファイルは、先ほど述べた新しいCloudKitスキーマ言語でフォーマットされており、わずか1分でこのファイルを詳細に検討します。

Cktoolを使えば、コンテナにデータを追加することもできます。

ここでは、このサンプルブックレコードのように、JSONとして表現されたサンプル値がある場合、このサンプルブックレコードのように、そのJSONをツールへの入力として使用して、パブリックデータベースにレコードを作成できます。

さて、ツールの動作に関する基本的な感覚がわかったので、アプリのCloudKitコンテナの開発環境からすべてのデータを削除するための簡単な3ステップスクリプトを作成し、スキーマ宣言をサーバーに送信し、最後にテストデータをロードします。

そうすれば、Xcodeでのテストプリアクションの一部としてこのスクリプトを実行し、テストを実行するたびにアプリケーションが使用している正確なスキーマを使用して、CloudKitコンテナが常に一貫した状態にあることを確認できます。

したがって、ここXcodeでは、プロジェクトのアプリケーションのスキームを編集し、テストフェーズで事前アクションを選択します。

これで、新しい実行スクリプトアクションを追加できます。

スクリプトがプロジェクト内のスキーマファイルへのパスを持つように、アプリターゲットのビルド設定を提供します。

ここでは、cktoolコマンドを貼り付けてコンテナをリセットし、次にアプリケーションプロジェクトのファイルからスキーマをインポートし、最後にコンテナのパブリックデータベースにサンプルレコードを作成します。

これらのコマンドは同期しているため、次々に実行され、何かが期待どおりに動かない場合に備えて、失敗しても実行が停止することに注意してください。

その場合、実際にテストを実行する前に、テスト前の問題を解決するように注意することができます。

それでおそれ。

今、Xcodeテストを実行すると、cktoolは実行直前にCloudKitコンテナを準備します。

完璧。

では、アプリケーションのデータモデルを変更する必要がある場合はどうなりますか?

CloudKitスキーマ言語についてもっと話しましょう。

実際、先ほどダウンロードしたschema.ckdbファイルを調べてみましょう。

ファイルの中には、私のスキーマのレコードタイプを記述する強力な方法である新しいCloudKitスキーマ言語があります。

読み書きが簡単で、私のアプリケーションコードで私のプロジェクトにここに含めることができます。

スキーマセクション内には、レコードタイプがあります。

これらは、CloudKitコンソールのコンテナに示すように、レコードタイプを正確に反映します。

各レコードタイプには複数のフィールドがあり、各フィールドには名前とデータタイプがあります。

トリプルアンダースコアフィールド名は、すべてのレコードタイプに対してCloudKitによって作成されるシステムフィールドです。

これらのシステムフィールドの下には、CloudKitのこのレコードタイプのカスタムアプリケーションデータを表すカスタムフィールドがあります。

CloudKitコンソールと同じように、クエリ可能、検索可能、ソート可能なインデックスなどのフィールドのインデックスを作成できます。

CloudKitスキーマ言語でこれを行うには、ここのブックレコードタイプのこの「タイトル」カスタムフィールドのように、フィールドのデータタイプの直後にインデックスを宣言します。

フィールド定義の下には、レコードタイプのセキュリティロール設定があります。

これは、これらの3つの組み込みシステムセキュリティロールのそれぞれのように、名前付きセキュリティロールごとに権限を付与できる場所です。

「_Creator」にはレコードを作成したユーザーのみが含まれ、「_world」にはすべてのユーザーが含まれ、「_icloud」には認証されたユーザーが含まれます。

CloudKitスキーマ言語では、シングル行と複数行の両方のコメントを含めることで、スキーマファイルをあなたとあなたのチームにとってさらに読みやすくすることができることに注意してください。

ファイルが処理されると、コメントはCloudKitサーバーによって無視されますので、好きな場所にコメントを入れてください。

CloudKitスキーマ言語は、開発者にスキーマを宣言および変更するための迅速で柔軟な方法を提供するため、CloudKitスキーマの進化に関するいくつかのコア概念を覚えておくことが重要です。

まず、コンテナの開発環境でレコードタイプを完全に制御できます。

開発中のレコードタイプを追加および削除したり、制限なしでそれらのレコードタイプ内のカスタムフィールドを追加および削除したりできます。

もちろん、新しいレコードタイプは常に生産に昇格することができ、生産中の既存のレコードタイプに新しいフィールドを追加することもできます。

しかし、いったんレコードタイプがコンテナのプロダクション環境に昇格されると、それらは削除または名前を変更できず、プロダクションに昇格されたレコードタイプ内のカスタムフィールドも削除または名前を変更することはできません。

この理由は、CloudKitサーバーが、アプリの古いバージョンがまだ使用している可能性のあるレコードタイプとフィールドを常に理解できるようにするためです。

これは、コンテナの開発環境でスキーマ宣言に破壊的な変更を加えることはできますが、これらの破壊的な変更を生産に促進することはできないことを意味します。

本番環境でインデックスを追加および削除することは可能であり、セキュリティロールの設定も変更できることに注意してください。

これらのスキーマプロモーションの概念はすべてCloudKitにとって新しいものではありませんが、この新しいファイルベースのスキーマ宣言から得られる柔軟性は、それらを見直して理解することが重要であることを意味します。

cktoolで何ができるか、CloudKitスキーマ言語がどのように機能するかを理解したので、自分のプロジェクトで両方を試してみることをお勧めします。

CloudKitコンソールから管理トークンとユーザートークンを使用してcktoolを承認し、そのコマンドを調べます。

既存のCloudKitスキーマをCloudKitスキーマ言語ファイルにエクスポートし、プロジェクトに追加し、プロジェクトの残りの部分でバージョン管理に必ず確認してください。

cktoolを使用して統合テストのセットアップ手順を作成し、スクリプトをテストプリアクションとしてXcodeスキームに追加します。

コマンドラインからCloudKitコンテナの特定の要素を管理する機能は本当に強力です。

他のすべてのアプリケーションコードと一緒にCloudKitスキーマの宣言をファイルに維持することは、開発ライフサイクルを通じてデータモデルとの一貫性を保つのに役立ち、これらすべてを結び付けて統合テストのクラウドセットアップを自動化することはさらに優れています。

私たちは、あなたがこれらの新しいツールで何をするかを見つけることに興奮しています。

CloudKitについてもっと学ぶために時間を割いていただき、WWDC21にご関心をお寄せいただきありがとうございます。

[音楽]。