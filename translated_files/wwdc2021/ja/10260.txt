10260

こんにちは、私はマイケル・オクスです。

私はUIKitチームのフレームワークエンジニアです。

iPadのキーボードナビゲーションに焦点を当てることを歓迎します。

人々はiPadでハードウェアキーボードを使うのが大好きです。

Mac CatalystとiPadOS 15は、アプリのキーボードナビゲーションをサポートする強力なAPIを導入しています。

iPadOSのキーボードでアプリをナビゲートすると、とても身近に感じるでしょう。

タブキーは、アプリ内の重要な領域間を移動します。

矢印キーはエリア内を移動し、iPadOSのreturnキーまたはMac Catalystのスペースバーでアイテムを選択できます。

アプリがすでにこれらのキーコマンドを使用している場合、カスタムコマンドは機能しなくなります。

これらの紛争を解決する方法については、後で説明します。

まず、キーボードナビゲーションの動作をお見せしましょう。

写真では、タブキーを押して、サイドバーのライブラリセルから右側の写真グリッドにフォーカスを移動できます。

これで、矢印キーを使用してグリッド内の写真間を移動できます。

探している写真を見つけたら、戻るを押して選択できます。

iOS 15 SDKでコンパイルすると、この動作はテキストフィールド、テキストビュー、サイドバーに対して自動的に有効になります。

また、素晴らしい体験のために、他のコレクション、テーブル、カスタムビューを選択する必要があります。

すぐにこれを行う方法をお見せします。

これがエキサイティングな機能であることは知っていますが、アプリのキーボードのすべての要素をナビゲート可能にしないでください。

キーボードナビゲーションは、ユーザーがアプリの主要な機能にアクセスできるようにすることを目的としているため、テキスト入力、リスト、およびコレクションビューに焦点を当てます。

ボタン、セグメント化されたコントロール、スイッチなどのコントロールは脇に置いておきます。

フルキーボードアクセスにより、これらのコントロールはキーボードでナビゲート可能になります。

フルキーボードアクセスの詳細については、「iOSアプリでフルキーボードアクセスをサポートする」をご覧ください。

iPadOSのキーボードナビゲーションは、tvOSと同じフォーカスシステムを使用します。以前にtvOSアプリを書いたことがあれば、多くのAPIは身近に感じるでしょう。

ただし、注意すべき新しいAPIと行動の違いがいくつかあります。

フォーカスシステム全般についてもっと知りたい場合は、「tvOSでのフォーカスインタラクション」をチェックしてください。

このビデオでは、アプリのより多くのコンテンツをフォーカス可能にする方法と、これらのフォーカス可能なアイテムの外観をカスタマイズする方法を紹介します。

知っておくべきサイドバーの特別な動作をお見せします。また、アプリで構造を定義する新しい方法であるフォーカスグループについて話します。

最後に、あなたがよく知っているべきレスポンダーチェーンの重要な変更点を紹介します。

しかし、では、UIのより多くの要素を集中可能にする方法を見てみましょう。

canBecomeFocusedは真実の唯一の源です。

これはUIFocusItemの読み取り専用プロパティです。

それをオーバーライドしてtrueを返して、アイテムをフォーカス可能にします。

さて、あなたは疑問に思うかもしれません、フォーカスアイテムとは何ですか?

フォーカスシステムのバックボーンは、UIFocusItemとUIFocusEnvironmentの2つのプロトコルです。

FocusItemsは、単にフォーカスできるアイテムです。

FocusEnvironmentsは、フォーカス可能なアイテムの階層を定義します。

UIViewは、どのビューでもフォーカスできるため、これらのプロトコルの両方に準拠していますが、フォーカスできるサブビューを含めることもできます。

一方、UIViewControllerは、ビジュアル自体を提供しないため、UIFocusEnvironmentにのみ準拠しています。

両方のプロトコルを独自のオブジェクトに実装することもできます。

これにより、Metalなどの他の技術でレンダリングされるコンテンツにフォーカスを採用できます。

キーボードナビゲーションの最も可能性の高い候補は、テーブルまたはコレクションビューのセルです。

UIKitはいくつかの便利なAPIを提供しているので、サブクラスする必要はありません。

Set allowsFocus to true on a table or collection view to make all セルのフォーカス可能にします。

サイドバーでは、allowsFocusはデフォルトでtrueであることに注意してください。

よりきめ細かい制御のために、デリゲートでcanFocusItemAt indexPathを使用して、各セルのフォーカス性を個別に制御できます。

これらの方法は両方とも、canBecomeFocusedをオーバーライドしないセルにのみ影響します。

フォーカス項目が期待どおりに動作しない場合は、いくつかのデバッグツールが利用可能です。

lldbでは、UIFocusDebuggerを呼び出すことができます。CheckFocusability(項目:)をチェックし、デバッグしたい項目を渡します。

例えば、あなたが集中可能にしようとしているビュー。

フォーカスシステムがこの項目をフォーカス可能とみなさない理由を説明します。

そこで、UIを集中可能にする方法について話しました。

焦点を絞ったアイテムの外観を詳しく見てみましょう。

システム全体でよく見られるスタイルは2つあります。

まず、macOSのフォーカスリングに似たハローエフェクトがあります。

実際、これはMac Catalystのデフォルトの効果です。

iPadOSでは、FocusEffectプロパティにUIFocusHaloEffectを割り当てることで、この効果を使用できます。

引数なしで初期化された場合、システムはハローの形状を推測します。

コンテンツによりよく合うように形状をカスタマイズすることもできます。

たとえば、画像に角が丸みを帯びている場合、ハローは角を丸めることで外観と一致する必要があります。

UIFocusHaloEffectには、丸みを帯びたrect用のものなど、さまざまな形状のイニシャライザが多数あります。

これらの初期化子を使用して、ハローの形状がビューのコンテンツの周りにアウトラインを作成することを確認します。

Halo Effectでは、ビュー階層内の位置も制御できます。

ここでは、ハローは画像のバッジの上にレンダリングされていますが、ハローが画像とバッジの間にある場合、より良く見えます。

画像ビューをreferenceViewとして指定することで、UIKitは画像の上とバッジの下にハローをレンダリングします。

参照ビューは、ビュー階層内のハローの相対的な順序を定義します。

ハロー効果のスーパービューを定義するコンテナビューを指定することもできます。

これは、フォーカスされたアイテムの直接スーパービューがそのコンテンツをクリッピングしている場合に便利です。

これらは両方ともオプションであり、推測された外観があなたが期待するものではない場合にのみ、それらを提供する必要があります。

コレクションとテーブルビューのセルは、画像のような完全に不透明なコンテンツがある場合にのみ、その周りにハローを表示する必要があります。

他のすべてのケースでは、セルがフォーカスされたとき、それは強調表示されるはずです。

これは、背景がアプリの色合いに変わり、テキストとアイコンの前景色を良いコントラストに調整する必要があることを意味します。

このハイライトの外観は、UIFocusEffectとして利用できません。

代わりに、iOS 14で導入された背景とコンテンツ構成を使用すると、自動的にこの外観になります。

これらの詳細については、「現代のセル構成」をご覧ください。

背景とコンテンツの設定を使用していない場合、サンプルアプリはすべてのケースで正しい色を取得する方法を示します。

必ずそれをチェックしてください。

さて、カスタムの外観を適用する場合は、まずfocusEffectプロパティをnilに設定します。

これにより、システムのスタイリングがオフになります。

次にdidUpdateFocusをオーバーライドします(in:コンテキストとAnimationCoordinator:)フォーカスアイテムに。

次にフォーカスされたアイテムがセルフの場合は、フォーカスを示すためにスタイリングを適用します。

以前にフォーカスされたアイテムがセルフの場合は、フォーカスされていない外観を復元します。

didUpdateFocus(in: context)では、次または以前にフォーカスされたアイテムがこの環境に関連する場合にのみ変更を加える必要があります。

これは、以前にフォーカスされたアイテムのすべての祖先環境と、次のフォーカスされたアイテムが、didUpdateFocus(in: context)への呼び出しを受けるためです。

したがって、すべてのスーパービューとビューコントローラーがこの呼び出しを取得します。

これにより、親が子供のフォーカスの変化に反応できる非常に柔軟な実装が可能になります。

では、サイドバーや同様のコンテキスト変更UIに固有の機能を詳しく見てみましょう。

選択と焦点は2つの異なる概念です。

ただし、サイドバーでは、フォーカスを移動すると、選択が続きます。

同様に、タップして新しいセルを選択すると、フォーカスもこの新しく選択されたセルに移動します。

これは「選択は焦点に従う」と呼ばれています。

任意のテーブルまたはコレクションビューでこのプロパティを、ほとんどのセルで必要な動作に設定します。

個々のセルの動作を変更したい場合は、デリゲートに selectionFollowsFocus ForItemAtIndexPath を実装します。

selectionFollowsFocusをオフにすると、セルを選択すると、同じ列に新しいビューコントローラーをプッシュしたり、アラートを表示したりするなど、破壊的なアクションが発生する場合に便利です。

たとえば、写真では、「新しいアルバム」を選択すると、アルバムの名前を尋ねるアラートが表示されます。

デリゲートを使用する場合、プロパティの価値は依然として重要です。

selectionFollowsFocusをコレクションビューの全体的な意図に設定し、デリゲートを使用して個々のセルの特別な動作を表現します。

システムは、適切な動作を選択する際に両方の値を考慮に入れます。

では、アプリの構造を表現するキーボードナビゲーションの新機能であるフォーカスグループを見てみましょう。

UIKitは階層からフォーカスグループを自動的に推測しますが、タブキーがアプリ内でフォーカスを移動する方法をカスタマイズするために明示的に宣言することもできます。

tvOSは指向性フォーカスのみを使用します。

Siri Remoteをスワイプするか、キーボードの矢印キーを使用するだけで、すべての要素にアクセスできます。

一方、iPadOSとMac Catalystには、キーボードでナビゲートする2つの異なる方法があります。矢印キーとタブキーです。

tvOSとは異なり、矢印キーはアプリの定義された領域内でのみフォーカスを移動します。

これらの分野はフォーカスグループと呼ばれています。

たとえば、上下の矢印キーを使用してリマインダーのリストをナビゲートできます。

リストをナビゲートするには、タブキーを押して検索フィールドに集中し、タブをもう一度押してリストに移動できます。

タブをもう一度押すと、フォーカスループがリマインダーに戻ります。

リマインダー、検索フィールド、およびリストはそれぞれフォーカスグループであり、タブキーはそれらの間でフォーカスを移動します。

フォーカスがグループに移動すると、そのグループ内でフォーカスするアイテムを選択します。

そのアイテムはグループのプライマリアイテムと呼ばれます。

グループのプライマリアイテムは変更できます。

例えば、ここでは2番目のリマインダーに焦点を当てます。

フォーカスシステムは、このグループから切り替えるとこれを記憶し、リマインダーに戻ると、このアイテムがグループのプライマリアイテムになったため、フォーカスは再び2番目のアイテムに移動します。

タブキーは、各グループのプライマリアイテムを接続し、それらの間でフォーカスを移動します。

これはタブループと呼ばれます。

一部の環境では、デフォルトで独自のフォーカスグループを定義します。

これらには、コレクションやテーブルビューなどのスクロールビューや、テキストフィールドやテキストビューなどのテキスト入力クラスが含まれます。

環境が独自のグループを定義しない場合、親環境のグループ、通常はスーパービューまたはビューコントローラを継承します。

たとえば、デフォルトでは、すべてのセルは自動的にコレクションビューのグループに属します。

同じグループに属することで、矢印キーでセル間を移動できます。

フォーカスグループを自分で定義するには、フォーカスグループ識別子を任意のビューまたはビューコントローラーに割り当てます。

2つの環境が明示的または継承によって同じ識別子を共有する場合、それらは同じグループの一部です。

グループのプライマリアイテムをカスタマイズするには、そのアイテムにフォーカスグループの優先順位を割り当てます。

これは、アイテムがグループ内でどれほど重要であるかを定義します。

優先順位が最も高い目に見えるアイテムは、グループのプライマリアイテムです。

デフォルトでは、システムは事前定義された優先順位の1つを割り当てます。無視、デフォルトの優先順位。以前にフォーカスされた。優先順位付けされた、選択したセルのように、アイテムが他のアイテムよりも重要であることを示す。そして現在フォーカスされている、これは可能な限り最高の優先順位です。

アイテムの優先度をシステムが提供する優先度以下に下げることはできないことを理解することが重要です。

代わりに、別のアイテムの優先順位を上げる必要があります。

たとえば、.previouslyFocusedよりも高い優先度をセルに割り当てると、そのセルはそのグループの最後にフォーカスされた項目よりも重要になります。

したがって、このカスタマイズされたセルと以前にフォーカスされたセルの両方が目に見える場合でも、優先順位が高いため、カスタマイズされたセルが主要なアイテムになります。

だから、今、あなたはあなたのアイテムをグループ化する方法を知っています。

次に、これらのグループがどのようにソートされるかに焦点を当てましょう。

ここでは、リマインダーが再び見られます。

前述のように、各テーブルとコレクションビュー、および各テキストフィールドは、独自のグループを定義します。

前に見たように、タブキーを連続して押すと、検索フィールドからサイドバーのリスト、そして右側のリマインダーにフォーカスが合います。

これはUIKitがデフォルトで行うことです。

ただし、この種のコンテナビューを自分で構築した場合、すべてのグループが読み取り順にソートされ、上から下への末尾につながるため、フォーカスは検索フィールドから直接リマインダーに移動します。

フォーカスシステムは、サイドバーが明確な列であることを知りません。

検索フィールドとリストが1つの連続したブロックにソートされるように、それらを共通の親グループに配置することができます。

これは、サイドバーのコンテナビューでフォーカスグループ識別子を定義することによって行われます。

この新しいグループにはフォーカス可能なアイテムが直接含まれていませんが、タブループは、リマインダーリストに移動する前に、検索フィールドグループからリストグループに移動します。

多くの標準的なUIKitプレゼンテーションは、すでにこれらの中間グループを提供しています。

カスタムコンテナビューの場合、共通の祖先に対して独自のfocusGroupIdentifierを宣言します。

フォーカスグループは、アプリの視覚構造を定義する簡単な方法です。

タブループの固定順序を定義する必要はありません。

代わりに、システムはフォーカスグループを使用して、読み取り方向、レイアウト、および可視性を考慮したタブループの順序を導き出し、一貫したエクスペリエンスを提供します。

アプリでフォーカスグループをカスタマイズする場合、UIFocusDebuggerはあなたの友達です。

checkFocusGroupTree（環境の場合：）を呼び出すと、渡された環境から始まるフォーカスグループ構造が印刷されます。

フォーカスシステム自体を渡すことで、現在のすべてのグループを見ることもできます。

さて、このテキスト構造は役に立ちますが、デバッグツールがもう1つあります。

フォーカスグループとリマインダーで見せたスクリーンショットを覚えていますか？

実際にあなたのアプリでこれをライブで入手できます。

有効にすると、フォーカスループデバッガは、オプションキーを長押しすると、アプリのタブループの順序を視覚化します。

また、オプションとコントロールを押すと、フォーカスグループの視覚化が得られます。

このモードでは、グループの主要項目は点線で示されます。

それを有効にするには、Xcodeのスキーム設定に移動し、「実行」を選択し、次に「引数」を選択します。

次に、起動引数-UIFocusLoopDebuggerEnabled YESを追加し、その前にダッシュを置くことを忘れないでください。

これで、Xcodeからアプリを実行するたびに、このデバッグオーバーレイはアプリですぐに利用できます。

これは、iPadOSとMac Catalystに焦点を当てる基本をカバーしています。

キーボードナビゲーションで取り上げるトピックがもう1つあり、それはレスポンダーチェーンです。

レスポンダーチェーンとフォーカスシステムの両方がキーボード入力を扱っているため、UIKitはこれらのシステムを可能な限り同期して、フォーカスされたアイテムが常にファーストレスポンダー内にあるか、ファーストレスポンダー自体であることを確認します。

テキストフィールドとコレクションビューセルを備えた簡略化されたビュー階層を見てみましょう。

現在、テキストフィールドはフォーカスされ、ソリッドリングで示され、破線リングで示されるファーストレスポンダーでもあります。

フォーカスがこのコレクションビューセルに移動すると、UIKitは最初の応答器もこのセルに移動しようとします。

このセルがcanBecomeFirstResponderからfalseを返す場合、システムはレスポンダーチェーンを反復してtrueを返すレスポンダーを見つけます。

この場合、そのレスポンダはセルのビューコントローラーです。

逆も真であることに注意してください。

最初のレスポンダーが変更されると、フォーカスシステムはそのレスポンダー内で新しいフォーカス可能なアイテムを見つけようとします。

最初のレスポンダーとフォーカスされたアイテムの間のこの関係により、重要なイベントは常にフォーカスされたアイテムに配信され、そこからレスポンダーチェーンを上に移動します。

これにより、いくつかの興味深い新しい行動が可能になります。

たとえば、セルがキーコマンドに応答してフォーカスされると、キーコマンドがそのセルに配信されます。

これを使用する方法については、サンプルアプリをご覧ください。

iPadOS 15用のアプリをアップデートするときは、becomeFirstResponderを呼び出す場所を意識してください。

レスポンダーチェーンとフォーカスが同期されているため、ファーストレスポンダーを変更すると、フォーカスが強制的に更新されます。

これはユーザーにとって非常に混乱を招く可能性があります。

通常、特にフォーカスの更新に応じて、beonFirstResponderを呼び出すのを避けるのが最善です。

フォーカスシステムは、すべてのアプリで一貫したエクスペリエンスを提供します。

これを行うには、特定のキーコマンドの優先順位が必要です。

アプリがタブや下矢印などのキーコマンドを使用している場合、iOS 15 SDKでコンパイルすると、そのキーコマンドは機能しなくなります。

このキーコマンドを使用して独自のカスタムキーボードナビゲーションを構築する場合は、そのままにしておくことができます。

以前のバージョンでは動作し、iPadOS 15ではフォーカスシステムが引き継ぎます。

それ以外の場合は、このキーコマンドを再マップします。

本当にこのキーコマンドを引き続き使用したい場合は、キーボードナビゲーションが壊れていないことを確認してから、wanesPriorityOverSystemBehaviorをtrueに設定してください。

キーボードショートカットの改善についてもっと知りたい場合は、「iPadアプリを次のレベルに引き上げる」をチェックしてください。

pressesBegan、pressesChanged、pressesEnded、pressesCancelledを実装して手動でプレスを処理する場合は、これらのメソッドをすべて実装し、処理しないプレスに対してスーパーを一貫して呼び出してください。

iPadOS 15とMac Catalystのキーボードナビゲーションは、ユーザーにとって強力なツールです。

コレクションビューとテーブルビューを集中可能にして、優れたユーザーエクスペリエンスを提供します。

キーボードナビゲーションと衝突しないように、キーコマンドを更新してください。

また、優れた検索体験の構築、カスタム選択、フォーカスガイドなど、さらにいくつかの機能を説明するサンプルアプリをチェックしてください。

iPadOS 15のキーボードナビゲーションで構築しているものを見るのが待ちきれません。

ご覧いただきありがとうございます。

[パーカッシブミュージック]。