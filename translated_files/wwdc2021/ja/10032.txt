10032

♪ベース音楽の演奏♪

♪

ミーガン・ガードナー:こんにちは!私の名前は、WebKitチームのエンジニアであるミーガン・ガードナーです。今日は、WKWebViewの追加を一緒に検討します。

旅を始める前に、私たちが何を探求しているかを確認しましょう。

WKWebViewとは何か、なぜアプリで使いたいのかを教えてあげましょう。

ユーザーがURLをクリックすると、Webページが読み込まれ、そのコンテンツと対話できることを期待しています。

URLをロードし、コンテンツをレンダリングし、そのコンテンツでJavaScriptを実行することは非常に複雑な作業です!

そのため、その作業のほとんどをWKWebView内にカプセル化しました。

そして、あなたのためだけではありません!

WKWebViewは、iOSとMacOSのすべてのWebコンテンツを表示するために使用されるビューです。

これにはSafariが含まれます。

したがって、アプリにWebページを表示する必要がある場合は、WKWebViewを追加する必要があると考えるかもしれません。

でも待って！

あなたはそのコンテンツで何をしているのですか?

Webページを表示する方法が必要だが、そのコンテンツとのカスタマイズされたインタラクションがあまり必要ない場合は、おそらくSFSafariViewControllerが必要です。

これはあなたのアプリ内の小さなサファリのようなものです。

これらのビューの1つを使用するのは信じられないほど簡単ですが、トレードオフがあります。

ウェブコンテンツとやり取りするためにできることはほとんどありません。

しかし、今年はSafariのビューコントローラーでもう少し簡単にしました。

ユーザーは常にSafariビューコントローラーのコンテンツの共有シートを介してアプリ拡張機能を実行できましたが、アプリ専用に構築された特別な機能については、ユーザーが発見するのが少し面倒で困難でした。

そのため、iOS 15では、アプリ拡張機能の1つをSafariビューコントローラーのカスタマイズされたボタンにするための新しいAPIを追加しました。

このボタンをアプリの共有拡張機能の1つにマッピングすることができ、実行される拡張機能を最もよく表すそのボタンの画像を設定することもできます。これにより、ユーザーはページでJavaScriptを実行するなど、ツールバーから直接アプリ拡張機能を実行できます。

しかし、これはまだ非常に限られた量の相互作用です。

そこでWKWebViewの出番です。

WKWebViewでは、表示されているコンテンツで多くのことを行うことができます。

コンテンツをロード、操作、操作するための多くのAPIがあります。

したがって、Webコンテンツを表示する必要があり、それと複雑なやり取りが必要な場合は、WKWebViewがあなたです。

また、WKWebViewはWebコンテンツとのやり取りに関するものであるため、私たちは常にそれをより簡単にするよう努めています。

Webビューのコンテンツにアクセスして操作するのに役立つ簡単なAPIを採用することで、より多くの作業負荷を引き受けます。

今年は一生懸命働き、WKWebViewに新しい便利な機能を追加しました。今日は、それらのいくつかについてお話ししたいと思います。

まず、JavaScriptを注入することなく、Webコンテンツと対話および操作できるいくつかのAPIについて説明します。

次に、以前はSafariでしか利用できなかった機能にアクセスできるいくつかのAPIをカバーし、アプリでより深いブラウザのような体験を可能にします。

JavaScriptの使用をオプトアウトできるこれらのAPIを検討する前に、JavaScriptを避けたい理由を確認しましょう。

私たちはJavaScriptが大好きです!

それはウェブの言語です!

しかし、JavaScriptの注入は複雑です。

インジェクションを介して横断する必要があるネイティブとウェブの間のインターフェースは、ナビゲートするのが難しく、面倒な場合があります。

また、複数のWebソースからのコンテンツを扱う場合、意図しない副作用が簡単に生じたり、管理が困難になったりする可能性があります。

できればその頭痛を避けるのが最善です。

注入されたJavaScriptと互換性のない機能もあります。

昨年、アプリバインドドメインと呼ばれる新機能を導入しました。

これにより、アプリで深いインタラクションを許可するドメインを指定できます。

アプリにバインドされたドメインは、ユーザーのアプリのセキュリティとプライバシーを高めるのに役立ちます。

しかし、この利点を得るために、ウェブビューにJavaScriptを注入することはできません。

そうすると、その機能が無効になります。

Apple Payなど、JavaScriptを注入することを選択した場合、ウェブビューではアクセスできない、他の価値の高い機能もあります。

そのため、JavaScriptの注入に対処することなく、Webビューのコンテンツを簡単に操作できるように、いくつかの新しいAPIを追加しました。

これらの新しいAPIは3つのカテゴリーに分類されます。

まず、ウェブサイトのページのテーマカラーと関連するカラーにアクセスする簡単な方法があります。

次に、テキストインタラクションを無効にする方法と、ウェブビューでメディア再生を制御できるようにする方法。

まず、テーマカラーを探りましょう。

昨年、ミッションクリティカルな内部アプリの1つであるBrowser Petsについてあなたに話したことを覚えているかもしれません。これは、Brady EidsonがSafariのウェブサイトでWebKittensとPupsからのフィードを組み合わせるために書いたものです。

さて、利用可能なすべての新しいAPIで、ブレイディと私は、私たちの多くの士気を高める猫や犬を最大限に活用するために、この重要なツールを更新することにしました。

WebKittensウェブサイトのエンジニアの一人は、季節によって変化するダイナミックなテーマカラーを追加し、私たちの重要なペットの写真に少しセンスを加えることを決定しました。

これもアプリに反映してほしかったが、コードを複製したくなかった。

幸いなことに、私たちはこれを非常に簡単にする新しいAPIを持っています。

ご覧のとおり、この新しいAPIを使用して、ヘッダービューの色をウェブサイトのテーマカラーに設定できるため、仲間のエンジニアがWebKittensのウェブサイトに入れた作業を活用することができます。

ウェブサイトのエンジニアは、将来的に新しいテーマを追加することさえでき、私の側で追加の作業なしでアプリに反映されます。

themeColorが設定されていない場合、将来のシードでは、代替の計算された背景色がunderPageBackgroundColorとして公開され、同様に使用できます。

Safariがこれを使用して、アプリとWebページをブレンドする外観を作成していることに気づいたかもしれません。

この値に書き留めて、Webコンテンツの終わりを過ぎてスクロールするときに背景を埋めるために使用される色をカスタマイズすることもできます。

次に、テキストのインタラクションについて話しましょう。

最近、SafariウェブサイトのWebKittensとPupsにビデオを追加し、Browser Petsユーザーは、これらのビデオを再生しようとすると誤ってテキスト選択コントロールをアクティブにしたと不平を言っています。

まあ、私たちはそれを望んでいません!

幸いなことに、ウェブビューでのテキストインタラクションをすばやく簡単に無効にする新しいAPIがあります。

簡単です！

Webビューを設定するときは、Webビューの作成に使用する環境設定でtextInteractionEnabledをfalseに設定してください。

これにより、そのWebビュー内のすべてのテキストインタラクションがオフになります。

これで、テキスト選択コントロールがメディアコントロールの邪魔にならず、それらのキティビデオを妨害されずに再生することができます。

メディアコントロールといえば、メディア再生コントロールのためのいくつかの素晴らしいアップデートがあります!

以前は、ウェブビューで再生されていたメディアを一時停止または一時停止したい場合は、JavaScriptを注入する必要がありました。

また、DOMを制御できるようにするには、DOM内の特定の要素を見つける必要があります。

しかし今、私たちはあなたのウェブビューでメディアの状態を簡単に制御できるシンプルなAPIを持っています。

これで、すべてのメディアを簡単に一時停止したり、すべてのメディアウィンドウを閉じたり、ページ上のメディアの状態を取得したり、メディアを一時停止したりできます。これにより、setAllMediaPlaybackSuspendedがfalseに設定されるまで、メディアが一時停止し、ユーザーコントロールを無効にします。

これらの新しいAPIと使いやすさに慣れるために、Bradyに渡して、Browser Petsでこれらの新しいメディアコントロールAPIをどのように利用したかをお見せします！

ブレイディ・エイドソン:ありがとう、ミーガン。

こんにちは、私はWebKitチームのエンジニア、ブレイディ・エイドソンです。

Meganがほのめかしたように、SafariウェブサイトのWebKittensとPupsの両方が最近、静止画だけでなくビデオを投稿する機能を追加しました。つまり、ブラウザペットアプリにもビデオがあります。

これが今のアプリの外観です。

これらのボタンは、私が追加しているさまざまな機能のためのネイティブUIボタンです。

ページの上部にあるバナーはWebコンテンツであり、Webサイトはテーマカラーを設定しており、Meganが言及したWebビューthemeColorプロパティを使用して採用しました。

ビデオが追加されると、一部の人々はビデオを自動再生しないという好みを表明しました。

この一時停止ボタンは、それらを収容するためのものです。

それが何をするか見てみましょう。

犬ではなく、子猫のビデオだけが一時停止しました。

そして、プレイを押すと、何も起こりません。

コードを見てみましょう。-コードを見てみましょう。

このJavaScriptは、以前にこれらのビデオを一時停止しようとする唯一の選択肢であり、問題がありました。

私は2つの異なるウェブサイトのウェブページの構造を理解しなければならず、その構造は絶えず変化しています。

たとえば、Pups WebサイトのこのJavaScriptは以前は機能していましたが、今は機能しません。

幸いなことに、今はもっと良い方法があります。

まず、ウェブビューでpauseAllMediaPlaybackの呼び出しを採用しました。

これは、ページ上のすべてのメディア要素でJavaScript関数の一時停止を呼び出すのと同じです。

そして、それはうまく機能します。

しかし、ページを更新したときに何が起こるかに注目してください。

ビデオは再び再生されます。

新しいページの読み込み。

これらのビデオは一時停止されたことがありません。

もっとスティッキーなものが欲しいなら、setAllMediaPlaybackSuspendedを使います。

今それを試してみましょう。

ビデオが一時停止され、ページを更新した後でも一時停止されたままであることに注意してください。

これは、この設定はウェブビュー自体のプロパティであり、その中のコンテンツのプロパティではないためです。

また、私は再開することができます。

これらの新しいAPIのおかげで、アプリにより良いメディア体験を追加する柔軟性ができるようになりました。

戻るよ、ミーガン。

ミーガン：ありがとう、ブレイディ！

それらのペットは素晴らしく見え、新しいメディアコントロールでさらに良く見えます。

したがって、これらは、JavaScriptの使用を回避できるWKWebViewの新しいAPIです。

アプリの作成やウェブコンテンツとのやり取りが以前よりもさらに簡単になることを願っています。

次に、以前はSafariでしか利用できなかった機能にアクセスできるいくつかのブラウザレベルのAPIを確認します。

カバーすべきAPIには3つの分野があります。

まず、シンプルなHTTPSオーバーライドフラグです。

次はメディアキャプチャ、またはウェブで知られているように、getUserMediaです。これは現在、ウェブビューで完全に利用可能です。

そして最後に、WKWebViewに関連して機能するダウンロードを管理する新しいAPIは、アプリでのダウンロードを許可および管理します。

では、HTTPSから始めましょう。

ウェブ上のセキュリティとプライバシーは常に重要であり、私たちは常にあなたとあなたのユーザーにとってセキュリティとプライバシーを容易にする新しい方法を探しています。

これはウェブを閲覧するためのより安全で安全な方法であるため、HTTPSにトラフィックを移動するための幅広い業界のプッシュがありました。

多くのトップサイトはHTTPSをサポートしており、HTTPからHTTPSへの接続を自動的にアップグレードするサイトもあります。

iOS 15とmacOS Monterey以降、HTTPSをサポートしていることをわかっているサイトにHTTPリクエストを受け付け、アップグレードしています。

この追加のセキュリティを得るために、あなたは全く何もする必要はありません!

しかし、ローカルデバッグのためにオフにする必要がある場合は、設定時に簡単に設定できるフラグがあります。

うまくいけば、あなたはこれを必要としないでしょうが、あなたがそうするなら、それはここにあり、それはおそらく本番コードで行われるべきではありません。

次に、メディアキャプチャで何が起こっているのかを見直しましょう。

iOS 14.3では、WKWebViewのgetUserMediaを有効にしました。これにより、WebRTC機能がアプリ内で機能するようにしました。

今、私たちはそれをさらに良くしました!

カスタムスキームハンドラからWebコンテンツをロードすると、ユーザーリクエストプロンプトは、WebサイトのURLからのリクエストを表示するのではなく、アプリをリクエストの元として表示します。

これにより、ユーザーにとってより直感的でシームレスな体験が得られるはずです。

プロンプトをURLからのリクエストとして残したい場合は、カスタムスキームハンドラなしでロードするだけで、プロンプトが今日のまま表示されます。

また、ウェブコンテンツを扱う際に、カメラとマイクの許可をユーザーに要求するタイミングと方法を決定できる新しいAPIもあります。

通常の資格とプロンプトを使用してカメラとマイクのユーザー権限を取得したら、権限プロンプトを表示するかどうかを決定できます。

これを使用して、独自のプロンプトを実装したり、制御して信頼するWebコンテンツに対するユーザーの以前の応答を記憶したりできます。

WKWebViewでUIデリゲートを作成して設定することで、ユーザーにカメラまたはマイクを使用する許可を求めるタイミングを決定できるようになりました。

このデリゲートを実装しない場合、ユーザーは今日と同じようにプロンプトを引き続き取得します。

しかし、ウェブサイトとの以前のインタラクションからユーザー設定を保存したためにプロンプトをスキップしたい場合は、このデリゲートがそれを可能にします。

ブラウザペットのためにこれらの新しいAPIをどのように活用しましたか?

さて、私たちのコントロールを超えた状況のために、チームは公園での毎月の子犬のミートアップをキャンセルしなければなりませんでした。

私たちの親愛なる犬をお互いに共有する必要性を満たすために、ブレイディと私はブラウザペットに仮想ドッグパークを追加することにしました。そうすれば、私たちはまだ私たちの社会的な犬の良さを進行させることができました。

これには、getUserMediaを使用してWebRTC機能を設定し、お互いや犬の友達をリアルタイムで見てチャットできるようにすることが含まれます!

UIデリゲートを設定するとき、サーバーからの要求は、ユーザーがすでにアプリにカメラとマイクを使用する許可を与えた場合、ユーザーが許可を与えるものであることを知っています。

そのため、WKWebViewでこのデリゲートを設定することで、そのプロンプトをスキップできます。

しかし、私にできるのはそれだけではありません!

このユーザーメディアを開始および停止するためにJavaScriptを実行する代わりに、JavaScriptなしでメディアコントロールと対話する方法と同様に、状態を取得して設定することができます。

これはカメラでもマイクでも機能します。

これらの新しいAPIと使いやすさにさらに精通するために、Bradyに返します。Bradyは、Virtual dog parkをBrowser Petsに追加する方法を紹介します！

ブレイディ:ありがとう、ミーガン。

ミーガンが述べたように、私たちが住んでいる時代のために、私たちは仮想ドッグパークを稼働させなければなりませんでした。

ブラウザペットアプリをもう一度見てみましょう。

通話ボタンに気付いた人もいるかもしれません。

今すぐそれをタップしましょう。

私たちは、友人の家でホストされているバーチャルドッグパークにすぐに接続されます。

コネクトをタップして楽しみに参加しましょう。

さて、このアプリでカメラを使用したのは初めてなので、ブラウザペットに関するシステム全体のプロンプトが表示されます。

絶対に許可を選択しましょう。

そして、現在表示しているウェブサイトに固有の2番目のプロンプトは、今日のシステムのデフォルトの動作です。

それも許可しましょう。

そして、私たちはそこにいます。getUserMediaが動作しています。

しかし、Meganが述べたように、WKUIDelegateに変更を加えることができるかどうか、経験をさらに良くしてみましょう。

私たちの代理人では、仮想ドッグパークのコンテンツを提供するホストを確認し、メディアキャプチャアクセスを許可します。

それがブラウザペットをどのように変えるか見てみましょう。

すごい。プロンプトはありません。

また、デリゲートを使用する方法は、将来のコンテンツが他のホストから来て、カメラにアクセスしようとする場合、ユーザーを安全かつプライベートに保ちます。

ビデオチャットに入ったので、ミュートボタンを試してみましょう。

ご覧のとおり、私のカメラフィードが落ちました。

また、ステータスバーの記録インジケーターが消えてミュートが解除されていることに気付くでしょう。カメラのフィードを元に戻すと、記録インジケーターが戻ってきます。

これは簡単でした。JavaScriptは必要ありません。

私がしなければならなかったのは、Meganが言及したように、それをwebView.setCameraCaptureStateに接続することだけでした。

これは、これらのAPIを使用して、WKWebViewアプリでメディアキャプチャエクスペリエンスを簡単にカスタマイズする方法の単なる味でした。

戻るよ、ミーガン。

ミーガン：ありがとう、ブレイディ！

私たちはすべての素晴らしいペットと会い続けることができてとてもうれしいです。

最後に、ダウンロードについて話しましょう。

ブラウザペットユーザーは、これらのかわいい動物の写真を友人や家族と共有したいと言っていますが、Appleの従業員だけがブラウザペットアプリを使用することを許可されています。

幸いなことに、ウェブビューからのダウンロードを許可および管理できるAPIを追加し、ファイルの共有をこれまで以上に簡単にしました!

ウェブからダウンロードを開始するには3つの方法があります。

ウェブコンテンツはダウンロードを開始し、サーバーはダウンロードを開始し、アプリはダウンロードを開始できます。

ウェブコンテンツは、これに似たJavaScriptでダウンロードを開始します。

このJavaScriptが実行されると、ダウンロードナビゲーションアクションが開始され、shouldPerformDownloadがtrueに設定されているナビゲーションデリゲートが呼び合います。

この値を使用して、他のロジックとともに、ダウンロードを許可するかどうかを判断する必要があります。

サーバーは、WebビューでloadRequestを呼び出した後、このようにHTTPでダウンロードを開始できます。

その場合、WKNavigationResponseには「添付ファイル」を含む値を持つContent-Dispositionヘッダーフィールドがあり、その場合は、決定ハンドラからWKNavigationActionPolicyDownloadを返してダウンロードを開始する必要があります。

最後に、アプリは、このようなNSURLRequestを使用して、現在のページのコンテキストで何かをダウンロードしたいと判断できます。

どのような方法を使用しても、WKDownloadオブジェクトを取得するときに、バイトをディスクに書き込む場所を伝えるために、そのオブジェクトにデリゲートプロパティを設定する必要があります。

そうしない場合、ダウンロードは自動的にキャンセルされます。

ダウンロードに失敗した場合、デリゲートにメソッドを実装すると、ダウンロードを再開するデータが渡されます。

その後、そのデータを使用して、ウェブビューからダウンロードを再開できます。

この新しいAPIを使用すると、子猫をファイルにダウンロードし、写真に保存しない簡単な方法を提供できるようになりました。

だから、これらは私たちのブラウザレベルのAPIです。

私たちは、彼らがあなたとあなたのユーザーにあなたのアプリで豊かなウェブ体験を持つためのより多くのオプションを提供すると思います。

うわー、なんて旅だ！

今日、私たちは一緒に多くのことを探求しました。

JavaScriptを注入する代わりに使用できるいくつかのAPIについて話し、より強力なブラウザレベルの機能をいくつか取り上げました。

新しいテーマカラー、テキストインタラクション、メディア再生APIを使用する方がはるかに簡単です。

また、自動HTTPS接続、getUserMediaプロンプトの簡単で安全な制御、WKDownloadの追加により、アプリでより豊かな体験をより簡単かつ安全にしたので、アプリでダウンロードを簡単に管理できます。

今年サポートしている新しいWeb APIの詳細については、「高度なWebコンテンツの開発」セッションをご覧ください。

また、「Webインスペクタの改善を発見」でWebコンテンツをデバッグおよび改善する新しい方法を発見することもできます。アプリやWeb用の素晴らしいWebコンテンツを作成するのに役立つ2つの素晴らしいセッション。

ウェブはまだ成長しており、そうであるように、私たちも成長します。

今年実装したAPIの多くは、開発者のフィードバックに基づいています。

だから、あなたが見たいAPIを持っているなら、私たちはあなたから話を聞きたいです!

Appleとのフィードバックに加えて、webkit.orgには、Slackワークスペースからメーリングリストまで、複数の連絡方法があります。

WebKitはオープンソースなので、ファイルのバグだけでなく、WebKitを自分でチェックして構築する方法も学ぶことができます。

私たちの新しいAPIの探求に参加してくれてありがとう!

私はあなたがWWDC21の素晴らしい残りを持っていることを願っています!

♪