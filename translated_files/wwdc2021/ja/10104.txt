10104

♪ ♪

こんにちは。

iOSのMeet Safari Web Extensionsへようこそ。

私はサファリチームのエンジニア、デビッド・ケサダです。

そして今日は、iOS 15、Safari Web Extensionsのエキサイティングな新機能を歩きます。

Web拡張機能は、ユーザーが膨大な数の方法でブラウジングを拡張およびカスタマイズできる強力なタイプのブラウザ拡張機能です。

それらは、HTML、CSS、JavaScriptの標準的なウェブ技術で構築されています。

また、WebExtension APIはしばらくの間、すべての主要なデスクトップブラウザで利用可能でした。つまり、ブラウザ拡張機能を一度作成して、すべてのブラウザに展開して、非常に多くのユーザーにリーチできます。

しかし今、私はWeb拡張機能がiOS 15に登場し、これまで以上に多くのユーザーのためのブラウザ拡張機能を構築できることを伝えることに興奮しています。

iOSで実行されているSafari Web Extensionのデモをお見せしたいと思います。

Sea Creatorという拡張機能を披露します。

この拡張機能はもともとMacのブラウザ用に書かれていましたが、私はそれをiOSにもたらすことに取り組んできました。

この拡張機能は、海の生き物に関する楽しい事実を示し、海の生き物の名前を絵文字に置き換えることで、海の生物についてもっと読むのを楽しくします。

iPadでこれを見てみましょう。 見てみましょう。

今、Sea Creatorをインストールしたばかりで、魚に関する記事を読んでいるSafariを開きました。

絵文字でこのページを盛り上げることができるように、ここでSea Creatorを使い始めたいと思っています。

そこで、アクションメニューを開き、新しい拡張機能リストを掘り下げます。これにより、Sea Creatorを含む利用可能なすべての拡張機能が表示されます。

だから私はそれをオンにします。

さて、Sea Creatorのもう1つの機能は、新しいタブを開くたびに使用するカスタムスタートページでSafariの前面と中央に置くことができることです。

もう少ししたら調べてみます。

そして今、私はシークリエーターをオンにしたので、それは私が使用する準備ができているアクションメニューのすぐそこにあります。

そして、私がそれを行うとき、Safariは私がSea Creatorにこのサイトへのフルアクセスを与えても大丈夫かどうかを私に尋ねます。

同じWeb拡張機能の許可モデルをMacのSafariからiOSに持ち込みました。つまり、私はユーザーとして、ブラウジング拡張機能のどれだけにアクセスできるかを完全に制御できます。

これについては後で詳しく説明します。

しかし、今、私はシークリエイターの実行を許可します。

そして、ちょうどそのように、それはページ上のこれらすべての魚の絵文字を交換しました、それはちょうど私がそれを読むのが好きな方法です。

また、このポップアップが開き、これまでに置き換えた単語の合計が表示されます。

しかし、この1ページだけではありません。

私はSea Creatorにこのウェブサイト全体で作業する許可を与えました。

だから、他のページに移動すると、Sea Creatorはまだ私のために働いていて、ここでも絵文字をくれます。

使い始めたら、わざわざエクステンションをもう一度開く必要はありません。

もちろん、Sea Creatorには先に述べたもう1つの機能があります。

より多くのブラウジングを行うために新しいタブを開くと、今日のヒトデに関する今日の事実でSea Creatorのこの大胆な新しいタブページに迎えられます-そしてもう一度、そのカウンターは、Sea Creatorがこれまでに私に与えてくれた絵文字の数を示しています。

これはかなりクールです。

だから、それはiOSでうまく機能しているSea Creatorを簡単に見ることでした。

このセッションでは、あなたもiOS用のSafari Web拡張機能を作成する方法をお見せしたいと思います。

そして、既存の拡張機能を取り、いくつかの変更を加えるだけでiOSに持ち込んだ方法の例として、Sea Creatorを使用します。

しかし、以前にブラウザ拡張機能を書いたことがなくても心配しないでください。

Web拡張機能の仕組みと、新しい拡張機能の作成を開始する方法の概要を説明します。

その過程で、あなたの拡張機能が最高のものになるのを助けるために、いくつかのデバッグテクニックとベストプラクティスを取り上げます。

そして、ユーザーのプライバシーと、それがSafari Web Extensionsの権限モデルとどのように関連しているかに関するいくつかの考えで締めくくります。

だから、私たちの旅は、そもそもiOSで実行できるウェブ拡張機能を作成することから始まります。

これがどのように機能するかを理解するために、舞台裏を見てみましょう。

Safariにとって、ウェブ拡張機能はアプリの一部であることを理解することが重要です。

したがって、ウェブ拡張機能をインストールする場合は、そのアプリをインストールします。

また、他のタイプのiOSアプリと同様に、Safari Web拡張機能を備えたアプリはApp Storeで見つけることができます。

また、Xcodeには、拡張機能を出荷するためのアプリを構築するために必要なものがすべて揃っています。

したがって、iOS用のSafari Web拡張機能の構築を考えるとき、3つの場所のうちの1つから始めるかもしれません。

ゼロから新しい拡張機能を作成することを検討しているのかもしれませんし、すでに別のブラウザ用に書いたのかもしれませんし、Safariに持ち込みたいのかもしれませんし、MacのSafariの拡張機能がすでに持っていて、iOSでも利用できるようにしたいのかもしれません。

これらの各ケースで何ができるかを確認したいと思います。

したがって、まず、新しいWeb拡張機能を作成したい場合は、Xcodeに含まれているテンプレートを使用して、非常に簡単に始めることができます。

新しいXcodeプロジェクトを作成し、Safari Extension Appテンプレートを使用して、Web拡張機能とそれを含むアプリの構築を開始できます。

そして、このテンプレートを使用すると、典型的なWeb拡張機能が持つ可能性のあるすべてのリソースが付属する拡張機能を取得します。

すでにそこにあるものをカスタマイズしたり、拡張機能のニーズに応じてピースを追加または削除したりすることで、これを出発点として使用できます。

これで、すでに別のブラウザ用のWeb拡張機能を構築している場合は、Safari Web Extension Converterと呼ばれるツールを利用して、既存の拡張機能からXcodeプロジェクトを自動的に作成できます。

コマンドラインでコンバーターを実行し、拡張機能のリソースへのパスを提供するだけで、ネイティブアプリで拡張機能をパッケージ化する新しいXcodeプロジェクトが作成されます。

そして、Xcode 13の新機能であるSafari Web Extension Converterは、デフォルトでiOSとmacOSの両方でSafariをサポートするプロジェクトを作成します。

また、新しく作成されたプロジェクトは、デフォルトでは、既存の拡張機能のリソースをコピーするのではなく、元のパスで参照します。

最後に、過去にmacOS用のSafari Web Extensionを構築するためにXcodeプロジェクトをすでに設定している場合は、コンバーターを使用してそのプロジェクトをアップグレードして、iOSもサポートすることもできます。

コンバーターを実行し、Xcodeプロジェクトへのパスとともに--rebuild-projectオプションを提供できます。

その後、コンバーターはiOS互換バージョンの拡張機能と包含アプリをプロジェクトに追加します。

今、私は初めてSea CreatorをiOSに持ち込むステップをたどって、Safari Web Extension Converterを実際に見せたいです。

これが私のSea Creator Xcodeプロジェクトで、MacでSafari用のSea Creatorを開発するために使用しました。

しかし、それは今Macしかサポートしていないので、私はそれを修正したいです。

そこで、ターミナルを開いてxcrun safari-web-extension-converterと入力し、--rebuild-projectオプションを使用し、Xcodeプロジェクトへのパスを提供し、コンバーターを実行します。

そして、それは私の既存のプロジェクトに関するいくつかの詳細を確認し、クロスプラットフォームバージョンでそれを上書きしたいかどうかを私に尋ねるのをやめます。

また、コンバーターを実行すると、拡張機能との潜在的な互換性の問題が警告されます。

この場合、iOSではサポートされていない永続的な背景ページと呼ばれるものの使用について警告しています。

後でこれを修正する必要があります。

しかし、今のところ、コンバーターを続けさせます。

そして、それが完了すると、私のプロジェクトは自動的に開きます。

ここには、私のアプリのiOSとmacOSの両方のバージョンと拡張機能のフォルダがあることに注意してください。

さて、共有拡張機能グループ内のリソースフォルダを見てみましょう。

ここでは、Sea Creator Web Extensionのコア部分を見つけることができます。

Web Extension APIを初めて使用している人のために、後で言及するので、これらの部分のいくつかが何であるかを説明したいと思います。

マニフェストから始めます。

これは、拡張子の構造を説明するJSONファイルです。

拡張機能の名前、アクセスしたいウェブサイト、ポップアップページやSea Creatorのような新しいタブページなど、サポートする機能などの重要な情報が含まれています。

次に、バックグラウンドスクリプトと呼ばれるJavaScriptソースがあります。

ブラウザは、拡張機能が有効になっているときにこのスクリプトをバックグラウンドで実行することができ、拡張機能はブラウザまたは拡張機能の他の部分から来るさまざまなイベントをリッスンすることができます。

Sea Creatorのバックグラウンドスクリプトは、ウェブページに追加された絵文字の数のカウンターを追跡します。

次に、コンテンツスクリプトと呼ばれる別のタイプのスクリプトがあります。

ブラウザは、ユーザーが訪問したウェブページでこのスクリプトを自動的に実行します。

拡張機能は任意の数のコンテンツスクリプトを持つことができ、マニフェストはどのコンテンツスクリプトをどのWebサイトで実行するかを指定します。

このスクリプトは、拡張機能にページを直接操作してページを拡張およびカスタマイズする権限を与えます。

たとえば、Sea Creatorのコンテンツページは、実際に動物の名前を絵文字に置き換えるものです。

そして、それを行うと、バックグラウンドスクリプトにメッセージを送信し、その中央カウンタを更新できます。

もちろん、この拡張機能には、新しいタブページ用のHTML、CSS、その他のJavaScriptファイル、およびそのポップアップページもあります。

そして最後に、ローカライズされた文字列、拡張機能のアイコンやその他のグラフィックなど、他のリソースがいくつかあります。

したがって、これらの作品はすべて一緒になって、Sea Creator Web Extensionを作ります。

そして、Safari Web Extension Converterのおかげで、私はこれらすべてをネイティブアプリにパッケージ化するプロジェクトを持っています。

そして、私は今プロジェクトを実行できるので、すぐにSafariでSea Creatorを使い始めることができます。

画面上部のツールバーに移動し、iOS用のSea Creatorを選択し、アプリを実行する目的地を選択します。

私はiOSデバイスを接続していないので、この場合はiPhoneシミュレーターを使用します。

次に、[実行]ボタンをクリックします。

そして、Xcodeは私のアプリプロジェクトを構築し、シミュレータをロードし、私のアプリを実行します。

これはWeb Extension Converterによって生成されたSea Creatorアプリで、Sea Creator Web Extensionが含まれています。

このセッションの冒頭で、Safari内で直接拡張機能をオンにできることを示しましたが、アプリが示唆するように、設定を使用して拡張機能を管理することもできます。

そして、ここでそれを披露したいので、設定に切り替えます。

Safari、Extensions、そしてSea Creatorに飛び込みます。

そして、これはSea Creatorの詳細ページで、拡張機能に関する情報とそれをオンにするスイッチがあります。

しかし、そのスイッチはグレー表示になっていて、まだ拡張機能をオンにできません。

これは、読み込みを妨げる拡張機能に問題があることを意味します。

私は間違いなく次にこれを調べる必要があります。

そして、これは私がデバッグについて話したいところです。

プロジェクトを構築して拡張機能をインストールできるのは素晴らしい第一歩ですが、もちろん、なぜうまくいかないのかを知るために、より深く掘り下げる方法を知ることが不可欠です。

Web拡張機能のエラーを特定し、Webインスペクタなどのツールを使用して拡張機能の一部をデバッグするのは簡単です。

設定を振り返ってみると、下部にエラーが表示され、iOSの拡張機能には非永続的な背景ページが必要です。

これは聞き覚えがある。

コンバーターが以前に私に警告したのと同じ問題です。

そして今、私は実際にそれを修正しに行きたいです。

だから私はXcodeに戻り、マニフェストを開き、バックグラウンドセクションに「persistent」:falseキーを追加します。

この変更については後で詳しく説明しますが、今のところ、これでエラーを乗り越えるはずです。

この変更を行ったので、アプリを再度実行して、更新された拡張機能をシミュレーターにインストールします。

そして、これが再びSea Creatorアプリです。

修正すべきエラーが1つしかないように見えたので、設定に戻るのではなく、Safariに直行します。

Safariを開き、拡張機能リストを開くと、Sea Creatorがあり、今すぐオンにできるようです。

Safariは、Sea Creatorの新しいタブエクスペリエンスを使用する選択肢を提供します。

そして、私は前にそれを見たことがないので、それがiPhoneでどのように見えるかを確認したいです。

だから、それを新しいタブページとして設定し、拡張機能リストを閉じて、新しいタブを開きます。

そして、私が期待したように、Sea Creatorの新しいタブページがあります。

しかし、テキストは本当に小さく、ページは見栄えがよくありません。

iOSでこの拡張機能を実行するのは初めてなので、コンテンツがまだiPhoneでうまく動作するように調整されていないことは驚くべきことではありません。

今すぐこれを修正したいのですが、これを行うには、Webインスペクタを使用してこのページを詳しく見て、念頭に置いているいくつかの変更を試してみます。

Web Inspectorに行くには、MacでSafariを開き、SafariのAdvanced Preferencesを再確認して、Developメニューが有効になっていることを確認します。

そして今、私はその開発メニューを持っているので、私はそれを開き、私が使用しているiPhoneシミュレータを選択し、検査するページを選択することができます。

さて、シークリエイターには2つの選択肢があります。

バックグラウンドスクリプトをデバッグしたい場合は、拡張機能の背景ページを選択できますが、この場合は、新しいタブページを検査します。

だから私は他の選択肢を選びます。

そして今、私はウェブインスペクタにいます。

ここで最初に取り上げたいのは、ページの全体的なサイズです。

デフォルトでは、iPhoneのSafariはWebページをデスクトップブラウザのサイズのようにレンダリングし、より大きなコンテンツを縮小して画面に収まります。

しかし、テキストが小さすぎるので、私はここでこの動作を望んでいません。

だから、iPhoneのウェブデザインに関しては、非常に一般的な習慣を使います。

ビューポートのメタタグを追加して、Safariにこの方法でコンテンツを拡大縮小しないように伝えます。

Head要素を選択し、子要素を追加し、そのビューポートメタタグの内容を追加します。

タグを追加し、その変更に応じてシミュレータでページが更新されます。

今、すべてのテキストは読みやすいサイズですが、すべて画面に収まるわけではありません。これは私の次の問題です。

なぜこのようにレイアウトされているのかを理解するために、このページの要素を調べたいです。

ボディタグを見ると、ページ上のすべてのコンテンツを含むこのdivがあることがわかります。

焦点を合わせて右側のスタイルシートのサイドバーを見ると、要素の固定幅が850であることがわかります。

それは、ウィンドウが本当に広く、ある時点でテキストをラップしたいデスクトップでは理にかなっています。

しかし、電話はそれほど広くないので、それはiPhoneでは機能しません。

そのルールが正確な幅を要求するのではなく、コンテンツの最大幅を設定すると、ここでより理にかなっていると思います。

そして、私はここで単にルールを編集することができます。

幅をクリックして最大幅に変更すると、シミュレータのページがその変更を反映するように更新されます。

これで、コンテンツの幅はiPhoneにはるかに適しており、すべてのテキストが画面に収まります。

これは今はるかに良く見えますが、私が行ったこれらの変更は、このインスペクターセッションの一時的なものです。

これらの変更を失わないように、実際にこれらの変更をプロジェクトに保存したいです。

そして、スタイルシートインスペクタで作業している間、スタイルシートの更新されたコピーを保存するのは本当に簡単です。

Command + Sと入力するだけで、更新されたルールを持つスタイルシートを保存できます。

そして、私のプロジェクトでnew_tab_page.cssを上書きします。

しかし、ビューポートの変更のために、そのタグを静的リソースではなくライブWebページに追加したので、元のソースに同じ変更を加える必要があります。

そのタグを選択し、コピーし、Xcodeに戻り、新しいタブページのソースを開き、そこにコンテンツを貼り付けます。

だから、次回Sea Creatorを実行するときは、その更新されたページソースとスタイルシートを使用し、再び同じように良く見えるでしょう。

そして、これは、Webインスペクタを使用してWeb拡張機能のボンネットの下を見て、何が起こっているのかを正確に理解し、拡張機能を反復しながら潜在的な変更を試すいくつかの例です。

今のところ、私は新しいタブページだけを見るつもりですが、開発の後半では、明らかにiOSで拡張機能の他のすべての部分をテストしに行く必要があり、そのために同じツールとテクニックを使用します。

iOSでSafariの拡張機能設定を使用して、Web拡張機能の設定のエラーを表示できます。

具体的には、Sea Creatorは永続的な背景ページを使用するという致命的なエラーがありましたが、ここには非致命的な警告があるかもしれないので、チェックする必要があります。

これらの詳細は、Xcodeからのアプリのデバッグビルドの設定にのみ表示され、App StoreやTestFlightからのコピーには表示されません。

Web拡張機能を変更すると、アプリを再度実行して、デバイスまたはシミュレータで拡張機能を更新するだけです。

そしてもちろん、Webインスペクタを使用すると、拡張機能のWebコンテンツに関する問題を調査できます。

Webインスペクタにアクセスするには、MacのSafariの高度な環境設定で開発メニューを有効にしなければならなかったことを覚えておいてください。

私のデモでは、拡張機能にiOSシミュレータを使用しましたが、物理的なiOSデバイスを使用する場合は、Safariの高度な設定でそのデバイスでWebインスペクタのサポートを有効にする必要があります。

Web Inspectorを深く掘り下げ、その最新の機能のいくつかについて学ぶには、Discover Web Inspectorの改善点をチェックしてください。

iOS用のSafari Web拡張機能を作成し、いくつかの基本的な問題をデバッグしたので、iOSでSafariの拡張機能を構築する際に注意する必要があるいくつかのことを含め、心に留めておくべきいくつかのベストプラクティスについて説明したいと思います。

非永続的な背景ページから始めて、あなたの拡張機能に関連する可能性のある5つのトピックに焦点を当てます。

バックグラウンドページは、拡張機能のバックグラウンドスクリプトを実行するためにブラウザが読み込むウェブページです。

そして、このページでは、拡張機能がブラウザまたは拡張機能の他の部分から送信されたイベントを処理できます。

しかし、このページをロードしたままにしておくと、パフォーマンスコストがかかります。

有効になっている拡張機能ごとに、もう1つのタブを開いたままにして実行しているかのように、メモリと電力を使用できます。

これらすべてのページを常に読み込んでおくと、かなり無駄になる可能性があります。

しかし、バックグラウンドページを非永続化することができます。つまり、ブラウザは拡張機能が実際に作業を行う必要がある場合にのみロードし、ブラウザはしばらくアイドル状態のときにそのページを後でアンロードできます。

そうすれば、パフォーマンスコストは、拡張機能が有用なことをしている間にのみ支払われます。

システムメモリとバッテリー寿命が特にプレミアムであるiOSでは、バックグラウンドページが非永続的でなければならないため、これは重要です。

XcodeのWeb拡張テンプレートには、すでに非永続的な背景ページが付属しているため、iOSで実行する準備ができています。

しかし、Sea Creatorのように永続的な背景ページを使用する既存の拡張機能がある場合は、非永続的に変更する必要があります。

そして、マニフェストのバックグラウンドセクションに「永続的:」Falseキーを追加することで、それを行うことができます。

非永続的な背景ページを使用するように拡張機能を更新する際に直面する可能性のあるベストプラクティスと潜在的な問題の詳細については、Explore Safari Web Extension Improvementsをご覧ください。

次に、レスポンシブデザインについて話しましょう。

Sea Creatorで学んだように、iOSに拡張機能を導入することは、そのWebコンテンツがこれまで考慮したことのない新しい環境でレンダリングされる可能性があることを意味します。

Sea Creatorの新しいタブページで行ったように、iPhoneとiPadで拡張機能のWebコンテンツのレイアウトをテストし、さまざまな画面サイズに対応できるレスポンシブデザインを使用してください。

しかし、iOSでウェブコンテンツを素晴らしく見せることに関しては、画面サイズの違いだけが考慮事項ではありません。

知っておくべきことをいくつかお話ししましょう。お聞かせください。

拡張機能に、画面の下部付近に重要な要素をレイアウトした全ページのWebコンテンツがある場合は、Safariのタブバーまたはデバイスのホームインジケーターでカバーされている可能性があります。

CSS用語では、コンテンツが部分的に隠されている可能性のある画面の端付近のこの領域は安全でない領域と呼ばれ、ビューポートの使用可能な領域は安全領域と呼ばれます。

CSS環境変数を使用すると、セーフエリアインセットを計算して、重要な要素がセーフエリア内に配置されていることを確認できます。

iPhoneでは、これはランドスケープでも検討する価値があります。ランドスケープでは、デバイスにはディスプレイの左側と右側にも安全な領域のインセットがある可能性があります。

同様のCSSを使用し、ビューポートでビューポートフィットパラメータを指定することで、Webコンテンツに重要なコンテンツをセーフエリア内に保持するエッジツーエッジのデザインを与えることができます。

iOSでウェブコンテンツをよりくつろげるこれらのAPIの詳細については、Design for Safari 15をご覧ください。

iPadとデスクトップブラウザでは、拡張機能にポップアップページがある場合は、コンテンツに合わせて快適なサイズのポップオーバーとして表示されることに慣れているかもしれません。

しかし、iPhoneでは、Safariはこのウェブページをシートとして表示し、あなたのコンテンツを驚かせるかもしれません。

シートはデバイスの全幅にまたがり、コンテンツが期待するよりも高くレイアウトされる可能性があります。

Sea Creatorの初期バージョンのこのスクリーンショットでは、コンテンツには画面の端からあまりパディングがなく、本文ではなくページ内の個々の要素に背景色を設定しました。

したがって、テキストは少し窮屈に見え、背景はページ全体を埋めません。

しかし、その後、コンテンツのアライメントとパディングを更新して、呼吸するスペースをもう少し確保し、シート全体を覆うように本体の背景色を指定しました。

拡張機能にポップアップページがある場合は、拡張機能に同様の変更を加えるべきかどうかを検討してください。

また、Safariはランドスケープでも同様のプレゼンテーションを使用することに注意してください。

これらの構成で拡張機能のインターフェイスをテストして、この余分なスペースが与えられたときにレイアウトが理にかなっていることを確認してください。

そして最後に、設計上の考慮事項の中で、ダイナミックタイプについて言及したいと思います。

ダイナミックタイプは、ユーザーがテキストやその他の視覚的要素のサイズを調整できる機能です。

コンテンツを小さくして、より大きく収まるようにして、より見やすくすることができます。

拡張機能のインターフェースを小さいテキストサイズまたは大きいテキストサイズでテストして、ユーザーが選択したサイズで正しく見えることを確認してください。

Webコンテンツがダイナミックタイプを最大限に活用できるように、WebKitには、ユーザーのテキストサイズの好みを尊重し、それに合わせてサイズを変更するさまざまなシステムフォントがあります。

Safariの他のインターフェイスと同様に、テキストがユーザーが快適に読めるように、これらのフォントを拡張機能に採用する必要があります。

したがって、ここでの主なポイントは、SafariのUIを念頭に置いて拡張機能のWebコンテンツを設計することです。

iPhoneでフルページのWebコンテンツをテストして、画面サイズにうまく適応し、画面下部にあるSafariのUIと衝突しないことを確認します。

iPhoneのポップアップWebページをテストして、レイアウトがシートスタイルのプレゼンテーションで理にかなっていることを確認し、幅広いダイナミックタイプサイズでインターフェイスをテストして、ユーザーの好みに合わせて調整されていることを確認する必要があります。

Safariの新しいインターフェースで見栄えを良くするためにウェブコンテンツをデザインするためのヒントについては、Design for Safari 15をご覧ください。

次に、ポインタイベント。

拡張機能が現在、任意のクリックとドラッグのマウスイベントの処理に依存している場合は、ユーザーがiOSをタップしても同じイベントが送信されないことに注意してください。

代わりに、ポインターイベントAPIを採用する必要があります。

マウスイベントAPIに似ており、マウス入力でも同じように機能しますが、ポインターイベントAPIはタッチとApple Pencil入力も報告します。

それでは、Web Extension Windows APIについて話しましょう。

デスクトップブラウザでは、ユーザーは複数のウィンドウを開いている可能性があり、Web拡張機能はbrowser.windows APIを使用してこれらのウィンドウを操作できます。

そして、同じことがiPadにも当てはまり、Safariの複数のウィンドウを開くこともできます。

各Safariウィンドウはフルスクリーンかもしれませんし、別のアプリ、おそらく別のSafariと並んでスプリットビューにあるかもしれません。

しかし、ボンネットの下では、これらのウィンドウのそれぞれは実際にはiOSのシーンと呼ばれています。

拡張機能がWindows APIを使用している場合は、Safariの各シーンに実際には2つのウィンドウがあることを知っておく必要があります。1つは通常のブラウジング用、もう1つはプライベートブラウジング用です。

これは、Safariのシーンが1つしかないにもかかわらず、iPhoneでも当てはまります。

browser.windows.getAll APIを呼び出すと、どのウィンドウが開いているかを照会すると、APIはこれら2つのウィンドウオブジェクトを返します。

最初のウィンドウでは、シークレットプロパティはfalseで、フォーカスはtrueです。

これは私が見ているウィンドウを表しており、プライベートブラウジングではなく、通常のブラウジングです。

2番目のウィンドウには、Safariシーンのプライベートブラウジングタブがあります。

そしてもちろん、そのプロパティは最初のウィンドウとは異なります。

シークレットは真実であり、集中は誤りです。

Safariをプライベートブラウジングに切り替えてwindows.getAllを再度呼び出すと、APIは異なるウィンドウオブジェクトを返します。

これで、フォーカスされたプロパティが両方のウィンドウで変更され、2番目のウィンドウにフォーカスが追加されました。

これは、1つのSafariシーンが2つのウィンドウで表されるiPadでもまったく同じように機能します。

しかし、スプリットビューでSafariの2番目のシーンを開くと、APIは4つのウィンドウを報告します。

そして、私の拡張機能がwindows.onCreatedイベントをリッスンすると、スプリットビューを開くときにイベントが2回発生し、新しいSafariシーンの2つの新しいウィンドウごとに1回発生します。

したがって、このAPIを使用する場合は、最初は期待できないかもしれない余分なウィンドウに遭遇するので、このモデルを覚えておいてください。

ウィンドウが実際に何であるかのこのモデルに加えて、拡張機能に影響を与える可能性のあるWindows APIにはいくつかの制限があります。

ウィンドウの状態を作成、削除、更新する方法は利用できません。

iOSでは、ウィンドウの配置はユーザーによって完全に制御され、アプリや拡張機能ではありません。

ユーザーがアプリスイッチャーからSafariを閉じると予想されるように、windows.onRemovedイベントは発生しません。

それは本当に窓を閉じたり削除したりしません。

ユーザーが後で中断したところから再開するようにしておくだけです。

また、これらの制限はウィンドウ自体にのみ適用され、それらのウィンドウ内のタブには適用されないことに注意してください。

Browser.tabs APIを使用すると、Web拡張機能は、必要に応じて個々のタブを追加、削除、更新するための完全な制御をまだ持っています。

さて、ベストプラクティスの最後は機能検出です。

既存の拡張機能をiOSに持ち込むと、いくつかのAPIが利用できないことがあります。たとえば、先ほど言及したWindows APIです。

しかし、コンテキストメニューやWebRequestなど、他にもいくつかあります。

拡張機能の重要でない部分がそのようなAPIを使用している場合は、必ず機能検出を使用して、利用できないケースを処理してください。

したがって、これらのAPIを無条件に呼び出すのではなく、それらのAPIの存在に基づいてそのコードを条件付けして、拡張機能の一部をきれいに除外し、サポートするブラウザに関してより柔軟にすることができます。

また、将来追加される新しいAPIを採用する際には、すべてのブラウザや一部のユーザーがまだ使用している可能性のある以前のバージョンのブラウザですぐには利用できない可能性があるため、このパターンを使用する必要があります。

そして、それはベストプラクティスをまとめます。

私は今、Safari Web拡張機能の多くの部分をカバーしましたが、間違いなく最も重要なトピックを最後に保存しました。それはユーザーのプライバシーです。

ユーザーのプライバシーは、私たちが行うすべての大きな部分を占めているため、個人データがどのように処理されるかに関しては、ユーザーは透明性と管理に値すると考えています。

そしてもちろん、それは彼らがSafariで行うすべてを含みます。

Web拡張機能は、ユーザーのブラウジングに膨大な量のアクセスを得ることができるため、それを許可すべきかどうか、どのウェブサイトで許可すべきかはユーザー次第です。

歴史的に、他のブラウザは、あなたがそれをオンにしたときにすぐに要求するすべてのウェブサイトへの完全なアクセスを拡張機能に与えるでしょう、それは潜在的に拡張機能の味を得るために前もってプライバシーを犠牲にするように求めています。

しかし、Safariは、ユーザーが同意した場合にのみエクステンションがウェブサイトへのアクセスを許可されるオプトインモデルを使用して、Web拡張機能ユーザーに透明性と制御を提供することで、より良いことを目指しています。

あなたは以前にシークリエーターでこれを垣間見ました。

オンにしたとき、すぐにページの変更を開始しませんでしたが、Safariに「はい、ここでこの拡張機能を使用したいのですが、アクセスしても大丈夫です」と明示的に伝えたときにのみできました。

そして、私がアクセスする拡張機能を与えると、Safariはタブバーで私がこのページで実行されている拡張機能を持っていることを私に知らせるので、私は拡張機能がここで私のウェブブラウジングを見ているかもしれないことを知っています。

しかし、まだ拡張機能へのアクセスを許可していないウェブサイトに移動すると、そのインジケーターは消えます。

そして、私はその拡張機能がこのページで実行されておらず、私がここで何をしているのかを見ることができないことを知っています。

この権限モデルをもっと詳しく見てみましょう。

繰り返しますが、ユーザーは特定のWebサイトで使用することを選択した場合、拡張機能にオプトインします。

Safariは、拡張機能がアクセスしようとしているウェブサイトを明確にするダイアログを表示することで、ユーザーに同意を求めます。

これは、ユーザーがアクションメニューで拡張機能を選択するか、キーボードショートカットのいずれかを使用して拡張機能を呼び出すときに発生します。

そして、この同意は、プライバシーに敏感なAPIが機能するために必要です。

具体的には、タブのURLまたはタイトルを明らかにするAPIには、拡張機能がそのURLの許可を持っている場合にのみ、この情報が含まれます。

クッキーAPIは、拡張機能が許可しているウェブサイトのクッキーの読み書きのみを許可します。

そして、JavaScriptとスタイルシートの注入は、あなたが推測した、あなたの拡張機能が許可を持っているウェブサイトでのみ許可されます。

拡張機能に必要な権限がないが、まだユーザーに要求していないときに、拡張機能のスクリプトがこれらのAPIのいずれかを呼び出す場合、Safariは完了ハンドラーを呼び出すのを待ち、画面の上部に中断のないバナーを表示します。

これにより、拡張機能がより多くのアクセスを望んでいることをユーザーに知らせ、拡張機能が求めているウェブサイトのセットを確認し、それらのウェブサイトのアクセスを許可または拒否する決定を下すことができます。

拡張機能が本当に必要とするよりも、この方法でより多くの許可を要求することは避けるべきです。

一部のタイプの拡張機能では、許可に関するこの考え方は、必要以上のものかもしれません。

たとえば、個々のWebページを共有または注釈を付ける拡張機能は、ユーザーが任意のタブで訪問した時点でサイトへのフルアクセスを必要とせず、ユーザーのために一度に1つのことを行う許可を一度だけ必要です。

そして、activeTabパーミッションと呼ばれるこれらの拡張機能のための素晴らしい解決策があります。

拡張機能がactiveTabの許可を要求すると、Safariはユーザーが明示的に拡張機能を使用するタブで拡張機能の許可を自動的に付与します。

そして、この許可は、現在のタブのみの現在のウェブサイトに限定されます。

したがって、ユーザーがそのタブを別のWebサイトに移動すると、取り消されます。

ユーザーからの長期的なコミットメントを必要としないため、Safariはこの許可を付与するときにプロンプトを表示しません。

この機能を採用するには、マニフェストのパーミッションセクションにactiveTabを追加するだけです。

つまり、Safariでは、ユーザーは拡張機能がどのWebサイトで作業できるかを常に制御できるということです。

したがって、拡張機能は、ユーザーが訪問するすべてのページで自動的に動作できるわけではありませんのでご注意ください。

多くの拡張機能では、activeTabの許可は、それ以上のアクセスについて盗聴することなく、ユーザーが拡張機能を使用しているページだけにアクセスするのに最適な方法です。

これらの概念はすべて、Safari Web拡張機能をサポートするすべてのプラットフォームで同じです。

macOSでこれを実際に見て、activeTabを使用するための拡張機能の更新を詳しく見るには、WWDC 2020のMeet Safari Web Extensionsをチェックしてください。

そして、それはSafari Web Extensionsのプライバシー保護許可モデルです。

今日取り上げた他のすべてに加えて、iOSのSafari Web拡張機能と、それらを構築するために利用可能なツールのより完全なビューが得られることを願っています。

私たちは、今日Macですでに愛している多くの拡張機能だけでなく、まだ来ていない素晴らしい新しい拡張機能を含む、iOS 15でSafariにもたらされるWeb拡張機能体験を見ることにとても興奮しています。

したがって、拡張機能開発が初めての場合は、このセッションに関連するリンクされたリソースをチェックすることをお勧めします。

そこでは、ダウンロードして自分で試すことができるサンプルコードを見つけることができます。

また、Appleの開発者ドキュメントとMDN Webドキュメントで、利用可能なWeb拡張APIの詳細を読むことができます。

すでに別のブラウザまたはMacのSafari用のWeb拡張機能を開発している場合は、Xcode 13のSafari Web拡張機能コンバータを試して、拡張機能をiOSに簡単に持ち込むことをお勧めします。

バグレポート、提案、互換性の問題などのフィードバックがある場合は、feedbackassistant.apple.comでフィードバックを送信することをお勧めします。

また、連絡を取りたい場合や質問がある場合は、Apple Developer Forumsで私たちに連絡することもできます。

そして最後に、あなたが興味を持っているかもしれない他の2つのセッションをもう一度お勧めしたいと思います。

Safari Web拡張機能の改善は、Safari Web拡張機能への最近のAPIの追加について教えてくれます。

そして、Design for Safari 15は、iOS 15のSafariの新しいデザインでウェブコンテンツを素晴らしく見せる方法を紹介します。

見てくれてありがとう、そして素晴らしいWWDCをお過ごしください。

[明るい音楽]。