10031

♪ベース音楽の演奏♪

♪

パトリック・アングル:こんにちは!私はWebKit Developer ExperienceチームのエンジニアであるPatrickです。今年のWeb Inspectorで新しく追加された多くのエキサイティングな機能と改善点を紹介できることを嬉しく思います。

Web InspectorはmacOSのSafariの一部であり、Web開発者やデザイナーがWebページやWebアプリケーションを検査するための豊富なツールセットにアクセスできるようにします。

Webページ上のすべてのリソースとアクティビティを検査でき、macOS、iOS、iPadOS、tvOSでシームレスに動作します。

今年は、CSSグリッドを視覚化するための新しいオーバーレイ、ブレークポイントの強化、Webインスペクタで監査を作成および編集する機能から、Webインスペクタの新機能を紹介することに興奮しています。

これらの新機能について話す前に、以前にWebインスペクタを使用したことがない場合は、それを有効にする必要があります。

Safariの環境設定の「詳細」タブで、「メニューバーに開発メニューを表示」を有効にします。

Web インスペクタは、[開発] メニューの [Web インスペクタを表示] 項目を使用して開くことができます。

Webインスペクタが有効になったので、今年最初の新しいツールであるグリッドオーバーレイを見てみましょう。

最近のウェブページのレイアウトはかなり複雑になる可能性があります。

CSSグリッドは、デザイナーが信じられないほど強力で、印刷デザインで働いたことのある人なら誰でもすぐに馴染みのある方法でコンテンツを簡単にレイアウトできる2次元レイアウトシステムです。

行と列の構造が定義され、要素がグリッドに配置または分散され、柔軟でありながら予測可能なレイアウトを実現します。

グリッドは、Webページをレイアウトするための非常に有能な方法ですが、レイアウトがより複雑になるにつれて、多くの新しい質問や混乱をもたらす可能性があります。

例えば、なぜ私のコラムはこのサイズなのですか?

それとも、なぜこの青い箱がここにあるのですか?

以前はWebインスペクタでは、これらの差し迫った質問に対する主な回答源は、要素タブのスタイルサイドバーで、今年は独自の独立したサイドバーに移動し、計算されたスタイルなどの他のパネルと一緒に一致するCSSルールを表示できるようになりました。

グリッドのオーサグラニングスタイルを見ると、そのレイアウトに関する情報を収集できます。

しかし、グリッドのオーサされたスタイルは、そこに道の一部を得るだけです。

Webインスペクタでこの情報を消化するより視覚的な方法があれば、それは素晴らしいことではないでしょうか?

さて、今あります!

DOMツリーの要素を見ると、CSSグリッドである各要素の横に新しいクリック可能なグリッドバッジが表示されます。

ここでは、私たちのページに2つのCSSグリッドのうちの1つのバッジが表示されます。

この新しいバッジをクリックしてWebページに戻ると、既存のコンテンツの上に新しいグリッドオーバーレイが表示され、作成したCSSを読んで、それがあなたが思うことを期待する精神的な体操なしに、グリッドのレイアウトをインラインで視覚化することができます。

しかし、これがあなたのグリッドについて見たい正確な情報でない場合はどうなりますか?

グリッドエリア、線名、その他のオプションはどうですか?

それに答えるために、ウェブインスペクタに戻りましょう。

ここでは、グリッドオーバーレイに関連するすべてのオプションとコントロールを表示する別の新機能、レイアウトパネルを見つけることができます。

まず、ページ上のグリッドのリストを見てみましょう。 ページ上のグリッドのリストを見てみましょう。

ここでは、すべてのグリッドオーバーレイを一度にオンまたはオフに切り替えるオプションがあります。

または、単一のグリッドのオーバーレイをオフまたはオンに切り替えることもできます。

各グリッドは、リストで識別するために、対応するCSSセレクタでリストされています。

リストされている各グリッドの横には、グリッドオーバーレイの色をインタラクティブに変更できるカラースウォッチがあり、そのグリッドオーバーレイが有効になっている場合、各要素のバッジはこの色を使用します。

Webインスペクタは、次回同じページが読み込まれたときに、各要素の色を記憶します。

次に、これらのオーバーレイの表示方法を制御するオプションを見てみましょう。トラックサイズから始めて、グリッドの各トラック（行または列）のオーサ整理されたサイズを表示します。

ここのように、小数単位と最小コンテンツの組み合わせが使用されます。

次に、行番号は、グリッド内の特定の行または列に子要素を配置するために使用できる値を示します。

最後の明示的なグリッド線から数える行番号を表す負の行番号をラベル内に配置し、正の行番号と一緒に配置し、アイテムの配置方法を選択できるようにしました。

行名は、エリア名と明示的に名前が付けられた行に基づいて、グリッド内の行を参照する別の方法を提供します。

エリア名を使用すると、グリッド内の各名前付きエリアを表示できます。これは、希望する配置の両側の線に対処せずに、グリッドに子供を配置したい場合に役立ちます。

各エリアの中央にエリア名を配置し、各エリアを太いストロークで概説しました。

最後に、この2番目のグリッドコンテナで拡張グリッドラインをオンにすると、ページの端まで拡張されたトラックラインを見ることができ、グリッドの配置をページ上の他の要素と視覚的に比較することができます。

パフォーマンスを念頭に置いてオーバーレイを構築し、ページをスムーズにスクロールしながら、必要なだけ有効にすることができます。

バターのように滑らかなスクロールを提供しながら、何十ものグリッドを同時に表示できます。

それらは、ウィキペディアからのこの垂直設定テキスト、右から左へのテキスト方向、およびそれらの組み合わせのようなすべての書き込みモードで動作します。

また、これらのオーバーレイは、Safari 15または最新のSafariテクノロジープレビューを搭載したMacからリモートで検査する場合、iOS 15およびiPadOS 15でも利用できます。

グリッドはウェブ上で非常に重要なレイアウトツールであると考えています。そのため、これらのツールをWebインスペクタに持ち込み、すべてのプラットフォームでグリッドを視覚化およびデバッグして、信じられないほどのレイアウトを作成し続けることができます。

それでは、グリッドオーバーレイがウェブページの問題をよりよく理解し、解決するのにどのように役立つかを見てみましょう。

私が取り組んできたウェブページを見てみましょう。それは、私が毎朝見たい情報の簡単な概要を示しています。

通勤、その日の天気予報を見ることができます - 今夜はジャケットが欲しいようです！ - そして、今日の仕事の後に店で受け取るもののリスト

このページはCSSグリッドでレイアウトされており、これらのさまざまなサイズのタイルを簡単に作成し、私のページに配置できます。

しかし、待って、ダッシュボードを飾るために使用したこれらの楽しい絵文字の1つを配置するのを忘れたようです。

それは私の絵文字の残りの部分と一緒にここに属しています!

問題ありません。新しいグリッドオーバーレイを使用して、好きな場所に正確に配置できます。

ページの検査を開始するには、問題のある要素を右クリックして[要素の検査]を選択します。

Inspect Elementが表示されない場合は、先に説明したようにWebインスペクタを有効にしてください。

次に、詳細サイドバーのレイアウトパネルを選択し、ページ上のすべてのグリッドコンテキストを確認できます。

これらのグリッドのどれで作業したいのかよく覚えていませんが、すべてのグリッドオーバーレイの上部チェックボックスをチェックすることで、すべてのオーバーレイを一度に有効にすることができます。

今、私が作業したいグリッドコンテキストは、私のすべてのタイルを保持するピンクのものです。

このグリッドコンテキストのリストでチェックを外して、他の2つのオーバーレイをオフにします。

そして今、私は興味を持っているグリッドオーバーレイだけが残っています。

あなたが私のような人なら、手元のタスクを実行するために必要な情報だけを正確に見たいかもしれないので、迷子の絵文字を配置するための行番号だけに集中できるように、トラックサイズラベルを無効にします。

そして今、残りの行番号ラベルは、私の絵文字を配置したい場所を正確に見ることができます:列トラックライン6と行トラックライン4。

私は明示的に右クリックして、私の問題のある絵文字のためにタイルを検査したので、それはすでに私のために選択されており、私は私の修正をテストするためにそのスタイルを編集するためにすぐにジャンプすることができます。

また、新しい3パネルレイアウトを使用すると、レイアウトパネルを同時に表示できます。これは、パネルを常に切り替えることなく、ページで異なるスタイルをテストしながら表示しているラベルやグリッドオーバーレイを切り替えたい場合に最適です。

スタイルパネルで、スタイル属性セクションをクリックして、新しいプロパティ、グリッドエリアを追加します。

次に、コロンを入力して新しいプロパティの値の編集にジャンプし、行トラックライン4と列トラックライン6に「4 / 6」と入力します。

完璧です、私の絵文字は私が今欲しいところです。

しかし、もう少し考えてみると、後でグリッドから行や列を追加または削除しても、この絵文字が常にこのコーナーにあることを確認したいです。

行トラックライン4と列トラックライン6の値を与えたのと同じラベルに、それぞれに2番目の行番号-3が表示されます。

この負の行番号は、実際に私が明示的に定義したグリッドの終わりから私の絵文字3つのトラックラインを保持し、私の状況に最適です。

グリッドエリアプロパティの値をこれらの新しい値「-3 / -3」に更新し、絵文字がまだ正しい場所にあることを確認し、別の行を追加したり、グリッドから別の列を削除したりすると、引き続き続きます。

Web Inspectorに登場するこの新しいオーバーレイは、ページのレイアウトをすばやく調整するのに役立ち、既存のレイアウトを理解し、新しいレイアウトを設計するのに最適です。

では、ブレークポイントによるJavaScriptデバッグの改善について話しましょう。

スクリプトの場合、スクリプトが正常に機能しない理由を理解しようとすると、しばしばconsole.logから始めます。

あるいは、ブレークポイントを試したことがない場合は、それらをチェックすることを強くお勧めします。

それらは強力で、すぐにわかるように、以前よりもさらに設定可能です。

ブレークポイントを初めて使用する場合、開始する最も簡単な方法は、一時停止したい行でJavaScriptの行溝をクリックして、[ソース]タブで開始することです。

これにより、ブレークポイントが作成され、到達すると、その行の先頭でスクリプトを一時停止し、行の実行を待ちます。一度に1つのステートメントでコードをステップスルーしたり、特定のステートメントを深く掘り下げたり、あらゆる段階で変数の状態を表示したりできます。

しかし、ブレークポイントにはもっと多くのものがあります!

実際、5つの異なるタイプのブレークポイントがあり、あらゆる機会に1つあります。

デバッガステートメント、例外、アサーションのブレークポイントがあります。JavaScriptの行で設定できるJavaScriptブレークポイント。クリック、タイムアウト、インターバル、アニメーションフレームなどのイベントが処理されたときに一時停止するイベントブレークポイント。DOMノードに関連するアクションが発生したときに一時停止するDOMブレークポイント。

これらは、[要素] タブ、または Web インスペクタのノード プレビューのコンテキスト メニューから追加できます。

また、URLブレークポイントは、XMLHttpRequestやFetchなどのAPIを介してURLに対してネットワーク要求が行われようとしているときに一時停止します。

ブレークポイントを右クリックして[ブレークポイントの編集]を選択すると、JavaScriptブレークポイントを設定できます。

ここでは、ブレークポイントの多くの側面を制御できます。

これらの各オプションを見てみましょう。 それぞれのオプションを見てみましょう。

ブレークポイントがヒットするには真でなければならない条件を設定できます。

今年は、要素タブで現在選択されているDOMノードを参照するなど、ブレークポイント条件とアクションの式内でWebインスペクタのコンソールタブAPIの使用をサポートするようになりました。

場合によっては、ブレークポイント条件は、いくつかの反復が完了するまで停止したくないループ内のように、ヒットする前にブレークポイントを無視する回数としてよりよく表現されるかもしれません。

これは、ブレークポイントがいつ発火するかを制御する条件に加えて、または代わりに使用できます。

条件に加えて使用すると、無視された呼び出しの数は、条件が満たされた場合にのみ増加します。

次に、コードがJavaScriptソースにインラインであるかのように、変数へのアクセスを使用してコンテキストでJavaScriptを評価するなど、ブレークポイントがヒットしたときに実行されるアクションを定義できます。テンプレート文字列リテラルで簡単にコンソールにメッセージを記録します。ブレークポイントがヒットしたことを音声で知るようにシステムビープ音を再生します。プローブ式を定義します。これは、ソースタブの詳細サイドバーのプローブパネル

今年の新機能では、JavaScript式をサポートするアクションタイプは、ユーザーのジェスチャーをエミュレートするように設定できます。これは、ビデオの再生など、通常はユーザーが開始する必要があるJavaScript APIと対話する場合に役立ち、Webページのソースの変更を実装する前に新しい動作をすばやくテストできます。

これらのアクションをいくつでも組み合わせて、任意のアクションタイプの複数を含むブレークポイントをカスタマイズできます。

最後に、基礎となるWebページを変更せずにテストするためのロギングやクイックパッチを追加したい状況で、アクションを評価して実行した後、ブレークポイントを自動的に継続させることができます。

ブレークポイントを設定するためのこれらのオプションは非常に汎用性があり、今年はJavaScriptブレークポイントだけでなく、すべてのブレークポイントタイプで利用可能になりました。

これにより、ボタンなどの特定のタイプの要素のクリックイベントのみを一時停止したり、特定のURLに対してネットワーク要求が行われたときにシステムビープ音を再生したりするなど、強力なブレークポイント条件を設定できます。

すべてのブレークポイントタイプで利用可能なこれらの構成オプションは、適切なタイミングでノイズをカットしたり、少しノイズを作ったりすることで、すでに優れたデバッグツールをさらに良くします。

さて、私のダッシュボードのウェブページに戻り、これらの新しいツールがパッチのデバッグとテストを簡単にする問題を見てみましょう。

私は最近、通勤タイルに、推定通勤時間を他の人と共有するために使用したいボタンを追加しました。

いつ遅れるかわからない。

残念ながら、共有ボタンをクリックすると、何も起こりません。

さらに悪いことに、このタイルに取り組んでから数日が経ちましたが、このボタンのクリックイベントをどこで処理するか覚えていません。

幸いなことに、イベントブレークポイントを使用してクリックイベントハンドラで一時停止し、コードを見つけることができます。

ソースタブでイベントブレークポイントを作成できます。

ナビゲーションサイドバーのブレークポイントセクションの右上にあるプラスをクリックし、イベントブレークポイントを選択すると、新しいイベントブレークポイントを定義できます。

クリックするイベントを設定し、Returnキーを押して新しいブレークポイントを作成します。

ナビゲーションサイドバーにクリックブレークポイントが表示されました。

このイベントブレークポイントは、ボタンをクリックすると一時停止するはずです。

しかし、まず、通勤の最新の時間の見積もりを共有していることを確認したいので、更新ボタンをクリックして--おっと!

私のイベントブレークポイントは、共有ボタンをクリックしたときにのみ一時停止したいにもかかわらず、更新ボタンを含むすべてのクリックイベントで実際に一時停止します。

今年利用可能な新しい設定オプションを使用して、ブレークポイントを変更しましょう。

ブレークポイントを右クリックして[ブレークポイントの編集]を選択すると、ブレークポイントを編集できます。

ここでは、イベントブレークポイントの設定オプションを含むポップオーバーを取得します。

必要なときだけ一時停止するように条件を追加する必要があります。

この場合、Web InspectorコンソールAPIを使用して、現在のイベントを「$event」で取得し、イベントのターゲットが共有ボタンと等しいかどうかを確認できます。

この特定のボタンのブレークポイントをハードコーディングする代わりに、別のコンソールAPIを使用して、イベントのターゲットが「要素」タブで現在選択されているDOMノードであるかどうかを確認します。

設定ポップオーバーをクリックすると、すべての変更が自動的に適用されます。

更新ボタンをクリックすると、まだブレークポイントが一時停止しているので、[続行]ボタンをクリックして、ページでスクリプトの実行を再開します。

これで、更新ボタンをクリックすると、通勤時間が更新され、ブレークポイントがヒットしません。

しかし、共有ボタンを右クリックし、要素の検査を選択して選択した要素にすると、共有ボタンとビンゴをクリックできるようになりました!

ブレークポイントは私が望んでいた場所で正確に一時停止し、共有ボタンが機能しない理由がわかりました。この機能を書くのを忘れました。

ブレークポイントは、その日、または少なくともこのデモを再び保存し、ソースに戻って実装する前に変更をテストするために今すぐ共有をパッチするのに役立ちます。

ライン溝をクリックし、ブレークポイントインジケーターを右クリックし、ブレークポイントの編集を選択することで、共有機能にブレークポイントを追加します。

このブレークポイントに条件は必要ありませんが、アクションを追加したいです。

デフォルトのアクションタイプであるEvaluate JavaScriptは、まさに私がここで欲しいものです。

すでにデータで準備したオブジェクト「this.shareData」で「navigator.share」を呼び出すアクションにJavaScriptを追加します。

この修正のテストの一環として、実際にスクリプトを一時停止する必要はないので、評価後に自動的に続行も有効にします。

以前と同様に、ポップオーバーの外側をクリックすると、変更が保存されます。

今のところクリックイベントのブレークポイントが終わったので、インジケーターをクリックして無効にしましょう。

また、[続行]ボタンをクリックして、自分のページでスクリプトの実行を再開します。

共有ボタンをクリックすると、共有メニューが表示されます。

共有データが正しいことを確認するために、メモを選択します。

これは正しいように見えるので、ソースコードに戻ってこの変更を加えることができます。

すごい！

ブレークポイントのこれらの強化により、ソースにconsole.logステートメントをペッパーすることなく、ソリューションを特定してテストすることが可能になりました。

そして今、私は実用的な解決策を持っているので、私は私のソースに私の修正を追加することができます。

それでは、監査のエキサイティングな新機能を見てみましょう。Webインスペクタでテストを作成および編集する機能です。

監査タブの各テストはJavaScriptで書かれており、検査されたWebページに対して実行されます。

これらのテストは、誤ったDOM構造をチェックしたり、設計システムルールを強制したり、アクセシビリティ属性を見逃していないことを確認したりするのに役立ちます。

個々のテストに加えて、テストのグループを共有して実行できます。

デフォルトでは、Webインスペクタには2つのテストグループがあります。監査の仕組みとそれらがサポートする機能のツアーを提供するデモ監査と、タイトルまたは代替テキストがすべての画像要素に設定されていることを確認するなど、ARIA仕様に従ってDOMアクセシビリティのベストプラクティスのサブセットをチェックする一連のアクセシビリティテストです。

テストを選択して監査名の横にある[スタート]ボタンを使用してテストを実行するか、ナビゲーションサイドバーの上部にある[スタート]ボタンですべてのテストを実行できます。

テストの実行後、各テストの結果と、合格と不合格の全体的な要約を見ることができます。

障害がある場合は、それらの障害に関する情報を確認して、パッチを当てることができます。

テストを共有したり、外部テキストエディタで編集したりするには、テストをエクスポートし、結果のJSONファイルに変更を加え、変更されたテストをWebインスペクタにインポートすることができます。

このエクスポートとインポートのプロセスは、チーム全体またはコミュニティとテストを共有するのに最適です。

そして今年は、新しい編集モードでテストの作成と編集をさらに簡単にします。

ナビゲーションサイドバーの下部にある[編集]ボタンをクリックすると、[監査]タブが編集モードに変わり、新しいテストを作成したり、既存のテストを編集したりできるようになりました。

デフォルトのデモ監査およびアクセシビリティテストグループは削除または編集できませんが、複製して複製を編集できることに注意してください。

とりあえず、ナビゲーションサイドバーの[項目の作成]を使用して、新しいテストの作成を見てみましょう。

新しいテストケース、またはテストケースのグループを作成できます。

とりあえず、新しいテストケースの作成を見てみましょう。

新しいテストケースを作成すると、ナビゲーションサイドバーに追加され、テストのデフォルトのコンテンツが編集できることがわかります。

ここでは、設定できるいくつかの異なるものがあります。

名前、テストの説明、およびテストがサポートする最小監査バージョンは、一部の機能がサポートされていない可能性のある古いバージョンのWebインスペクタで監査が実行されていないことを確認します。

セットアップスクリプトは、すべてのトップレベルのテストまたはテストグループの前に実行されるJavaScriptです。

これにより、このトップレベルのテストのすべてのテストが依存する共通のセットアップ機能を実行できます。

最後になりましたが、テスト自体があります。これは、trueまたはfalse、またはテストの実行に関する詳細情報を含む結果オブジェクトを返すことができるJavaScript関数です。

特別なWebInspectorAuditオブジェクトも利用可能で、テスト自体とテストのセットアップの両方で使用するテスト専用の追加のAPIを公開します。

このAPIの詳細については、Webインスペクタリファレンスを参照してください。

変更は自動的に保存され、これらすべてをエクスポートせずにWebインスペクタで実行できるようになりました。

しかし、これらのテストの柔軟性を本当に理解するために、私はあなたにそれらを実際に見せたいと思います。

最後にもう一度ダッシュボードに戻り、監査がいくつかの種類のアクセシビリティの問題やWebページの設計の問題をキャッチするのにどのように役立つかを見てみましょう。

監査タブを開いたときに最初にしたいことは、デフォルトのアクセシビリティテストケースを実行することです。

これらは、私が一般的なアクセシビリティのベストプラクティスについてどのようにやっているかについて、良いベースラインの読み取りを得るのに役立ちます。

テストグループの横にある[実行]ボタンをクリックすると、これらのテストをすばやく実行できます。

そして悪くないが、私はもっとうまくやれる。

合格フィルターボタンをクリックしてそれらの結果を非表示にすることで、テストの失敗を見ることができ、テストの失敗のみを表示できます。

これを直しましょう。

このテストは、失敗したDOMノードのリストを提供し、ホバーに表示される「要素タブで表示」ボタンを使用して、そのノードに簡単にジャンプできます。

[要素]タブで、DOMノードを右クリックして[追加]>[属性]を選択し、新しいタイトルを入力して、画像にタイトルを追加することをテストします。

監査タブに戻り、同じテストグループを再度実行します。

そして今回、私はすべてのテストに合格したことがわかります。

監査のもう1つの大きな用途は、私のウェブページが自分の設計基準を満たしていることを確認することです。

このプロジェクトに取り組んでいる間の私のルールの1つは、すべての要素に小さなフォントファミリーのセットを一貫して使用していることを確認することでした。

今年Webインスペクタに追加された新しい監査編集モードを使用して、それを行いましょう。

ナビゲーションサイドバーの下部にある編集ボタンをクリックして編集を開始します。

今、私は編集モードです。

ここでは、サイドバーの上部にある[作成]ボタンを使用して、新しいテストケースを作成できます。

テストケースのデフォルトオプションを保持し、テストケースに「Fonts」という名前を付けます。

残りのテストケースを編集できるようになりました。

このテストケースが何をするかを覚えておくのに役立つ説明を追加することから始めます。

では、私が準備した実際のテストコードを挿入しましょう。

私のテストには3つの主要なステップがあります。

まず、期待されるフォントファミリの配列を作成します。

次に、予想されるフォントファミリにリストされていないフォントファミリで、ページ上のすべての要素を収集します。

最後に、テストに失敗した要素を含め、結果オブジェクトを返します。

監査の作成が終わったら、ナビゲーションサイドバーの下部にある[完了]をクリックします。

名前の横にある[実行]ボタンをクリックして監査を実行できるようになりました。

私のページのノードの1つに問題があるようなので、何が間違っているのか見てみましょう。

もう一度「要素で表示」タブボタンを使用して、要素に移動し、そのスタイルを見ることができます。

まあ、これは恥ずかしいです。

コミックサンズ！

私は本当にこのフォントを使いたくないので、代わりにこれをui丸みを帯びたフォントファミリに変更しましょう。

さて、監査タブに戻り、テストをもう一度実行し、完璧です!

私がしたい最後のことは、私が犯したのと同じ恥ずかしい間違いを避けるために同僚と共有できるように、エクスポート監査ボタンを使用してテストをエクスポートすることです - 多分私は物語のコミックサンズ部分を省くでしょうが。

組み込みのアクセシビリティテストは、私が見逃した問題をキャッチできただけでなく、Webページに独自のデザインシステムルールを適用するためのテストを書くことができ、チームが変更を確認する前に全員が同じページにいることを確認することがさらに簡単になりました。

そして、私たちはウェブインスペクタでこれらの大きな新機能をカバーしました!

CSSグリッドの新しいオーバーレイは、コンテンツが正しく見えるようにするのに役立ちます。

ブレークポイントの改善により、Webインスペクタを離れることなく、問題の修正を簡単に検索、デバッグ、テストできます。

また、Webインスペクタで新しい監査を作成および編集すると、Webページがアクセシビリティ基準と独自の基準を満たしていることを確認するためにテストをすばやく作成できます。

これらの新機能に加えて、Webインスペクタをさらに改善するために、微調整と機能強化を行い、多数のバグを修正しました。

私が行く前に、あなたに残したい役に立つリソースがいくつかあります。

Web Inspectorが、Safari、Mail、App Store、およびmacOSとiOSの他の多くのアプリで使用される高速でプライベートで安全なWebブラウザエンジンであるオープンソースのWebKitプロジェクトの一部であることに気づいていないかもしれません。

WebKitプロジェクトの詳細については、webkit.orgをご覧ください。Web Inspectorのグリッドオーバーレイに関するものなど、WebKitの新機能に関するブログ記事もあります。

Webインスペクタの新機能に関するブログ記事に加えて、幅広いWebインスペクタの機能とインターフェイスをカバーし、監査やブレークポイントなど、今日説明した多くの機能について深く掘り下げたドキュメントを見つけることもできます。

これらの機能には、私が今日カバーできたよりもはるかに多くの深さがあり、もっと知りたい場合は、ドキュメントをチェックすることを強くお勧めします。

私たちもあなたから話を聞きたいです!

バグに遭遇した場合、またはWebインスペクタを改善する方法について提案がある場合は、フィードバックアシスタントでmacOSのフィードバックを提出し、フィードバックの領域としてWebKitを選択してください。

また、約2週間ごとにリリースされるSafari Technology Previewをダウンロードすることをお勧めします。これは、すべてのMac、iPhone、およびiPadに含まれているSafariのバージョンに表示される前に、開発者が新しいWebKitおよびWeb Inspectorツール、機能、および修正に早期にアクセスできるように特別に設計されています。

最後に、「Design for Safari 15」など、これらの他の素晴らしいセッションをチェックして、Safariの美しいコンテンツを適応させてデザインする方法を学び、「高度なWebコンテンツの開発」して、Webページをさらに強化するために使用できる新しいJavaScriptとWebAssembly機能についてすべて学んでください。

また、WWDC 2020のセッション「Web Inspectorの新機能」を見て、Web Inspectorでさらに多くの改善点を確認してください。

これらの素晴らしいセッションは、開発者アプリで見つけることができます。

ありがとう！

♪