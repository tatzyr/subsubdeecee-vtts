10140

♪ ♪

みなさん、こんにちは！

私はAVFoundationエンジニアのプラシャントです。

WWDC21へようこそ。

近年、オーバーザトップストリーミングサービスの人気はリニアテレビの人気に近づいています。

あなたがいる市場によっては、ユーザーは実際に支払う必要がある広告なしのコンテンツよりも無料の広告サポートコンテンツを好むかもしれません。

したがって、HLSストリームに広告やその他のインタースティシャルを含めることに興味がある場合は、適切なセッションにチューニングしました。

飛び込む前に、HLSストリームに広告を挿入するための既存のメカニズムのいくつかを簡単に確認しましょう。

DISCONTINUITYタグを使用して、サーバー側の広告挿入を実行できます。

これは、広告セグメントがコンテンツセグメントと一緒にステッチされるという点でかなり静的なスキームであり、このステッチはプレイリストがユーザーに販売される前でも行う必要があります。

ご想像のとおり、ユーザーが広告マーカーに近づいたり、再バインドしたりする際に広告アセットの遅延バインドを許可しません。つまり、ユーザーがすでに視聴したビデオの一部に移動すると、同じ広告が再び表示されます。

HLSはセグメントの粒度で動作するため、広告ポッドとの間の遷移はセグメント境界で行う必要があります。

広告マーカーがコンテンツセグメントの中央に存在する場合は、広告をステッチするためにそのセグメントを分割する必要があります。

多くの場合、品質層の数は、一次資産と間質資産の間で異なります。

すべての主要な品質層と一緒に広告をステッチするには、広告をコンテンツエンコーディングと一致するように調整する必要があります。

また、広告がプライマリコンテンツと同じコーデックを使用していることを確認する必要があります。

そして、ライブストリーミングのシナリオでは、あなたの包装業者は多くのバックエンドの簿記をしなければならないかもしれません。

広告とインタースティシャルは、ほとんどがビデオオンデマンドストリームです。

しかし、包装業者は、広告休憩全体にわたってセグメントごとにこれらをスプールする必要があります。

クライアント側に広告を挿入することもできます。

今まで、これがどのように行われるかについての正式な勧告はありませんでした。

より一般的なアプローチの1つは、一方のプレイヤーが主要なコンテンツを提示し、もう一方のプレイヤーがインタースティシャルを提示する2人プレイスキームを使用することです。

そして、トランジションは、2人のプレイヤー間の再生を調整し、プレイヤービュー階層を管理することによって達成されます。

これはうまくいきますが、ここでの問題は主にパフォーマンス側にあります。

2人のプレイヤー間でバッファリングが適切に調整されていない場合、広告をプリフェッチすると、プライマリコンテンツストリームのアダプティブビットレートのパフォーマンスに影響します。

そして、ピクチャー・イン・ピクチャーやAirPlayのような機能は、これらのカスタムプレーヤーのアプローチでうまくやるのは本当に難しいです。

今年は、これらすべての懸念に対処し、一般的に広告の挿入をよりシンプルにしようとしました。

広告がプログラムのタイムラインにスケジュールできる個別の資産として扱われるHLSインタースティシャルを導入しています。

広告はDISCONTINUITYタグでステッチされなくなりました。

代わりに、彼らはマスタープレイリストを介して参照できる自己完結型の資産として残ります。

すぐにわかるように、このスキームは動的であり、遅延バインディング、さらには広告インベントリへの再バインディングを可能にします。

セグメントの境界に制約されなくなりました。

プログラムのタイムラインのどこにでも広告を任意に配置できます。

HLSインタースティシャルは、AVKitと組み合わせて、tvOSのナビゲーション制限のサポートを組み込み提供します。

また、AirPlayとピクチャ・イン・ピクチャのサポートも組み込まれています。

スケジュールされたすべての広告とインタースティシャルは、AirPlayセッションに引き継がれます。

また、シームレスな移行を実現するために、プライマリプレーヤーとインタースティシャルプレーヤー間のバッファリングと他のシステムリソースの使用を調整します。

次に、HLSインタースティシャルを使用した広告とともに、ビデオオンデマンドコンテンツを提示する際の典型的な再生フローを見てみましょう。

この写真の青いバーはメインコンテンツを表し、オレンジと緑のバーは再生中にスケジュールしたい広告です。

これで、プライマリは広告マーカーまで再生され、その時点で一時停止し、最初の広告が再生を開始します。

最初の広告が再生されると、2番目の広告がすぐに続きます。

2番目の広告の後、プライマリは中断したところから再開されます。

では、バッファリングシーケンスを見てみましょう。

最初の広告の開始時間までプライマリをバッファリングすることから始めます。

これで、最初の広告を事前にバッファーし、スムーズな移行を実現できるようにします。

これが完全にバッファリングされた後、2番目の広告を事前にバッファリングします。

そして、2番目の広告が完全にバッファリングされた後、プライマリを再度バッファリングして、シームレスに切り替えます。

ライブシナリオの再生フローは似ていますが、広告期間で前方にジャンプした後にプライマリーに再参加します。

これは、私たちがライブエッジと同期し続けるためです。

また、これはシームレスな移行が可能なように、同様のバッファリング戦略を採用しています。

では、HLSインタースティシャルでどのように広告をスケジュールしますか?

DATERANGEタグを使用してサーバーサイド広告の挿入ができるようになりました。

このため、属性を持つ新しい日付範囲クラスを導入しています。

このプレイリストは、PROGRAM-DATE-TIMEタグを介してタイミング情報を運びます。

広告スケジュールが日付を使用して指定されるようになったため、これらのタグは必須になりました。

ここでは、DATERANGEタグを使用して広告が並び、クラスがcom.apple.hls.interstitialに設定されています。

ID属性はイベントを一意に識別します。

START-DATEは、プライマリタイムラインで広告を開始したい場所です。

ここでは、広告が再生の5秒でスケジュールされていることがわかります。

DURATION 属性は、広告の期間を指定します。

X-ASSET-URI属性は、広告のマスタープレイリストのURIを指定します。

また、X-RESUME-OFFSET属性は、プライマリ再生を再開したいSTART-DATEからのオフセットを指定します。

0の再開オフセットは、プライマリが中断したところから再開することを意味します。

再開オフセット属性がない場合は、広告期間に等しいオフセットでプライマリに再参加します。

これはおそらくあなたがライブシナリオでやりたいことです。

ここに示されているように、インストリーム広告をスキップしたい場合があります。

そのために、履歴書のオフセットをインストリーム広告の期間として指定するだけです。

DATERANGEタグを使用して複数の広告をスケジュールできます。

ここでは、最初の広告がプライマリの5秒にスケジュールされ、2番目の広告が10秒にスケジュールされています。

広告ごとに同じ開始時間を指定するだけで、連続して広告をスケジュールできます。

ここでは、最初の広告は再生後5秒で始まり、2番目の広告も始まります。

広告はプレイリストに表示される順序で表示されます。

X-ASSET-URI属性を使用して広告を参照するこれらのアプローチでは、プレイリストにDATERANGEタグを追加するときに広告ポッドを定義する必要があります。

しかし、X-ASSET-LIST属性を使用してその決定を延期することができます。

X-ASSET-LISTは、イベントスケジュールを含むJSONオブジェクトを指します。

オブジェクトには、インタースティシャルのリストを指定するASSETS配列があり、各エントリはマスタープレイリストのURIと期間を指定します。

このJSONオブジェクトはバッファリング時にのみフェッチされ、広告インベントリへの遅延バインが可能になることに注意してください。

通常、広告は最後まで完全に再生されます。

ただし、X-PLAYOUT-LIMIT属性を使用して、広告の終了時間を指定できます。

この属性を使用して、ライブブロードキャストで早期リターンシナリオを実装できます。

アーリーリターンは、ライブフィードに戻るために広告休憩を中断したい場所です。

これはニュース速報のシナリオによるものかもしれませんし、視聴者に見逃してほしくないスポーツフィールドに突然の興奮があったのかもしれません。

では、アーリーリターンを実装するためにこれをどのように使用しますか?

ここには、6つのセグメントを含むライブプレイリストがあります。

ライブエッジはセグメント6の終わりにあります。

現在、プレイヘッドは通常、ライブエッジの背後にある3つのターゲット期間になります。

この場合、セグメント3の最後にあります。

この時点で、15秒の広告スポットはセグメント6に従うことが決定されます。

したがって、プレイリストの更新には、実際には6つのセグメントすべてと、広告スケジュールを含むDATERANGEタグが含まれています。

次のアップデートでは、プレイヘッドはセグメント4の最後に移動し、広告はまだセグメント6に続く予定です。

ここの影付きのセグメント7は、単に広告の休憩を表しています。

次のアップデートでは、再生ヘッドはセグメント5の最後に移動し、次のアップデートでは、広告ブレークの始まりです。

何もしなければ、広告は15秒間再生されます。

しかし、例えば12秒後に早期リターンをスケジュールしたい場合は、単にプレーアウト制限を指定するだけです。

これで、広告はプログラムに戻る前に12秒間再生されます。

多くの場合、契約上の理由から、ユーザーが広告を飛び越えたりスキップしたりするのを防ぎたいと思うでしょう。

X-RESTRICT属性を使用してナビゲーション制限を指定できます。

値がジャンプするX-RESTRICTは、ユーザーが広告の前の時間から広告の後の時間を探すのを防ぎます。

値スキップ付きのX-RESTRICTは、希望とは異なるレートで広告を再生するのを防ぎます。

これらの制限はUIによって実施されることに注意してください。

tvOSでは、AVKitによって施行されています。

また、ビデオプレゼンテーションにAVPlayerViewControllerを使用する場合は、それらを利用できるはずです。

他のプラットフォームを使用している場合、またはAVKitを使用していない場合、これらの制限を強制するのはアプリケーション次第です。

DATERANGEタグを使用してサーバーサイド広告をスケジュールする方法を確認したので、クライアントでの進捗状況を監視する方法を見てみましょう。

このため、2つの新しいAVFoundationオブジェクトを導入しています。インタースティシャルがスケジュールまたは再生されたときにクライアントに通知するAVPlayerInterstitialEventMonitorと、プレイヤーアイテムのタイムラインに広告を掲載するために必要なすべての情報を含むAVPlayerInterstitialEventオブジェクトです。

AVPlayerInterstitialEventMonitorには、次のプロパティがあります。プライマリアセットを再生しているプライマリプレーヤー、広告の再生を監視するために使用できるインタースティシャルプレーヤーのハンドル、プレーヤーに設定されたさまざまなインタースティシャルを表すAVPlayerInterstitialEventオブジェクトの配列であるイベント配列。

AVPlayerInterstitialEventオブジェクトの説明にすぐにたどり着きます。

currentEventのハンドル。

したがって、これはインタースティシャルが再生されているときに有効であり、それ以外の場合はnullになります。

そして、イベントスケジュールが変更されたときに発火するeventsDidChangeNotificationと、最後にインタースティシャルへの切り替え時に発火するcurrentEvent-DidChangeNotificationがあります。

インタースティシャルイベントを記述するAVPlayerInterstitialEventオブジェクトには、基本的に先ほど見たDATERANGE属性に類似したプロパティがあります。

プライマリアイテムは、インタースティシャルをスケジュールするタイムライン上のプライマリアセットを表します。

識別子はID属性に似ており、これはイベントを一意に識別します。

時間と日付フィールドは、それぞれメディアの時間と日付でインタースティシャルの開始時間を指定します。

これはSTART-DATE属性のようなものです。

テンプレートアイテムのコピーを使用して、広告ポッドを表すインタースティシャルプレーヤーアイテムを作成します。

したがって、これは先ほど見たASSET-LIST属性に似ています。

制限プロパティは、インタースティシャルのナビゲーション制限を指定します。

次に、DATERANGEのプロパティに似た resumptionOffsetとplayoutLimitプロパティがあります。

そして最後に、userDefinedAttributesの辞書があります。

したがって、DATERANGEタグにカスタム属性を指定でき、これらはuserDefinedAttributesプロパティを介してクライアントアプリケーションに表示されます。

たとえば、広告再生メトリクスを報告するためのビーコンURLやその他のカスタム属性を含めることができます。

インタースティシャルが再生されているときに、これらのAPIを使用してUIを更新する方法を示すコードの例を次に示します。

プライマリコンテンツを再生するためのAVPlayerを作成します。

したがって、このコンテンツには、DATERANGEタグを使用してスケジュールされたインタースティシャルがあります。

そして、AVPlayerInterstitialEventMonitorを作成し、プレーヤーに設定します。

次に、currentEvent-DidChangeNotificationを購読して、プレイヤーがインタースティシャルに出入りするときにアプリケーションに通知します。

そして、その通知が発火したら、UIを更新するだけです。

時には、クライアント側で広告をスケジュールしたいと思うかもしれません。そのために、AVPlayerにイベントをプログラムで設定できるAVPlayer-InterstitialEventControllerを導入しています。

このオブジェクトはAVPlayerInterstitialEventMonitorを継承しているため、多くの共通のプロパティがあります。

注意すべき点の1つは、イベントプロパティはモニターで読み取り専用ですが、コントローラの読み取り/書き込みプロパティであるため、イベントをプログラムでスケジュールできるということです。

また、これには、現在再生中のインタースティシャルをキャンセルできるcancelCurrentEvent APIもあります。

このサンプルでは、AVPlayerに2つの広告を含む広告ポッドをスケジュールする方法を見てみます。

プライマリアセットを再生するためにAVPlayerを作成します。

次に、AVPlayer- InterstitialEventControllerを作成し、AVPlayerに設定します。

広告ポッドを表すAVPlayerアイテムの配列を作成します。

次に、PlayerInterstitialEventオブジェクトを作成し、primaryItemをプレイヤーの現在のアイテムとして指定します。これは、ムービーアセット、この例の開始時間、再生の約10秒、およびtemtemtemsを以前に作成した広告ポッドとして表します。

そして、オブジェクトが作成されたら、コントローラーのイベントプロパティに設定するだけです。

AVPlayerViewControllerでプレーヤーを設定する直前に、currentItem.translates- PlayerInterstitialEventsプロパティをtrueに設定していることに気付くかもしれません。

これが設定されると、AVKitはタイムラインにナビゲーションマーカーを配置し、tvOSでナビゲーション制限を強制します。

それでは、tvOSのHLSインタースティシャルとのAVKit統合について、デモに進みましょう。

ここでは、再生後約40秒で開始される広告があります。

そして、この広告にはナビゲーション制限が設定されていません。

広告マーカーがタイムラインに表示されていることがわかります。

広告が再生されると、再生ヘッドの上にカウントダウンタイマーが表示されます。

そして、この広告には制限が設定されていないので、Apple TVのリモコンの端に手を滑るので、スキップするオプションが表示されます。

そうすることで、広告からスキップしてプライマリに戻ることになります。

さて、これについては同じ設定ですが、広告にはスキップ制限が設定されています。

そのため、広告が再生されると、広告からスキップするオプションは表示されません。

プライマリに戻る前に、それが完全に再生されるのを待つ必要があります。

「グレイハウンド」のトム・ハンクス。

定格PG-13。Apple TV+限定。

ありがとう、ジョシュ。

このタイムラインに見られるように、ここには2つの広告があります。

1つ目はナビゲーション制限がなく、2つ目はジャンプ制限があります。

だから、私たちが両方の広告を飛び越えようとするとき...

広告の再生中に、再生ヘッドが制限された広告マーカーにスナップすることがわかります。

私たちは高いものから地獄を降ろします。

「グレイハウンド」のトム・ハンクス。

定格PG-13。Apple TV+限定。

そして、広告が終わった後、私たちはシークの場所から再開します。

最後に、DATERANGEタグを使用してサーバーサイド広告をスケジュールできるようになりました。

ビデオオンデマンドストリームの履歴書オフセットを0に指定して、中断したところからプログラムに再参加するようにします。

そして、ライブストリームのこの属性をスキップして、ライブエッジで再参加することができます。

広告アセットの遅延バインディングにX-ASSET-LIST属性を使用し、X-PLAYOUT-LIMIT属性を使用してライブブロードキャストの早期リターンをスケジュールし、X-RESTRICT属性でナビゲーション制限を指定できます。

クライアント側で広告の再生を監視するには、AVPlayer-InterstitialEventMonitorを使用します。

また、AVPlayer-InterstitialEventControllerを使用してプログラムで広告を設定できます。

WWDC21の残りの部分を見て楽しんでいただきありがとうございます。