10294

こんにちは、WWDCへようこそ。

私の名前はジョエルです。MusicKitでアプリに音楽を追加する方法についてお話ししたいと思います。

MusicKitは、アプリがSwiftで音楽アイテムにアクセスするための表現力豊かなAPIを提供するAppleプラットフォーム用の新しいフレームワークです。

新しいSwift並行性構文を活用し、SwiftUIと組み合わせて使用するようにゼロから設計されています。

MusicKitは、アプリがApple Musicから幅広いカタログコンテンツにアクセスするためのサーバーサイドAPIのセットであるApple Music APIと統合する方法を加速し、Apple Musicに関連する魅力的なアプリを構築することがはるかに簡単になります。

まず、MusicKitで音楽コンテンツをリクエストする方法について説明します。

次に、アプリがApple Musicと統合する方法にとって重要な他のトピックについて説明します。たとえば、アプリがApple Music関連のデータにアクセスするためのユーザーの同意を求めること、Apple Music APIにアクセスするために必要なトークンの管理、サブスクリプション情報および関連機能にアクセスすること、Apple Musicカタログから音楽を再生すること、そして最後に、ユーザーがまだ購読者でない場合にApple Musicのサブスクリプションオファーを表示する方法などです。

MusicKitは、Apple Music APIからコンテンツを取得できる構造化されたリクエストで、音楽アイテムにアクセスするための新しいモデルレイヤーを提供します。

Apple Musicカタログのコンテンツを検索するか、特定のフィルターに基づいてリソースを取得できます。

これらのリクエストは、ページネーションのサポートが組み込まれたコレクションにグループ化されたアイテムで応答を生成し、最初の応答からアイテムの次のバッチを取得できるようにします。

では、これらの音楽アイテムはどんな感じですか?

アルバムの具体的な例を見てみましょう。 アルバムで見てみましょう。

「アルバム」は、プロパティが3つの異なるカテゴリにグループ化された値タイプです。

最初のカテゴリには、「title」のような文字列プロパティ、「isCompilation」のようなブールプロパティ、または関連するサイズ情報や関連する色と一緒にアートワークのURLにアクセスできる「アートワーク」のようなより構造化されたプロパティなどの単純な属性が含まれています。

アルバムは、関連するアーティストやジャンル、または特定のアルバムのトラックのリストなど、いくつかの関係も提供しています。

たとえば、「トラック」関係の結果は、別のタイプの音楽アイテムであるタイプ「トラック」の値のコレクションです。

最後に、これらの強力なモデルレベルの関係に加えて、「アルバム」は関連コンテンツのいくつかの弱い関連付けを提供します。

協会は関係と非常によく似ていますが、通常、より一時的であるか、より編集的に駆動されます。

たとえば、アルバムの「appearsOn」アソシエーションはプレイリストのコレクションを返しますが、関係のコレクションとは異なり、これにはタイトルもあります。

MusicKitとの関係の読み込みとアクセスはとても簡単です。

アルバムを考えると、「アーティスト」や「トラック」などの関係や「関連アルバム」などの関連付けを含む、この同じアルバムの別の表現を1回の操作で簡単に取得できます。

「with」メソッドは、特別なSwiftキーワード「await」で呼び出す必要があります。これは、これが舞台裏で非同期操作を実行することを示します。

これは確かに、ネットワークを介してApple Music APIからこのアルバムのより完全な表現を取得します。

その後、この詳細なアルバムからトラックのリストを取得し、通常の配列と同じようにそれらのトラックを反復することができます。

そして、これがこのコードのコンソール出力です。

「関連アルバム」などの関連付けへのアクセスも同じように機能しますが、唯一の違いは、通常、コレクションから直接アクセスできるタイトルも含まれていることです。

その後、同じ方法でコレクションを反復して、関連するアルバムのいくつかを印刷することができます。

そして、これがこのコードのコンソール出力です。

では、MusicKitで音楽コンテンツをリクエストするデモを見てみましょう。

私はApple Musicのアルバムを見つけて楽しむことができるアプリに取り組んできました。

この検索フィールドを使用してアルバムを検索できます。この検索フィールドは、すでにいくつかのコードが接続されており、音楽カタログ検索リクエストを使用して一致する検索結果をロードします。

このアプリは、私が最近見たアルバムのリストも追跡します。

「Catch A Vibe - EP」というタイトルのこのアルバムの詳細については、この詳細ビューが表示された後、このアルバムのトラックのリストがアニメーション化されていることに気づいたかもしれません。

これは、先ほど見たように、このアルバムの「トラック」関係をロードし、SwiftUIビューの状態変数を更新し、このリストに入力するために使用されます。

アートワークの下にある再生ボタンで、または特定のトラックを選択することで、このアルバムから音楽の再生を開始できます。

これは、MusicKitの再生APIを使用して、このトラックのリストでキューを設定し、プレーヤーの再生メソッドを呼び出すだけです。

やってみよう！

だから、Karun & MONBRUの「Catch a Vibe」というタイトルのトラックを選択すると...

この曲が流れ始めます。

♪ああ、ああ、いや♪

私たちのアプリは、ロック画面のメディアコントロールでも自動的に動作し、この曲の中間点までスクラブすることができます。

しかし、私はこのアプリを使って、フェニックスのこのアルバムのように、私のCDライブラリから古い音楽を再発見するのを手伝いたいと思っていました。

だから、iPhoneのカメラを古いCDのバーコードに向け、このアプリにこの同じアルバムをデジタル形式で表示させることができる機能を追加したいと思います。

私はすでにこの機能のためのいくつかの実験的なコードを追加しました。

有効にすると、下部にバーコードボタンが表示され、カメラビューが表示されます。

このCDのバーコードを指すと、バーコードの値を自動的に認識して表示します。

私が欠けているのは、MusicKitを使って対応するアルバムを見つけるコードだけです。

先に進んで、それを私たちのアプリに追加しましょう。

では、MusicCatalogResourceRequestを使ってアルバムリクエストを作成させてください。

私は特にアルバムを探しています。

そしてここでは、バーコードの専門用語であるUniversal Product Codeの略であるUPCプロパティがequalTo: detectedBarcodeであるアルバムを見つけることを確認したい。

このリクエストを非同期に実行できます。

albumsRequest.response。

そして、応答から、私は結果で最初のアルバムを探すことができます。

その後、この最初のアルバムを下のhandleDetectedAlbumヘルパーメソッドに渡すことができます。

handleDetectedAlbum (firstAlbum)。

この方法は、バーコードスキャンビューを却下し、検出されたアルバムのアルバム詳細ビューをプッシュします。

そして、メインスレッドで実行されることを確認するために、MainActorでここに飾られています。

したがって、それを呼び出すときは、awaitキーワードを追加することを確認する必要があります。

では、アプリをもう一度ビルドして実行して試してみましょう。

バーコードボタンをタップします。

私のアルバムを持って行きなさい。

うまくいった！

これで、Apple Musicで私の古い音楽をデジタル形式で楽しむのがはるかに簡単になります。

MusicKitは、URLを使用して任意のApple Music APIエンドポイントからコンテンツをロードできるという点で、構造化されたリクエストとは異なる汎用データリクエストも提供しています。

このリクエストから得られるのは、Apple Music APIからのJSONレスポンスの生データです。

JSONDecoderでこの生データをデコードする必要がありますが、Codableプロトコルに準拠しているため、既存の音楽アイテムタイプを活用できるため、難しい必要はありません。

例を見てみましょう。 例を見てみましょう。

Apple Musicからトップレベルのジャンルのリストをロードしたい場合は、この特定のURLからコンテンツを読み込むことで行うことができます。対応するJSONレスポンスは次のとおりです。

この結果を詳しく見ると、真ん中にジャンルのリソースのように見えるものが見えます。

では、スウィフトでこれをどのように表現しますか?

案の定、MusicKitにはジャンルタイプがあります。

ズームバックすると、Swiftでの応答全体をどのように表現しますか?

ジャンルの単純な配列であるデータメンバーを使用して構造体を作成できます。

次に、この構造体は必ずDecodableとしてマークしてください。

また、「ジャンル」自体もDecodableに準拠しているため、追加のデコードロジックを書く必要さえありません。

したがって、このデータをアプリに読み込むには、この構造体をファイルの上部に置き、ユーザーの特定の国コードを使用してURLを構築します。

このURLを使用して音楽データリクエストを作成し、すでに見たのと同じパターンに従って、そこから応答を取得します。

その応答を取得したら、MyGenresResponseタイプをデコードメソッドに渡すことで、JSONDecoderを使用してデータをデコードできます。

そして、それだけです!

強く入力されたジャンルの応答で個々のジャンルにアクセスできるようになりました。

そして、ご覧のとおり、MusicKitの他のリクエストから取得できるのと同じ種類の音楽アイテムが手に入る。

だから、それがApple Music APIの任意のURLからコンテンツを読み込む方法です。

そして、音楽コンテンツの読み込み方法がわかったので、プライバシーから始めて、アプリをApple Musicと統合するための重要な予備的なステップについて話し合いましょう。

私たちは、ユーザーがどのアプリが自分のデータにアクセスできるかをコントロールし続けることを望んでいます。

したがって、ユーザーのリスニング履歴や音楽ライブラリを含むApple Music APIからデータをリクエストする前に、アプリがApple Musicにアクセスするためのユーザーのインフォームドコンセントを取得する必要があります。

このユーザーコンテンツの要求は、デバイスごとおよびアプリごとに行う必要があります。

そして、ユーザー同意ダイアログは、Apple Musicのプレイリストや自分のプレイリストでワークアウトできる素晴らしいフィットネスアプリであるZovaという名前のアプリのコンテキストでどのように見えるかです。

初めてワークアウトを始めるとき、ZovaはApple Musicにアクセスする許可を求めます。

このダイアログは、アプリがApple Musicにアクセスする必要がある理由をユーザーに伝える必要があります。

そのために、Info.plistで定義する必要があるApple Musicのアプリの使用状況の説明は、このダイアログのサブタイトルとして含まれています。

以下は、MusicKitのユーザーの同意を要求する方法の例です。

アプリにMusicKitを必要とする機能があり、isAuthorizedForMusicKit状態変数を使用してこの機能へのアクセスをゲートしているとします。

アプリの適切な時点で、MusicKitを使用する前に、この非同期リクエスト方法でApple Musicにアクセスするための承認をリクエストできます。

これは、アプリがまだ承認されていない場合にのみ、ユーザーに促します。

リクエストメソッドはステータス値を返し、そのステータスが「authorized」と等しい場合は、isAuthorizedForMusicKit変数を「true」に設定できます。

では、Apple Music APIからデータをロードするために必要なトークンについて簡単に話しましょう。

Apple Music APIには、基本的にAPIでアプリを認証する開発者トークンが必要です。

以前は、この開発者トークンを取得するには、開発者ポータルでMusicKit秘密鍵を作成し、管理下にあるサーバーに置き、キーが非公開に保たれ、アプリにサーバーから新しい開発者トークンを要求してもらう必要がありました。

しかし今、MusicKit for Swiftを使用すると、開発者トークンがアプリ用に自動的に生成されるため、これについて心配する必要がなくなりました。

開発者ポータルに登録して、この新しい自動動作をオプトインするだけです。

具体的には、App IDを登録するページで、下部の[App Services]タブを選択し、MusicKitチェックボックスを有効にします。

そして、あなたは終わりました!

さらに、Apple Music APIには、パーソナライズされたエンドポイントのユーザートークンが必要です。

そして、今年の新しい開発者トークンと同様に、ユーザートークンはあなたに代わって自動的に生成されます。

アプリでMusicKitを使用する必要があるかもしれないもう1つのことは、ユーザーがアクティブなApple Musicサブスクリプションを持っているかどうかを把握する方法です。

MusicKitのサブスクリプション情報は、ユーザーがApple Musicカタログのコンテンツを再生できるかどうか、iCloudミュージックライブラリが有効になっているかどうか、またはまだアクティブなサブスクリプションを持っていない場合に加入者になることができるかどうかを示す3つの異なる機能として公開されます。

アプリの特定のApple Music関連機能の関連機能を必ず確認してください。

たとえば、音楽を再生するために再生ボタンが接続されている場合、ユーザーがApple Musicのカタログコンテンツを再生できない場合は、無効にしておくことができます。

ビューで状態変数を定義して、音楽サブスクリプションを追跡できます。

次に、音楽サブスクリプションプロパティ「canPlayCatalogContent」が「false」に設定されている場合、無効な修飾子をボタンに適用して、無効のままであることを確認することができます。

そして最後に、新しいタスク修飾子に渡された非同期ブロック内で、新しいサブスクリプション更新ストリームを使用して、音楽サブスクリプションの変更を通知することができます。

では、MusicKitでの再生について話しましょう。

MusicKitは、SystemMusicPlayerとApplicationMusicPlayerと呼ばれる2つの異なるプレーヤーを提供しています。

例から始めて、それらのプレイヤーの違いについて説明しましょう。

ソーシャルメディアアプリは、SystemMusicPlayerを使用してシステム音楽アプリから再生されているものを変更したい場合がありますが、フィットネスアプリは、システム音楽アプリから完全に独立した再生状態を維持するためにApplicationMusicPlayerを使用することを好むかもしれません。

これらのプレーヤーは両方とも、現在再生中の情報を自動的に報告し、リモートコマンドを処理します。

これは、デモの早い段階で、ロック画面のシステムメディアコントロールと深く統合したものです。

しかし、現在再生中のアプリは異なって報告されています。

SystemMusicPlayerを使用する場合、音楽アプリは現在再生中のアプリとして報告されますが、ApplicationMusicPlayerを使用する場合、アプリは現在再生中のアプリとして報告されます。

再生キューの所有権も異なります。

SystemMusicPlayerでは、アプリはシステムミュージックアプリをリモートコントロールするだけですが、ApplicationMusicPlayerでは、アプリは完全に独立した再生キューを所有しています。

これらのプレイヤーの両方を使用すると、1つ以上のアイテムでキューを設定したり、次にプレイするアイテムを追加したり、後でプレイしたりできます。

しかし、ApplicationMusicPlayerだけが再生キューをさらに制御し、中央にアイテムを挿入したり、以前に追加されたアイテムを削除したりすることができます。

最後に、ユーザーがまだApple Musicの購読者でない場合は、アプリ内からApple Musicの無料トライアルを開始できるようにして、音楽でアプリのユーザーエクスペリエンスを向上させるために取り組んだすべての機能を楽しむことができます。

サブスクリプションオファーは、「音楽を再生する」などのアプリの機能によりよく対応するように、ユーザーに表示されるメインメッセージを調整することで設定できます。

また、特定の曲、アルバム、またはプレイリストを強調表示して、文脈的になることもできます。

また、アプリのサブスクリプションオファーシートを使用することで、Appleサービスパフォーマンスパートナープログラムと呼ばれるアフィリエイトプログラムを通じて、新しいApple Musicの購読者を連れてきたことで報酬を得ることができます。

アプリでコンテクスト音楽サブスクリプションオファーを表示するには、先ほど見たように音楽サブスクリプションを追跡する必要があります。

また、オファーが表示されているかどうかを追跡するには、別の状態変数も必要です。

サブスクリプションオファーオプションのitemIDプロパティとして、例えばアルバムのIDを渡します。

音楽サブスクリプションで「canBecomeSubscriber」が「false」に設定されている場合は、オファーボタンを無効にしておいてください。

次に、isShowingOfferプロパティにバインドし、オプションを含むmusicSubscriptionOffer修飾子を使用します。

最後に、isShowingOffer変数を「true」に設定します。

アプリに戻って、Apple Musicのコンテクストオファーがどのようなものか見てみましょう。

以前のデモでは、すでにアクティブなApple Musicサブスクリプションでサインインしていました。

したがって、Apple Musicのサブスクリプションオファーを表示するのが適切かもしれないシナリオをシミュレートするには、設定に移動し、アカウントからサインアウトするだけです。

その後、アプリに戻ると、再生ボタンが無効になり、ユーザーをApple Musicに招待する別のボタンのためのスペースを作るために左に移動されたことがわかります。

このボタンをタップすると、サブスクリプションオファーが表示され、アプリで見ていた特定のアルバムが強調表示されます。

そして、それが、ユーザーがアプリ内からApple Musicの無料トライアルを開始できるようにする方法です。

結論として、経験の一部として少し音楽を追加することで強化できる多くの種類のアプリがあります。

たとえば、ゲームの気分に合ったバックグラウンドミュージックを再生することで、ゲームをより没入感のあるものにすることができます。

または、フィットネスアプリでユーザーのモチベーションを維持するために、明るい音楽を再生することもできます。

また、ソーシャルメディアアプリでは、音楽を強調するコンテンツにユーザーをさらに関与させることができます。

さらに進むには、いくつかの関連セッションをチェックして、ShazamKitでShazamシグネチャの力を活用することについて学び、SwiftUIで並行性を深く掘り下げることができます。

見てくれてありがとう、そしてWWDC 2021を楽しんでください!

[パーカッシブミュージック]。