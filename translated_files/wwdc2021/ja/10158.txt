10158

♪ ♪

こんにちは。

私の名前はPeikangで、ビデオコーディングと処理チームの出身です。

「ビデオツールボックスによる低遅延ビデオエンコーディングの探索」へようこそ。低遅延エンコーディングは、多くのビデオアプリケーション、特にリアルタイムビデオ通信アプリにとって非常に重要です。

この講演では、低遅延エンコーディングを実現するために、Video Toolboxで新しいエンコーディングモードを紹介します。

この新しいモードの目標は、リアルタイムアプリケーション用に既存のエンコーダパイプラインを最適化することです。

では、リアルタイムのビデオアプリケーションには何が必要ですか?

人々がお互いに話さないように、通信のエンドツーエンドのレイテンシを最小限に抑える必要があります。

ビデオアプリがより多くのデバイスと通信できるようにすることで、相互運用性を強化する必要があります。

エンコーダパイプラインは、通話に複数の受信者がいる場合に効率的であるはずです。

アプリは最高のビジュアル品質でビデオを提示する必要があります。

ネットワーク損失によってもたらされたエラーから通信を回復するための信頼できるメカニズムが必要です。

今日お話しする低遅延ビデオエンコーディングは、これらすべての面で最適化されます。

このモードでは、リアルタイムアプリケーションは新しいレベルのパフォーマンスを達成できます。

この講演では、まず低遅延ビデオエンコーディングの概要を説明します。

私たちは、パイプラインで低レイテンシを達成する方法についての基本的なアイデアを持つことができます。

次に、VTCompressionSession APIを使用してパイプラインを構築し、低遅延モードでエンコードする方法を紹介します。

最後に、低遅延モードで導入している複数の機能について説明します。

まず、低レイテンシのビデオエンコーディングの概要を説明します。

これは、Appleのプラットフォーム上のビデオエンコーダパイプラインの簡単な図です。

ビデオツールボックスは、CVImagebufferを入力画像として取ります。

ビデオエンコーダに、生データのサイズを小さくするためにH.264などの圧縮アルゴリズムを実行するように要求します。

出力圧縮データはCMSampleBufferでラップされ、ビデオ通信のためにネットワークを介して送信できます。

前の図からお気づきかもしれませんが、エンドツーエンドのレイテンシは、処理時間とネットワーク送信時間の2つの要因によって影響を受ける可能性があります。

処理時間を最小限に抑えるために、低遅延モードはフレームの並べ替えを排除します。

1イン、1アウトのエンコーディングパターンに従います。

また、このモードのレートコントローラーは、ネットワークの変更に応じてより高速に適応するため、ネットワークの混雑による遅延も最小限に抑えられます。

これら2つの最適化により、デフォルトモードと比較して、すでに明らかなパフォーマンスの向上が見られます。

低レイテンシのエンコーディングは、720p 30fpsのビデオで最大100ミリ秒の遅延を減らすことができます。

このような節約は、ビデオ会議にとって非常に重要です。

レイテンシを減らすことで、ビデオ会議やライブ放送などのリアルタイム通信のためのより効率的なエンコーディングパイプラインを実現できます。

また、低遅延モードは、電力を節約するために、常にハードウェアアクセラレーションビデオエンコーダを使用します。

注：このモードでサポートされているビデオコーデックタイプはH.264で、この機能はiOSとmacOSの両方に搭載されています。

次に、ビデオツールボックスで低遅延モードを使用する方法について話したいと思います。

まず、VTCompressionSessionの使用を要約してから、低遅延エンコーディングを有効にするために必要な手順を紹介します。

VTCompressionSessionを使用する場合、まずVTCompressionSessionCreate APIを使用してセッションを作成することです。

VTSessionSetProperty APIを使用して、ターゲットビットレートなどのセッションをオプションで設定できます。

設定が提供されていない場合、エンコーダはデフォルトの動作で動作します。

セッションが作成され、適切に設定された後、VTCompressionSessionEncodeFrame呼び出しでCVImageBufferをセッションに渡すことができます。

エンコードされた結果は、セッション作成時に提供された出力ハンドラから取得できます。

圧縮セッションで低遅延エンコーディングを有効にするのは簡単です。

必要な変更は、セッションの作成だけです。

これは、その方法を示すコードスニペットです。

まず、encoderSpecification用のCFMutableDictionaryが必要です。

encoderSpecificationは、セッションが使用する必要がある特定のビデオエンコーダを指定するために使用されます。

次に、encoderSpecificationでEnableLowLatencyRateControlフラグを設定する必要があります。

最後に、このエンコーダ仕様をVTCompressionSessionCreateに渡す必要があり、圧縮セッションは低遅延モードで動作します。

設定手順は通常と同じです。

たとえば、AverageBitRateプロパティで目標ビットレートを設定できます。

さて、私たちはビデオツールボックスで低遅延モードの基本をカバーしました。

リアルタイムビデオアプリケーションの開発をさらに支援できるこのモードの新機能に移りたいと思います。

これまでのところ、低遅延モードを使用することによるレイテンシの利点について話しました。

残りの利点は、私が紹介する機能によって達成できます。

最初の特徴は、新しいプロファイルです。

パイプラインに2つの新しいプロファイルを追加することで、相互運用性を強化しました。

また、時間的なスケーラビリティについて話すことに興奮しています。

この機能はビデオ会議で非常に役立ちます。

最大フレーム量子化パラメータを使用して、画質をきめ細かく制御できるようになりました。

最後に、長期参照のサポートを追加することで、エラーの回復力を向上させたいと考えています。

新しいプロフィールのサポートについて話しましょう。

プロファイルは、デコーダがサポートできるコーディングアルゴリズムのグループを定義します。

受信機側と通信するために、エンコードされたビットストリームは、デコーダがサポートする特定のプロファイルに準拠する必要があります。

ここビデオツールボックスでは、ベースラインプロファイル、メインプロファイル、ハイプロファイルなど、多くのプロファイルをサポートしています。

本日、制約されたベースラインプロファイル、CBP、制約されたハイプロファイル、CHPの2つの新しいプロファイルをファミリーに追加しました。

CBPは主に低コストのアプリケーションに使用され、一方、CHPは圧縮比を向上させるためのより高度なアルゴリズムを備えています。

どのプロファイルを使用するべきかを知るには、デコーダ機能を確認する必要があります。

CBPを要求するには、ProfileLevelセッションプロパティをContrainedBaseLine_AutoLevelに設定するだけです。

同様に、プロファイルレベルをContrainedHigh_AutoLevelに設定してCHPを使用できます。

では、時間的スケーラビリティについて話しましょう。

一時的なスケーラビリティを使用して、マルチパーティビデオ通話の効率を高めることができます。

シンプルな3者間のビデオ会議シナリオを考えてみましょう。

このモデルでは、レシーバー「A」の帯域幅は600kbpsが低く、レシーバーBの帯域幅は1,000kbpsです。

通常、送信者は、各受信側のダウンリンク帯域幅を満たすために、2組のビットストリームをエンコードする必要があります。これは最適ではないかもしれません。

このモデルは、送信者が1つのビットストリームをエンコードするだけで、後で2つのレイヤーに分割できる時間的スケーラビリティでより効率的になります。

このプロセスがどのように機能するかをお見せしましょう。

これは、各フレームが予測参照として前のフレームを使用するエンコードされたビデオフレームのシーケンスです。

フレームの半分を別のレイヤーに引き込むことができ、元のレイヤーのフレームのみが予測に使用されるように参照を変更できます。

元のレイヤーはベースレイヤーと呼ばれ、新しく構築されたレイヤーはエンハンスメントレイヤーと呼ばれます。

エンハンスメントレイヤーは、フレームレートを向上させるために、ベースレイヤーの補足として使用できます。

受信者「A」の場合、ベースレイヤー自体はすでにデコーダ可能であるため、ベースレイヤーフレームを送信できます。

さらに重要なことに、ベースレイヤーにはフレームの半分しか含まれていないため、送信データレートは低くなります。

一方、レシーバーBは、ベースレイヤーフレームとエンハンスメントレイヤーフレームを受信するのに十分な帯域幅を持っているので、よりスムーズなビデオを楽しむことができます。

時間的スケーラビリティを使用してエンコードされたビデオをお見せしましょう。

2つのビデオを再生します。1つはベースレイヤーから、もう1つはエンハンスメントレイヤーと一緒にベースレイヤーから再生します。

ベースレイヤー自体は正常に再生できますが、同時に、ビデオがかなりスムーズではないことに気付くかもしれません。

2番目のビデオを再生すると、すぐに違いがわかります。

右のビデオには、ベースレイヤーとエンハンスメントレイヤーの両方が含まれているため、左のビデオと比較してフレームレートが高くなります。

左のビデオは入力フレームレートの50%を持ち、ターゲットビットレートの60%を使用します。

これら2つのビデオでは、エンコーダが一度に1つのビットストリームをエンコードするだけで済みます。

マルチパーティビデオ会議を行う場合、これははるかに電力効率が高くなります。

時間的スケーラビリティのもう1つの利点は、エラーの回復力です。

ご覧のとおり、エンハンスメントレイヤーのフレームは予測に使用されていないため、これらのフレームに依存しません。

これは、ネットワーク送信中に1つ以上のエンハンスメントレイヤーフレームがドロップされた場合、他のフレームは影響を受けないことを意味します。

これにより、セッション全体がより堅牢になります。

時間的スケーラビリティを有効にする方法はかなり簡単です。

BaseLayerFrameRateFractionと呼ばれる低遅延モードで新しいセッションプロパティを作成しました。

このプロパティを0.5に設定するだけで、入力フレームの半分がベースレイヤーに割り当てられ、残りはエンハンスメントレイヤーに割り当てられます。

サンプルバッファアタッチメントからレイヤー情報を確認できます。

ベースレイヤーフレームの場合、CMSampleAttachmentKey_ IsDependedOnByOthersはtrueになり、それ以外の場合はfalseになります。

また、各レイヤーのターゲットビットレートを設定するオプションもあります。

セッションプロパティAverageBitRateを使用して、ターゲットビットレートを設定することを忘れないでください。

ターゲットビットレートを設定した後、新しいBaseLayerBitRateFractionプロパティを設定して、ベースレイヤーに必要なターゲットビットレートの割合を制御できます。

このプロパティが設定されていない場合は、デフォルト値0.6が使用されます。

また、ベースレイヤーのビットレート分数は0.6から0.8の範囲であることをお勧めします。

では、最大フレーム量子化パラメータ、または最大フレームQPに移動しましょう。

フレームQPは、画質とデータレートを調整するために使用されます。

低フレームQPを使用して、高品質の画像を生成できます。

この場合、画像サイズは大きくなります。

一方、ハイフレームQPを使用して、低品質でサイズが小さい画像を生成できます。

低遅延モードでは、エンコーダは、現在のターゲットビットレートの制約の下で最高の視覚品質を生成するために、画像の複雑さ、入力フレームレート、ビデオモーションなどの要因を使用してフレームQPを調整します。

したがって、フレームQPを調整するには、エンコーダのデフォルトの動作に頼ることをお勧めします。

しかし、クライアントがビデオ品質に対する特定の要件を持っている場合、エンコーダの使用が許可されている最大フレームQPを制御できるようになりました。

最大フレームQPでは、エンコーダは常にこの制限よりも小さいフレームQPを選択するため、クライアントは画質をきめ細かく制御できます。

通常のレート制御は、指定された最大フレームQPでも引き続き機能することを言及する価値があります。

エンコーダが最大フレームQPキャップに達したが、ビットレートの予算を使い果たしている場合、目標ビットレートを維持するためにフレームをドロップし始めます。

この機能を使用する1つの例は、貧弱なネットワークを介して画面コンテンツビデオを送信することです。

鮮明な画面コンテンツ画像を送信するためにフレームレートを犠牲にすることで、トレードオフを行うことができます。

最大フレームQPを設定すると、この要件を満たすことができます。

インターフェースを見てみましょう。 

新しいセッションプロパティMaxAllowedFrameQPで最大フレームQPを渡すことができます。

最大フレームQPの値は、標準に従って1から51の範囲でなければならないことを覚えておいてください。

低遅延モード、長期参照で開発した最後の機能について話しましょう。

長期参照またはLTRは、エラーの回復力に使用できます。

パイプライン内のエンコーダ、送信者クライアント、および受信者クライアントを示すこの図を見てみましょう。

ビデオ通信が接続の悪いネットワークを通過するとします。

送信エラーが原因でフレーム損失が発生する可能性があります。

受信クライアントがフレームの損失を検出すると、セッションをリセットするためにリフレッシュフレームを要求できます。

エンコーダが要求を受け取った場合、通常は更新目的でキーフレームをエンコードします。

しかし、キーフレームは通常かなり大きいです。

大きなキーフレームは、レシーバーにたどり着くのに時間がかかります。

ネットワークの状態はすでに悪いため、大きなフレームがネットワークの輻輳の問題を悪化させる可能性があります。

では、リフレッシュのためにキーフレームの代わりに予測フレームを使用できますか?

フレーム確認があれば、答えはイエスです。

それがどのように機能するかをお見せしましょう。

まず、承認が必要なフレームを決定する必要があります。

これらのフレームを長期参照、またはLTRと呼びます。

これはエンコーダからの決定です。

送信者クライアントがLTRフレームを送信する場合、受信者クライアントに確認要求も必要です。

LTRフレームが正常に受信された場合は、確認書を返送する必要があります。

送信者クライアントが確認応答を取得し、その情報をエンコーダに渡すと、エンコーダはどのLTRフレームが反対側から受信されたかを知る。

悪いネットワーク状況をもう一度見てみましょう。

エンコーダが更新要求を取得すると、この時間以来、エンコーダは認識されたLTRの束を持っているので、これらの認識されたLTRの1つから予測されるフレームをエンコードすることができます。

このようにエンコードされたフレームはLTR-Pと呼ばれます。

通常、LTR-Pはキーフレームに比べてエンコードされたフレームサイズがはるかに小さいため、送信が簡単です。

では、LTRのAPIについて話しましょう。

フレーム確認応答は、アプリケーションレイヤーで処理する必要があることに注意してください。

RTP制御プロトコルのRPSIメッセージなどのメカニズムで行うことができます。

ここでは、このプロセスでエンコーダと送信者クライアントがどのように通信するかに焦点を当てます。

低遅延エンコーディングを有効にしたら、EnableLTRセッションプロパティを設定することで、この機能を有効にすることができます。

LTRフレームがエンコードされると、エンコーダはサンプル添付ファイルRequireLTRAcknowledgementTokenで一意のフレームトークンを通知します。

送信者クライアントは、AcknowledgedLTRTokensフレームプロパティを通じて、承認されたLTRフレームをエンコーダに報告する責任があります。

一度に複数の確認応答が届く可能性があるため、これらのフレームトークンを格納するために配列を使用する必要があります。

ForceLTRRefreshフレームプロパティを使用して、いつでもリフレッシュフレームをリクエストできます。

エンコーダがこの要求を受信すると、LTR-Pがエンコードされます。

利用可能な承認されたLTRがない場合、この場合、エンコーダはキーフレームを生成します。

わかった。

これで、低レイテンシモードの新機能を取り上げました。

これらの機能を一緒に使用することについて話し合うことができます。

たとえば、グループ画面共有アプリケーションには、時間的スケーラビリティと最大フレーム量子化パラメータを使用できます。

時間的スケーラビリティは、各受信者の出力ビデオを効率的に生成することができ、画面コンテンツのよりシャープなUIとテキストのために最大フレームQPを下げることができます。

通信が貧弱なネットワークを通過し、エラーから回復するためにリフレッシュフレームが必要な場合は、長期参照を使用できます。

また、受信者が制約されたプロファイルのみをデコードできる場合は、制約されたベースラインプロファイルまたは制約されたハイプロファイルでエンコードできます。

わかりました。

ここではいくつかのトピックを取り上げました。

ビデオツールボックスに低遅延エンコーディングモードを導入しました。

VTCompressionSession APIを使用して低レイテンシモードでビデオをエンコードする方法について話しました。

レイテンシの利点に加えて、リアルタイムビデオアプリケーションの要件に対処するための多くの新機能も開発しました。

これらすべての改善により、低遅延モードがあなたのビデオアプリをより素晴らしいものにしてくれることを願っています。

見てくれてありがとう、素晴らしいWWDC 2021をお過ごしください。

[明るい音楽]。