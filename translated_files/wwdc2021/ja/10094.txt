10094

♪ベース音楽の演奏♪

♪

ルイ・パウロ:こんにちは、皆さん、私はルイです。

今日、同僚のエリックと私は、iOS 15とmacOS Montereyで利用可能な2つの新しいプロトコルであるHTTP/3とQUICでアプリのネットワーキングを高速化する方法について話します。

HTTPの進化と、HTTP/3がどのようにパフォーマンスを向上させるかを探求することから始めます。

また、HTTP/3の背後にある新しいトランスポートプロトコルであるQUICについても説明します。

その後、URLSessionでHTTP/3を使用する方法と、HTTP/3をサポートするようにHTTPサーバーを設定する方法について説明します。

最後に、QUICを使用するためのAPIと、QUICの上にカスタムネットワークプロトコルを実装する方法を深く掘り下げます。

では、HTTPの進化から始めましょう。

リソースを取得する必要があるとしましょう。

接続を設定し、リクエストを送信し、サーバーが処理するのを待ち、応答を受け取ります。

さて、最初のリソースが終了する前に別のリソースを取得したい場合は、接続の設定、リクエストの送信、処理の待ち、応答の受信など、同じプロセスを再度実行する必要があります。今回は濃い緑色で示されています。

これは、オレンジ色の3番目のリソースの別の例です。

図で概説されているように、接続の設定に多くの時間が費やされています。

単一のHTTP/1接続を再利用するとどうなりますか?

接続設定時間を節約しましたが、リクエストは以前の応答が終了した後にのみ送信できます。

これはヘッドオブラインブロッキングとして知られています。

過去には、HTTP実装では、この問題を克服するために多くの並列接続を使用していました。

並列HTTP接続の数は、アプリによって設定可能でした。

しかし、これはクライアントとサーバーの両方で非効率的なネットワーク動作につながりました。

HTTP/2は、単一の接続で複数のストリームを多重化することで、ヘッドオブラインブロッキングを解決します。

リクエストはより早く送信され、異なるストリームからのデータをインターリーブすることができます。

これにより、アイドル状態の待ち時間が大幅に短縮されるため、単一のTCP接続をより効率的に使用できます。

HTTP/3では、接続の設定がはるかに高速になるため、リクエストはより早く送信できます。

しかし、それがHTTP/3の唯一の利点ではありません。

HTTP/3ストリームは独立しており、すべてのストリームが単一のTCP接続を共有するHTTP/2とは異なります。

ほとんどのネットワークでは、パケットが失われます。

これはワイヤレスネットワーク上の通常の出来事であり、ネットワークの容量を検出する自然な部分です。

HTTP/2では、すべてのHTTP/2ストリームが単一のTCP接続を共有しているため、パケット損失は多くのストリームに影響を与える可能性があります。

HTTP/3では、対応するHTTPストリームのみが影響を受けます。

他のストリームに属するデータは、より早く配信できます。

HTTP/3が接続をより早く確立する方法と、パケット損失によりよく対処する方法を示しました。

これらの改善は、基礎となるトランスポートプロトコルであるQUICによって有効になります。

QUICは、インターネットエンジニアリングタスクフォースによって標準化された新しい信頼性の高いトランスポートプロトコルです。

TCPと同じ概念に基づいていますが、エンドツーエンドの暗号化、多重化されたストリーム、および認証を提供します。

QUICのセキュリティは、よく知られているTLS 1.3プロトコルの上に構築されています。

QUICの主な利点は、パフォーマンスの向上です。

QUICがそれをどのように達成するかを探りましょう。

QUICは、安全なハンドシェイクを実行するためにTLS 1.3に依存しており、使い慣れたTCPの3ウェイハンドシェイクを必要とせず、ハンドシェイク時間を1往復に短縮します。

多重化されたストリームはQUICの重要な概念であるため、ヘッドオブラインブロッキングに苦しむことはありません。

QUICエンドポイントは、受信したパケットに関するより複雑な情報を他のエンドポイントに通信することができ、TCPの制限によって妨げられないため、QUIC接続では損失回復が向上します。

このプロトコルは、セルラーネットワークとWi-Fi間のセッションを再確立することなく、接続が異なるネットワークインターフェイス間でシームレスに移動できるようにする接続移行もサポートしています。

ネットワークの遅延について詳しく知りたい場合は、「アプリのネットワーク遅延を減らす」セッションをご覧ください。

アプリでHTTP/3を使用する方法について話しましょう。

URLSessionを使用している場合は、iOS 15とmacOS MontereyがデフォルトでHTTP/3が有効になっているため、アプリを変更する必要はありません。

サーバーでHTTP/3を有効にしたら、大丈夫です。

今後のHTTP/3 RFCバージョンと以前のHTTP/3ドラフトバージョン29の両方がサポートされています。

では、アプリがHTTP/3を使用していることを確認するにはどうすればよいですか?

インスツルメンツを使って調べてみよう!

Xcode 13では、HTTPトラフィックを検査するためのネットワークプロファイリングテンプレート内に新しい機器を導入しています。

URLSessionに直接タップするので、セットアップは必要ありません。

Instrumentsを使用して、アプリがHTTP/3または以前のHTTPバージョンを使用しているかどうかを確認できます。

起動時に犬の写真のセットを取得するiOSアプリを起動します。

次に、HTTPヘッダーを調べて、サーバーがHTTP/3をどのように宣伝しているかを調べます。

先に進んで、ネットワークプロファイリングテンプレートを選択しましょう。

左上の「記録」をクリックしましょう。

HTTPトラフィックを記録することのプライバシーへの影響を示すプロンプトが表示されます。

同意した後、InstrumentsはHTTPトランザクションの記録を開始します。

次に、Instrumentsは、アプリごとおよびドメインごとのすべてのHTTPトランザクションを含むプロットを表示します。

私たちは今、必要なすべてのデータをキャプチャしました。

左上にある一時停止ボタンをクリックすることができます。

使用しているドメインを選択しましょう。 

Optionキーを押しながらHTTPトランザクションをクリックし、ドメインを選択することで、それを行うことができます。

HTTPトランザクションの詳細を表示するようにインストゥルメントを設定する必要があります。

それを達成するために、左側のメニューにHTTPトランザクションが表示されていることを確認してください。

最初のリクエストを選択しましょう。

右にスクロールすると、このトランザクションが使用したHTTPのバージョンを識別するHTTPバージョン列を見つけることができます。

うーん、私たちはまだHTTP/2を使用していますが、それはなぜですか？

右側には、応答ヘッダーを含む拡張詳細ビューがあります。

これは私たちに答えを与えます:サーバーはHTTP / 3のサポートを宣伝するためにHTTP代替サービスを使用しました。

URLSessionは、宣伝されない限りHTTP/3を使用しません。

この例では、HTTP/3はAlt-Svc HTTPヘッダーを介してアドバタイズされました。

HTTPサーバーは、このヘッダーを使用してHTTP/3のサポートをアドバタイズするのが一般的です。

この情報は将来の接続のために記憶されており、私たちはこれを「サービスディスカバリー」と呼んでいます。

では、もう一度アプリを録画しましょう。

インスツルメンツがアプリを再起動すると、同じ一連のHTTPトランザクションが行われます。

繰り返しになりますが、インストゥルメントを一時停止できるようになりました。

もう一度ズームインして、最初のトランザクションを調べてみましょう。

サーバーがHTTP/3をサポートしていたことを思い出したので、現在はHTTP/3を使用しています。

HTTP/3サービスディスカバリーは、アプリに対して透過的です。

HTTP/3サーバーサポートの発見は、2つの方法で行われます。

推奨されるアプローチは、HTTPSリソースレコードを通じてHTTP/3のサポートをアドバタイズするようにDNSサーバーを設定することです。

h3文字列を使用してHTTP/3をアドバタイズするようにアプリケーション層プロトコルを設定するだけです。

また、代替サービスを使用してHTTP/3をアドバタイズする新しいヘッダーを追加するようにサーバーを設定する必要があります。

サーバーは、HTTP/3をアドバタイズするAlt-Svcヘッダーを送信する必要があります。

これには、ポート番号とサービスの最大年齢（秒単位）が含まれます。

DNSレコードの利点は、情報がDNSにあるため、アプリがサーバーに最初に接続しようとするときにHTTP/3接続を確立できることです。

サーバーがHTTP/3をサポートしていることがわかっていて、検出プロセスを高速化したい場合は、assumesHTTP3Capableプロパティを使用できます。

これにより、HTTPスタックはHTTP/3サーバーを持っていると仮定できますが、HTTP/3が使用されることを保証するものではありません。

ネットワークは依然としてHTTP/3をブロックするか、サーバーが実際にHTTP/3をサポートしていない可能性があります。

その場合は、HTTP/2にフォールバックします。

HTTPを使用すると、クライアントは各リソースの優先順位を指定できます。

リソースはしばしば関連しているため、優先順位により、サーバーはクライアントのニーズに基づいて、いくつかのリソースを他のリソースよりも早く送信できます。

たとえば、Webブラウジングのユーザーエクスペリエンスは、Webページのレンダリングに最も影響を与えるリソースに優先順位を付けることで改善できます。

HTTP/2では優先スキームが導入されましたが、その複雑さのためにしばしば尊重されませんでした。

そのため、古い優先度モデルはHTTP/3から削除されました。

HTTPヘッダーに依存する新しい、よりシンプルなモデルは、HTTP/3スタックで使用されます。

このモデルでは、優先順位は緊急性パラメータ（0から7）とオプションの増分配信パラメータで指定されます。

URLSessionを使用する場合、優先順位をサポートするAPIは同じままです。

緊急性を使用してサーバーに伝達されるpriorityプロパティを使用して、HTTP優先度を指定します。

prefersIncrementalDeliveryプロパティで増分配信を有効にできます。

デフォルトの優先度は3です。

URLSessionは、非同期データメソッドのような便利なAPIが使用されているかどうかに応じて、増分配信を推測します。

アプリがリソース全体がダウンロードされるまで処理できないコンテンツをダウンロードしている場合は、このプロパティをfalseに設定する必要があります。

リクエストが送信された後のリソースの優先度を動的に変更することもサポートされています。

たとえば、より低い優先度で写真をプリフェッチし、ユーザーがアプリのそのセクションに移動するときにその優先度を上げることができます。

次に、同僚のエリックが、カスタムネットワークプロトコルを変更してQUICを採用する方法を説明します。

ありがとうございます。

エリック・キニア:ありがとう、ルイ!

先に説明したように、HTTP/3は、HTTP/2と同様の多重化されたストリームを提供するQUICの上に構築されていますが、基礎となるトランスポートとして単一のTCP接続を共有することによってもたらされる問題はありません。

QUICトランスポート接続（またはQUICトンネル）は、複数の単方向または双方向のQUICストリームのデータを多重化します。

ストリームは、いずれかのエンドポイントで作成でき、他のストリームとインターリーブされたデータを同時に送信でき、TCPによって提供される従来のストリームと同様の状態を持つことができます。

何よりも、QUICにはTLS 1.3セキュリティが組み込まれており、変化するネットワーク条件によりよく対応できます。

これらの機能は、HTTP以上の場合に役立ちます。

アプリケーションが非要求/応答ベースのデータを交換している場合、基礎となるトランスポートコンテキストを共有するストリームを多重化すること、またはピアツーピア通信やRPCコールなどの他のカスタムプロトコルを実装している場合は、アプリにQUICトランスポートを使用することを検討してください。

iOS 15とmacOS Montereyでは、NWProtocolQUICはNetwork.frameworkが提供する他の組み込みプロトコルに参加します。

QUICを使用する接続を作成することは非常によく知られています。

エンドポイントと新しく利用可能なQUICパラメータを提供するだけです。

これらのパラメータは、サーバーとネゴシエートするためのアプリケーション層プロトコルであるALPN文字列を指定します。

状態更新ハンドラを通常どおりに設定して、接続が進行して準備が整ったときに応答できるようにします。

そして最後に、状態の更新やその他のコールバックに使用したいディスパッチキューで接続を開始します。

QUICストリームが確立されたので、他のNWConnectionと同じようにデータを送受信できます。

送信機能を使用して、リモートエンドポイントに送信するデータを提供し、完了したら後続の送信をスケジュールします。

受信を使用して受信データを処理し、完了したら後続の受信をスケジュールします。

昨年、複数の接続が関連またはグループ化されている状況を簡単に処理できるように、Network.frameworkにConnection Groupオブジェクトを導入しました。

基礎となるトランスポートコンテキスト（またはトンネル）で多重化されたQUICストリームは、その関係に基づいて論理的にグループ化され、新しいグループタイプであるNWMultiplexGroupで使用できます。

接続グループは、他のNetwork.frameworkオブジェクトと同様のライフサイクルをたどり、QUICストリームによって共有される基礎となるQUICトンネルの状態について推論することができます。

また、特定のQUICトンネルから新しい発信ストリームを作成したり、リモートエンドポイントによって開始された新しい着信ストリームを受信したりすることもできます。

多重化プロトコルの接続グループを作成するには、多重グループ記述子を使用します。

この場合、ポート443でexample.comにグループ記述子を作成します。

次に、その記述子とQUICパラメータを使用してNWConnectionGroupを作成し、作成時にALPN文字列を提供します。

NWConnectionと同様に、状態更新ハンドラを設定しますが、今回は個々のストリームの状態ではなく、基礎となるQUICトンネルの状態を追跡しています。

最後に、接続グループを開始し、コールバックキューを提供します。

新しい発信ストリームは、グループからNWConnectionを初期化するか、グループの抽出関数を呼び出すことによって作成できます。

リモートエンドポイントによって開始された着信ストリームは、グループに新しい接続ハンドラを設定することで処理できます。

これらの接続は、ステートハンドラ（今回はストリーム状態を追跡する）で通常どおり設定でき、コールバックに使用するキューから開始できます。

他のプロトコルと同様に、パラメータのオブジェクトを作成するときに設定にQUIC.Optionsを使用できます。

QUICの場合、QUIC仕様に記載されているトランスポートパラメータを設定できます。また、接続グループから作成するときに個々のストリームのプロパティをカスタマイズすることもできます。たとえば、新しい単方向ストリームを作成する場合などです。

NWListenerを使用してアプリでサーバーを実行している場合は、newConnectionGroupHandlerを介して新しい着信QUICトンネルを受信できるように強化されています。

newConnectionGroupHandlerは、誰かがサーバーに新しいQUICトンネルを確立するたびに呼び出されます。

そのハンドラー内では、通常どおりグループを設定して状態の更新を受信できます。

これは、先ほど議論していた新しい接続ハンドラを設定するのにも良い場所です。

このトンネルで開かれた後続のストリームを受信したい場合は、コールバックに使用するキューでグループを開始し、準備完了です!

最後に、NWProtocolMetadataを使用してストリームに関する情報にアクセスできます。

たとえば、新しく作成されたストリームのストリームIDを確認したい場合があります。

また、ストリームが終了したら、カスタムプロトコルでapplicationErrorコードが定義されている場合は、ストリームをキャンセルする前に、メタデータを使用してエラーをリモートエンドポイントに伝えることができます。

そこで、新しいNWMultiplexGroupタイプを使用してQUICトンネルを作成および管理し、そのグループから各QUICストリームに個別のNWConnectionsを作成する方法を検討しました。

NWListenerを使用して着信トンネルをリッスンし、結果の接続グループを使用して新しい着信ストリームを受信できます。

これらのストリームでは、他の接続と同様にデータを送受信でき、QUICプロトコルオプションを使用してトランスポートパラメータを指定し、ストリームを設定できますが、QUICプロトコルメタデータを使用してストリームを検査し、QUIC固有の情報をリモートエンドポイントに通信します。

QUICを採用することでアプリのネットワーキングを改善したので、それが機能しているかどうかをどのように見分けますか?

Qlogファイルを出力する新しい環境変数を使用して、デバッグ中にアプリを起動できます。

qlogは、IETFで提案された新しい標準化されたロギング形式です。これにより、従来のパケットキャプチャよりも、QUIC接続がどのように動作しているかに関するさらに豊富な情報をエクスポートできます。

テスト実行後、Xcodeのデバイスウィンドウを使用して、分析のためにqlogファイルを含むアプリのコンテナをダウンロードできます。

また、QUIC接続の動作を内省しやすくするさまざまなオープンソースビジュアライゼーションがいくつかあります。

今日は、HTTP/3がHTTPトラフィックに提供する改善点を調べました。

クライアントでは、最新のネットワークAPIのユーザーはすでにデフォルトでオンになっているため、サーバーでHTTP / 3を有効にして、変化するネットワーク条件に対するパフォーマンスと回復力の向上を活用します。

カスタムの非HTTPネットワーキングプロトコルを使用している場合は、Network.frameworkに組み込まれている新しい多重化プロトコルサポートを使用して、NWConnectionGroupとのQUIC接続を作成します。

また、どのプロトコルを使用しても、新しいデバッグツールを使用して、次世代のネットワークプロトコルの素晴らしい利点を視覚化できます。

見てくれてありがとう。

♪