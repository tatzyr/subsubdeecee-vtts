10120

♪ベース音楽の演奏♪

♪

ソマー・パネージ:こんにちは、私の名前はソマー・パネージです。

今日、iOSのフルキーボードアクセスについてお話しできることを嬉しく思います。

フルキーボードアクセスは、運動障害をお持ちのお客様のための機能です。

では、今日から、iOSの一般的なモーターアクセシビリティの概要を簡単に説明します。

その後、フルキーボードアクセスと、特にiPadでユーザーにもたらすすべてのパワーを詳しく見ていきます。

そして最後に、開発者として、キーボードユーザーをサポートしていることを確認するためにアプリケーションを構築する際に必ず心に留めておくべき主要なAPIと原則を掘り下げます。

では、モーターアクセシビリティのレビューから始めましょう。

iOS用のアクセシブルなアプリの開発について話し合うときは、すべてのユーザーを念頭に置いておきたい。

私たちはしばしば、盲目や弱視の人のための技術であるVoiceOverの観点からアクセシビリティについて話します。

ただし、当社のソフトウェアが運動障害のある人でも機能することを確認することも重要です。

運動障害は幅広い用語であり、誰かが多くの方法でiOSデバイスを使用する方法に影響を与える可能性があります。

可動域が限られている人もいるかもしれません。

他の人は、振戦や画面に触れる他の困難など、より細かい運動障害を持っているかもしれません。

また、運動障害の重症度に応じて、多くの人々は、キーボード、ジョイスティック、ボタンなどの外部ハードウェアを介してデバイスと対話する方が簡単または必要であると感じています。

iOSは、運動障害のある人がデバイスをシームレスに体験できるように、数多くの支援技術を提供しています。

たとえば、ハードウェアのインタラクションやマルチタッチジェスチャーに問題があるかもしれない人のために、AssistiveTouchを提供しています。

AssistiveTouchは、画面上のメニューを使用して、これらのインタラクションを簡単なシングルタップに簡素化します。

スイッチコントロールを使用すると、運動能力が制限されている人は、1つ以上の外部スイッチまたはボタンを使用してiOSデバイスと対話できます。

そしてもちろん、音声コントロールもあり、人々は自分の声だけでiOSデバイスと対話することができます。

そして、それは私たちの最新のモーター技術の1つであるフルキーボードアクセスに私たちをもたらします。

iOSはiOS 9以降、キーボードのサポートを提供してきましたが、追加の入力モードとなっています。

iOS 13.4.1でリリースされたフルキーボードアクセスにより、お客様はキーボードを介して100%デバイスと対話できるようになりました。

これは、画面に触れるのに十分な器用さがないかもしれないが、必ずしも外部スイッチを必要としない、または使用したくない人のためのAssistiveTouchとスイッチコントロールの中間です。

また、非言語的、言語障害、または単に音声コントロールの使用が意味をなさない環境にいる可能性のある人のために、音声コントロールの代替手段を提供します。

フルキーボードアクセスは、片手キーボードやこの人間工学に基づいたスプリットキーボードなどのカスタムまたはアクセス可能なキーボードレイアウトに依存する人にも最適です。

フルキーボードアクセスは、タッチスクリーンなしで人々に真のiOS体験を提供するために、基本的なキーボード入力に多数の追加を提供します。

フルキーボードアクセスにはナビゲーションコマンドもあり、ユーザーは画面上のすべての要素、インタラクションコマンド、ドラッグアンドドロップなどのジェスチャーモードにアクセスできます。

そして、これらのコマンドはすべて、修飾キーとしてTabを使用します。

しかし、彼らはまた、異なるキーコンボを好むかもしれない人々のために完全にカスタマイズ可能です。

それでは、ユーザーがフルキーボードアクセスを使用してiPadでどのようにナビゲートするかを見てみましょう。

まず、矢印キーを使用してメモアプリとスペースバーに移動して有効にすることができます。

そこから、タブで新しいメモを作成し、すぐに編集できます。

シェイプシャッフルと呼ばれる私のアプリの1つからバージョン2についてメモを取ると思います。

iPadで素晴らしいものにしましょう。

編集が終わったら、Control-Tabを使って編集モードから抜け出すことができます。

古いメモを削除したい場合は、Tab-Zを使用してアクションのリストを表示できます。

その後、矢印とスペースを使ってメモを削除できます。

さて、もう1つ新しいメモを作りたいとしましょう。

さて、私は再びメモの作成ボタンにタブオーバーするか、タブFを使用して検索機能を使用することができます。

それから私は「new」と入力するだけで、そこに行きます。

だから、フルキーボードアクセスとその使用方法についてすべて知っているので、アプリ開発者として、キーボードユーザーが可能な限り最高の体験をできるようにする方法を調べる時が来ました。

2020年、私はスイッチコントロールについてあなたと話しました、そして、私たちは子供たちが形、色、数字を学ぶためのこの楽しいゲームに取り組みました。

一緒に、私たちはこのアプリをアクセシブルにしました。

今年は、フルキーボードアクセスでうまく機能することを確認できるように、iPad用のShape Shuffleを改訂することにしました。

まだシェイプシャッフルを見ていないなら、心配しないでください。

これは簡単なツアーです。

各レベルで、プレイヤーはここで見られるようなプロンプトを受け取ります:2つの黄色の正方形。

次に、以下のカードをタップして、必要な3枚のカードを見つける必要があります。この場合、2つのオブジェクトを持つカード、正方形のカード、イエローカード。

それぞれの正しいカードをダブルタップすると、次のレベルに進むことができます。

そして、レベルが上がるにつれて、プロンプトは難しくなります。

2つ見つけたようなので、ダブルタップしてボードに追加し、黄色と正方形の検索を続けることができます。

さて、カードが正しいかどうかわからない場合は、長押ししてピンを入れることができるので、後で戻ってくることができます。

左下のこの2つにピンを入れます。

その後、私が戻ったとき、私は最終的な選択をして、レベルを打つことができます。

うーん...わかった！

さて、ゲームプレイビューから始めて、別のラウンドをプレイするときに物事がどのように機能するかを見てみましょうが、今回はキーボードを介して。

だから、タブとスペースバーを押すと、物事はうまくいっているようです。

タブでカード間を移動し、スペースで反転することができます。

では、トライアングルカードを追加またはピン留めしてみましょう。

Tab-Zを押してアクションメニューを表示しますが、利用可能なアクションが表示されません。

さて、実際には、追加やピンなど、ユーザーがゲームで一般的なアクションにすばやくアクセスできるように対処できる2つの方法があります。

これを解決できる最初の方法は、カスタムアクションです。

カスタムアクションは、多くの支援技術に翻訳されるため、素晴らしいです。

何かにカスタムアクションを追加すると、VoiceOver、スイッチコントロール、フルキーボードアクセスに表示されます。

カスタムアクションは、Tab-Zを押すと表示されるものです。

ご覧のように、追加したいアクションのUIAccessibilityCustomActionを作成し、それらをcardViewのaccessibilityCustomActions配列に設定するだけです。

また、画像を追加することは常に素晴らしいことです。

これらの画像はフルキーボードアクセスには表示されませんが、スイッチコントロールには表示されます。

カスタムアクションが追加された私のUIは次のようになります。

Tab-Zを押すと、カードを追加したりピン留めしたりできるこの素敵なポップオーバーが見えます。

カスタムアクションは、アクセシビリティ機能を使用している人に最適です。しかし、ここで取ることができる別の本当にクールなアプローチがあります。

カスタムキーボードショートカットを追加できます。

カスタムキーボードショートカットの良いところは、フルキーボードアクセスユーザーだけでなく、デバイスでキーボードを使用しているだけで、フルキーボードアクセスがオンになっていないユーザーの両方に機能することです。

アクセシビリティにもパワーユーザーにも最適です。

キーボードショートカットのリストを表示するには、Commandキーを押したままにするだけで済みます。

今年の講演「iPadアプリを次のレベルに引き上げる」では、iPadのキーボードショートカットなどについて学ぶことができます。

今日は、Mac Catalyst 13で新しく、現在iOSとiPadOS 15にもたらされたこのAPIを活用する方法の簡単な例を紹介します。

AppDelegateでbuildMenuをオーバーライドすることで、キーコマンドを設定できます。ここでは2つのUIKeyCommandsを作成します。1つは追加アクション用、もう1つはピンアクション用です。

Commandキーを押したままにすると、KeyCommand HUDに表示されるので、発見可能性のタイトルを必ず追加します。

次に、「ゲームプレイ」という名前の新しいUIメニューを作成し、新しいコマンドを「子供」として渡します。

最後に、メニュービルダーにメニューを挿入して、完了です!

さて、実際に選択したカードを持っている場合にのみ、これらのアイテムをHUDでアクティブにしたいので、GameViewControllerでcanPerformActionをオーバーライドして、カードが実際に選択されたときにのみこれらのアイテムを表示します。

コマンドキーを押したまま、カードが選択されているとき、私たちのゲームは次のようになります。

そしてここで、フルキーボードアクセスの開発の重要な原則を強調したいと思います。

ユーザーの効率を向上させるために、すべての一般的なアクションにカスタムアクションとキーボードショートカットを追加してみてください。

どちらも簡単に見つけられるだけでなく、キーボードを介してアプリを操作する人の体験を向上させます。

私たちのゲームに戻りましょう。

新しいアクションで三角形を追加しました。

次に、Shift-Tabを使用してホームボタンに戻ります。

しかし、それをやっていると、別の問題が見られます。

その三角形は、スペースバーでタップしても何も起こりませんが、選択可能です。

まず第一に、私たちがそれと対話できないのに、なぜ私たちのカーソルはこの要素に行くのですか?

さて、私はすでにこのアプリでいくつかのVoiceOverサポート作業をしました、そしてこれがどのように見えるかです。

私のアイテムでisAccessibilityElementをtrueに設定し、accessibilityLabelを与えていることがわかります。

VoiceOverは各アイテムをユーザーに読み上げる必要があるため、これは素晴らしいことです。

ただし、誰かがフルキーボードアクセスユーザーのみの場合、カーソルはisAccessibilityElementでマークされた多くのアイテムにも移動します。

フルキーボードアクセスにこの要素をスキップするように指示するには、もう1行追加する必要があります。

ここでは、accessibilityResponds ToUserInteractionをfalseに設定していることがわかります。

これは、これがアクセシビリティ要素であるが、ユーザーが対話できるものではないことをシステムに伝えます。

したがって、フルキーボードアクセスやスイッチコントロールなどのモーター技術のカーソルはスキップする必要があります。

アクセシビリティ RespondsToUserInteraction は、isAccessibilityElement がすでに真である場合にのみ意味があることに注意してください。

デフォルトでは、システムはisAccessibilityElement trueで要素をインタラクティブかどうかを正しく設定しようとします。

ほとんどの場合、VoiceOverにはアクセスしたいオブジェクトがあるが、フルキーボードアクセスやその他のモーター技術にはアクセスできないオブジェクトがある場合、accessibilityResponds ToUserInteractionをfalseに設定するだけで済みます。

これは、フルキーボードアクセスの開発の2番目の重要な原則に私たちをもたらします。

アプリをテストするときには、カーソルがユーザーが操作できるアイテムにのみ表示されることを確認する必要があります。

さて、アプリを構築し、フォーカスが正しい場所にしか行かないようにしているので、先ほど説明したAPIではなく、canBecomeFocusedをオーバーライドしたくなるかもしれません。

ただし、これはフォーカスエンジン全体のフォーカス動作を上書きし、フルキーボードアクセスがオンになっていないときにタブを使用してナビゲートする人々に影響を与えます。

したがって、フルキーボードアクセスユーザーの動作を変更したい場合のみ、これを避けるのが最善です。

実際、これは重要な分野をもたらします。

フルキーボードアクセスを駆動するために使用されるフォーカスシステムは、iPadOSのようなすべてのOSでタブナビゲーションを駆動するのと同じものです。

フルキーボードアクセスで作業するために触る必要はありませんが、もっと知りたい場合は、これら3つの講演をお勧めします。

今年は、「iPadキーボードナビゲーションに焦点を当てる」と「SwiftUIのフォーカスを直接反映する」という他の2つの講演があります。

そして2017年には、フォーカスエンジンがtvOSをどのように駆動するかについて素晴らしい話があります。

さて、ホーム画面に戻ると、フルキーボードアクセスの素晴らしい検索機能を使用できることを確認したいと思います。

では、試してみましょう。

さて、数のレベルは箱から出してすぐにうまく機能します。

レベル8と12を検索するのは簡単です。

そして、私はすでにいくつかのVoiceOverサポートを追加したので、私も検索で設定ボタンを取得しています。

しかし、ボタンが設定と呼ばれていることを知らなかったらどうなりますか?

「Preferences」または「prefs」と入力するかもしれません。

うーん。運がない。

これを解決するために、accessibilityUserInputLabelsに文字列の配列を設定できます。

ここでは、好み、好み、ギア、および設定のローカライズされた単語をこのラベルに設定して、人々が何をタイプしてもそれに到達できるようにしています。

これらの文字列を追加することで、これらの名前のいずれかを話して設定ボタンをタップできるようになったので、音声コントロールユーザーにも好意を寄せることができます。

もちろん、これはあなたのVoiceOverラベルに干渉しません。

だから今、「prefs」と入力すると、うまくいきます!

そして、これは今日の私たちの3番目と最後の原則に私をもたらします。

ユーザーがFindでいつでもすばやくアクセスできるように、画像ベースのコントロールにできるだけ多くのラベルを常に提供してください。

さて、終わる前に、少し楽しいポリッシュをしたいです。

では、私のホーム画面をもう一度見てみましょう。

これらのアイテムはすべてUIボタンなので、タブは自然にそれらに移動しています。

そして、それは素晴らしいことです。

しかし、私のカーソルが常に長方形であることに注目してください。

物事をより遊び心のあるものにするために、ボタンの形に合わせましょう。

ボタンの周りに素敵なカーソル形状を表示するには、accessibilityPathを使用できます。実際、VoiceOverに使用するのと同じaccessibilityPathです。

静的ビューの場合、UIBezierPathを使用して、accessibilityPathを図形自体のそれに設定できます。

画面座標でaccessibilityPathを設定していることに注意してください。

スクロールビューにいる場合は、accessibilityPathをオーバーライドして、スクロールしているときでも、画面の座標に対して常に正しいようにします。

この少しのポリッシュがどれほど楽しく見えるかを見てみましょう。

タブスルーすると、円、三角形、正方形が見えます。

そして、VoiceOverでも同じです。

そのために、キーボード、特にフルキーボードアクセス用のアプリを開発する際に留意すべき重要なアイデアのいくつかを確認しましょう。

まず、カスタムアクションとキーボードショートカットを使用して、アプリをナビゲートするための効率的な手段を追加します。

次に、ユーザーが実際に操作できないアイテムにカーソルが着地しないことを確認します。

そして最後に、人々がフルキーボードアクセスの検索機能を最大限に活用できるように、特に画像ベースのコントロールにユーザー入力ラベルを追加するようにしてください。

そして、それがすべてです!

今日、あなたがAppleのすべての製品におけるモーターアクセシビリティの重要性を理解していることを願っています。

私たちのデバイスと対話する方法は数多くありますが、キーボードはユーザーにとって強力なツールとなっています。

この講演の情報により、アプリがフルキーボードアクセスユーザーとすべての人に優れた体験を提供することを確信できるはずです。

ありがとう、そして素晴らしいWWDC 2021を。

♪