10167

♪ベース音楽の演奏♪

♪

Beatriz Magalhães:こんにちは、私の名前はBeaで、ドキュメンテーションチームのヒューマンインターフェースデザイナーです。

同僚のジャックと私は、XcodeでDocCドキュメントを昇格する方法について話し合うつもりです。

素晴らしいドキュメントを作成して共有することがこれまで以上に簡単になりました。

今年は、SwiftフレームワークのドキュメントをXcode 13に統合しました。

このセッションでは、作成したフレームワークのドキュメントを強化します： SlothCreator。

SlothCreatorを使用して、自然の中で見つけたナマケモノをカタログ化し、新しい愛らしい仮想ナマケモノを作成できます。

このフレームワークの既存のドキュメントをより良くするために、Xcode 13で利用可能なドキュメントページタイプと、コンテンツに最適なものを選択する方法、フレームワークに関するストーリーを伝えるためにAPIの順序を整理する方法、および拡張機能がドキュメントの書き方を柔軟にする方法について説明します。

新しいXcode機能、つまりドキュメントページタイプから始めます。

Xcode 13には「ドキュメントカタログ」と呼ばれるまったく新しい機能があり、ドキュメントウィンドウまたはWebで表示できる3つのページタイプ（リファレンス、記事、チュートリアル）を作成できます。

各プロジェクトはユニークでニーズが異なりますが、通常、多様なドキュメントセットを持つことは良いことです。

リファレンスは、ライブラリ内の個々のAPIに関する簡潔で詳細な情報を提供します。

これにより、テキストの説明、コードスニペット、および異なるシンボル間の関係を追加できます。

これはあなたのドキュメントのバックボーンです。

記事は自由形式のコンテンツを含むページです。

彼らは、フレームワークがどのように機能するかの全体像を与え、特定のタスクを完了する方法を説明するのが得意です。

彼らはしばしば異なるシンボルの間で点をつなぎます。

チュートリアルは、フレームワークを使用するプロジェクトのステップバイステップのウォークスルーです。

シンボルの組み合わせが実際に実装することでどのように連携するかを理解するのは素晴らしいことです。

すべての習熟度レベルのフレームワーク採用者はチュートリアルの恩恵を受けることができますが、これは非常に初心者に優しいフォーマットであることは注目に値します。

このセッションでは、記事に焦点を当てます。

参考資料やチュートリアルに関する情報を見るには、これらの他のWWDCセッションをチェックしてください。

SlothCreatorのドキュメントを強化し始める前に、ドキュメントウィンドウの新機能を確認します。

これで、ナビゲーターでAppleのすべてのテクノロジーと独自のドキュメントを見ることができます。

さて、 SlothCreatorのドキュメントの現在の状態を確認します。

SlothCreator SwiftパッケージをXcodeで開いています。

[製品] をクリックし、[ドキュメントの作成] をクリックして、ドキュメント ウィンドウを表示します。

SlothCreatorフレームワークのドキュメントをスクロールすると、すべてのシンボルがすでにここで参照でカバーされていることがわかります。これは素晴らしいことです。

しかし、以前にこのフレームワークを使用したことがない人の視点からこのページに近づくと、それが何をするのか一目では明らかではありません。

トップレベルの記事を使って全体像を描くことができます。

トップレベルの記事には、簡潔な要約文、画像やコードスニペットなどのコンテンツを含む概要、下部には、強調したいいくつかの記号を含むトピックセクションがあります。

記事を追加するには、ドキュメントカタログでプロジェクトを設定する必要があります。

ドキュメントカタログは、すべてのドキュメントファイルを含むXcodeナビゲーターのファイルです。

さらに、新しいページタイプを書くことができます。

これにより、ドキュメントに一目ですばやくアクセスでき、日々のワークフローでドキュメントに優先順位を付けることが容易になります。

これを行うには、 SlothCreator ターゲットのソースを含む SlothCreator Sources ディレクトリを右クリックし、新しいファイルを選択します。

次に、ドキュメンテーションカタログが見つかるまでリストをスクロールします。

フレームワークのターゲットに合わせて名前を付けます： SlothCreator。

Xcodeは、ドキュメントカタログを作成するときにトップレベルの記事を提供します。

プロジェクトナビゲーターとマークダウンの両方で名前を「SlothCreator」に変更します。

では、私たちの記事を始めましょう。

あなたはMarkdownを使って記事を書きます。

まず、私のフレームワークが行うことを1つの文で説明する要約を追加します。

次に、SlothCreatorの主な機能（研究、ケア、視覚化）に関する概要タイトルの下に、より詳細な情報を追加します。

最後に、開発者が何を見ているのかを一目でわかるように、画像を追加します。

2倍の解像度で、ダークモードと互換性のある画像、またはダークモードの代替画像を追加することをお勧めします。

ファイルに適切な命名規則を含めることを忘れないでください。

まず、ファイルの名前：「sloth」。

次に、画像がダークモードの場合、チルダと「ダーク」という単語が表示されます。

次に、スケールファクターを記述する@2x。

そして最後に、画像ファイル形式は、この場合は.pngです。

画像が適切なサイズで正しく名前が付けられていることを確認したので、Finderを開き、アセットをドキュメントカタログのリソースフォルダにドラッグします。

次に、記事Markdownに画像を追加します。

まず、感嘆符を追加し、次に画像にアクセスできるように括弧の間に説明を追加し、最後に括弧の間のファイル名を追加しました。

私が「@2x」や「~dark」と入力しなかったことに気づいたかもしれません。

なぜなら、Xcodeは自動的に画像を選択するので、入力する必要があるのは画像名自体だけです。

さて、私はトップレベルの記事を終えました。

私のドキュメントを作成して、それがどのように見えるか見てみましょう。

製品をクリックし、ドキュメントのビルドをもう一度選択して、ドキュメントウィンドウを表示します。

素晴らしい、 SlothCreatorは、明確な高レベルの要約、このフレームワークが何のためにあるべきかについてのより多くのコンテキストを与える概要、およびフレームワークのコアコンセプトを一目で説明する画像を持っています。

さて、これまでSlothCreatorを使用したことがない人は、フレームワークが何をするかの全体像をすぐに理解することができます。

SlothCreatorを使い始める方法に関する実用的な最初のステップを提供することで、このドキュメントをさらに良くすることができます。

タスク記事はそれに役立つかもしれません。

事前にタスク記事を準備したので、Finderを開いてSlothCreatorのドキュメントカタログにドラッグします。

この記事は、このフレームワークの中核要素であるナマケモノの作成と世話の仕方を人々に教えることを目的としています。

構造の面では、トップレベルの記事と非常によく似ています。

どちらのタイプにも、テキスト、画像、コードスニペットを含めることができます。

ここでの最大の違いは内容です。

これらの違いを確認するには、製品とビルドドキュメントを選択して、ドキュメントを再度作成します。

次に、ドキュメントウィンドウナビゲーターで、「Getting Started with Sloths」を選択します。

素晴らしい、この記事は、その特性と特性を説明することによって、ナマケモノを作成する方法に関するより多くのコンテキストを提供します。

また、ナマケモノの世話をし、適切な生息地を形成する方法に関する実用的なステップを提供します。

これは、人々がSlothCreatorをはるかに早く採用するのに役立ちます。

要約すると、これまでのところ、私はあなたが作成できるすべての異なるタイプのドキュメントと、それぞれを何に使用できるかについて話しました。

「ドキュメントカタログ」と呼ばれる新しいXcode 13機能を導入しました。これにより、すべてのドキュメントファイルを同じ場所に配置し、新しいタイプのドキュメントを作成できます。

そして、私はそれを使用して、より多くのコンテキストを与え、特定のタスクに飛び込むことによって、私のドキュメントを強化する2つの記事を作成しました。

これらの記事を作成するために、私はMarkdownと私たちが現在サポートしている新しいファイルをドキュメントに使用しました。

今、私はそれをジャックに引き渡すので、彼はあなたのシンボルを整理し、ドキュメントの拡張機能を作成することによって、あなたのドキュメントをさらに良くする方法について話すことができます。

ジャック・ローレンス:ありがとう、ビー、それらの記事は素晴らしく見えます。

いくつかの新しいページを追加したので、フレームワークを通してすべての人を導くのに役立つ別の方法があります。

以前、Beaは SlothCreatorの概要を含むフレームワークページを作成しました。

ページの下部に、DocCコンパイラは、ナマケモノフレームワークのすべてのドキュメントを含むトピックセクションを自動的に作成しました。

これは素晴らしいスタートですが、改善できると思います。

だから、一歩下がって、私たちが伝えたい物語について考えてみましょう。

SlothCreator APIは、ナマケモノの研究と作成、ナマケモノの健康と幸福のケア、生息地でのナマケモノの視聴の3つの主要なカテゴリに分類されます。

これらのカテゴリを使用して、SlothCreatorのドキュメントページを整理できます。

フレームワークのトップレベルのページは次のとおりです。

まず、最も重要なページ以外はすべて脇に置いておきます。

速度や色などのサポートタイプは、後で別のページの下に整理できます。

次に、残りのページをSlothCreatorの機能を中心としたグループに整理します。

そして最後に、グループとページを最も先進的なものから最も先進的なものまで並べ替えます。

この新しい組織ははるかに親しみやすく見え、特定の機能に興味のあるフレームワークの採用者は、どこを見るべきかを知るでしょう。

次に、これらのテーマを使用するようにフレームワークのドキュメントを更新します。

SlothCreatorプロジェクトとビルドドキュメントを開いています。

コンパイラは、デフォルトのグループを持つ各ページにトピックセクションを自動的に追加します。

しかし、私はいくつかの余分なマークダウンでそれをカスタマイズすることができます。

以前、Beaはフレームワーク記事を含むドキュメントカタログを作成しました。

プロジェクトナビゲーターで、ドキュメントカタログ内の SlothCreator Markdown ファイルを選択します。

テンプレートには、私が記入するためのトピックセクションがすでに含まれています。

「エッセンシャル」から始めて、第3レベルの見出しでグループタイトルを更新します。

次に、グループに含めるリンクのリストを追加します。

「はじめに」の記事とナマケモノタイプから始めます。

記事にリンクするには、doc URLスキームを使用して、拡張子のないファイルの名前を使用します。

シンボルにリンクするには、シンボルの名前をダブルバックティックで囲みます。

先ほど作成したカテゴリを使用して、他のすべてのドキュメントページもグループに整理します。

では、再構築して変更を見てみます。

[製品] メニューで、[ビルド ドキュメント] を選択して再構築します。

ドキュメントは構築されていますが、DocCによって生成された診断が表示され、ここにリンクを誤って入力したようです。

オートコンプリートに任せましょうので、私はそれが正しいと確信しています。

次に、製品メニューを使用してドキュメントを再度再構築し、すべての問題を解決したかどうかを確認します。

素晴らしい、これ以上の警告はありません。

ドキュメントウィンドウのフレームワークページで、新しい「Getting Started」記事は、誰もが見る最初のトピックであり、複雑さの順に SlothCreatorのメインテーマが続きます。

左側のドキュメントナビゲーターも各ページのトピックセクションに合わせて更新されるので、探しているページをすばやく見つけることができます。

それでは、ドキュメントの整理方法を確認しましょう。

すべてのページが自動的に整理され、トピックセクションでカスタマイズできます。

トピックセクションを作成するには、第2レベルのトピックの見出しを追加します。

次に、第3レベルの見出しを持つグループを追加し、現在のページの下に整理したい他のページへのリンクのリストを追加します。

クラス、構造、列挙、プロトコルなどのコンテナシンボルとともに、任意の記事にトピックセクションを追加できます。

フレームワークのドキュメントを整理するときは、最も重要な機能とテーマ、および開発者がアプリを作成するために一緒に使用するAPIを検討してください。

プライマリドキュメントの下のサポートページを移動して、焦点と明確さを追加します。

そして、基本から始めて、徐々に複雑さを導入します。

フレームワークページでグループをカスタマイズしたので、タイプとそのメンバーを含む、 SlothCreatorのすべてのドキュメントを整理したいと思います。

ドキュメント拡張機能を使用すると、APIのドキュメントの書き方を柔軟に選択できます。

ソースコードにカスタムトピックセクションを追加できますが、この追加のドキュメントが別のファイルにある場合、時間の経過とともにレビューして維持する方が簡単だと思います。

そして、私はまさにそれを行うためにドキュメント拡張機能を使用することができます。

まず、新しいMarkdownファイルを作成します。

タイトルのリンク構文を使用してAPIに関連付けます。

次に、ソースコードの焦点と明確さを向上させるために、要約やディスカッションなどの主要なコンテンツをコードに残し、トピックセクションを抽出します。

DocCがビルドすると、各ソースコメントと対応するドキュメント拡張機能が1つのドキュメントページにマージされます。

拡張機能を使用すると、ドキュメントの作成とレビュー、フレームワークの生成されたインターフェイスの改善、より良いドキュメントの読み取り体験を簡単に提供できます。

次に、 SlothCreatorのドキュメントを強化するために、ドキュメント拡張機能を追加します。

まず、変更を加える前にナマケモノのページを見てみます。

Slothタイプのドキュメントコメントがあり、ビルドされたドキュメントもあります。

ソースコードに書いたドキュメントは素晴らしく見えますが、トピックセクションは改善される可能性があり、ドキュメント拡張でそれを行うことができます。

プロジェクトナビゲーターで、ドキュメントカタログを右クリックして新しいファイルを追加します。

テンプレートセレクタで、拡張ファイルテンプレートを選択し、「Sloth」という名前を付けます。

次に、タイトルのリンクを使用して、拡張ファイルをナマケモノタイプに接続します。

URLにモジュールの名前を含める必要があります。

以前、同僚のBeaがこの構文を使用してトップレベルのフレームワーク記事を作成したので、これは見覚えがあるかもしれません。

次に、トピックセクションにいくつかのカスタマイズされたグループを追加します。

最後に、製品>ビルドドキュメントを使用して再構築し、結果を確認します。

ソースコードに書いたコンテンツはまだ一番上にあり、ドキュメントファイルで作成したトピックセクションはその後に追加されます。

ナビゲーターでページを展開すると、ナビゲーターも更新されます。

Beaと私が行った変更は完了し、私たちはそれらを世界と共有する準備ができています。

ドキュメントはXcodeで見栄えがよく、誰でもSwiftパッケージをダウンロードした後にビルドできます。

また、ナビゲーターのエクスポートボタンを使用して、Swiftパッケージをダウンロードしたり構築したりすることなく、Xcodeでドキュメントを閲覧するために使用できるアーカイブをエクスポートすることもできます。

そして、誰もがアクセスできるようにしたい場合は、ウェブ上でドキュメントを公開することもできます。

そして、この関連セッションをチェックして、詳細を知ることができます。

それでは、Swiftフレームワークのドキュメントを昇格させる方法を確認しましょう。

まず、フレームワークを紹介する記事を作成し、APIがどのように連携するかを説明します。

次に、ドキュメントをグループに整理して、ナビゲーションを改善します。

最後に、ドキュメント拡張ファイルのAPIリファレンスに深さと詳細を追加します。

さらに進めたい場合は、ウェブに公開する方法を学び、これら2つの関連セッションのチュートリアルで読者を段階的にガイドすることができます。

Xcode 13はドキュメントの巨大なアップデートであり、あなたが公開するものを見てとても興奮しています。

見てくれてありがとう!

♪