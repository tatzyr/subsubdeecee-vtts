10166

こんにちは、私はビクトリアです。

私はAppleのドキュメンテーションツールチームのエンジニアで、同僚のイーサンと一緒に、Xcode 13の新しいドキュメンテーション機能を紹介します。

ワークフローに適合し、開発の新しい可能性を解き放つ、ドキュメントを読み書きする新しい方法があります。

Xcode 13には、Swiftフレームワークとパッケージのドキュメントを構築、書き込み、閲覧するための新機能があります。

これにより、コードの作成中にSwiftの依存関係に関するすべてを読むことができる、ドキュメント駆動型開発の強力なモードが解放されます。

このドキュメントは、Xcodeの開発者ドキュメントウィンドウのプラットフォームライブラリのすぐそばにあります。

このセッションでは、Xcode 13のドキュメント機能の概要を説明し、作成および使用しているSwiftフレームワークとパッケージのドキュメントの構築を順を順に説明し、Xcode 13を使用して優れたドキュメントを作成する方法を示し、Xcode 13でドキュメントを共有する方法を披露して仕上げます。

私が新しいドキュメント機能に個人的に興奮している理由から始めましょう。

私たちは皆そこに行ったことがあると確信しています。

使いたい新しいフレームワークやパッケージがいくつかありますが、それをコードに統合する時が来たら、その中に何が入っているかを把握する必要があります。

ここでXcode 13が介入します。

現在、Xcodeにはドキュメントとコード用のコンパイラが付属しており、Xcode内でSwiftフレームワークとパッケージのドキュメントをビルドして表示できます。

私たちはそれをDocCと呼び、ドキュメントの読み書き方法を強化するために、Xcode全体にすべて統合しました。

現在、DocCは、事後に実行される単なるドキュメントコンパイラではありません。

これは、Xcodeを補完する完全に統合されたドキュメント環境であり、ドキュメントがクイックヘルプに表示されるリッチなライブ環境を提供し、豊富なコード補完により、ドキュメントをまとまりのある全体にまとめることができ、統合された開発者ドキュメントウィンドウで利用可能な完全なドキュメント、XcodeとWebで表示するための事前構築されたドキュメントを共有するための簡単なオプションです。

WWDC 2021での他のDocCセッションにご期待ください。これらすべてを詳細に説明します。

DocCは、優れたリファレンスドキュメントを作成する権限を与え、XcodeとSwiftのパワーを活用して、フレームワークまたはパッケージ内のパブリックAPIの鳥瞰図をユーザーに提供し、APIがどのように連携するかを説明する機能を備えています。

しかし、DocCを使用すると、優れたリファレンスドキュメントよりもはるかに多くのものを書くことができます。

DocCでドキュメントを書くには、今年披露することに興奮している追加の2つの方法があります。

記事では、フレームワークの背後にある全体像をユーザーに説明し、フレームワーク内の個々のアイテムをまとまりのあるストーリーと一緒に結びつける機会を提供します。

そして、チュートリアルは、フレームワークを使用するプロジェクトを書くための強力なステップバイステップのウォークスルーです。

ユーザーにフレームワークのガイド付き紹介をゼロから提供することで、参照ドキュメントや記事よりもはるかに深く掘り下げることができます。

これらのオーサリング体験はすべて、Markdownの力とシンプルさを活用し、拡張して、ドキュメントのオーサリングをコードを書くのと同じくらい流動的にします。

ソースコード以外の記事やチュートリアルを含むドキュメントカタログの組み立てについてもっと知りたい場合は、今年のWWDCでこれらのセッションをチェックしてください。

そして最後に、今年後半にDocCをオープンソースとしてリリースし、構築されたドキュメントアーカイブをWeb上でホストできるWebアプリとともに、Xcodeの外部でもこれらの新しいドキュメントワークフローを活用できるようにします。

Xcode 13の新しいドキュメント機能を味わったので、XcodeのDocCでドキュメントを構築することについて話しましょう。

最初にボンネットの下を覗いて、それがどのように機能するかを見てみましょう。

ドキュメントを構築するために、Xcodeはフレームワークまたはパッケージを構築し、コンパイルされたアーティファクトと一緒にパブリックAPIに関する情報を保存するようにコンパイラに依頼します。

その後、その公開API情報はDocCに渡され、ソースコードの外部に書かれた記事やチュートリアルを含むドキュメントカタログと組み合わせて、コンパイルされたドキュメントを含む最終的なアーカイブを作成します。

ドキュメントカタログとドキュメントの整理の詳細については、「XcodeでDocCドキュメントを昇格する」セッションをご覧ください。

そして、DocCとXcodeのビルドシステムとの統合のおかげで、このプロセスは、ターゲットが依存するすべてのSwiftフレームワークとパッケージで繰り返されます。

このようにして、すべての関連文書を1か所にまとめることができます。

しかし、これはあなたの日々の文書化のニーズにとって何を意味しますか?

Xcode 13でSwiftフレームワークとパッケージのドキュメントを構築するには3つの方法があります。

オンデマンドでドキュメントを構築するには、ドキュメントをコンパイルしてロードするための新しいビルドドキュメントメニュー項目があります。

また、Swiftフレームワークに取り組んでいて、常にドキュメントをプレビューしたい場合は、コンパイルするたびにドキュメントを構築するための新しいビルド設定もあります。

また、コマンドラインとCIのニーズのために、xcodebuildにはドキュメントをビルドするための新しいコマンドもあります。

これは、XcodeでBuild Documentationを選択するのと同じビルドを実行しますが、コマンドラインでxcodebuildを使用します。

私の同僚のDavidは、「DocCドキュメントのホストと自動化」セッションで、ドキュメントワークフローの自動化に関する詳細情報を持っています。

これを実際に見てみましょう。

私のチームメイトは、かわいい小さなナマケモノのカタログ化とカスタマイズに関する SlothCreatorと呼ばれるこのパッケージに取り組んできました。

私はそれを試してみたいので、それがXcode 13でどのように見えるか見てみましょう。

Slothyと呼ばれるこのアプリを設定したので、SlothCreatorを使用してナマケモノをカスタマイズし、プレビューすることができます。

私はすでに私のアプリの依存関係として SlothCreatorを設定しましたが、それが提供するAPIについてもっと見たいので、製品メニューを開きましょう...

そして、ドキュメントのビルドを選択して確認します。

そして、ちょうどそのように、開発者ドキュメントウィンドウが開き、ナビゲーターで、私は私のSlothyプロジェクトと私が作業している SlothCreatorパッケージを展開して、ナビゲーターの概要を見ることができます。

SlothCreatorの概要をメインビューにロードし、下にスクロールすると、利用可能なタイプとプロトコルのリストが表示されます。

ここでは、ハビタットと呼ばれるこのタイプを見ることができます。

それをクリックしてページを読み込みましょう。

ここには良い情報がありますが、他に何か言及しているものがあるかどうか疑問に思います。

上部の検索フィールドを選択し、「生息地」を探しましょう。

いくつかの異なることがこれについて言及しているように見えます。

このスリープ方法をクリックして、ドキュメントページを表示しましょう。

このページは睡眠方法に固有のものですが、これがどのタイプの一部なのか気になります。

ウィンドウの上部にあるジャンプバーには、これがナマケモノタイプの一部であることがわかります。

このナマケモノをクリックすると、プルダウンメニューが表示され、もう一度クリックすると、そのタイプのドキュメントページを開くことができます。

今、私はこれらすべてのAPIがどのように組み合わされているかを把握しています。

だから今、私たちは SlothCreatorのドキュメントを歩く機会がありました。

巻き戻して、どうやってそのポイントにたどり着いたのか見てみましょう。

私の同僚のイーサンは、素晴らしいドキュメントを書くためにXcode 13の新機能のいくつかを示すことから始めます。

それを取り上げてください。

ありがとう、ビクトリア。

Xcode 13のドキュメントの構築と閲覧に関する優れたサポートについて確認したので、DocCでさらに優れたドキュメントを書くためのいくつかのコツをお見せしたいと思います。

DocCは、インソースドキュメントの利点を中心に設計されています。

ドキュメントをコードと一緒に書くと、既存の開発ワークフローと便利かつ簡単に統合できます。

宣言にドキュメントを追加するには、その真上に特別な種類のコメントを書くだけです。

これにより、将来行う可能性のあるコードの変更とドキュメントを簡単に同期させることができます。

そしてもちろん、Git diffsのような既存のテキストベースのツールにぴったり合います。

コードベースの将来のメンテナーに余分なコンテキストを提供するために、すでにソースコードにコメントを付けている可能性があります。

Swiftや他の多くの言語では、2つのスラッシュで行を始めてコメントを書きます。

これらのコメントを書くことで、将来のメンテナーがコードベース内で理解し、生産的になるのを助けるために長い道のりを歩んできました。

しかし、今日のフレームワークの採用者を助けたい場合はどうなりますか?

これがドキュメントのコメントのためのものです。

3つのスラッシュで始まるコメントを書くことで、Swiftドキュメントコンパイラにコメントをそのすぐ下の宣言に関連付けるように指示します。

コメントはシンボルのコンパイルされたドキュメントページに含まれ、フレームワークをインポートする人は誰でもアクセスできます。

また、ブロックスタイルのコメントを使用する場合は、開始区切り文字に余分なアスタリスクを含めるだけで、そのスタイルでドキュメントコメントを作成できます。

これが実際にどのように機能するか見てみましょう。

ビクトリアが述べたように、ここ数ヶ月間、私たちはSlothCreatorフレームワークに取り組んできました。

SlothCreatorは、かわいいナマケモノをカタログ化してカスタマイズするための機能を提供するSwiftパッケージです。

SlothCreatorの開発者として、フレームワークの採用者が簡単に開始できることを確認したいので、私が取り組んだコードベースの部分にドキュメントコメントを追加することに取り組んできました。

特に、私のフレームワークをインポートする人なら誰でもアクセスできるのはこれらのAPIであるため、 SlothCreatorのすべてのパブリックAPIが十分に文書化されていることを確認したい。

同じ理由で、DocCはフレームワーク内のパブリックシンボルとオープンシンボルのドキュメントページのみを生成します。

SlothCreatorには、まだ文書化が必要なシンボルがいくつかあります。

この食品構造から始めましょう。

まず、タイプの宣言の上に3つのスラッシュを追加して、ドキュメントコメントを作成します。

そして、これは「ナマケモノが消費できる食べ物」だと書きます。

私のドキュメントコメントの最初の行はシンボルの要約に変わりますが、ディスカッションセクションでいくつかの追加情報を追加したいと思います。

要約の後に改行を追加し、ナマケモノが愛する食べ物の種類に関する詳細を追加して、今1つを追加します。

また、DocCはMarkdownを完全にサポートしているため、Markdownのフェンスで囲まれたコードブロック構文を使用してコード例を追加できます。

すごい。

これは、食品構造の周りにいくつかの本当に役立つ追加のコンテキストを追加すると思います。

ドキュメントを再構築して、私のドキュメントが今どのようになっているか見てみましょう。

マウスを[製品]メニューに移動し、[ドキュメントのビルド]を選択することで、それを行うことができます。

Xcodeは、フレームワーク自体と一緒に SlothCreatorのドキュメントを再構築します。

そして、このビルドにビルドドキュメントボタンを使用したため、完了すると、ドキュメントビューアが更新されたドキュメントで開きます。

しかし、私は実際に私たちがちょうど追加したコメントを確認するために食品構造体のページに直接行くことに興味があります。

幸いなことに、Xcodeにはクイックヘルプと呼ばれる機能があり、それを行うことができます。

クイックヘルプは、ソースエディタでシンボルのドキュメントの短い要約バージョンを提供します。

Optionキーを押しながら食品の宣言をクリックすると、今すぐ試すことができます。

しかし、 SlothCreatorの採用者は、コード内のフード構造体への参照をオプションでクリックすることで、同じビューを開くことができます。

だから、私たちが書いたコメントは、要約とディスカッションのセクションにあります。

しかし、要約されたビュー以上のものを探しているなら、Xcode 13の新機能には、Open in Developer Documentationのリンクがあります。

クイックヘルプビューの右下隅にマウスを移動し、[開発者ドキュメントで開く]をクリックすると、ドキュメントウィンドウがそのシンボルのページに向かって開きます。

すごい。

SlothCreatorにはまだドキュメントが欠落しているもう1つのシンボルがあります。

マウスをXcodeのナビゲーターに移動し、ナマケモノアイテムをクリックして、ナマケモノファイルを開きます。

そして、下にスクロールすると、Eatメソッドにはまだドキュメントコメントが必要であることに気づいています。

それでは、方法を文書化する最良の方法を簡単に見てみましょう。

メソッドの宣言の上にトリプルスラッシュコメントを追加し、ドキュメントの要約を構成するテキストを追加することで、同じ方法から始めます。

しかし、パラメータとして渡されることを期待していることも具体的に文書化する必要があります。

パラメータセクションでこれを行います。

パラメータセクションをドキュメントに追加するには、Markdownリスト項目を「パラメータ」という単語で始まり、メソッドのパラメータの名前、コロン、そしてそのドキュメントを入力します。

今回は、戻り値区切り文字の後にコロンとメソッドが返すものの説明を書くことで、非常によく似た方法で戻り値セクションを追加できます。

しかし、あなたの方法に複数のパラメータがある場合はどうなりますか?

この場合、最善のことは、単一のパラメータ区切り文字から複数のパラメータ1に行くことです。

これは、パラメータ名が親パラメータ区切り文字の子として書かれていることを除いて、他のものとほぼ同じように機能します。

それでは、基本をやり直したので、ナマケモノの食べ方を文書化しましょう。

これで、3つのスラッシュで始まるドキュメントコメントを手動で書くことで、フード構造を文書化するときと同じように始めることができます。

しかし、私はより複雑なシンボルを文書化しているので、現在の宣言を文書化するのに最も適したテンプレートを挿入するXcodeの優れたドキュメントの追加機能を利用するつもりです。

Commandキーを押したまま、メソッドの宣言をクリックしてアクションメニューを開くことで、これを行うことができます。

次に、[アクション]メニューの[ドキュメントの追加]をクリックすると、メソッドの文書化を開始するのに最適なテンプレートがあります。

まず、方法の概要を記入してから、食品と量のパラメータと、この方法が返すものについて説明します。

そして、コード例とともにディスカッションセクションを追加して、ドキュメントを終了します。

前回と同じように、マウスを製品メニューに移動し、ビルドドキュメント項目を選択することで、ドキュメントを再構築できます。

そしてもう一度、Xcodeはフレームワーク自体と一緒に私のドキュメントを構築しています。

今回は、ウィンドウのナビゲーターを介してナマケモノ構造体に移動し、ナマケモノのトピックグループでナマケモノを見つけます。

ナマケモノのページを下にスクロールすると、インスタンスメソッドセクションで私のメソッドが見つかります...

私の更新されたドキュメントと一緒に。

私はすでにそれに本当に満足しています。

このメソッドの入力と出力は本当に明確に定義されており、ここにも有用なコード例があります。

これはほとんど準備ができていると思いますが、私たちはまだここで何かを見逃しています。

ドキュメントのこのページを読んでいるだけなら、私はここで考慮すべき他の関連シンボルの素晴らしい文脈を持っていません。

そして、 SlothCreatorのメンテナーとして、読者が次に学ぶことを検討すべき他のシンボルをいくつか呼び出したいと思います。

さて、Xcode 13の新機能は、ドキュメントのシンボルにリンクする機能です。

これは、フレームワークのさまざまな部分を接続し、関連する情報に読者を導くための本当に素晴らしい方法です。

これらのリンクは、新しいダブルバックティック構文で記述します。

例を見てみましょう。 例を見てみましょう。

これが私たちが以前に文書化した方法、睡眠です。

しかし、それは真空中には存在しません。

実際、ナマケモノ構造体には別のプロパティがあります。

ナマケモノの現在のエネルギーレベルを表す値があり、睡眠を呼び出すことの副作用の1つはナマケモノのエネルギーレベルの変化であることを読者が理解することが重要だと思います。

だから、私はエネルギーレベルプロパティを参照して、ここで私のメソッドディスカッションセクションに追加します。

Xcode 13より前は、これを行う自然な方法は、バックティックで囲んでモノスペースコードフォントでプロパティの名前を書くことです。

しかし、今、私はダブルバックティック構文に変換し、リンクを作成することができます。

さて、そのプロパティは私が文書化しているメソッドの兄弟であり、Swiftでローカル変数を参照するときと同じように、親タイプとのリンクをさらに修飾する必要がないので、energyLevelへのリンクは非常に簡単でした。

プロパティの名前、energyLevelを書くことができます。

しかし、別のタイプの子供を参照したい場合は、もう少し具体的にする必要があります。

だから、ここで私はハビタット構造体の子供にリンクするためにハビタット/comfortLevelを書きます。

すごい。

食べる方法のドキュメントへのリンクを追加して、これが実際にどのように機能するかを見てみましょう。

私はここで「彼らが食べ物を食べるとき、ナマケモノは...」と書くことから始めます。

そして今、私はenergyLevelプロパティへのシンボルリンクを書くつもりです。

だから私は2つのバックティックを入力し、それからエネルギーレベルを書き始めます。

Xcodeのコード補完は、正しいリンクを取得していることを確認するのに役立ちます。

先に進んでそのアイテムを選択します。

そして、私はエネルギーレベルが「食品によって増加する」と言うでしょう--そして今、私は食品構造体の子供を参照するつもりです。

もう一度2つのバックティックから始めます。

そして、私は食べ物、フォワードスラッシュ、そしてエネルギーを書きます。

私は今、2つのシンボルリンクを作成しました。これは、読者がこの方法に関する文脈をよりよく理解するのに役立つと思います。

また、これらのリンクはクイックヘルプでもアクセスできます。

したがって、Optionキーを押したままメソッドの宣言をクリックして、クイックヘルプポップオーバーを開きます。

これは私たちが追加したディスカッションセクションであり、もちろん、ディスカッションでは2つのリンクです。

そして、1つをクリックすると、ドキュメントウィンドウの参照シンボルのページに直行されます。

SlothCreatorのすべてのパブリックAPIに良いドキュメントコメントを書いたので、同僚と共有し、ウェブで利用できるようにすることに本当に興奮しています。

すべてのドキュメントビルドの一部としてXcodeが出力するドキュメントアーカイブを介してこれを行うことができます。

ドキュメントアーカイブに含まれるのは、ウェブ上でドキュメントを共有するために使用できる単一ページのウェブアプリです。

私の同僚のDavidは、彼の「DocCドキュメントをホストして自動化する」セッションで、それを行う方法について詳しく説明します。

それをチェックすることを強くお勧めします。

しかし、Xcodeは、ドキュメントウィンドウから直接ドキュメントのエクスポートとインポートもサポートしています。

今、それを見てみましょう。 

最初にマウスをウィンドウのナビゲーターに移動して、ドキュメントウィンドウから SlothCreatorをエクスポートします。

SlothCreatorフレームワーク項目にカーソルを合わせると、コンテキストメニューアイコンが表示されます。

クリックすると、エクスポートするオプションがあります。

デスクトップに保存します。

すごい。

今、私はそれを同僚に送る準備ができています。アーカイブをダブルクリックするだけで、Xcodeのドキュメントウィンドウで開きます。

しかし、私はすでに SlothCreatorについて知っているので、別のドキュメントアーカイブを開きたいと思います。

私は最近、SlothCreatorにコマンドラインインターフェイスを追加することは素晴らしいことだとチームと話し合っており、私の同僚の一人は、ArgumentParserは役立つ素晴らしいオープンソースフレームワークであると述べました。

ArgumentParserの最新のドキュメントアーカイブが送られてきたので、今すぐ開きましょう。

ドキュメントアーカイブをダブルクリックするだけで、すぐに学習を開始できます。

ドキュメンテーションは、成功し、長期的なフレームワークを開発するための鍵です。

ソースに直接ドキュメントを書くことは、本当に便利で強力だと思います。

そして、DocC統合を備えたXcode 13の新機能で、素晴らしいドキュメントを書くすべてのハードワークは、新しくて強力な方法で報われるでしょう。

WWDCには他にもいくつかのセッションがあり、ドキュメントを次のレベルに引き上げるのに本当に役立ちます。

「XcodeでDocCドキュメントを昇格する」は、このセッションが終了するところをピックアップし、ドキュメントカタログを追加してドキュメントをよりよく整理する方法を示します。

先に述べた「DocCドキュメントのホストと自動化」では、ドキュメントを既存の継続的インテグレーションセットアップに統合する方法と、ドキュメントをオンラインでホストする方法について説明します。

最後に、ステップバイステップの指示の恩恵を受ける可能性のあるフレームワークのより複雑な部分がある場合は、その方法を示す「DocCでインタラクティブなチュートリアルを構築する」をチェックすることをお勧めします。

ご覧いただきありがとうございます。

[パーカッシブミュージック]。