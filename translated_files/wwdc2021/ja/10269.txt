10269

♪ベース音楽の演奏♪

♪

Itai Rom：「高度なXcode Cloudワークフローのカスタマイズ」へようこそ。

私の名前はイタイで、後で同僚のヤンが参加します。

今年はXcode Cloudを導入します。

Xcode Cloudは、Xcodeに組み込まれた継続的な統合および配信サービスであり、Apple開発者専用に設計されています。

他のセッションでは、エンドツーエンドのワークフローを設定して、アプリを継続的に構築、テスト、配布する方法を示しました。

このセッションでは、チームのニーズに合うようにXcode Cloudをカスタマイズするために使用できる、より高度な機能について説明します。

Xcode Cloudは、開発者のウェブサイト、TestFlight、App Store ConnectなどのAppleの開発者ツールやサービスとすぐに統合するように設計されています。

また、すべての主要なGitベースのソースコントロールプロバイダーや、メッセージング用のSlackなど、必要不可欠な日々の開発ツールとも統合されます。

ただし、パイプラインの重要な部分である社内または独自のツールやその他の外部サービスがあるかもしれません。

このセッションでは、Xcode Cloudをカスタマイズして、これらのツールやサービスとうまく統合する方法を紹介します。

4つのカスタマイズトピックを取り上げます。

まず、環境変数を使用して余分な情報をビルドに渡すことについて説明します。

ビルドで実行するアクションでスクリプトを使用してカスタムコマンドを実行する方法を学びます。

また、ビルド中に必要な他のソースリポジトリを追加する方法。

そして最後に、Webhookを使用してXcode Cloudをチームが使用する他のシステムと統合する方法。

カバーすることがたくさんあるので、環境変数で直接入りましょう。

プロジェクトのワークフローを計画および設定する際に、実行中のワークフローに応じて、ビルドの動作をわずかに異なるようにしたい場合があります。

たとえば、アプリがAPIサービスに依存している場合、テストに本番環境ではなくステージング環境を使用したいと思うかもしれません。

この場合、APIサービスの別のURLをテストに渡す必要があります。

環境変数では、まさにそれを行うことができます。

これらは、ビルドの動作をさらに制御するために使用できる情報を定義できるシンプルなキーと値のペアです。

ワークフローの「環境」セクションで、必要な環境変数を設定できます。

ワークフロー設定の一部であるため、ソースリポジトリに追加情報をコミットする必要はありません。

ワークフローが実行されるたびに、定義した変数がアクションを実行している環境で設定されます。

APIキーやアクセストークンなどの機密情報については、秘密の環境変数を設定できます。

秘密の環境変数は安全に処理されます。

それらは常に暗号化され、安全に保存され、復号化された値は、アクションの実行に使用される一時的な環境でのみ使用できます。

値もログから編集され、非秘密変数のようにワークフローエディタで表示することはできません。

環境変数を秘密にするのは簡単です。

環境変数テーブルの「秘密」チェックボックスをチェックするだけです。

環境変数の値はビューから非表示になり、変更を保存すると安全に保存され、ワークフローエディタで表示できなくなります。

環境変数は、動作をカスタマイズし、追加情報をワークフローに渡すための便利なメカニズムを提供します。

彼らは私たちの次の高度な機能と組み合わせてさらに強力です:カスタムスクリプト。

Xcode CloudのワークフローとXcodeのスキームの間では、ワークフローで実行したいアクションを設定する方法に多くの柔軟性があります。

しかし、アクション中にカスタムロジックや追加のコマンドを実行する必要がある場合があり、カスタムスクリプトはこれを達成するための強力で柔軟な方法を提供します。

カスタムスクリプトは、作成してソースリポジトリに含めるシェルスクリプトです。

カスタムスクリプトは、ワークフローの各アクションで実行されます。

利用可能なスクリプトには、ポストクローンスクリプト、プレXcodebuildスクリプト、ポストXcodebuildスクリプトの3種類があります。

Xcode Cloudがアクションを実行するたびに、一連のステップを実行し、その名前で示唆されているように、各カスタムスクリプトは、アクションの特定のポイントでステップとして実行されます。

まず、Xcode Cloudは一時的な環境を設定し、プライマリリポジトリからソースコードをクローンします。

その後、Xcode Cloudはクローン後のスクリプトを実行します。

他のすべてのソース依存関係を解決した後、XcodeクラウドはXcodebuild前のスクリプトを実行します。

次に、Xcode Cloudはアクションに対応するXcodebuildコマンドを実行します。

Xcodebuildステップが終了すると、Xcode CloudはXcodebuild後のスクリプトを実行し、以前に生成したアーティファクトを保存します。

ワークフローに複数のアクション（複数のビルドアクションなど）、またはビルド、テスト、分析、アーカイブアクションが含まれている場合、Xcode Cloudは各アクションの適切なタイミングでカスタムスクリプトを実行します。

Xcode Cloudにカスタムスクリプトを追加するのは簡単です。

適切な名前のシェルスクリプトを「ci_scripts」というフォルダに追加し、このフォルダをワークフローで使用しているプロジェクトファイルまたはワークスペースと同じレベルに配置するだけです。

カスタムスクリプトはソースコードの一部であるため、プルリクエストでスクリプトの変更をテストしたり、さまざまなブランチで動作をカスタマイズしたりできます。

Xcode Cloudがアクションを実行すると、適切なタイミングで各スクリプトの存在を判断し、存在する場合は実行します。

カスタムスクリプトを実行するためにワークフローを設定する必要はありません。

スクリプトがあれば、それらは実行されます。

Xcode Cloudがスクリプトを見つけて実行するには、ci_scriptsフォルダの名前と内部のスクリプトがこの命名規則と正確に一致する必要があることに注意してください。

ワークフローで設定した環境変数は、秘密の環境変数を含むカスタムスクリプトで使用できます。

さらに、Xcode Cloudは、他のさまざまな有用な環境変数も提供します。

これらの変数を使用してスクリプトにフロー制御を追加して、実行するコマンドがワークフロー中の正しいポイントで実行されるようにすることができます。

たとえば、アクションがiOS、macOS、tvOS、またはwatchOSで実行されているかどうかを確認したい場合は、CI_PRODUCT_PLATFORM変数の値を使用できます。

よりターゲットを絞ったシナリオでは、特定のワークフローのアーカイブアクション中にのみ実行したいコマンドがあります。コマンドを実行する前に、CI_XCODEBUILD_ACTIONとCI_WORKFLOW変数がアーカイブアクションと特定のワークフローと一致することを確認できます。

カスタムスクリプトの動作を見てみましょう。

私のチームは、Frutaというスムージー注文アプリに取り組んでいます。

「Explore Xcode Cloud workflows」セッションでは、Frutaのようなアプリを構築、テスト、配布するためのワークフローを設定する方法を学びました。

Xcode Cloudを使用して、プルリクエストを作成するたびにビルドおよびテストします。

また、TestFlightを介してプルリクエストからのビルドをチームのメンバーに配布し、コードがマージされる前に変更を確認してサインオフできるようにします。

今日は、チームメンバーがデバイスにインストールされているビルドがプルリクエストからのものであるかどうかをわかりやすくしたいと思います。

プルリクエストから構築するときに、別のアプリアイコンを使用することでそれを行うことができます。

推測したように、カスタムスクリプトを使用すると、簡単に設定できます。

やり方を見てみましょう。

Xcodeでは、私はすでにFrutaプロジェクトを開いています。

カスタムスクリプトを追加する前に、まずプロジェクトにci_scriptsフォルダを追加する必要があります。

これを行うには、プロジェクトナビゲーターでプロジェクトを選択し、下部のプラスボタンをクリックし、新しいグループを選択します。

フォルダ名、ci_scriptsを入力します。

次に、デザイナーが作成したベータアプリのアイコンセットをci_scriptsフォルダに追加して、カスタムスクリプトをビルド中に所定の位置に交換できるようにします。

これを行うには、Finderからci_scriptsフォルダにドラッグします。

シートで、選択したターゲットのチェックを外し、[完了]をクリックします。

最後に、Xcodebuild前のスクリプトを追加しましょう。

このスクリプトはXcodebuildコマンドの前に実行され、必要に応じてFrutaのデフォルトのアプリアイコンセットとベータアプリアイコンセットを交換するために使用します。

私はすでに使用するスクリプトを作成したので、それをci_scriptsフォルダに追加するだけです。

繰り返しますが、シート内のターゲットのチェックを外し、[完了]をクリックします。

私のスクリプトが整ったので、それが何をするのかを詳しく見てみましょう。

まず、ビルドがプルリクエストから来ている場合にのみ、アプリのアイコンが交換されていることを確認したい。

Xcode Cloudが提供する環境変数の1つを使用して、ビルドがプルリクエストであるかどうかを実行時に確認できます。

これにはプルリクエストに関連するさまざまな環境変数がありますが、この場合、CI_PULL_REQUEST_NUMBER環境変数が設定されていることを確認します。

また、ベータアプリのアイコンは、TestFlightに配布されるビルドにのみ使用したいと考えています。

Xcode CloudがビルドをTestFlightに配布するたびに、常にプロジェクトのアーカイブを最初に構築します。

したがって、これをチェックする良い方法は、CI_XCODEBUILD_ACTION環境変数の値が「アーカイブ」であるかどうかを確認することです。

これらの環境変数の両方が期待値を持つ場合、既存のアプリアイコンセットを削除し、rmコマンドとmvコマンドを使用してベータアプリアイコンセットに置き換えます。

また、CI_WORKSPACE環境変数を使用して、デフォルトとベータアプリのアイコンセットの両方の正しいパスを構築していることに注意してください。

残っているのは、これらの変更でプルリクエストを開き、Xcode CloudがFrutaを構築してTestFlightに配布するのを待つことだけです。

今そのプロセスを歩くのではなく、事前にビルドを準備しました。

ここで、Xcode Cloudは私のプルリクエストブランチからFrutaを構築し、配布しました。

携帯電話のTestFlightアプリで、ビルドが追加したばかりの新しいベータアプリのアイコンを使用していることを確認できます。

これで、プルリクエストをマージすることができ、チームの全員が自分のプルリクエストのビルドで同じベータアプリのアイコンを見始めます。

Xcode Cloudでカスタムスクリプトを使用する方法を見たので、それらについて注意すべき重要なことがいくつかあります。

カスタムスクリプトの標準出力と標準エラーは、実行したアクションのログに含まれており、アーティファクトタブからダウンロードすることもできます。

スクリプトが期待どおりに実行されているように見える場合は、正しく名前を付け、プロジェクトまたはワークスペースの横にci_scriptsフォルダに配置したことを再確認してください。

カスタムスクリプトの障害のトラブルシューティングを支援するために、有用なロギングと回復力を追加してください。

たとえば、スクリプトが外部サービスにネットワーク要求を行う場合、冗長なロギングを有効にしてそれらの要求を再試行するロジックを含めることができます。

さらに、Xcode Cloudはスクリプトの終了コードを尊重します。

したがって、スクリプトがゼロ以外の値で終了した場合、Xcode Cloudはこれを失敗とみなし、全体的なアクションに失敗します。

これを利用して、Xcode Cloudが残りのアクションを続ける前に、スクリプトで実行する必要があるコマンドが成功していることを確認することができます。

最後に、テストアクションでは、テストの構築と実行に複数の環境が使用されることに注意してください。

テストの構築に使用される環境のみが、デフォルトでソースコードが複製されます。

テストを実行する環境では、ソースコードが複製されることはありません。

Ci_scriptsフォルダのみが利用可能になります。

その結果、ポストクローンスクリプトはこれらの環境では実行されず、カスタムスクリプトと他のシェルスクリプトや小さなツールなどの依存関係は、ci_scriptsフォルダ内に完全に含まれている必要があります。

カスタムスクリプトと環境変数を使用すると、ワークフローの動作をカスタマイズするための2つの強力なツールがあります。

次に、同僚のYanが、ワークフローでSwiftパッケージやその他の依存関係を利用できるように、Xcode Cloudで追加のリポジトリを使用する方法を紹介します。

Yan Huang: ありがとう、イタイ。

多くのプロジェクトは、ツール、ライブラリ、フレームワークを使用して構築されています。

これらの依存関係は、多くの場合、プロジェクト間で共有されるGitリポジトリでホストされており、プロジェクトを正常に構築するために取得する必要があります。

Xcode Cloudは、これらの追加のリポジトリを自動的に追加するのに役立ちます。

たとえば、ユーザーが友達を招待し、Frutaアプリに飲み物を共有できるようにする新機能を追加したい。

別のチームが同様の機能を実装しました。

そのため、私のチームと共有されているプライベートGitリポジトリでホストされている「InvitationsKit」と呼ばれるパッケージを再利用します。

このパッケージを追加する方法を見てみましょう。

ここで私はFrutaプロジェクトでXcodeにいます。

[ファイル]メニューからパッケージを追加し、[パッケージの追加]を選択できます。

私はすでにNature Labsの共有パッケージコレクションを持っています。これには、組織内のパッケージのリストが含まれています。

InvitationsKitを選択し、[パッケージの追加]をクリックします。

依存関係が追加されたので、ソースコントロールメニューからこの新しい依存関係をコミットし、変更をブランチにプッシュします。

Xcode Cloudでワークフローを設定し、ブランチから新しいコミットを受信したときに新しいビルドを開始します。

したがって、この新しいコミットは新しいビルドを開始する必要があります。

この依存関係を追加するのは初めてなので、Xcode CloudがInvitationsKitリポジトリにアクセスできないため、ビルドが失敗すると予想しています。

しかし、Xcode Cloudはこの問題に対処するための簡単なUIを提供します。

App Store ConnectのXcode Cloudに向かい、この新しいビルドを見てみましょう。

予想通り、ビルドは失敗しました。

Xcode Cloudは、リポジトリへのアクセスに問題があることを示す警告バナーを表示し、リポジトリへのアクセスを許可するオプションを提供します。

先に進み、リポジトリの管理ボタンをクリックします。

設定ページに移動し、招待キットリポジトリのリンクにカーソルを合わせ、グラントをクリックします。

ソース管理サービスによっては、リポジトリにアクセスするためにXcode Cloudを承認するよう指示される場合があります。

私は先に進み、GithubでInvitationsKitへのアクセスを提供しました。

さて、Xcode Cloudを振り返ってみると、Access Grantedと表示されます。

ビルドを再実行できるようになりました。

今回はこのビルドが通過することを期待しています。

「設定」の「追加リポジトリ」セクションに戻って、接続されているすべてのリポジトリを確認できます。

使用されなくなった場合は、そこからアクセスを拒否することもできます。

Xcode Cloudは、ビルド中に新しく参照されたリポジトリを検出します。

Xcode Cloudがアクセスできない依存関係を追加すると、UIはこの問題を解決するための迅速かつ簡単な方法を提供します。

これは、カスタムスクリプト内のリポジトリの複製やGitサブモジュールの参照など、あらゆるGit操作に有効です。

これは、他のすべての依存関係管理ツールにも適用されます。

このデモでは、新しいSwiftパッケージコレクション機能を使用して、追加のパッケージを含めました。

それについてもっと知りたい場合は、「コレクションを使用してSwiftパッケージを発見してキュレーションする」をチェックしてください。

これまでのところ、Xcode Cloud内でビルドをカスタマイズする方法を実演しました。

しかし、時にはあなたとあなたのチームは、外部サービスを通じて協力したいと思うかもしれません。

たとえば、新しいビルドの準備ができたら、ベータテスターに通知することをお勧めします。

これは、ウェブフックが助けに来ることができる場所です。

Webhookは、Xcode Cloudがサービスと通信する方法を提供します。

ビルドライフサイクルのさまざまな段階で送信される豊富なペイロードにより、ワークフローをさらに自動化し、チームのコラボレーションを向上させることができます。

それについてもっと知るために飛び込みましょう。

Xcode CloudでWebhookを設定して、ビルドの3つの異なる段階でリアルタイムの更新を受け取ることができます。

まず、ビルドが作成されたとき、コードをプッシュしたか、手動でビルドを開始したため、次に、ビルドが開始されたとき、最後に、ビルドが失敗したか成功したかに関係なく、ビルドが完了したとき。

プロジェクトに新しいWebhookを追加する方法を見てみましょう。Xcode CloudでWebhookを簡単に追加できます。

左側の列にある[設定]タブをクリックします。

Webhooksをクリックし、プラスボタンをクリックします。

次に、Webhookの名前と、HTTPリクエストを受信して処理できるアプリまたはサービスへのURLを入力するよう求められます。

次に、[保存]をクリックします。

Xcode Cloudでは、製品ごとに最大5つのWebhookを作成できます。

簡単に識別できるように、各Webhookに固有の名前を指定してください。

エンドポイントに送信されるペイロードは、App Store Connectアプリケーション、ワークフロー、製品、ビルドなど、ビルドと製品に関する情報を含むJSONブロブです。

HttpRequestを介して送信されるペイロードを受信して処理するには、アプリまたはサービスを設定する必要があります。

AWS LambdaでSwiftを使用してそれを達成する方法についてのサンプルコードを見てみましょう。

まず、リクエストを受け取ります。

次に、そのペイロードをJSONオブジェクトにデコードします。

次に、ワークフローの名前とビルド状態を確認します。

ワークフローがリリースワークフローであり、ビルド状態が成功した場合は、テストが利用可能であることをテスターまたはベータユーザーに知らせるメッセージをTwitterに投稿します。

最後に、Webhookリクエストが正常に処理されたことを確認するため、200ステータスコードを返します。

Swiftサーバーレス機能の実行について詳しく知りたい場合は、WWDC 2020でこのセッションをチェックしてください。

エンドポイントが成功したステータスコードを返さない場合、Xcode Cloudは再度リクエストを送信しようとします。

また、Xcode Cloudを使用すると、エンドポイントに配信されたWebhookのコンテンツを簡単に検査できます。

App Store ConnectでXcode Cloudに移動できます。設定とWebhookをクリックします。検査するWebhookを選択します。

次に、異なるタイムスタンプでの配達のリストが表示され、興味のあるものを選択します。

サービスに送信されたリクエストと受信した応答が表示されます。

Xcode Cloud Webhooksでできることはたくさんあります。

追加の例をいくつか紹介します。

バグチェックシステムから問題を自動的に作成または解決できます。ビルドが失敗したときにページングシステムに通知を送信します。複雑なリリースワークフローの一部としてダウンストリームビルドを開始します。

Webhookの徹底的なコンテンツを使用してワークフローを拡張することになると、空が限界です。

このセッションで学んだことをまとめましょう。

まず、ビルドの環境変数を渡す方法について学びました。

次に、ビルドプロセスをカスタマイズするためのスクリプトを設定する方法と、プロジェクト内の追加のリポジトリを操作する方法を実演しました。

最後に、ビルドライフサイクルのさまざまな段階でXcode Cloudからコールバックを受信するようにWebhookを設定する方法を学びました。

これらの機能がチームの日々のワークフローを強化できることを願っています。

ご覧いただきありがとうございます。

♪