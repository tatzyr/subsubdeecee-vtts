10223

♪ベース音楽の演奏♪

♪

ダニエル・サイクス・ターナー:こんにちは、私の名前はダニエル・サイクス・ターナーで、アクセシビリティエンジニアです。

この講演では、同僚のVirataと私は、watchOSのアクセシビリティ機能のいくつかと、開発者としてこれらの機能を使用する人々をサポートするために時計アプリを構築する方法について説明します。

今日の講演では、まずwatchOSのアクセシビリティを紹介します。

次に、アクセシビリティAPIを掘り下げ、さまざまな種類の視覚的アクセシビリティをサポートするために何ができるかを紹介します。

そして最後に、Virataは、モーターアクセシビリティが時計でどのように機能し、それをサポートするために何ができるかを説明します。

watchOSのアクセシビリティから始めましょう。

アクセシビリティとは、自分に最適な方法でデバイスを使用する人々に関するものです。

つまり、アプリに最高のユーザーエクスペリエンスを提供するためには、アクセシビリティを考慮する必要があります。

Apple Watchには、アプリをより簡単に使用できるアクセシビリティ機能の大規模なスイートがあります。

たとえば、VoiceOverなどの支援技術により、視覚障害のある人は、コンテンツが読み返されている間に一連のジェスチャーとタップを使用して画面をナビゲートすることで、Apple Watchをフルに使用できます。

そして、今年のwatchOSの真新しいのは、Apple Watchのために特別に再考されたAssistiveTouchです。

AssistiveTouchを使用すると、運動障害のある人は、画面に触れることなくApple Watchを使用できます。

Virataは、これが後でどのように機能し、それをサポートするために何ができるかを紹介します。

watchOSは、Reduce Motion、Bold Text、そして今年の新しい大きなアクセシビリティテキストサイズなど、いくつかのディスプレイの宿泊施設も提供しています。

watchOSの視覚的なアクセシビリティについて話しましょう。

適切なAPIでアクセシビリティをサポートすることで、アプリがWatchKitまたはSwiftUIで書かれているかどうかに関係なく、VoiceOverがユーザーに対して正しく機能することを保証します。

この講演では、SwiftUIのアクセシビリティに焦点を当てます。

ただし、ここで学ぶすべての原則がWatchKitにも適用されることを知ってください。

そして、アプリにアクセスできるようにするときは、合併症や通知を忘れないでください。

コンプリケーションと動的通知は、アプリからコンテンツを配信する別のパスとして機能するため、当社の支援技術もサポートする必要があります。

さて、アプリを構築するために何か新しいことを学ぶための最良の方法ではありませんか?

幸いなことに、私は自宅で植物を育てることにかなり投資するようになったので、先に進んでそれらの世話をするのに役立つアプリを構築することにしました。

今、それは完全には終わっていませんが、ここのメイン画面には、植物ケアタスクの今後のスケジュールを含む、私の植物に関するすべての情報があります:5日間で水、7日間で受精し、中程度の日光に保ちます。

ここのリストには他にもいくつかの植物があります。

その後、植物ごとに、水をやるときや受精するときなどのタスクを記録するために使用できる2つのボタンがあります。

そして、セルをタップすることで、水やりと施肥の間の日数を調整できます。

これは有益なアプリなので、各セルにはかなりの量のテキストが含まれています。

ここでは、システムのテキストサイズがデフォルトのサイズにあるときにアプリがどのように見えるかをお見せします。それはかなり良く見えます。

しかし、左に示すように、システムテキストサイズを非常に小さいサイズに変更すると、ボタンとタスクリストのテキストのサイズが変更されている間、植物名のタイトルは同じサイズのままであることに気付くでしょう。

その後、右側のアクセシビリティエクストララージに移動すると、タスクリストのテキストサイズが非常に大きくなり、切り捨てられ、画面上のすべての情報に収まらなくなりました。

私たちのアプリがダイナミックタイプをよりよくサポートする方法を見てみましょう。

PlantViewのコードを検査すると、タイトルやその他のコンテンツが入ったVStackがあります。

タイトルに使用したフォントが固定フォントサイズを使用していることに注意してください。

それは間違いなく私のタイトルがサイズを変えるのを止めるでしょう。

固定フォントサイズを使用するのではなく、提供されている11のテキストスタイルのいずれかを使用する必要があります。

左側のテキストスタイルは、デフォルトのシステムテキストサイズで表示されます。

そして、最大のテキストサイズにスケールアップすると、右側のテキストスタイルのサイズに大きくなります。

テキストスタイルを使用することで、システムはシステムのテキストサイズ設定でフォントサイズを自動的に調整します。

したがって、PlantViewコードをもう一度見ると、タイトルフォントを小さいタイトルのtitle3テキストスタイルに変更することで、その変更を迅速かつ簡単に行うことができます。

次に、タスクリストの切り捨てテキストを修正しましょう。

PlantTaskLabelのコードでは、HStackのすべてに1のlineLimitを割り当てています。これにより、テキストを1行にしか展開できません。

UIに必要な数の行に柔軟に調整するには、lineLimitをサポートする必要がある最大行数に設定します。

または、無制限の数の行を許可するためにそれを削除します。

今、私たちは進歩を遂げています。

しかし、UIは確かに大きく、切り捨てはありませんが、その過程ではるかに混雑しています。

そして、画面上の情報を読むのはまだ簡単ではありません。

より大きなテキストスタイルのレイアウトは、異なる構造化が必要になる場合があります。

したがって、レイアウトを構築するときは、sizeCategoryに環境プロパティラッパーを作成して、これが変更されるたびに更新を取得します。

次に、サイズカテゴリに応じてUIを調整する必要があります。 

この場合、タスクリストのテキストはextraExtraLargeのどこかでラップし始めます。

したがって、サイズカテゴリがこれよりも小さい場合は、以前に見たPlantViewを使用します。

しかし、それが大きい場合は、ラベルとボタンのそれぞれを積み重ね、成長するためのより多くのスペースを与えるこの新しい垂直植物ビューを使用します。

それはずっと良く見えます。

時計に大きなアクセシビリティテキストスタイルの導入により、より多くの人々がダイナミックタイプを利用することを期待しています。

Apple Watchを設定している人には、開始時にテキストサイズをカスタマイズするオプションが表示されます。

また、変更を加えない場合、時計は電話で使用されているものに最も近いサイズを自動的に選択します。

したがって、ダイナミックタイプを要約すると、時計アプリが大きなテキストサイズでうまく動作することを確認するための3つの重要なことがあります。

まず、固定されたフォントサイズではなく、常にテキストスタイルを使用するようにしてください。

次に、テキストを折り返して、切り捨てられないようにします。

そして第三に、必要に応じて、コンテンツが混雑しすぎると、垂直に積み重ねられたレイアウトに切り替えます。

これは大きなテキストの表面を引っ掻くだけなので、「ダイナミックタイプでアプリを構築する」というトークをチェックして、ゲームを本当にステップアップすることを強くお勧めします。

そして、素晴らしいビジュアル体験を作ることについてさらに学ぶには、「アプリを視覚的にアクセスできるようにする」というトークを必ずチェックしてください。

さて、視覚的には、それはうまくいきます。

しかし、もし私がビジュアルユーザーでなかったら?

VoiceOverをオンにして、その体験がどのようなものかを聞いてみましょう。

ボイスオーバー:WWDaisy。

デイジー、イメージ。

ドロップ、画像。

5日間。

葉、画像。

7日間。

明るさが高い、画像。

ミディアム。

ドロップ、塗りつぶし、ボタン。

葉、塗りつぶし、ボタン。

ダニエル：わかりました、それでは間違いなく私たちができるいくつかの改善があります。

1つ目は、対話できる要素の数を減らすことです。

現時点では、これはかなり複雑な見解です。

各セルには4つのラベル、4つの画像、2つのボタンがあります。

そして現在、2番目の植物に行くには、最初の植物細胞のすべての項目をナビゲートする必要があります。

また、水、肥料、日光の画像アイコンは、テキストの別々の要素として読み取られ、そのラベルは私たちの文脈にさえ意味をなしませんでした。

最後に、下部の2つのボタンは、使用されているシンボルによって提供されるデフォルトのラベルを使用していました。

だから、私たちが話した最初の問題は、プラント1からプラント2に移動するためだけに、あまりにも多くのアイテムをナビゲートしなければならないということです。

NavigationLinkを作成したとき、各要素のアクセシビリティ状態を理解するために、子のaccessibilityElementグループを.containとして指定してこれを行いました。

しかし、これは良さそうなので、この行を削除し、NavigationLinkは子供たちからのすべてのアクセシビリティ情報を自動的に結合します。

現在、セルは単一の要素として扱われ、読み出される内容は「WWDaisy」です。5日間。

7日間。ミディアム。ボタン。

そのタスクリストはまだいくつかの作業が必要なので、次は、それぞれにより良いラベルを与えることによって、今後の植物ケアタスクにいくつかのコンテキストを提供しましょう。

ラベルはPlantTaskによって決定されます。

したがって、PlantTaskLabel構造体内で、アクセシビリティラベルを変更して、プラントタスクごとに異なる文字列を返します。

これは、私がボタンにラベルを貼るのに使うのと同じテクニックです。

今、コンテンツは「WWDaisy」と読み上げられます。5日で水やり。7日間で受精。

中程度の日光を避けてください。ボタン。

そして、水と受精ボタンは、「ログ散水、ボタン」と「ログ施肥、ボタン」と読み上げられます。

これまでのところ、多くの作業が自動的に行われ、必要なのはいくつかの追加の修飾子だけです。

実際、SwiftUIでは、アクセシビリティのほとんどが無料です。

あなたはおそらく数行のコードを書くでしょう。

しかし、時々、カスタムコントロールを構築する必要があるかもしれません。

植物の散水と施肥の頻度を調整できるように、カスタムカウンターを構築しました。

見てみましょう。 

ボイスオーバー:日の散水頻度、見出し。

削除、ボタン。

8。

追加ボタン。追加。

ダニエル：これは技術的には機能しますが、理想的な経験ではありません。

ここでの目標は、これら3つの項目を単一のアクセス可能な要素に変えることです。

これを行うには、accessibilityElement修飾子を使用することから始めます。

これにより、新しい高レベルの要素が作成されますが、今回はすべての子供を無視します。

これは実際にはaccessibilityElementのデフォルトの動作です。

したがって、同じ動作を得るためにパラメータを空白のままにすることができます。

そして、私は子供たちを無視しているので、これは自動的に提供されたアクセシビリティアクションとともに、追加と削除ボタンのラベルを破棄します。

代わりに、accessibilityAdjustableActionを使用して、ユーザーがカウンターを上下にスワイプして値を増減できるようにします。

そして今、私は1つの要素しか持っているので、タスクの名前を使用して単一のラベルを与えます。

これは「散水周波数」または「施肥周波数」になります。

最後に、私はそれに価値を与えます。

accessibilityValueは変更されるたびに読み出されますが、ラベルは要素に移動するときにのみ読み出されます。

ボイスオーバー:日の散水頻度、見出し。

散水頻度。8日。調整可能。

9日間。

ダニエル：すごい。それははるかにうまくいきます。

先ほど見たように、SwiftUIは私たちの時計アプリをVoiceOverから簡単にアクセスできるようにしました。

そして素晴らしいのは、これはSwiftUIなので、同じコードがmacOSとiOSでも機能するということです。

SwiftUIで素晴らしい体験を設計することの詳細については、「SwiftUIのアクセシビリティ」というトークを必ずチェックしてください。

また、SwiftUIアクセシビリティを使用する際のまったく新しいツールとAPIについて学ぶには、「SwiftUIアクセシビリティ：基本を超えて」というトークをチェックしてください。

さて、視覚的なアクセシビリティから進む前に、さらに2つのことを強調したいと思います。合併症と通知です。

コンプリケーションはアプリへのトラフィックの多いウィンドウなので、もちろん、アクセスしやすい方法で情報を提供する必要があります。

さまざまな種類の合併症がありますが、そのほとんどは、テキスト、画像、記号の3つの異なるコンポーネントで構成されます。

テキストはVoiceOverによって自動的にピックアップされますが、テキストに略語が含まれている場合は、短縮されていないバージョンでアクセシビリティラベルを追加してください。

ここでは、「3月9日水曜日」を「3月9日水曜日」の完全な形に拡大します。

画像ベースの合併症も非常に一般的です。

ここにもアクセシビリティラベルを必ず提供してください。そうしないと、代わりに画像名が使用されます。

「月」は「月のリアルタイムビュー」ほど説明的ではありません。第3四半期。

SFシンボルなどの特定の図像には、「ドロップ、塗りつぶし」などのデフォルトのアクセシビリティラベルが付属している場合がありますが、シンボルに付属のラベルがあなたにとって最も理にかなっていることを確認してください。

「3日間で水」は私にとってはるかに理にかなっています。

通知に関しては、これらはアプリがユーザーに多くの情報を送信する別の方法です。

したがって、一部の通知はかなり簡単ですが、動的通知などの他の通知は複雑なビューを持つ可能性があるため、アプリに提供したのと同じアクセシビリティサポートが必要になります。

そして今、私はあなたをVirataに渡して、モーターアクセシビリティについてすべてお伝えします。

Virata Yindeeyoungyeon:まあ、ありがとう、ダニエル。

私の名前はビラタ・インディーヨンヨンヨンです。

私はアクセシビリティチームのエンジニアです。

今日、私はApple Watchのモーターアクセシビリティサポートについて話すことにとても興奮しています。

しかし、プレゼンテーションに飛び込む前に、私たちの新機能を簡単に見てみましょう。

画面に触れることなく、手のジェスチャーのみを使用して、文字盤からコントロールセンターに移動し、おやすみモードボタンに移動し、オンにすることができます。

それはとても簡単です。

今年は、Apple WatchにAssistiveTouchをもたらすことにとても興奮しています。

AssistiveTouchを使用すると、Apple Watchがオンになっている手のみを使用して、タッチなしでApple Watchをフルに使用できます。

人々は手のジェスチャーや手の動きを使って、画面上のカーソルをナビゲートすることができます。

画面コンテンツに基づいて追加機能にアクセスするためのメニューを表示できます。

一部の人にとっては、これがApple Watchとやり取りできる唯一の方法かもしれません。

手足の欠損、手や腕の機能の喪失などの運動障害を持つ人々のために、AssistiveTouchはApple Watchでコントロールとアクションを実行するためのより多くのオプションを可能にします。

では、AssistiveTouchの使い方の例を見てみましょう。

AssistiveTouchを使用する主な方法は、手のジェスチャーです。

人々は、クレンチしてタップしたり、ダブルクレンチしてアクションメニューを表示したり、ピンチして次の要素に移動したり、ダブルピンチして前の要素に戻ったりするなど、さまざまなジェスチャーを実行できます。

手のジェスチャーを使用できない人のために、代替手段は手の動きを使用することです。

手首を傾けることで、人々は画面上のポインタを動かし、UI要素と対話することができます。

iOSのAssistiveTouchと同様に、Dwell Controlを使用すると、ポインタを要素の上に一定時間置くことでアクションを実行できます。

それでは、AssistiveTouchの仕組みについて詳しく説明しましょう。

AssistiveTouchは、カーソルとアクションメニューの2つの主な機能で構成されています。

AssistiveTouchをオンにすると、画面にカーソルが表示されます。

カーソルは、左上から右下の順に、画面上の各要素に1つずつ焦点を合わせます。

カーソルは、さらなる相互作用のために要素を強調表示します。

フォーカスされた要素に関するその他のアクションについては、アクションメニューを表示して、システムまたはカスタムアクションを実行できます。

AssistiveTouchアクションメニューには、デジタルクラウンの押下、スクロールナビゲーション、ジェスチャーインタラクションなど、デバイスの制御を可能にするデフォルトのシステムアクションが付属しています。

このメニューにカスタムアクションを追加することもできます。

だから今、私たちはAssistiveTouchがどのように機能するかを知っています。

あなたのアプリケーションでそれをどのようにサポートできるかを見てみましょう。

これらの次のトピックについて確認します。

まず、あなたの見解にどのようなフォーカス可能な要素があり、それらをどのように変更できるかを学びます。

次に、カーソルフレームとフレームサイズを変更する方法を見ていきます。

最後に、アクションメニューをカスタマイズする方法について詳しく説明します。

焦点を絞る要素から始めましょう。

この表は、AssistiveTouchでどの要素にフォーカスできるかの一般的な概要を示しています。

ユーザーインタラクションに応答するインタラクティブな要素のみがフォーカス可能です。

SwiftUIは、ユーザーインタラクションを処理するための組み込みの制御要素を提供します。これらの要素はインタラクティブでフォーカス可能です。

ビューでは、ボタン、トグル、またはNavigationLinkがある場合、これらの要素はデフォルトでフォーカスできます。

実用的な要素は、アクションがあるか、インタラクティブであると定義されているため、AssistiveTouchによってフォーカス可能です。

テキスト要素は、タップジェスチャーアクションを添付することで、インタラクティブでフォーカス可能になります。

要素にaccessibilityActionを追加することもできます。

ボタンや調整可能な要素など、実用的な特性を持つ要素を定義すると、インタラクティブとして扱われ、AssistiveTouchによってフォーカスされます。

一部の要素はフォーカスできません。

ユーザーインタラクションに応答しないラベルやテキストなどの静的要素は、AssistiveTouchではフォーカスできません。

ユーザーインタラクションが無効になっている要素もフォーカスできません。

では、例を見てみましょう。

このビューでは、ラベルヘッダー、ドリンク情報を含むテキスト、同意とキャンセルボタンの要素があります。

2つのボタンのみがフォーカス可能ですが、ラベルとテキストはフォーカスできません。

このビューのコードを見てみましょう。 

タップジェスチャーがメインのVStackに添付されており、このビューをタップしてドリンクの詳細ビューを表示できることを示します。

ただし、明示的に宣言されない限り、VStack内の静的要素はフォーカス可能になりません。

ここでは、同意ボタンとキャンセルボタンのみがフォーカス可能です。

では、ユーザーはビューをタップしてドリンクの詳細ビューを表示できることをどのように知るのでしょうか?

より良いユーザーエクスペリエンスを提供するために、私はそれが対話可能であり、タップを実行できることを示すために、ドリンク情報のテキスト要素を強調したいと思います。

これは、accessibilityRespondsToUserインタラクション修飾子に「true」を設定することで実行できます。

修飾子を適用した後、このビューには3つのフォーカス可能な要素があります。ドリンク情報テキスト、受け入れるボタンとキャンセルボタン要素です。

では、AssistiveTouchカーソルフレームについて詳しく学びましょう。

ご覧のとおり、フォーカスされた要素は、AssistiveTouchが要素が扱いにくいかどうか、またはアクションを実行できるかどうかを強調するために重要です。

AssistiveTouchカーソルフレームは、要素のタップ可能な領域と同じです。小さなタップ可能な領域を持つ要素は小さなカーソルフレームを持ち、内部のコンテンツをクリップする可能性があります。

パディングを追加し、クリッピングを防ぐためにボーダーをオブジェクトの形状に一致させることで、これをよりきれいにすることができます。

この例では、省略記号画像を含むNavigationLinkは、AssistiveTouchカーソルから小さな円で強調表示されます。

タップ可能な領域のサイズを大きくすることで、これを改善することができ、AssistiveTouchカーソルフレームも変更します。

contentShape修飾子へのパスを指定することで、要素のタップ可能な領域とカーソルフレームを変更できます。

このNavigationLinkでは、タップ可能な領域の形状を要素のサイズの1.5倍の円に設定しました。

その結果、AssistiveTouchカーソルフレームが大きくなり、要素が画面上で見やすくなります。

では、AssistiveTouchのアクションメニューを見てみましょう。

AssistiveTouchアクションメニューは、デフォルトのシステムアクションとカスタムアクションをビューに表示し、アクションメニューリストに表示します。

フォーカス要素にカスタムアクションがある場合、それらのアクションは優先順位付けされ、リストの先頭に表示されるため、対話する方が便利です。

要素が調整可能な場合は、デクリメントアクションとインクリメントアクションが表示されます。

アクセシビリティグループ要素にカスタムアクションが含まれている場合、グループ要素に焦点を当てると、それらのアクションが表面化されます。

要素にVoiceOverのカスタムアクションをすでに追加している場合、それは素晴らしいことです!

これらのアクションは、AssistiveTouchアクションメニューにも自動的に表示されます。

カスタムアクションはアイコンとして表示されます。

デフォルトの画像は、カスタムアクション名の最初の文字になります。

カスタムアクションアイコンに画像を提供する場合は、accessibilityAction修飾子に画像を含むラベルを追加できます。

さて、それは私たちのセッションの終わりです。

これで、Apple Watchのアクセシビリティ機能をよりよく理解できるようになりました。

アプリケーションにDynamic Type、VoiceOver、AssistiveTouchのサポートを追加することを忘れないでください。

これらのAPIを使用し、誰もがwatchOSアプリケーションにアクセスできるようにするためのツールがあります。

さて、あなたの時間をありがとう、WWDCの残りの部分を楽しんでください!

♪