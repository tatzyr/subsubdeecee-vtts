10205

みなさん、こんにちは。

私の名前はキーランで、ソースコントロール技術に取り組んでいるXcodeエンジニアです。

Xcode 13は、コードレビューモードを完全に再考し、アプリの品質を向上させるのに役立つ新しいコラボレーションワークフローを導入します。

このセッションでは、アプリFrutaで典型的なワークフローをご案内します。

Xcode 13の新しいコードレビューとプルリクエスト機能を使用して、バグを見つけ、フィードバックを得て、それらの変更を統合し、同僚にフィードバックを提供します。

始めましょう。

私の仕事の大部分は、ユーザーが報告した問題を調べることです。

バグを修正するには、まずそれがいつ、なぜ起こり始めたのかを理解する必要があります。

コードの変更を通して時間をさかのぼることで、私はしばしばコードレビューモードを使用して原因を把握することができます。

私たちが言及したApp Storeのレビューの1つは、私たちのアプリに最近行われたいくつかのUIの変更が正しく見えないということです。

私は問題が何であるかをかなりよく知っているので、先に進んでいくつかの変更を加え始めます。

入力を開始すると、変更はソースエディタの溝に表示されます。

変更されたすべてのものについて良いアイデアを持つことができるように、以前の値が何であるかを知ることは本当に有用だと思います。

このため、私はコードレビューモードに飛び込むことができます。

エディタバーの[コードレビュー]ボタンをクリックするだけで、ローカル編集と最新のリビジョンの比較を確認できます。

ドキュメントに取り組んでいる間、コードレビューモードは、私が行っている編集を継続的に強調表示するので、最後のコミットから何が変更されたかを常に知っています。

ファイルに複数の編集を行った場合、下部バーのステッピングコントロールは、私が行った変更の数を示しています。

矢印アイコンをクリックすると、コードの変更間がジャンプします。

そうすれば、自分で編集を探してファイルをスクロールする必要はありません。 そうすれば、

時々、何が変わったかを並べて見やすくなりますが、私は自分の変更をインラインで見ることを好みます。

Xcodeはどちらのスタイルでも変更を表示でき、右上のエディタメニューを使用して2つを切り替えることができます。

UIのバグに関するすべての問題をキャッチしたことを確認したい。

バグがどこから来たのかを本当に掘り下げて理解するには、アプリのリリース間で何が変わったかを確認する必要があります。

下のバーのコミットコントロールを使用して、これらの比較を設定できます。

Xcode 13では、ブランチ、タグ、最新の場所全体でコミットを選択できるため、任意の2つのポイント間でアプリの変更を簡単に確認できます。

私は通常、TestFlightsまたはApp Storeに提出するたびにリリースブランチをカットするので、そのリリースに関連するコードの2つのバージョンを見ていきます。

コミットを選択すると、Xcodeはドキュメントの2つの歴史的なバージョンの比較を表示します。

ハイライトの色は紫とオレンジに変わり、一番下のバーに表示されるコミットに対応します。

以前と同様に、ステッピングコントロールを使用して変更を移動できます。

インラインまたはサイドバイサイドで比較を見ることができます。

この比較を調べ終わったら、一番下のバーのリセットボタンを使って、最新の変更にすばやく戻すことができます。

通常、私がアプリに加えた変更は、複数のファイルにまたがります。

1つのファイル内の変更を調べるのは本当に便利ですが、プロジェクト全体で変更したすべてのファイルの概要が知りたいことがよくあります。

ソースコントロールナビゲーターの新しい変更タブのおかげで、前回のコミット以降に変更したすべてのファイルのリストを見ることができます。

それらのいずれかをクリックすると、自動的にコードレビューモードに入り、そのファイルで行ったすべての変更が表示されます。

私はファイル間を切り替えて、私が行った他の編集をすぐに思い出させるのが好きです。

成分を表示するときに私たちのアプリにこの問題が発生する理由がわかったので、私はそれを修正するために私の変更で新しいブランチを作成します。

ブランチの作成と切り替えは私がよくやっていることであり、Xcode 13にはそれを行うための素晴らしい新しい方法があります。

Xcodeのツールバーに現在のブランチが表示されるようになりました。これは、私が最後に取り組んでいたことを思い出させるのに役立ちます。

それをクリックすると、最近取り組んだブランチをすばやく切り替えることができます。

この場合、セカンダリメニューを使用して修正用のブランチを作成します。

コードレビューモードで履歴を探索した後、バグの修正を考え出すことができました。

解決策が提案されたので、コードの変更に関するフィードバックをもらいたいです。

私はコードベースのこの部分に完全に精通していないので、私の変更が他の問題を引き付けないことをチームメイトに確認してもらいたいです。

コード変更で同僚と協力するために、プルリクエストを作成します。

GitHubとBitbucket Serverの新しい統合サポートを使用して、Xcode 13から直接行うことができます。

ソースコントロールのポップオーバーから直接プルリクエストを作成できます。

Xcodeは、私のブランチとデフォルトのアップストリームブランチにマージするためのドラフトプルリクエストを作成します。この場合はメインです。

公開する前に、修正に関する情報を含むプルリクエストを準備できます。

コミットしてブランチにプッシュした変更は、変更ナビゲーターのプルリクエストセクションに表示され、公開後に含まれる変更のプレビューが表示されます。

ローカル変更セクションでは、コミットしてプッシュするまでプルリクエストに含まれないファイルを表示できます。

プルリクエストの内容に満足したら、タイトルと説明を与えます。 タイトルと説明します。

特に数人のチームメイトにこの変更を確認してもらいたいので、参加者ボタンをクリックしてレビュアーとしてタグ付けします。

フィードバックを待って他のブランチに切り替えると、Xcodeはどのプルリクエストを表示するかを把握します。

Xcodeは、ソースブランチと現在のブランチに基づいて、関連するプルリクエストを決定します。

ブランチを切り替えると、Xcodeは既存のプルリクエストを自動的に検出します。

私は少し前にプルリクエストを公開し、その後、私のチームは私にいくつかのフィードバックを残しました。

今、それを見てみましょう。 

変更ナビゲーターでプルリクエストを選択すると、プルリクエストの概要と、公開してから起こったすべてのことを確認できます。

私のチームは私のコードに関するフィードバックを残してくれました。

必要に応じて、これらのディスカッションに返信するか、「変更を表示」をクリックして、コードレビューモードでファイルに直接ジャンプできます。

マットからここにいくつかの素晴らしい提案があります、そして今、私たちはXcodeで私のプルリクエストについてこの会話をし、それをソースコードに直接接続する機会があります。

フィードバックに応じてプルリクエストを更新しました。

さて、私のチームメイトがここに残したコメントを見ると、彼らは私の最新の変更に参加しているように見えます。

私の同僚がこのプルリクエストを承認したようです。

今、私は継続的インテグレーションワークフローのステータスを確認する必要があります。

Xcode Cloudを使用しているので、プルリクエストのCIポップオーバー内で継続的インテグレーションワークフローのステータスも確認できます。

テスト結果の概要をすばやく見ることができ、エントリをクリックすると、詳細なXcode Cloudレポートに直接ジャンプします。

Xcode CloudとCIでのコードの実行の詳細については、セッション「Meet Xcode Cloud」をチェックしてください。

さて、私のチームメイトはすべて私の変更を承認し、私のXcode Cloudジョブはすべて成功したので、私はプルリクエストをマージする準備ができています。

プルリクエストアクションを使用して、「マージ」を選択します。

Xcodeでは、変更がターゲットブランチにどのように統合されるかを決定するマージ戦略を選択できます。

マージコミットを含むデフォルトを選択します。これはマージコミットです。

オプションのコミットメッセージを入力することもできますが、そのままにしておきます。

すべてが良さそうなので、今からマージします。

プルリクエストをマージしたので、他の作業に戻す時が来ました。

同僚にフィードバックを求めるのが役に立つように、彼らはしばしば私に彼らの変更を確認するように頼みます。

最近取り組んだブランチに加えて、ソースコントロールのポップオーバーには、私に関連するプルリクエストも表示されます。

作成したプルリクエストが表示されますが、Xcodeには、チームメイトがレビューを要求したプルリクエストも表示されます。

ソースコントロールのポップオーバーを見ると、チームメイトの一人が私にそうするように頼んだようです。

彼らの支店をチェックして、それを見直しましょう。

私自身のプルリクエストと同様に、私がタグ付けされて以来、彼の概要、レビューステータス、チームメイトのプルリクエストに関する議論を見ることができます。

彼らの変化を見てみましょう。 では、

プルリクエストノードの下にあるChanges Navigatorのファイルを順を追って説明します。

これらのいずれかをクリックすると、コードレビューモードになり、プルリクエストがマージされた場合に適用される変更が表示されます。

行に新しいコメントを二次クリックして挿入することで、エディタ内に彼のためにコメントを残すことができます。

彼のコードに潜在的な改善があると思うので、チームメイトにメモを残しておきましょう。

私のフィードバックはかなりマイナーで、このプルリクエストは良さそうです。

右上のアクションを使って承認します。

Xcode 13は、コードをレビューし、同僚と協力するための素晴らしい新しい方法を提供します。

コードレビューモードは、アプリのソースコードが時間の経過とともにどのように変化したかについての洞察を提供することで、アプリの問題や行動の変化を調査するための強力なツールです。

コードレビューモードは、新しいインラインプレゼンテーションモードと拡張された比較オプションも提供し、ワークフローの柔軟性を高めます。

プルリクエストを使用すると、チームと協力して、メインブランチにマージする前に、チームの変更に関するコードフィードバックを提供および受信することで、アプリのコード品質を向上させることができます。

ディスカッションはアプリのソースコードに表示され、チームワークを本当に開発プロセスの一部にします。

ありがとう、素晴らしいWWDCを、そして。

[パーカッシブミュージック]。