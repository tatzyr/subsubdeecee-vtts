10068

♪ベース音楽の演奏♪

♪

エリック・ホーンバーガー：皆さん、こんにちは。今日はご参加いただきありがとうございます。

私たちはあなたのためにいくつかの素晴らしいコンテンツを計画しています。

私たちは、あなたと私が一緒に研究とケアアプリを構築するコードに沿って歩くつもりです。

ResearchKitは、AppleがGitHubコミュニティと協力して維持しているオープンソースのiOSフレームワークです。

参加者が身体的または認知的な運動などの活動を行っている間、同意を収集し、調査を管理し、センサーデータを記録するためのUI要素を提供します。

CareKitは、同様に、完全にオープンソースのフレームワークでもあり、患者向けのケアアプリの構築に役立つように設計されています。

薬を服用したり、医師に電話したりするなど、患者に実行してもらいたいタスクをスケジュールすることに優れています。

また、健康関連データに安全な永続性レイヤーを提供し、チャート作成のためのユーティリティを備えています。

さて、過去のWWDCセッションでは、これら2つの兄弟フレームワークを単独で議論することがよくありましたが、今年は患者にとってより良い体験を生み出すためにそれらをどのように一緒に使用できるかを紹介します...

ごめんなさい。

私たちはただ--私はそれをサイレントにしておくべきだった

私たちはカットしますか?

乗組員:いいえ、ただ答えてください。

エリック: やあ、ジェイミー。最近どうですか？

ジェイミー:ねえ、エリック。

あなたが今WWDCの準備で忙しいのは知っていますが、理学療法研究アプリの資金がちょうど来たことをあなたに伝えたかったのです!

この最先端の研究は、非常に多くの人々を助けるでしょう!

では、すぐにアプリの最初の改訂を出せると思いますか？

エリック：ねえ、ジェイミー、それは素晴らしいニュースです、そして私は本当ワクワクしています。

問題は、私たちはダブダブコードの真ん中にいるということです。

ジェイミー：ああ、もうコーディングしてるの？

それは完璧です！

したがって、そのアプリは「Recover」と呼ばれます。

それは参加者が手術後に膝を強化するのに役立つ理学療法アプリになるだろう、そしてそれはゲームチェンジャーになるだろう!

私はたくさんの素晴らしいアイデアを持っていますが、まず、参加者がアプリを使い始める前に、参加者が研究に参加することに同意することが本当に重要です。

私たちは彼らにすべての法律を説明しなければなりませんが、私は本当に威圧的ではない方法でそれをやりたいです。

また、参加者から署名を得て、私たちとデータを共有することに同意してもらう必要があります。

ええと、ちょっと待って、エリック。

臨床チームからメッセージが届いています。

ああ、うわー。最初の参加者は月曜日に術後から解放されるようです。

エリック、とりあえずオンボーディングを始められますか？

残りのチームに追いつかなければなりませんが、すぐにかけ直します。

これは素晴らしいことになるだろう!

エリック：わかりました。

ええと...じゃあ、わかった！

これは今、私たちのコードになると思います。

だから、ジェイミーがその会議から抜け出す前に、オンボーディングを終えることができるかどうか見てみましょう

では、このセッションでは、オンボーディングと同意に焦点を当てましょう。

どのようなデータを収集し、誰がアクセスし、何に使用され、どのくらいの期間保持されるかを参加者に説明し、そのすべてを理解しやすくすることは、良い研究にとって最も重要です。

アプリのこの非常に重要な部分を正しく取得するのに役立つResearchKitの新しいベストプラクティスをいくつか紹介します。

そして、ボーナスとして、そのオンボーディングと同意の流れをCareKitベースのアプリに焼きつける賢い方法を実演します。

具体的には、標準のCareKitアプリを設定しますが、ケアプランの内容が明らかにされる前に参加者がオンボーディングを完了する必要があります。

その同意とオンボーディングフローの一環として、参加者に何をするように求められているかを伝えるいくつかの指示手順を構築します。

実際の同意部分に飛び込む前に、このように参加者を方向づけることは、彼らの経験を向上させるのに本当に役立つことがわかりました。

署名を収集する方法を紹介し、ResearchKitを使用して、オンボーディングの一環として、HealthKit、通知、デバイスの動きの承認を事前に要求する方法も実演します。

フォローしたい場合は、セッションリソースでスタータープロジェクトを見つけることができます。

Xcodeを開いて始めましょう！

ここが私たちが出発点です。

今日は4つのファイルに触れる予定です。

まずはAppDelegateです。

ここで私たちはCareKitの店舗と交流します。

Surveys.swiftでは、ResearchKitを使用していくつかの調査を書きます。

次に、CareFeedViewControllerとInsightsViewControllerがあり、アプリのUIを構築します。

さて、スターターアプリを実行すると、実際には今あまりないことがわかります。

コンテンツのないOCKDailyPageViewControllerだけです。

日の間に飛び回ることができますが、まだ何もありません。

そのすべてを埋めるのが私たちの仕事です。

この隅にInsightsタブもあり、パート3でそれに戻ります。

さて、私たちがやりたいことは、同意カードを参加者のフィードに表示することです。

その同意タスクは、アプリの残りの部分へのアクセスをゲートします。

完了するまで他には何も表示されません。完了したら、他のすべてのタスクが表示されるはずです。

ここでAppDelegate.swiftにジャンプして、私たちの最初のステップは、オンボーディングのためのCareKitタスクを永続化することです。

次に、タスクを作成するたびに、タスクが参加者のフィードに表示される頻度を指定するスケジュールを定義する必要があります。

オンボーディングには、毎日のスケジュールを使用するため、同意が完了するまで毎日オンボーディングが求められます。

次に、タスクを作成します。

私たちは、それがユニークである限り、私たちが望むものなら何でもできるIDを与えます。

ランダムな識別子は問題ありませんが、この場合、ここで別のファイルで定義した定数があります。

また、作成したばかりのスケジュールを渡す必要があります。

また、いくつかの指示を指定し、オンボーディングが遵守に影響を与えるべきではないことを示します。

これが意味するのは、基本的に、オンボーディングは、ほとんどのCareKitアプリの上部にある完了リングを埋めることにカウントされないということです。

そして最後に、私たちは私たちの店にタスクを持続させることができます。

先に進んでメッセージを印刷して、成功したかどうかを知らせます。

さて、私たちは店でオンボーディングタスクを持っています、行く準備ができています、そして今、私たちはそれを参加者のフィードに表示する準備ができています。

CareViewController.swiftを飛び越え、CareKitにどのように表示したいかを伝えます。

ここでは、少し前に見たカレンダーとフィードであるOCKDailyPageViewControllerをサブクラス化しています。

日付メソッドのprepare listViewControllerをオーバーライドしています。

このメソッドは、ユーザーが新しい日付にスワイプするたびに呼び出され、日付を検査し、その日付に表示したいものを決定し、適切なコンテンツをlistViewControllerに追加するのが私たちの仕事です。

さて、最初にやりたいことは、その質問に対する回答に基づいて異なるコンテンツを表示するため、参加者がオンボーディングを終了したかどうかを確認することです。

もう少し下に降りて、それを行う方法を書き出しましょう。

checkIfOnboardingIsCompleteメソッド内で、OCKOutomeQueryを作成し、オンボーディングタスクに関連するすべての結果を照会します。

クエリが返されたら、結果が見つかったかどうかを確認します。

何もなければ、それはオンボーディングがまだ終わっていないことを意味します。

1つある場合、それはオンボーディングがすでに完了していることを意味します。

ここで新しい方法を使用し、オンボーディングが完了したかどうかに基づいて、同意タスクのみを表示するか、他のすべてのタスクを表示します。

わかった。これまでのところ、とても良いです!

私たちは今、参加者がアプリの残りの部分に入る前にオンボードすることを要求するメカニズムを持っています。

次のステップは、そのオンボーディングフローを設定することです。

ここでは、ResearchKit調査を提示するCareKitタスクカードを作成したいと考えていますが、その前に、表示するものがあるように、実際にResearchKit調査を作成する必要があります。

Surveys.swiftに立ち寄って、それを処理します。

始めるために私たちの機能をスタブしましょう。

私たちのオンボーディング調査は、歓迎ステップ、指示ステップ、署名ステップ、許可ステップ、そして最後に完了ステップの5つのステップで構成されます。

1つ目は歓迎のステップで、ORKInstructionStepになります。

私たちは今日、これらの指示の手順の多くを見るつもりです。

ResearchKitステップを作成するたびに、一意の識別子を与える必要があります。

ランダムな識別子を含め、任意のパターンを使用できます。

この重要なパスに触発されたアプローチは、私にとって本当にうまくいくことがわかりました。

また、タイトルと詳細テキスト、ヘッダー画像も指定します。

わかった。

次に、ステップ2はインフォームドコンセントのステップであり、これも指示のステップになります。

しかし、今回は、いくつかのボディアイテムを追加します。

ボディアイテムは基本的に箇条書きですが、箇条書きの代わりに画像、この場合はSFシンボルを使用するオプションがあります。

このボディアイテムは、健康データを共有するように求められることを参加者に伝えます。

2番目のボディアイテムを作成して、タスクを完了するように求められ、3番目のボディアイテムを作成して、署名を提供するように求められます。

彼らのデータがプライベートで安全に保たれることを思い出させるために、もう1つ追加しましょう。

最後に、これらのボディアイテムを指示ステップに挿入します。

そして、それは指示をカバーしています。

次は署名を集めることであり、幸いなことに、ResearchKitはこの部分を本当に簡単にします。

署名はORKWebViewStepで収集できます。

showSignature AfterContentプロパティをtrueに設定すると、ステップの下部に署名ボックスを表示するようにResearchKitにプロンプトが表示されます。

実際の同意書をHTMLとして提供でき、署名ボックスのすぐ上に表示されます。

そこに行きます。署名はかなり速くて簡単でした!

最後のビットは許可を要求します。

この4番目のステップでは、チームメイトのParieceが昨年WWDCで導入したHealthKitPermissionTypeで許可を収集します。

2組のHealthKitタイプを指定する必要があります。1つは書き込み許可が必要で、もう1つは読み許可が必要です。

今年は、2つの新しい許可タイプを導入します。

1つ目はORKNotificationPermissionTypeで、アラートを表示したり、アプリにバッジを付けたり、サウンドを再生したりする許可をリクエストできます。

また、デバイスのモーションデータへのアクセスを求めるのに役立つORKMotionActivity PermissionTypeも導入しています。

これら3つすべてをrequestPermissionStepに渡し、4番目のステップを締めくくります。

5番目と最後のステップは、ジェイミーの研究に参加してくれた参加者に感謝する完了ステップです。

これらのステップはすべて、ORKOrderedTask内で連鎖されます。

ResearchKitに提示してもらいたい順序で手順を渡してから、この方法からタスクを返します。

わかった。

オンボーディングと同意の流れ全体を定義したので、CareFeedViewControllerに戻り、CareKitベースのアプリから表示する方法を再検討しましょう。

真新しいクラスであるOCKSurveyTaskViewControllerを導入しており、この目的のために特別に構築されています。

他のすべてのCareKitビューコントローラーと同様に、eventQueryとstoreManagerと一緒に表示したいタスクのIDを渡します。

さらに、作成したばかりの調査と、ResearchKitの結果を一連のCareKitの結果値に変換するクロージャーも必要です。

パート2では、この閉鎖をより詳細に再検討します。

今のところ、参加者がオンボーディングを完了した日付を保持するだけで十分だと言うだけです。

また、このタスクカードをフィードに追加したいと考えています。

さて、実際にはもう1つのステップがあり、参加者がオンボーディングを完了したら、フィードがリロードされることを確認することです。

それを達成する1つの方法は、自分自身を調査タスクビューコントローラーの代理人として設定することです。

次に、ここで、デリゲートメソッドを実装できます。調査タスクビューコントローラーdidFinishタスクと結果。

この方法の本文では、オンボーディングが正常に完了したことを確認することができます。これは基本的に、参加者が途中でキャンセルしなかったということです。彼らは最後まで行き、正常に完了しました。

その場合は、reload() を呼び出してフィードを更新できます。

さて、私たちのオンボーディングカードが設定されています。

参加者がオンボーディングを完了すると、OCKOutcomeを保存し、フィードをリロードします。

これは良さそうですね！

実際、それがすべてだと思います。実は。

アプリを実行して、これがすべて機能することを確認しましょう。

アプリの使用を開始する前に、同意を求められていることがわかります。

そして、それはまさに私たちが望んでいることです!

ここで[開始]ボタンをタップすると、少し前に作成したウェルカムステップで迎えられることがわかります。

次のステップは、私たちが定義したボディアイテムの指示ステップです。

私たちが選んだSFシンボルは、本当にそれを生き生きとさせます。

次は署名ステップなので、ここを下にスクロールして署名します。

...そして、承認ステップに進みます。

まず、HealthKitを承認します。

先に進んでそれを許可してください。

次は通知、次にデバイスの動きです。

最後のページは、私たちがすべて終わったことを知らせ、参加してくれたことへの感謝の完了ステップです。

そして今、私たちはケアフィードに戻っています。

これで終わったので、同意を完了するためのプロンプトはもう表示されないように注意してください。

代わりに、これは私たちのアプリのすべての真のコンテンツが表示される場所です。

私たちは次のセッションでそれにたどり着くつもりです。

ねえSiri、ジェイミーにメッセージを送って、オンボーディングと同意が終わったと伝えてもらえますか？

私たちのフレームワークの詳細については、researchandcare.orgをご覧ください。

ソースコードを読んだり、貢献したりしたい場合は、両方のフレームワークがGitHubで入手できます。

次のセッションにまた参加してください。

ジェイミーにすぐに確認してから、パート2にまた合流します。

また近いうちに会いましょう!

♪