10018

♪ベース音楽の演奏♪

♪

マット・リケットソン：「SwiftUIの新機能」へようこそ。私はマットで、後でテイラーが加わります。

このセッションは、Appleの宣言型UIフレームワークであるSwiftUIに関するものです。

SwiftUIはまだ若いですが、私たちはすでにここまで来ています。

SwiftUIは2019年に初めてリリースされ、宣言的で状態主導のスタイルでユーザーインターフェイスを構築する強力な新しい方法を導入しました。

SwiftUIの2番目のリリースで次の大きな一歩を踏み出し、新しいアプリとシーンAPIで100%のSwiftUIアプリを有効にしました。

今年は、豊富な新機能を備えたアプリでのSwiftUIのより深い採用をサポートすることに重点を置いています。

今、あなたがまだ自分でSwiftUIを試す機会がなかったなら、それは大丈夫です!

あなたのアプリに最適なものを知っているのはあなただけです。

しかし、今年利用可能なすべての新機能について学ぶ際に心に留めておくべきヒントがいくつかあります。

SwiftUIにつま先を浸す良い方法は、iOS、iPadOS、macOSのNotesの新しいアクティビティストリームを強化する方法など、既存のアプリでまったく新しい機能を作成することです。

または、SwiftUIで構築されたmacOSの新しいアバターピッカー。

既存のUIKitまたはAppKitコードと一緒にSwiftUIを混ぜることができることを忘れないでください。

SwiftUIは、SwiftUIを使用してmacOSで新しいショートカットアプリを構築する方法など、アプリを新しいプラットフォームに拡張するための便利なツールでもあります。

SwiftUIを使用すると、各デバイスに独自のエクスペリエンスを作成しながら、プラットフォーム間で共通のコードを簡単に共有できます。

そして、アプリを再設計する準備ができたら、SwiftUIを持ち込むのに最適な時期です。

まったく新しいApple Payの購入フローは、SwiftUIを使用して再設計されました。SwiftUIは、macOSの新しいHelp ViewerとwatchOSのTipsアプリに新鮮な塗料をもたらすためにも使用されました。

そして最後に、SwiftUIでゼロから再構築されたiOS用の豪華な新しい天気アプリを忘れることはできません。

これらは、SwiftUIが次世代のアプリの構築にどのように役立っているかのほんの一例です。

このセッションでは、それをすべて可能にした素晴らしい新しいAPIのいくつかを共有したいと思います。

まず、リストとグリッドを使用してコンテンツのコレクションを構築する方法の改善を歩きます。

次に、リストを超えて、データ駆動型アプリを次のレベルに引き上げるための新機能を紹介します。

第三に、グラフィックや視覚効果を駆動するためのいくつかの素晴らしい新しいツールを披露します。

テキスト、キーボード、フォーカスベースのナビゲーションの強化について説明します。

そして最後に、私たちはボタンにいくつかの愛を与えます。

それでは、SwiftUIアプリ内でデータを整理して表示するための重要な機能であるリストとグリッドから始めましょう。

今年は、リッチでインタラクティブなリストとグリッドの作成をさらに簡単にします。

楽しいものから始めましょう。

SwiftUIには、画像を非同期にロードするためのサポートが組み込まれています。

SwiftUIは、新しいAsyncImageビューでこれらの画像の読み込みを簡単にします。

URLを与えるだけで、SwiftUIは自動的にリモート画像をフェッチして表示し、デフォルトのプレースホルダも提供します。

AsyncImageはカスタマイズすることもできます。

たとえば、ロードされた画像に修飾子を追加したり、ここで楽しい色を追加したりするように、カスタムプレースホルダを定義したりできます。

カスタムアニメーションやエラー処理を追加することもできます!

また、AsyncImageはすべてのプラットフォームで利用できます。

ぜひチェックしていただければ幸いです。

AsyncImageはすぐにコンテンツをロードしますが、フィードを表示するときなど、アプリがリクエストに応じてコンテンツをロードする必要がある場合があります。

これは、新しいリフレッシュ可能な修飾子を使用して、iOSとiPadOSでプルツーリフレッシュをサポートするための優れたユースケースです。

この修飾子は、リフレッシュアクションを設定し、環境を通過します。

iOSとiPadOSのリストでは、このアクションを使用してプルツーリフレッシュを自動的に追加しますが、独自のカスタムリフレッシュ動作を構築するためにも使用できます。

Swift 5.5の新しい並行性言語機能の1つであるこの新しいawaitキーワードに気付いたかもしれません。

これは、updateItemsメソッドが非同期アクションであり、UIをブロックせずにリストを更新できることを示しています。

もう1つの新しい並行性関連のSwiftUI機能は、タスク修飾子です。

このAPIを使用すると、ビューの存続期間に非同期タスクを添付できます。

つまり、ビューが最初に読み込まれたときにタスクが開始され、ビューが削除されると自動的にキャンセルされます。

これは、写真の最初のバッチを自動的に読み込むのに最適な方法です。

これらの新しい並行性修飾子は、表面上はシンプルに見えますが、アプリに洗練された非同期動作を構築するために使用できます。

たとえば、ここでは、最新の写真が利用可能になったときに読み込むタスクを設定しました。

私は通常のループを書きましたが、ここでもawaitキーワードが使用されていることに気付くでしょう。

これは、new newestCandidatesが実際には非同期シーケンスであり、Swift 5.5のもう1つの新しい並行性機能であるためです。

これは、最新の候補者を非同期に待機し、次の候補者が利用可能な場合にのみループを反復することを意味します。

つまり、実際にはこの単一の修飾子に大量の機能を詰め込んでいるということです。

ビューは、表示されるとすぐに候補者を非同期にリッスンするタスクを開始し、新しい候補者が利用可能になるたびにリストを更新し、ビューが消えたときに自動的にタスクをキャンセルします。

Swiftの並行性とSwiftUIでそれを活用する方法について学ぶべきことがたくさんあるので、詳細を掘り下げるために他のいくつかの講演を準備しました。

「SwiftUIで並行性を発見する」は、並行性がSwiftUIのアップデートモデルとどのように関連しているかを説明し、先ほど説明した新機能をデモします。

そして、「Swift並行性：サンプルアプリを更新する」では、非同期モデルコードを使用して既存のプロジェクトをアップグレードすることを段階的に説明します。

次に、リストコンテンツにインタラクティブ性を組み込むための新しい、より良い方法を提供します。

この例では、私の超秘密の隠れ家への道順を共有するための簡単なリストを書きました。

これは素敵に見えますが、テキストは編集できません。

それを直しましょう。

代わりにテキストフィールドに交換することで、テキストを編集可能にすることができます。

ただし、テキストフィールドにはテキストへのバインディングが必要です。

リストのコンテンツクロージャでは、バインディングではなく、コレクション内の各要素のプレーンな値のみが与えられます。

このような状況では、各行のコレクション要素へのバインディングを取得する方法を理解するのは難しい場合があります。

一般的なアプローチの1つは、代わりにコレクションのインデックスを反復し、添字を使用してそのインデックスの要素へのバインディングを取得することです。

ただし、SwiftUIは何か変更されたときにリスト全体をリロードすることを余儀なくされるため、このテクニックは推奨されません。

実際、私たちはこのトピックをより詳細に議論する全体の講演を準備しました。

詳細については、「Demystify SwiftUI」を見ることをお勧めします。とりあえず、これらの変更を元に戻して、より良い解決策を見てみましょう。

今年、SwiftUIは、コレクション内の個々の要素のバインディングにアクセスするためのはるかに簡単な方法を提供しています。

通常のドル記号演算子を使用して、コレクションへのバインディングをリストに渡すだけで、SwiftUIはクロージャ内の個々の要素にバインディングを返します。

値を読み取るだけでいいコードは、あなたが慣れているように、以前とまったく同じままです。

しかし、慣れている通常のバインディング構文を使用して、テキストフィールドのようなインタラクティブなコントロールを簡単に追加できます。つまり、以前に含めるのを忘れたスーパーシークレットドアコードを最終的に入力できます。

この新しい構文はSwift言語の一部であるため、リストだけでなく、どこでも機能します。

たとえば、代わりにリスト内のForEachビューで同じテクニックを使用できます。

さらに良いことに、このコードをSwiftUIでサポートされている以前のリリースにバックデプロイすることもできます。

しかし、私たちはあなたの既存のコードを書きやすくしているだけではありません。

リストもいくつかの素晴らしい新機能を獲得しています!

リストを視覚的にカスタマイズする新しい方法から始めましょう。

新しいlistRowSeparatorTint修飾子を使用すると、各行の区切り文字とアイコンの色を揃えるためにここで行ったように、個々の行区切り文字の色を変更できます。

SwiftUIには、セクションセパレータの同等の修飾子もあります。

しかし、このアプリでは、これらすべてのセパレータが少し気を散らすようです。

私の指示を単一の統一された流れのように感じてほしい。

新しいlistRowSeparator修飾子で、セパレータを非表示にするように設定できるようになったので、それらを削除してみてください。

今、私たちの方向ははるかに散らかっていないように感じます。

私が作っている別のアプリを見てみましょう...

...これは、漫画作家がすべてのスーパーヒーローと悪役を追跡するのに役立ちます。

このアプリは、スワイプアクションを使用して、迅速かつ便利に文字を固定および削除しますが、追加のコントロールでUIを乱雑にしません。

今年の新機能であるSwiftUIでは、新しいswipsActions修飾子を使用して、完全にカスタムのスワイプアクションを定義できます。

SwiftUIの他の種類のメニューと同様にスワイプアクションを設定し、ボタンを使用してアクションを定義します。

また、ピンアクションを黄色にするために使用している新しい色合い修飾子を追加して、色をカスタマイズすることもできます。

デフォルトでは、SwiftUIは行の後端にスワイプアクションを表示します。

しかし、修飾子のエッジパラメータを使用して、それらを先頭側に切り替えることができます。

異なるエッジ構成で複数の修飾子を追加することで、先頭と末尾の両方のスワイプアクションをサポートすることもできます。

そして最後に、sワイプアクション修飾子は、それらをサポートするすべてのプラットフォームで利用でき、マルチプラットフォームアプリ内でコードを簡単に共有できます。

他のプラットフォームといえば、私のアプリのmacOSバージョンをチェックしてみましょう。

これは、Macで利用可能な余分なスペースを利用するマルチカラムインターフェースを示しています。

すべてのデータをサイドバーに詰め込む代わりに、すべてのキャラクターを一覧表示する概要タブがあります。

これにより、ピン留めされた文字をサイドバーに保存できます。

しかし、このリストは少し明白に感じます。

それを少し盛り上げてみよう。 

これが私の既存のコードです。

現在、ウィンドウ内にリストをスムーズに合わせるために、挿入リストスタイルを使用しています。

そして、今年すべてのビュースタイルで利用可能な新しい列挙型のような構文を使用して、このスタイルをコードで美しく表現することができます。

今年も新しく、インセットリストスタイルは新しいトリックを獲得しています。

alternatesRowBackgroundsフラグでスタイルを変更するだけで、行の背景を交互にできるようになりました。

私たちのリストは今、各行が他の行と明確に区別され、はるかに良く見えます。

しかし、macOSアプリの場合、ウィンドウ内のすべてのスペースを最大限に活用していないように感じます。

次のセクションでは、リストを超えて、アプリをさらに理解しましょう。

このすべてのスペースをよりよく活用するために、リストを豊富な複数列のテーブルにアップグレードしましょう!

4つの列で、私は今1つの価格で4つのリストを取得します!

しかし、最良の部分は、このような適度に複雑なテーブルは、単一のスライドに収まるほど少ないコードで宣言できることです。

なぜなら、テーブルはSwiftUI全体で慣れているのと同じ種類の宣言型構造を使用しているからです。

リストと同様に、単一のコンテンツコレクションからテーブルを作成できます。

しかし、リストとは異なり、テーブルは各ビジュアル列内のコンテンツを定義するTableColumnsで構成されています。

これらの各列は視覚的にラベル付けされ、コレクションのデータを使用して、テキストを表示するなどの一般的なケースのためのいくつかの速記的な利便性で視覚的なコンテンツを定義します。

しかし、テーブルもインタラクティブで、通常のリストと同様に、単一の行と複数の行の両方の行選択をサポートします。

テーブルは、列のソート可能な値へのキーパスの助けを借りてソートもサポートしています。

現在、テーブルは、複数の異なるビジュアルスタイルや、各列の外観の微調整など、他のいくつかの機能をサポートしています。

しかし、テーブルやリストに提供するデータについてもっと話しましょう。

今年は、SwiftUIのCoreDataフェッチリクエストのサポートにいくつかの新しい機能強化があります。

FetchRequestsは、ソート記述子へのバインディングを提供し、テーブルに渡すことができ、選択列とソート可能な列を備えた完全なコアデータ駆動型テーブルをわずか数行のコードで記述できます。

SwiftUIは現在、セクション化されたフェッチ要求も提供しており、単一の要求から駆動される右側のような複雑なマルチセクションリストを可能にします。

この例では、ピン留めされているかどうかに基づいて、データをセクションに分割します。

複数のSortDescriptorsを使用してデータを配置し、最初にピン留めされたセクションとピン留めされていないセクションに分割し、次に最近変更された文字を最後に並べ替えます。

次に、変更をアニメーション化することを指定します。

そして最後に、リクエストの結果に基づいて、リストのセクションと行を動的に構築します。

すべて一緒に、この単一のリクエストは、右側のアニメーションリストを駆動することができます。

macOS用のアプリの構築、テーブルの操作、SwiftUIとのコアデータの統合の詳細については、これらの他の講演を必ずチェックしてください。

「SwiftUI on the Mac」の2部構成のシリーズでは、Mac用に最適化されたアプリの構築を段階的に説明します。

そして、「SwiftとSwiftUIにコアデータの並行性をブリングする」は、新しいコアデータフェッチ要求APIをより詳細にカバーします。

今、一歩下がって、ユーザーがこのすべてのデータの中で必要なものを見つけるのをどのように支援できるかを考える時が来ました。

もちろん、私は検索について話しています。

検索は、すべてのプラットフォームの重要な部分です。

これは、ユーザーが必要なときに必要なものを正確に見つけるのに役立ちます。

Apple TVのような大型デバイスでも、Apple Watchのような最小のデバイスでも見つかります。

したがって、検索はマルチプラットフォームの問題であるため、これらすべてのデバイスに拡張できるマルチプラットフォームソリューションが必要です。

幸いなことに、アプリに検索を追加するのは簡単ではありません。NavigationViewで行ったように、検索可能な修飾子を追加するだけです。

この1つの修飾子を使用すると、SwiftUIはアプリの適切な場所に検索フィールドを自動的に追加し、オプションでプラットフォームとコンテキストに適した方法で提案を表示します。

修飾子は検索テキストにバインドされ、現在の値に基づいてデータをフィルタリングできます。

さて、SwiftUIでの検索について言いたいことはたくさんありますが、幸いなことに、複数のプラットフォームでの検索機能について考える方法を説明するセッションがあります。

詳細については、「SwiftUIでのクラフト検索体験」をご覧ください。

これまでのところ、リストとグリッドを使用してアプリのデータをロード、表示、整理、検索する方法を探りました。

それでは、アプリを超えてそのデータを共有する方法について話しましょう。

データを共有する最も簡単な方法の1つは、アプリから引きずり出すことです。

私のヒーローズ&ヴィランアプリでは、既存のonDrag修飾子を使用してドラッグできるように詳細画面のキャラクターアイコンを設定しました。

今年新しく、ドラッグ可能なビューにカスタムプレビューを追加できるようになりました。

このプレビューは、ドラッグ中にビューの代わりに表示されます。

ドラッグアンドドロップはアイテムプロバイダーによって駆動され、異なるプロセス間でデータをコピーして共有することができます。

今年、SwiftUIは、新しいimportsItemProviders修飾子を使用して、外部サービスからのアイテムプロバイダーのインポートをサポートするようにアプリを設定するなど、アイテムプロバイダーを使用して他のアプリやサービスと統合するいくつかの方法を提供しています。

この例では、画像をインポートし、ストーリーキャラクターに添付ファイルとして追加できるようにビューを設定しました。

この機能を新しいmacOS機能であるContinuity Cameraとペアリングできます。

アプリのメインメニューに「デバイスからインポート」コマンドを追加することで、iPhoneまたはiPadを使用して写真を撮るだけでMacアプリにインポートできるようになりました。

やってみよう！

ビュービルダーのスーパーヒーローのシンボルは、彼女の信頼できるハンマーです。

彼女のプロフィールにその写真を添付するのは素晴らしいことです。

幸いなことに、私はたまたまここにそれを持っています!

アプリ内から、ファイルメニューの「デバイスからインポート」コマンドにアクセスできます。

その後、iPhoneを使って写真を撮ることを選択できます...

....カメラアプリが自動的に開くので、すぐに写真を撮ることができます。

そして、新しい写真は、以前に示したimportsItemProviders修飾子を使用して、私のアプリにインポートされ、追加されます。

SwiftUIは、アプリからデータをエクスポートすることもサポートしています。

データをエクスポートすると、アプリ内から直接ショートカットをトリガーできるなど、他のサービスを利用できます。

SwiftUIでは、新しいexportsItemProviders修飾子を使用してデータをエクスポートできます。

これにより、アプリのデータをシステムの残りの部分に公開します。たとえば、macOSのサービスやショートカットで使用できるようになります。

アプリを使用している人にとって、これがどのように表示されるかを見てみましょう。

ピン留めされた文字の1つを選択すると、アプリのサービスメニューにクイックアクションが表示されるようになりました。

これは、最新の写真にタイトルバナーを追加するための便利なショートカットで、最新のスーパーヒーローのアイデアを友達と共有するために使用できます。

私はたまたま愛らしい犬でもある私のスタイライザーのスーパーヒーローに使用するこの素晴らしい写真を見つけました。

私のカスタムショートカットは、この楽しいバナーを一番上に追加し、ヒーローの名前をオーバーレイしました。

私のショートカットでは、写真を共有することもできます。

彼はクールなグラフィックについて1つか2つ知っているので、テイラーのフィードバックをもらいたいです。

テイラーを受信者として追加して、簡単なメッセージを入力して送信できます。

テイラー、どう思う？

テイラー・ケリー:ありがとう、マット。完璧に見えます。

そして、それは間違いなくあなたの新しい連絡先の写真になるでしょう。

この愛らしい画像は、次のセクション、Advanced Graphicsへの素晴らしいセグエです。

シンボルの更新、素材、活気から、強力な新しいキャンバスビューまで、今年はエキサイティングな機能強化がたくさんあります。

まずはシンボルです。

SFシンボルは、アプリ全体に美しい図像を追加する素晴らしい簡単な方法です。

今年は新しいものがたくさんあるだけでなく、アプリでの使用をさらに簡単で表現力豊かにするために、いくつかの新機能が付属しています。

シンボルのスタイルをさらに制御できる2つの新しいレンダリングモードがあります。

Hierarchicalは、モノクロのように、現在のフォアグラウンドスタイルを使用してシンボルに色を付けますが、シンボルの重要な要素を本当に強調するために、自動的に複数のレベルの不透明度を追加します。

また、パレットを使用すると、カスタム塗りつぶしでシンボルの個々のレイヤーをさらに細かく制御できます。

これらの新しいモードの詳細とデザインガイダンスについては、「SFシンボルの新機能」をご覧ください。

これらと完璧に組み合わせることは、SwiftUIで利用可能な一連の色のアップデートです。

これらの色は、ライトモードとダークモード、ぼかし上の特定の外観、さらには表示される特定のプラットフォームなど、表示されるすべての異なる構成に最適化されています。

異なる色に加えて、シンボルにはさまざまな形があります。

多くのシンボルには、塗りつぶし、丸で囲まれたなどとして表示する修飾子があります。

以前は、これらのバリアントをハードコードする必要がありました。

しかし、それ以上に、どのバリアントがどのコンテキストで使用するのが正しいかを知らなければなりませんでした。

iOSヒューマンインターフェイスガイドラインでは、タブバーで塗りつぶされたバリアントが優先される方法を説明しているため、その.fill修飾子を名前に具体的に含める必要がありました。

今年は、それを心配する必要はありません。

SwiftUIは、使用するコンテキストに基づいて、適切なバリアントを自動的に選択します。

あなたがしなければならないのは、使用したいベースシンボルを提供することだけです。

また、必要な正確な設定を過度に指定しないことで、より再利用可能なコードも取得できます。

たとえば、macOSでこの同じコードを実行すると、そのプラットフォームの正しいバリアントを取得します:アウトライン。

独自のカスタムビューでこの自動サポートを利用する方法と、より多くのシンボルの強化を学ぶには、「SwiftUIのSFシンボル」をチェックしてください。

今ではSFシンボルがたくさんあるので、それらすべてをブラウズするためのクールなビジュアライザーを作りたいと思いました。

これは、SwiftUIの新しいキャンバスビューに最適です。

Canvasは、UIKitやAppKitのdrawRectに似た即時モードの描画をサポートしています。

個々の追跡や無効化を必要としない多くのグラフィカルな要素を作成する場合、これは素晴らしいツールです。

ここには、OSに付属するすべてのSFシンボルを表示するキャンバスがあります。

そして、それらのすべての3166のために、それはそれらのそれぞれを自分のフレームに引き寄せます。

キャンバスはすべてのプラットフォームで動作します。

また、キャンバスは他のビューと同様に、ジェスチャー、アクセシビリティ情報を添付し、ダークモードへの適応など、状態や環境に基づいて更新することもできます。

ここでは、ズームインするフォーカルポイントを設定できるジェスチャーを追加しました。

そして、それに基づいて各シンボルのフレームと不透明度を更新します。

これで、クリックしてドラッグすることができ、カーソルが画面を移動するにつれて、すべてのシンボルがスムーズに更新されます。

また、新しいアクセシビリティ子供修飾子を利用することで、これが完全にアクセス可能であることを確認することもできます。

とてもクールなのは、SwiftUIで使用していたのと同じビューを再利用して、アクセシビリティ機能を通じてどのように伝わるかを洗練することです。

この場合、誰かがリスト内の要素を参照し、ナビゲート中に各要素を話すように、シンボルを列挙できるようになりました。

この修飾子はキャンバスだけに限定されるものではなく、アクセシビリティ体験を本当に磨くためにあらゆる目的で使用できます。

キャンバスに追加できる最後の1つは、新しいTimelineViewを使用して、時間の経過とともに更新することです。

tvOSのための改良は、フォーカルポイントが画面上をアニメーションで動き回り、スクリーンセーバーのように振る舞うことです。

TimelineViewはスケジュール（この場合はアニメーションスケジュール）で作成され、レンダリングされている現在の時間を提供します。

そして、その時間を使って変換のフォーカルポイントを更新し、美しいシンボルスクリーンセーバーを作成できます。

このタイムラインビューはもっと多くのことができます。

Apple Watchの本当にクールな機能は、常時表示です。

以前は、アプリがAlways On状態に入ると、時間がオーバーレイされてぼやけていました。

また、watchOS 8では、アプリはデフォルトで暗くなり、必要なツールを提供するSwiftUIでどのように表示されるかをより詳細に制御できます。そのうちの1つはTimelineViewです。

時計がAlways On状態になると、TimelineViewは将来の日付でビューの表示をプリロードできます。

そして、私たちが将来に進むにつれて、これらのビューは、バックグラウンドからアプリを取ることなく、自動的に画面に表示されます。

これの重要な部分はTimelineScheduleです。

この例では、簡単なeveryMinuteスケジュールを使用しているので、TimelineViewは分ごとに表示をプリロードし、ブラウザに次のシンボルを表示します。

明示的な日付のコレクションなど、アプリのニーズに合わせて、他のいくつかの種類のスケジュールもあります。これは、特定の時間にイベントがあるときに最適です。

さて、このモードのもう1つの重要な側面は、他の人に見られる可能性があるため、ユーザーに敏感な情報を隠すことです。

私は本当にお気に入りのシンボルを非公開にしたいです。

また、privacySensitive修飾子を追加するだけで、時計がAlways On状態になると自動的に編集されます。

常時表示ディスプレイなどの詳細については、「watchOS 8の新機能」をご覧ください。

そして、このプライバシーに敏感な修飾子は、ウィジェットでも機能します。

ロック画面に追加されたウィジェットは、これを使用して、デバイスがまだロックされている間に機密情報を非表示にし、デバイスのロックが解除されると明らかにします。

「素晴らしいウィジェットの原理」では、この方法と、アプリ用の素晴らしいウィジェットを構築する他の方法について詳しく説明します。

素材は、コンテンツを強調する美しい視覚効果を作成するために、Appleのすべてのプラットフォームとアプリで使用され、SwiftUIで直接作成できるようになりました!

シンボルブラウザに色と素材を追加する実験をしていて、シンボルの数を表示するために素材に裏打ちされたオーバーレイを追加しています。

素材の追加は、背景を追加するのと同じくらい簡単です。

私はultraThinMaterialを使用しており、それを埋めるために任意のカスタム形状を与えることができます。

これらの素材には、プライマリ、セカンダリ、三次、さらには第四級フォアグラウンドスタイルを使用すると、その上にコンテンツの期待される鮮やかなブレンドが自動的に付属しています。

そして、絵文字は自動的にそこから除外されるので、本来あるべき姿に見えます。

Macでは、サイドバーやポップオーバーなどのシステムコンテキストは自動的に素材の背景をぼかし、その中のコンテンツに期待される鮮やかな外観を持つようになりました。

これらの新しい素材は、スクロール可能なビューの上にコンテンツを配置し、コンテンツ位置を期待どおりに開始および終了させることができる新しいsafeAreaInset修飾子と組み合わせてうまく機能します。

「リッチグラフィック」セッションでは、キャンバス、素材などについてさらに詳しく説明します。

そして、それを締めくくるために、これらの美しいカスタムビューを定義する新しい方法を補完することは、XcodeのSwiftUIプレビューのいくつかの機能強化です。

まず、プレビューでiOSデバイスの向きを指定したり、異なる向きでプレビューを混ぜ合わせたりできる新しいプレビュー方向修飾子です。

そして2つ目は、プレビューでアプリのアクセシビリティを編集して表示する方法の大幅な改善です。

プロパティエディタには、アクセシビリティ修飾子のキュレーションされたリストがあり、ビューのアクセシビリティ動作を磨くことがさらに簡単になりました。

また、新しいアクセシビリティプレビュータブでプレビューを表示するまったく新しい方法があります。

アクセシビリティ要素とそのプロパティのライブテキスト表現が表示されます。

これは、アクセシビリティ機能を強化するのと同じ情報ですが、より身近な形式で提示されています。

これの詳細と、アプリに素晴らしいアクセシビリティ体験を作成する方法については、「SwiftUIアクセシビリティ」セッションをチェックしてください!

次に、テキスト、テキスト関連のコントロール、キーボードナビゲーションのさまざまな機能強化があります。

テキストはすべてのアプリにとって非常に基本的なものです。

これは、アプリが人々とコミュニケーションをとる主な方法の1つです。多くの場合、最初に書くビューです。

そして今年は、スタイリングからローカリゼーション、インタラクション、フォーマットまで、多くの新しいエキサイティングな機能を獲得しています。

まず、Markdownのサポートです。

テキストには、直接インラインでMarkdownフォーマットを含めることができるようになりました。

これは、強い強調、対話できるリンク、さらにはコードスタイルのプレゼンテーションを追加するために使用できます。

そして、これはすべてFoundationの新しい強力なSwiftベースのAttributedStringの上に構築されています。

Markdownのサポートに加えて、リッチでタイプセーフな属性のスイート全体と、独自の属性を定義し、Markdown構文内でそれらを使用する機能をもたらします。

これと驚くべき新しい自動文法契約の詳細については、「Foundationの新機能」をご覧ください。

重要なのは、テキストはまた、世界中の人々があなたのアプリを使用できるように、そのコンテンツをローカライズすることです。

そして、これは新しいMarkdownサポートにも当てはまり、言語に敏感な属性を適切にローカライズすることができます。

ローカリゼーションのもう1つの大きな改善は、Xcode 13から来ています。

現在、Swiftコンパイラを使用して、LocalizedStringKeyと新しいlocalizedStringと attributedString初期化子のすべての使用から文字列とローカリゼーションカタログを生成します。

これやその他のローカリゼーションのヒントやコツの詳細については、「SwiftUIアプリをローカライズする」をチェックしてください。

さて、テキストを表示するこれらの新しい方法に加えて、テキストをさらにダイナミックにする新しい方法があります。

1つ目は、重要なアクセシビリティ機能であるダイナミックタイプです。

SwiftUIは創業以来ダイナミックタイプをサポートしており、今年はUIがサポートするタイプサイズの範囲を制限して、大きすぎたり小さすぎたりするのを防ぐための新しいAPIがあります。

これは、ヘッダーがデフォルトの大きなサイズでどのように見えるかを示しています。

私は個人的にダイナミックタイプを使用して、コンテンツに余分な情報密度を取得します。これは、少なくとも大きなサイズに制限されているため、ヘッダーが小さなタイプサイズで同じサイズにとどまった方法を示しています。

スペクトルの反対側では、アクセシビリティサイズを使用すると、ヘッダーが大きくなりますが、余分な特大サイズまでしか成長しません。

macOSはダイナミックタイプをサポートしていませんが、別の重要なテキストインタラクションをサポートしています。選択可能なテキストです。

これにより、人々はあなたのアプリから編集不可能なテキストに対してアクションを実行することができ、textSelection修飾子を使用して有効にできるようになりました。

その修飾子はどのビューにも適用でき、その中のすべてのテキストに適用されます。この例では、ヘッダー内のテキストに適用されます。

また、この修飾子をiOSとiPadOSに導入し、長押しでテキストをコピーまたは共有することができます。

最後に、Foundationの新しいフォーマットスタイルのAPIは、テキストの書式設定をはるかに簡単にしますが、正確なプレゼンテーションを可能にします。

ここには、デフォルトの書式を適用する日付があります。

そして、これはアクティビティリストで使用されている時間のみを表示するバリアントです。

そして最後に、表示する正確なコンポーネントを指定できる拡張形式。

私たちの活動リストはまた、適切にローカライズされたプレゼンテーションに人々の配列をフォーマットすることを特徴としました。

これをさっと見てみましょう。

人の値をPersonNameComponentsの配列にマッピングし、リスト形式のスタイルを使用してフォーマットしています。

そして、リストの各メンバーについて、短いスタイルでPersonNameComponent形式を使用し、ファーストネームのみを表示します。

そして最後に、「と」接続詞で結合します。

すべて一緒に、任意の人数を適切に処理するフォーマットのパフォーマンスとタイプセーフな表現を作成します。

TextFieldはまた、これらの新しいフォーマットスタイルのサポートを得ており、基礎となる値にタイプセーフバインディングで編集可能なフォーマットされたテキストを追加することができます。

新しい出席者フィールドはPersonNameComponents値にバインドされており、標準の名前形式を使用してフォーマットされています。

これは、入力を解析し、結果の人名を生成します。

「ファンデーションの新機能」では、これらの新しいフォーマットスタイルのパワーについても詳しく説明しています。

TextFieldは、フィールドが期待しているコンテンツの種類をユーザーに知らせるために、ラベルとは別に明示的なプロンプトの追加もサポートするようになりました。

また、macOSのフォームにTextFieldを追加すると、他のコントロールと同様にラベルを揃え、プロンプトをプレースホルダコンテンツとして使用します。

さて、テキストフィールドの全体的なポイントはテキストを追加することであり、キーボードはそれを行うためのツールです。

iPhoneのソフトウェアキーボードから、ソフトウェアキーボードとハードウェアキーボードの両方をサポートするiPad、そしてもちろん、常にハードウェアキーボードを備えたmacOSまで。

今年は、キーボードの使用体験をさらに良くするためのいくつかの機能強化があります。

新しいonSubmit修飾子を使用すると、Returnキーを押すなど、フィールドのテキストがユーザーによって送信されたときの補足アクションを簡単に追加できます。

この修飾子は、コントロールのフォーム全体にも適用できるという点で、いくつかの余分な柔軟性を提供します。

また、フィールドの送信時にどのようなアクションが発生するかをユーザーにヒントを与えるために、新しいsubmitLabel修飾子があります。

ソフトウェアキーボードでは、これはReturnキーのラベルとして使用されます。

そして最後に、新しいキーボードツールバーの配置を使用して、キーボードにアクセサリビューを追加できるようにしました。

これらのビューは、iOSとiPadOSのソフトウェアキーボードの上のツールバー、またはmacOSのTouch Barに表示されます。

これは、アプリの編集体験を中断しないように、ユーザーがキーボードの上のアクションにすばやくアクセスできるようにする素晴らしい方法です。

キーボードはまた、ナビゲーションとフォーカスの別の重要な役割を果たしており、この機能はすべてのプラットフォームに存在します。watchOSに焦点を当ててデジタルクラウン入力を指示することから、Siri Remoteを使用してtvOS上のコンテンツをナビゲートすることまで。

ほとんどの場合、SwiftUIは、どのビューがフォーカス可能で、それらの間でどのように移動するかを処理します。

しかし、時にはあなたのアプリでさらにスムーズな経験を作成するためにあなたが作ることができる余分な改良があります。

それを助けるために、SwiftUIにはFocusStateと呼ばれる新しい強力なツールがあります。

これは、フォーカスの状態を反映し、それに対する正確な制御を提供するプロパティラッパーです。

簡単に言えば、ブール値を反映できます。

これは、フォーカスされた修飾子を使用してフォーカス可能なビューに結びつけることができます。

そのビューがフォーカスされている場合、値はtrueになり、そうでない場合はfalseになります。

この値は、フォーカスを制御するために書くこともできます。

例えば、誰かがボタンを押したと反応して。

この例はアクセラレータとして機能し、ユーザーは関連するアクションを実行した後すぐに入力を開始できます。

このブールバージョンは、任意のハッシュ可能なタイプを表す完全な形式の利便性です。

このコードは機能的に前のスライドと同等ですが、ある程度の柔軟性が向上しています。

それを歩きましょう。

まず、私が知りたいかもしれないフィールドの簡単な列挙を定義しました。

FocusStateプロパティは、そのタイプを使用して現在の状態を反映します。

潜在的に誰も集中していないことを示すのはオプションです。

私たちのフォーカス修飾子はまだ同じフォーカス状態にバインドされていますが、addAttendeeに等しい場合に限ります。

そして最後に、その分野に焦点を当てたいときは、フォーカス状態の値をaddAttendeeに設定します。

この新しい柔軟性により、以前からツールバーボタンを構築したり、各フィールド間でフォーカスを移動したり、フォーカスが最初または最後に達したかどうかを反映したりするなど、追加機能を追加できます。

フォーカス状態はまた、iOSアプリがその値をクリアすることによってソフトウェアキーボードを却下するための素晴らしい方法を提供します。

アプリのフォーカスエクスペリエンスを洗練させる他の方法についてもっと知りたい場合は、今年のセッション「SwiftUIのダイレクトとフォーカスの反映」をチェックしてください。

最後に、ボタンが重要なので、ボタンに焦点を当てます。

私たちは皆、典型的なボタンがどのように見えるかを知っています。それはプラットフォームごとに異なり、人々があなたのアプリと対話できるようにする最も簡単な方法の1つです。

そして、特にSwiftUIでは、ボタンは多くのことに使われています。

マットは先ほど、スワイプアクションがボタンからどのように構成されているかについて話し合った。

そして今年は、ボタン付きの新しいものがたくさんあります。

まず、SwiftUIにはiOSに標準のボーダーボタンがあります。

この追加ボタンで行っているように、ボタンスタイルの修飾子を追加するだけで、ボタンの境界線を作ることができます。

他のスタイル修飾子と同様に、これはコントロールのグループに追加でき、それらすべてに適用されます。

特定のボタンの特定の外観が必要な場合は、着色をサポートします。

しかし、このUIでは、アクセントカラーを使用するデフォルトの外観が好きです。

より多くのカスタマイズも組み込まれています。

まず、コントロールサイズとプロミネンスです。

これらを使用して、タグを表すボタンをカスタマイズしています。

彼らは新しい標準的な小さなコントロールサイズを使用しており、本当に目立つように目立つ色合いを持っています。

これらの同じ修飾子を使用して、別の一般的な種類のボタンを作成できます。これらの大きなサイズのものは、SwiftUIに組み込まれています。

大きなコントロールサイズを指定すると、これらの美しく丸みを帯びた長方形のボタンが自動的に手に入る。

そして、彼らにヒエラルキーの感覚を与えるために、私は最も重要なものを目立たせるように変更し、コントラストの高いアクセントカラーで満たしました。

そして、セカンダリボタンはまだ着色できますが、コントラストは低くなります。

これらのボタンには、iPadでも素晴らしいものにするための修飾子がほとんどない。

テキストラベルは最大幅なので、全体的なボタンは柔軟ですが、コミカルに大きくなりません。

また、プライマリボタンにはデフォルトのアクションキーボードショートカットがあるので、キーボードでアプリを使用する場合は、Returnキーをすばやく押して、このボタンをジャーに追加できます。

現在、このAPIの多くはmacOSにすでに存在しており、複数のプラットフォーム用のアプリの構築がさらに簡単になりました。

1つの新しい追加は、目立つ色合いのサポートを増やして、これらの明るいボタンをアプリに上品に追加できるようにすることです。

これらの追加ボタンのような非目立つボタンは、クロムがmacOSでのインタラクティブ性を示すものであるため、色合いを表示しないことに注意してください。

卓越性について学んだので、私はそれをすべての追加ボタンに適用したくなるかもしれませんが、画面上に非常に多くの目立つボタンがあると圧倒的で混乱する可能性があります。

単一の主要な行動のためにそれを予約するのが最善です。

低いプロミネンスの色合いは、iOSに色のスプラッシュを追加するための素晴らしい選択肢です。

さて、これらの新しいボタンスタイルについての私のお気に入りは、自動的に予想されるプレス状態と無効状態、ダークモードのサポート、そしてもちろん完全にアクセス可能で、ダイナミックタイプと互換性があることです。

そして、それらはアプリ間の一貫性を与えるのに役立ちます。

そして、ボタンの新しいAPIはここで止まりません。

SwiftUIはまた、ボタンを破壊的としてマークするなど、追加のセマンティクスを持つボタンのファーストクラスのサポートを追加し、自動的に期待される赤い色合いを与えます。

これが使用できる新しいコンテキストの1つは、ユーザーがデータに深刻な影響を与えるアクションを確認できる確認ダイアログです。

iOSでは、これはアクションシートとして、iPadではポップオーバーとして、macOSではアラートとして表示されます。

SwiftUIは、各プラットフォームのデザイン感度に従って自動的に処理します。

次に、「大文字のB」ボタンではないボタンについて話しましょう。

現在、アプリの追加ボタンは、ユーザーのデフォルトのjarに追加するだけです。

しかし、熱心なコレクターのために、私は特定の瓶への追加をサポートしたいです。

これはメニューボタンの完璧なユースケースです。

同じ「追加」ラベルを使用しますが、ボタンをクリックすると、すべての可能な瓶のメニューが表示されます。

しかし、これらのメニューボタンは視覚的に多くの卓越性を持っています。

今年追加された新しいメニュー指標修飾子を使用して、指標を非表示にすることができます。

そして、インジケーターがなくても、このボタンはクリック時にメニューを表示します。

しかし、これらのボタンについては、理想的には両方の長所を得ることができます。簡単なワンクリックでデフォルトのjarに追加し、他の人のメニューを表示する柔軟性です。

今年の新機能は、この種のケースを支援するためにメニューの主要なアクションをカスタマイズする機能です。

デフォルトでは、プライマリアクションを持つメニューは、macOSで2つのセグメントの外観を持っています。

ボタンのメイン部分は、メニューを表示するインジケーターのプライマリアクションをトリガーします。

そして、インジケーターが隠されているとき、それは再び視覚的に私が始めたボタンのように見えますが、行動の区別があります。

クリックするとプライマリアクションがトリガーされ、長押しするとメニューが表示されます。

そして素晴らしいのは、この同じことがiOSでも機能することです!

今、これらのメニューは多くの柔軟性を与え、あなたのアプリがそれらをどのように使用する必要があるかを本当にケータリングします。

ボタンスタイルを獲得するコントロールのもう1つの新しい例は、トグルです。

これにより、タップすると視覚的にオン/オフし、他のトグルと同じように使用できるボタンが作成されます。

そして、これらの新しいコントロールスタイルに参加することは、関連するコントロールをグループ化するコンテナです。適切にControlGroupと呼ばれます。

iOSでは、グループ内のコントロールはツールバーで少しきつく整理されています。

また、macOSでは、2つのグループ化されたボタンを示す視覚的なアフォーダンスがあります。

そして、このすべてをまとめるために、当然のことながら、これらすべてを一緒に構成することができます。

たとえば、これらの標準のバック/フォワードボタンは、2つのメニューのコントロールグループです。

これらの各メニューには、クリックしたときに実行されるプライマリアクションがあります。

そして、メニューが長押しされると、彼らは内容を提示します。

今、ボタンとこれらの新しいスタイルにいくつかの追加のカスタマイズだけで、アプリでこれらのコントロールを使用する方法について多くの柔軟性が開かれました。

私たちはこのセッションで多くのことを経験しましたが、カバーする時間がなかったことがさらにあります。

あなた自身のSwiftUIアプリでこれらの新機能を活用し、さらに多くの場所でSwiftUIを採用できることを嬉しく思います。

ありがとう、そして2021年の素晴らしい残りをお過ごしください!

♪