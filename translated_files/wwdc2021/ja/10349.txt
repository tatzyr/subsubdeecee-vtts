10349

♪ ♪

ねえ、私はジェイコブです。

「SwiftUIのSFシンボル」へようこそ。

このセッションでは、いくつかのトピックを見ていきます。

まず、SwiftUIのSFシンボルを使用するための基礎のいくつか。

次に、シンボルのバリアントを使用する方法。

そして最後に、新しいレンダリングモードでの作業。

これらのAPIの可用性に関する1つの注意：このセッションで見られるものはすべて、すべてのAppleプラットフォームで利用でき、今年のリリースで何か新しいものを知るために新しいバッジを探してください。

ファンダメンタルズに入りましょう。

すでにSwiftUIのシンボルを使用している場合は、この部分は簡単なはずです。

まず、シンボルを見せましょう。

最も簡単な方法は、画像で「ハート」のようなシステムが提供するシンボルの1つを使用することです。

ラベルビューは、シンボルを表示するもう1つの主な方法です。

ラベルは、タイトルとアイコンの組み合わせであり、ほとんどの場合、シンボルです。

ラベルの素晴らしい点は、このペアリングの一般的な説明であり、その動作が表示されているコンテキストに適応させることです。

たとえば、多くのコンポーネントでは、ラベルにシンボルとタイトルが表示されます。

場合によっては、異なるレイアウトで表示されるか、場合によっては、コンポーネントにシンボルまたはタイトルのみが表示されます。

SwiftUIは、組み込みビューでこれらの変更を自動的に行います。また、独自のビューでラベルスタイルを使用して行うこともできます。

使用する初期化子を変更するだけで、画像とラベルの両方でカスタムシンボルを表示できます。

これはこれらの構成のそれぞれがどのように見えるかですが、重要なのは視覚的表現だけではありません。

これは、これらの各ビューがデフォルトでVoiceOverに表示される方法です。

タイトルはコンテンツのテキスト説明を与えるので、ラベルを使用すると自動的に優れたアクセシビリティサポートが得られることがわかります。

画像のみのケースを詳しく見てみましょう。

可能であれば、SwiftUIはシステムシンボルの内容に基づいてラベルを提供します。

あなたが「愛」ボタンのためにハートを使用している場合のように、これはあなたが必要とするすべてかもしれません。

ただし、一部のシンボルには標準的な意味がなく、その場合、デフォルトのアクセシビリティの説明はそれほど役に立ちません。

また、アプリがシンボルをどのように使用しているかについて、より具体的な情報を追加できるかもしれません。

アクセシビリティラベルを使用して、いつでもその情報を提供できます。

私たちのカスタムシンボルは、理想的なアクセシビリティの説明を取得していない別のケースです。

それを改善する素晴らしい方法は、Localizable.stringsファイルで画像の名前のローカリゼーションを提供することです。

SwiftUIは、使用されている場所であればどこでも、この画像のアクセシビリティラベルにこのローカライズ可能な文字列を自動的に使用します。

記号を使用する最後の方法の1つは、テキストの一部としてです。

文字列補間を使用して、テキストの実行内にシンボルを埋め込むことができます。

これは、このシェブロンのように、テキストと一緒にシンボルをリフローしたいときに使用する良いテクニックです。

さて、心でラベルに戻り、それらをカスタマイズするためにシンボルに適用できる修飾子のいくつかを見てみましょう。

フォアグラウンドスタイル修飾子でシンボルの色を変更することから始めましょう。

テキストと記号は、ライトモードまたはダークモードでデフォルトで黒または白になります。

foregroundStyleを赤などの特定の色に設定するか、現在の色合いやセカンダリスタイルなどのよりセマンティックな値に設定できます。

後で再びforegroundStyleに戻り、それを使ってできるより高度な効果を確認します。

フォント修飾子を使用して、テキストサイズとシンボルのサイズの両方を変更できます。

本文やキャプションなどのテキストスタイルを使用する場合、テキストとシンボルは動的タイプで拡大縮小され、固定サイズを選択した場合、それらは一定のままです。

シンボルのサイズを変更できる他の軸は、imageScale修飾子を使用して、そのスケールです。

これにより、使用されるフォントサイズは変更されませんが、テキストに対するシンボルの大きさは変更されます。

次に、バリアントを見てみましょう。 

iOSのタブバーには、塗りつぶされたシンボルのバリエーションを使用する必要があることに気づいたかもしれません。

過去には、これはシンボルアプリから正しいシンボルを慎重に選択し、シンボルに「スパークル」のような塗りつぶしのバリアントがないタイミングを知ることで、自分でやらなければならなかったことでした。

今年の新機能では、タブバーやその他のビューは、含まれているシンボルに適用するために、塗りつぶしなどの特定のバリアントを自動的に選択できるようになりました。

これは、シンボルの基本バージョンを使用するだけで、余分な作業なしで適切なバリアントを取得できることを意味します。

また、必要な正確な設定を過度に指定しないことで、より再利用可能なコードも取得できます。

たとえば、macOSでこの同じコードを実行すると、そのプラットフォームの正しいバリアントを取得します:アウトライン。

このバリアントサポートは、独自のコンポーネントでも使用できます。

ここでは、デフォルトのアウトラインバリアントで示されているラベルの簡単なリストがあります。

ここで塗りつぶされたバリアントを使用するには、新しい symbolVariant 修飾子を使用できます。

この修飾子は、環境内で指定されたバリアントを設定するので、ここで行っているように、ビュー階層全体で使用するのは素晴らしいことです。

フィル、スラッシュ、および形状カプセル化のセットなど、利用可能なバリアントの大規模なセットがあります。

そして、これらは、.circle.fillのように、シンボル自体の名前で結合されるのと同じ方法で、互いに組み合わせることができます。

この同じバリアントセットは、カスタムシンボルでも機能します。

あなたがしなければならないのは、システムシンボルで使用されるのと同じ命名パターンに従うことだけです。

次に、レンダリングモードを見てみましょう。

シンボルは4つの異なるレンダリングモードをサポートし、シンボルの色付け方法をカスタマイズできます。

各レンダリングモードの例をいくつか紹介します。

私たちはそれらを一つずつ確認します。

また、さまざまなレンダリングモードのデザインについて詳しく知りたい場合は、「SFシンボルの新機能」を強くお勧めします。

さて、今回はmacOSで、カードのリストに戻りましょう。

現在、私たちのシンボルは、モノクロのデフォルトのレンダリングモードを示しています。

これは、シンボルのセットに一貫した色を表示するのによく機能します。

ただし、この場合、各カードに関連付けられている色を使用してこれらのシンボルを表示したいと思います。

マルチカラーレンダリングモードは、各シンボルが表すものの色を表示するのに最適な方法です。

そして、マルチカラーにシンボルレンダリングモード修飾子を追加することで、それに変更することができます。

シンボルに多色表現がない場合は、モノクロレンダリングモードに戻ります。

SFシンボルアプリを使用して、マルチカラー定義を持つシンボルを検索し、カスタムシンボルにマルチカラーサポートを追加できます。

詳細については、「SFシンボルアプリの概要」をご覧ください。

このアプリの別の部分には、デッキのさまざまな部分にカードをシャッフルするためのボタンがいくつかあります。

異なるレベルの不透明度を持つこれらのシンボルの重要な部分を強調したいと思います。

どのレンダリングモードがそれをするのか覚えていますか?

そうです！階層的！

階層的に同じ symbolRenderingMode 修飾子を使用できます。

これは、現在のフォアグラウンドスタイルを使用して、モノクロのようにシンボルに単一の色を適用するだけでなく、シンボルの重要な要素を強調するために、複数のレベルの不透明度を追加します。

最後のレンダリングモードが1つあり、私のアプリにはそれが役立つボタンがあります。

私はカードゲームがあまり得意ではないので、間違いを元に戻すためにこのボタンが必要です。

ここでは、この円形の背景を取得するために、.circle.fillバリアントを持つボタンにシンボルを表示しています。

しかし、着色はまさに私が望むものではありません。

カードの色にもっと似合うものが欲しいです。

foregroundStyle修飾子を使用して、シンボルに色を設定できることを忘れないでください。

しかし、私たちはさらに進むことができます。

今年は、シンボルを描くために使用する複数の色を設定できます。

これは、シンボルのレイヤーのカラーリングを最大限に制御できるパレットレンダリングモードを使用します。

シンボルの各レベルを制御するために、最大3つのスタイルを指定できます。

このシンボルには一次と三次の内容があるので、第1色と第3の色が使用されます。

このシンボルのアウトラインバージョンのように、プライマリコンテンツとセカンダリコンテンツのみを持つシンボルを使用すると、それらの色のみが使用されます。

ほとんどの個々のシンボルは、これらの両方のように2つのレイヤーしか使用しないため、3つではなく2つのスタイルを指定でき、最後のスタイルはセカンダリ以降のすべてのスタイルに使用されます。

多くの場合、必要なのはこれだけです。

これまで色を使用してきましたが、これはフォアグラウンドスタイルの修飾子であり、どのShapeStyleでも機能します。

セカンダリスタイルを使用して、ぼかしの前で鮮やかな効果を得たり、素材を使用してシンボルの背後にある背景をぼかしたりすることもできます。

フォアグラウンドスタイルと素材についてもっと知りたい場合は、「SwiftUIアプリにリッチなグラフィックを追加する」をチェックしてください。

レンダリングモードのフルセットをもう一度振り返ってみましょう。

使用するレンダリングモードを確認して選択する最良の方法は、SFシンボルアプリとそのインスペクタです。

そして、SwiftUIでこれらの設定を表現するためのこれらのAPIは同じように機能するので、Symbolsアプリとコードの間を行き来するのは簡単です。

また、最小限の構成で最高の動作も得ます。

フォアグラウンドスタイルが1つしかなく、レンダリングモードを指定しない場合は、自動的にモノクロになります。

また、複数のフォアグラウンドスタイルを指定しても、レンダリングモードを指定しないと、自動的にパレットが取得されます。

シンボルアプリには、これらの異なるレンダリングモードで使用できる色の大規模なセットがあります。

そして、その色のフルセットは、今年新しいいくつかの色とスタイルを含むSwiftUIでも利用可能です。

これらの色は、ライトモードとダークモード、ぼかし上の特別なレンダリング、表示されている特定のプラットフォームまで、表示されるすべての異なる構成に最適化されています。

シンボルの作成方法、外観を変更するための修飾子のセット、表示されるシンボルのバリアントを変更する方法、異なるレンダリングモードの選択、フォアグラウンドスタイルを使用してシンボルのカラーリングをカスタマイズする方法を見ました。

SFシンボルを使用すると、アプリに美しいグラフィックを簡単に追加し、好きなだけカスタマイズできます。

アプリをさらに良く見せるために、それらを採用できる場所を確認してください。

見てくれてありがとう、素晴らしいWWDCをお過ごしください。

[明るい音楽]。