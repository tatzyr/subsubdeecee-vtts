10235

こんにちは、私の名前はウィルで、アップルのデザインマネージャーです。

今日は、同僚のハンナと一緒に、DocCを使ってインタラクティブな開発者チュートリアルを書く方法を紹介します。

チュートリアルは、APIを使用して実際のアプリを構築するためのステップバイステップの手順で、迅速なフレームワークやパッケージがどのように機能するかの詳細を開発者に教えるのに最適な方法です。

あなたは私たちがアップルで書いたいくつかのチュートリアルに精通しているかもしれません。

SwiftUIとMac Catalystを紹介するチュートリアルを作成しました。

これらの入門チュートリアルでは、これらのフレームワークの基本を学び、ステップバイステップのコード例に従ってスキルを構築します。

フレームワークの採用者は、チュートリアルで提示された新しいアイデアをどれだけ早く始めることができるかを気に入っていることがわかりました。

これらのチュートリアルを書くために、DocCと呼ばれるドキュメントコンパイラを構築しました。

DocCはマークダウンを活用してプレーンテキストをリッチでインタラクティブなシステムに変換し、今年はDocCをXcodeに導入したので、SwiftパッケージやSwiftフレームワークのチュートリアルを書くこともできます。

DocCは開発者のチュートリアルだけではありません。

DocCは、ソースコメントからプロジェクト内のSwiftフレームワークとパッケージのドキュメントを構築することもできます。つまり、アプリ開発者にとって、依存関係は開発者ドキュメントウィンドウのプラットフォームライブラリと一緒にドキュメントを持つことができます。

また、SwiftフレームワークまたはSwiftパッケージを作成する場合は、ソースで採用者向けのドキュメントを書くことができるため、APIを作成および変更する際に最新の状態に保つのは簡単です。

ドキュメントウィンドウに豊富な書式設定体験を提供しながら、ソースの読みやすさを維持するために、ドキュメントコメントをマークダウンで記述します。

ドキュメントカタログを追加して、記事を書いたり、フレームワークやパッケージ内のすべてのAPIを整理したりすることもできます。

DocCの使用とドキュメントカタログの設定については、こちらに記載されているセッションで詳しく知ることができます。

このセッションでは、チュートリアルを書くことに焦点を当てます。

チュートリアルは非常にインタラクティブな形式のドキュメントであり、オーサリングを容易にするために、ディレクティブを持つようにマークダウンを拡張しました。

ディレクティブは、コンテンツのようなチュートリアルを作成するための構造を提供するため、すでに慣れ親しんでいる可能性のある既存のマークダウン構文でコンテンツを書くことに集中できます。

開発者のチュートリアルは、実際のプロジェクト、理想的にはアプリの構築を中心としています。

チュートリアルアプリは、現実的な方法でフレームワーク内のAPIを使用する必要があります。

たとえば、SwiftUIチュートリアルでは、初心者がSwiftUIを使い始めるために理解する必要があるコア機能を探るランドマークと呼ばれるアプリを構築する方法を紹介します。

Mac Catalystでは、iPadとMacのナビゲーションイディオムの違いを探るレシピアプリを構築する方法を教えます。

そして今、私の同僚と私は、あなたのiPhoneでかわいい小さなデジタルナマケモノを作成、カタログ化、ケアするための新しいフレームワークに取り組んでいます。

私の同僚はすでにいくつかの素晴らしい参考文献や記事を書いていますが、このフレームワークの採用者は、フレームワークのさまざまな側面がどのように相互作用するかをすばやく確認できるように、実際のアプリを構築することを学ぶことから恩恵を受けると思います。

このセッションでは、同僚のハンナと私は、このフレームワークの採用者に、このフレームワークを始めるために必要な基本を教えるためのチュートリアルを作成します。

チュートリアルの主なコンポーネントの概要を説明することから始めます。

次に、アイデアと計画にどのようにアプローチするかを説明します。

そして最後に、チュートリアルのコレクションの作成をデモするハンナに渡します。

わかった。始めましょう。

先に述べたように、チュートリアルは非常にインタラクティブな学習方法です。

また、記事やリファレンスドキュメントと同様に、チュートリアルのテキストはマークダウンで作成されていますが、チュートリアルでは特別な構文を使用してこのマークダウンを構造を提供するディレクティブでラップし、DocCがチュートリアルで紹介されている複雑なレイアウトとインタラクションを構築できます。

これは、このテキストがチュートリアルの単一のステップであることをDocCに伝える基本的な指示です。

有益なテキストに加えて、この例には、DocCがステップを達成するためにどのコードを書くべきかを正確に読者に示すために表示するSwiftファイルへのリンクが含まれています。

そして、DocCディレクティブはネストすることができます。

この場合、コードディレクティブには、読者にステップのより多くのコンテキストを提供する画像ディレクティブが含まれています。

チュートリアルページには、先ほど見たような個々のステップがたくさんあります。

目次は、組織と個々のチュートリアルへのリンクを提供します。

目次の指示を見てみましょう。 指示を見てみましょう。

目次ファイルは、ページのすべての要素を含むTutorialsディレクティブで始まります。

チュートリアルディレクティブの中には、フレームワーク採用者がチュートリアル全体で構築するもののタイトルと簡単な説明を含むイントロディレクティブがあります。

DocCは、目次ページでチュートリアルへのリンクを提供すると、「始める」ボタンやタイミング計算など、導入のいくつかの要素を自動的に生成します。

序文には画像ディレクティブも含まれています。

ドキュメントカタログリソースフォルダに画像を保存できます。

ページの下には、チャプターディレクティブがあります。

チャプターを使用して、チュートリアルを一緒に意味のあるグループに整理します。

チャプターは、フレームワークの採用者にチュートリアルに従う際に明確な進歩感を与え、フレームワークが何であるかについてのコンテキストを提供します。

章の中には、チュートリアルへの個別のリンクがあります。

このページによって設定されたすべてのコンテキストで、フレームワークの採用者は、チュートリアルページに移動する前に、フレームワークが何であるか、それを使用して構築するものをよく理解する必要があります。

目次と同様に、チュートリアルページはページの内容を含む単一のディレクティブで始まります。

この場合、それは単一のチュートリアルディレクティブです。

DocCは、チュートリアルの紹介で目次ページからいくつかの情報を使用し、それが属する章を参照することによって、このチュートリアルの全体的なテーマが何であるかを人々に知らせます。

チュートリアルの紹介には、フレームワークの採用者にフレームワークのどの部分を使用し、それを使用して何を構築するかを伝えるタイトルと説明が含まれています。

建物の道に沿って明確にするために、チュートリアルはセクションに分かれています。

セクションの紹介はチュートリアルの紹介と非常によく似ていますが、次のセクションに進む前にフレームワークの採用者が行う進捗状況に固有のものです。

セクションには、次のステップに進むために正確に何をする必要があるかを採用者に指示するステップが含まれています。

ステップは短く、理解しやすく、従うのが簡単であるべきです。

フレームワークの採用者は、彼らがすぐに学んでいるフレームワークをスピードアップするのを助けるために、一貫した明確なチュートリアルステップに依存しています。

明確な計画から始めると、チュートリアルのコレクション全体でまとまりのある一連のステップを作成する方が簡単です。

新しいナマケモノフレームワークの開発者チュートリアルのコレクションを概説して、この計画を立てる方法をお見せしましょう。

フレームワークを概説する方法を理解するには、フレームワークがどのように機能し、実際の用途について考えるのが最善です。

さて、私の同僚と私が取り組んできたフレームワークはすべてナマケモノに関するものであり、人々が使用するのを見て興奮しているかなりクールな機能を提供します。

これは、フレームワークの主な機能の高レベルのビューです。

私のチュートリアルを概説するために、私はチュートリアルを通してそれらを説明する方法の良いアイデアを得ることができるように、最も重要なAPIをリストアップするつもりです。

Slothタイプ自体のようなAPIや、Food GeneratorやPowerPickerがあることがわかります。

これらについて一度に考えようとすると、明確な順序でどのように教えるべきかを決めるのは難しいでしょう。

では、一般的な機能領域でグループ化させてください。

ナマケモノタイプを理解することは、このフレームワークの採用者にとって本当に重要であることを知っているので、ナマケモノタイプの作成と編集に関連するすべてをグループ化します。

ナマケモノの生成、名前の付け、権限の編集に使用されるAPI：これらはナマケモノの作成に使用されるコアAPIです。

そして、フードジェネレーター、ケアスケジュール、生息地などの残りのAPIもすべて関連していることがわかりました。

ナマケモノの世話に関するこれらのAPI。

だから、フレームワークを構成する2つの主要なAPIグループがあるようです。ナマケモノの作成に関するAPIのグループと、ナマケモノのケアに関するAPIのグループです。

これは素晴らしいスタートです。

私は、採用者が私たちのフレームワークをうまく使用するためにこれらのAPIを理解する必要があることを知っています。

そして、このようにそれらをグループ化することで、それらが一緒にどのように機能するかを示すことが容易になります。

しかし、このフレームワークの採用者は、自分のアプリでより複雑なことをしたいと思う可能性が高いことも知っています。

だから、私は別のグループを追加します。

私たちの新しいフレームワークは、ナマケモノの作成と世話に関するものですが、含まれているAPIを超えた方法で使用できるように準備したいので、相互運用性に関する情報を含める必要があります。

採用者は、ナマケモノが他の動物と交流したり、異なる場所を移動したり、ナマケモノのグループでたむろしたりするのを助けるためにフレームワークを使用する可能性が高いと思います。

私はすべてのユースケースを想像しようとしているわけではありません。

私は自分のアプリでフレームワークを使用する方法を人々に紹介するのに十分な多様性が欲しいだけです。

これら3つのグループで、私はチュートリアルを整理する素晴らしいスタートを切りました。

今のところ、私はこれらのグループを章に変え、それらを使ってアプリのアイデアをブレインストーミングし、フレームワークの採用者に実際のアプリでAPIを使用する方法を教えます。

チュートリアルでは、これら3つの分野のそれぞれに機能を備えたアプリを設計しました。

作成のために、ユーザーが新しいナマケモノを生成し、それに色とパワーを割り当てることができるシンプルなビューを作成します。

思いやりのために、私はユーザーにナマケモノの一般的な活動レベル、食欲、気分を見る能力を与えます。

そして、インタラクションセクションでは、ユーザーが世界中を移動し、他の動物と交流するときにナマケモノを見つけることができる機能を作ります。

私のアプリのアイデアをスケッチして、私はそれをどのように構築するか、そしてそれをどのように人々にそれを構築するように教えるかを計画する準備ができています。

アプリの構築方法に大まかに従った各章のチュートリアルのリストを書きます。

まず、ナマケモノを作成するためのビューを作成します。

その後、より複雑なスロのケア機能に取り組みます。

最後に、他のフレームワークを使用するアプリの部分を構築します。

このすべての計画の後、私は私たちのフレームワークの採用者がナマケモノを作成し、世話するのに役立つと確信しているチュートリアルのリストを持っています。

この計画は私が書くにつれて変わるかもしれませんが、今のところ、私の考えを整理し、すべての重要なAPIを明確だが冗長ではない方法でカバーしたことを確認するのに役立ちます。

これまでのところ、ディレクティブ構文とチュートリアルを構成するコンポーネントを調査しました。

また、チュートリアルのコレクションを概説する基本についても説明しました。

この時点で、私たちは書き始める準備ができているので、Xcode 13でDocCでチュートリアルを書く方法を示す同僚のHannahに渡します。

ありがとう、ウィル。私の名前はハンナです。

私はここアップルのヒューマンインターフェースデザイナーです。

SlothCreatorチュートリアルの概要がわかったので、Xcode 13のまったく新しいDocC機能を使用して、チュートリアルを一緒に書く方法を説明しましょう。

私の同僚のBeaとJackは、「XcodeでDocCドキュメントを昇格する」セッションで、ドキュメントファイルを整理するためのドキュメントカタログを作成する方法を取り上げました。

SlothCreator用に作成したのと同じドキュメントカタログにチュートリアルを追加します。

ウィルが述べたように、チュートリアルをコンパイルするには目次ファイルが必要です。

だから、私はすでにSlothCreatorチュートリアル用のチュートリアルフォルダと目次ファイルを作成しました。

さあ、私の最初のチュートリアルを作り始めましょう!

まず、[チュートリアル]フォルダを右クリックし、[新しいファイル]を選択してテンプレートセレクターを表示し、[チュートリアルファイル]を選択し、[次へ]をクリックします。

このチュートリアルを「カスタムナマケモノの作成」と名付けます。

DocCは、私が始めるためのテンプレートを提供します。

チュートリアルファイルテンプレートには、セクションにイントロ、セクション、および一連のステップがあります。

必要に応じて、チュートリアルの完了予定時刻を表示できます。

約20分かかると思います。

このチュートリアルのタイトルを続けましょう。

ここでは、「カスタムナマケモノの作成」と入力します。

次に、このチュートリアルの概要を追加します。

チュートリアルをより魅力的に見せたいので、チュートリアルのイントロ、セクションのイントロ、ステップのためにいくつかのアートファイルを用意しました。

アートファイルフォルダを開き、準備したすべての画像を選択し、ドキュメントカタログのリソースフォルダにドラッグアンドドロップします。

私がデザインしたイントロ画像をお見せしましょう。

フレームワークの採用者がこのチュートリアルで構築するものを視覚的に説明しています。

イントロ画像を追加するには、「ソース」の後に画像ファイル名を入力します。

また、画像にアクセスしやすい説明を追加します。

私は、すべてのSlothCreatorの採用者がチュートリアルを読むことと聞くことの両方を通して素晴らしい学習体験をできるように、私のチュートリアルを誰もがアクセスできるようにしたい。

アクセス可能な説明は、画像を見ている人にとって何が自明であるかを説明しています。

たとえば、イントロ画像を「ナマケモノのアウトラインとナマケモノの下に4つのボタンを持つアプリインターフェースのワイヤーフレーム」と説明します。

ボタンには、氷、火、風、稲妻のシンボルが左から右に表示されます。

コードに説明を追加しましょう。

このチュートリアルのイントロを完了したので、最初のセクションに移りましょう。

これは初心者に優しいチュートリアルになります。

したがって、最初のセクションでは、フレームワークの採用者は、Slothyアプリの基本を設定することから始めます。

セクションのタイトルを入れて、セクションの説明を追加します。

また、このセクションのタスクフローを視覚的に表す、準備したセクション画像も追加します。

イントロ画像を追加した方法と同様に、画像ファイル名とアクセス可能な説明を入力します。

次に、ステップに進みましょう。

このセクションの最初のステップでは、フレームワークの採用者は、iOSアプリテンプレートを使用して新しいXcodeプロジェクトを作成します。

私はそれを指示に入れます。

このステップのメディアは、採用者にそれを行う方法に関するより多くのコンテキストを提供する必要があるので、Xcodeのテンプレートセレクターのスクリーンショットを撮り、彼らが対話する必要がある領域を強調しました。

覚えておくべきことの1つは、フレームワークの採用者がこのチュートリアルを見ているとき、セクションとステップの背景は、Xcodeの設定に基づいて明るいか暗いかのどちらかである可能性があります。

そのため、ダークモードと互換性のある画像を作成するか、外観ごとに個別の画像を提供できます。

この画像をステップに追加します。

最初のステップを追加しました。先に進み、セクション1の残りのステップを追加します。

わかりました。

最初のセクションの手順を完了しました。

このチュートリアルがどのように進んでいるかを見てみましょう。

Xcode 13では、製品ビルドドキュメントに移動して開発者ドキュメントウィンドウでチュートリアルをプレビューしたり、キーボードのcontrol+shift+command+Dを押してショートカットを使用できます。

すごい！チュートリアルは正常にコンパイルされました。

そして今、私はちょうどポップアップしたドキュメンテーションウィンドウで書いたものをプレビューすることができます。

目次ページを見てみましょう。 ページを見てみましょう。

左側のナビゲーターでは、私の同僚が SlothCreatorのために書いた他のドキュメントとともに、私のチュートリアルが SlothCreatorプロジェクトの下に整理されていることがわかります。

右側には、目次ページが見えます。

イントロセクションには、チュートリアルコレクションの概要と目を引く画像があります。

イントロの下には、私の最初の章と、今書いたチュートリアルへのリンクがあります。

見てみましょう。 

チュートリアルページの上部から、フレームワークの採用者に SlothCreationビューを構築することを通知するチュートリアルイントロがあり、約20分かかります。

その下が最初のセクションです。

このセクションでは、採用者はプロジェクトを設定するための4つの簡単なステップを実行します。

ステップを下にスクロールすると、画像の更新を見ることができます。

これまでのところ、すべてが良さそうです。

2番目のセクションでは、フレームワークの採用者がSlothCreatorでコーディングを開始します。

コードステップでそれらを導く方法を見てみましょう。

私はすでにセクション2のイントロと最初のステップを完了しました。

フレームワークの採用者が前のステップで作成したSwiftファイルに SlothCreatorパッケージをインポートしている2番目のステップを見てみましょう。

それに飛び込む前に、いくつかのことを指摘したいと思います。

コードステップは、上部に表示名を表示し、採用者にどのファイルに取り組むべきかを伝えます。

DocCは、このステップで追加したSwiftファイルを画面の右側、表示名の下に表示します。

DocCは、現在のコードファイルと前のステップのコードファイルを自動的に比較し、コードの新しい部分を強調表示することもできます。

このコードファイルはプレビューを生成します。

採用者が指示に正常に従っているかどうかを確認できるように、このステップにプレビューのスクリーンショットを追加できます。

Xcodeに戻って、このステップを終わらせましょう。

まず、表示名、次にコードファイル名、そして最後にプレビュー画像を追加します。

コードステップを追加する方法がわかったので、セクション2の残りのステップを追加します。

これまでのところ、チュートリアルのイントロ、セクション、およびさまざまな種類のステップの書き方を説明しました。

さて、 SlothCreatorのために書いたすべてのチュートリアルを追加します。

Finderを開き、準備したすべてのチュートリアルファイルを選択し、チュートリアルフォルダにドラッグアンドドロップします。

次に、目次ファイルを開き、第1章の他の2つのチュートリアルをリンクし、第2章と第3章を追加します。

さて、今、私は SlothCreatorチュートリアルを完了しました。

一緒に見てみましょう。 

目次ページから、このチュートリアルコレクションには、3つの章に編成された8つのチュートリアルが含まれていることがわかります。

左側のナビゲーターからもこの構造を見ることができます。

このページは、フレームワークの採用者にこのチュートリアルコレクションの要約ビューを提供する素晴らしい方法です。

先ほど書いたチュートリアルページも見てみましょう。

私たちは、プロジェクトの設定方法を通じてフレームワーク採用者をガイドするイントロと最初のセクションを見ました。

その下には、ナマケモノのカスタマイズビューを構築する方法に関する明確なコーディング手順を提供する2番目のセクションがあります。

すごい！

チュートリアルは本当に良さそうです!

私たちのフレームワークの採用者は、私のチュートリアルを見たときにSlothCreatorについて学ぶことに興奮すると確信しています。

このセッションでは、チュートリアルとは何か、良いチュートリアルとは何か、チュートリアルの概要を説明する方法、DocCを使用してチュートリアルを作成およびプレビューする方法について説明しました。

DocCは、Xcode 13の強力な新しいドキュメント機能です。

それを使えば、参考文献、記事、チュートリアルなど、フレームワークの包括的なドキュメントを書くことができます。

DocCでドキュメントを作成、構築、整理する方法の詳細については、今年のWWDCの他のDocCセッションをチェックすることをお勧めします。

私たちと一緒に学んでいただきありがとうございます。Xcode 13のDocCで何を作成するのかに興奮しています。

[明るい音楽]。