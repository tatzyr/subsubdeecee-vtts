10239

♪ベース音楽の演奏♪

♪

スチュアート・チェシャー：「アプリのネットワーク遅延を減らす」へようこそ。

私の名前はスチュアート・チェシャーです。

今日、ネットワークアプリを遅く感じさせる要因について話してから、同僚のVidhi Goelに渡して、ネットワークアプリをよりレスポンシブにするために使用できるテクニックとAPIについて説明します。

iOSのWWDCベータ版ですでに見たことがあるかもしれないことについて話すことから始めましょう。

開発者設定を見ると、ネットワーキングセクションに「応答性」という新しい項目が表示されます。

アップロードスループット、ダウンロードスループット、アイドルping時間はすべて興味深いですが、ネットワークアプリの応答性に影響を与える主な要因は、アイドル状態ではなく、作業条件下でのネットワークの応答性です。

典型的なインターネット速度テストのアイドルping時間測定は、使用していないときにインターネット接続がどれだけうまく機能するかを示します。

重要なのは、使用しているときにインターネット接続がどれだけうまく機能するかです。

テストをタップします。

ネットワークトラフィックを生成することを警告し、ネットワークを数秒間測定し、作業条件下でネットワークがどれだけうまく機能しているかを伝えます。

このツールは、ミリ秒ではなく、1分あたりの往復、またはRPMでネットワークの応答性を報告します。

ミリ秒は多くの人にとってかなり抽象的な概念であるため、この新しいRPMメトリックを作成しました。

人々はまた、高い方が良い指標に精通しています。

RPMメトリックは、車のエンジンのRPMと同様に、数百RPMから数千RPMの範囲の数値を生成します。

macOSには、NetworkQualityと呼ばれるこのテストツールのコマンドラインバージョンもあります。

あなたの家や職場のネットワークは素晴らしいping時間を持っていると思うかもしれませんが、それはアイドル状態です。

このネットワーク品質テストをiPhoneまたはMacで自分で実行すると、ネットワークが使用されているときに、その応答性がはるかに悪くなる可能性があります。

そして、私はもっと悪い意味です。

ネットワークには20ミリ秒のアイドルラウンドトリップ時間があるかもしれませんが、これはかなり良さそうですが、作業条件下では、ラウンドトリップ時間は600ミリ秒以上になるかもしれません。

それは30倍悪いです。

労働条件の下でのネットワークの応答性は、アプリのユーザーエクスペリエンスにとって重要です。

私たちは皆、この問題を常に見ていますが、特にオーディオとビデオのフリーズ、ビデオ会議中のドロップアウトで。

高いネットワーク遅延はすべてのアプリを傷つけますが、私たちはそれに慣れているので、それがビデオ会議に影響を与えるとき、私たちはそれにもっと気づきます。

ビデオ会議に問題がある場合は、インターネット接続をアップグレードすることで解決すると思います。

人々は毎秒数メガビットからギガビット以上になりましたが、問題はまだ発生しています。

毎秒数メガビットはビデオ会議には十分なはずですが、なぜ私たちはまだこれらの問題を抱えているのですか?

ネットワーク内のバッファが大きすぎると、いっぱいになると、スループットは改善しませんが、遅延が追加されます。

私たちは通常、インターネットがこのように動作し、パケットがネットワークを高速に流れることを考えます。

しかし、クラウドの内部を見ると、実際にはこのように機能することがわかります。

ネットワークから出てくるパケットは、あなたが見たパケットではありません。

パケットは、ネットワーク内の過度に大きなバッファに座って多くの時間を費やします。

過度に大きなバッファーのこの現象はbufferbloatと呼ばれ、日常のネットワーク使用への影響にもかかわらず、今まで広く測定されていません。

良いニュースは、バッファブロートを排除する制御遅延キューイングアルゴリズムであるCoDelのような最新のキュー管理アルゴリズムがあることです。

ネットワークがキューを短くすると、パケットがネットワーク内で待機する時間が劇的に短縮されます。

高スループットと低遅延を同時に取得することが可能です。

それはどちらか/または選択ではありません。それはゼロサムゲームではありません。

私たちは業界と協力して、よりスマートなキュー管理アルゴリズムを展開し、労働条件下でのネットワークの応答性を向上させています。

しかし、今のところ、優れたユーザーエクスペリエンスを提供したい場合は、アプリが今日のようにインターネットに対応できるようにしたいと思うでしょう。

Bufferbloatは、アプリケーションが経験するネットワーク遅延の大きなコンポーネントですが、遅延の原因だけではありません。

ソフトウェアとハードウェアの処理時間があります。

CPUがますます速くなるにつれて、この処理時間は縮小し続けます。

実際のデータ送信時間があります。

データレートがキロビットからメガビットからギガビット/秒に増加するにつれて、伝送時間は縮小し続けています。

次に、ネットワーク内のバッファリングによる時間遅延があります。

私が言ったように、私たちはこれらの遅延を減らすために業界と協力しています。

しかし、常に光速信号の伝播遅延があります。

1990年代、米国全土のスタンフォードからMITへのping時間、往復、海岸から海岸まではすでに100ミリ秒未満でした。

それはすでに光速の制限にかなり近いので、それほど良くならないようにします。

私たちは他の3つの遅延の削減に取り組んでいますが、光の速度の遅延は決して消えないので、これがネットワークの往復時間を考慮してアプリを設計することが重要です。

ネットワークの往復時間を考慮に入れることについて話しているとき、どのようなアプリについて話しているのですか?

ビデオ会議が高いネットワーク遅延によって深刻な影響を受けることは誰もが知っています。

オンラインゲームは高いネットワーク遅延によって深刻な影響を受けていることは誰もが知っています。

しかし、これはネットワークを使用するすべてのアプリに影響します。

私は天気予報、株価、道順を得ることについて話しています。

これはウェブブラウジングに影響します。

ストリーミングビデオを見ながらスキップに影響します。

アプリがネットワークを待っている間に、アニメーション化された回転遅延インジケーターを含むアプリの数を考えてください。

たぶんあなたのアプリ。

ユーザーがアプリがハングしたと思わないように、「お待ちください」インジケーターを表示します。

遅いネットワークを待っている間、ユーザーが見るものを与えることに多くの努力をすることは素晴らしいことですが、彼らが待つのに費やす時間を減らすためにも同等の努力をする必要があります。

ネットワークからのデータを待っている間に遅延インジケーターを表示するアプリがある場合は、それらの待ち時間を短縮するために使用できるテクニックがあります。

アプリがネットワークデータを待つ時間は、1回のネットワーク往復にかかる時間と、アプリに必要なネットワーク往復の数の関数です。

アプリ開発者として、基盤となるネットワークの往復時間を改善するためにできることはあまりありませんが、アプリに必要な往復回数を制御できます。

同僚のヴィディ・ゴエルを紹介して、その方法を教えてください。

ヴィディ・ゴエル:ありがとう、スチュアート。

こんにちは、私はVidhiです。今日は、アプリのネットワーク遅延を減らすために開発者として何ができるかについてお話ししたいと思います。

アプリの応答性は、ネットワーク往復の数に反比例します。

最新のネットワークプロトコルを採用し、アプリを超スピーにすることで、これらのネットワーク往復を減らす方法をお見せしましょう。

アプリを高速化するには、HTTP/3&QUIC、TCP Fast Open、TLS 1.3、Multipath TCPなどの最新のネットワークプロトコルを採用してください。

これらの手法により、アプリはユーザーにデータを配信する際の複数の往復削減を潜在的に達成できます。

これらの最新のプロトコルすべてにサーバー側のサポートが必要なので、その準備状況についてはプロバイダに確認してください。

これらの技術はすべてiOSとmacOSで利用可能であることをお伝えできることを嬉しく思います。

これらの技術のそれぞれを見てみましょう。 

まず、iOS 15とmacOS Montereyでデフォルトで有効になっているHTTP/3とQUICがあります。

QUICは、TCPやTLSよりもはるかに高速に接続を設定できるトランスポートプロトコルです。

回線のブロックを減らすことで、QUICはユーザーへのデータ配信の遅延を大幅に削減できます。

そして、ここに最高の部分があります:あなたがすでにURLSessionを使用している場合、あなたはすべて設定されています。

ネットワークフレームワークAPIを使用して独自のアプリケーションレイヤーを提供し、QUICを利用したい場合は、QUICパラメータでNWConnectionを作成し、TLSアプリケーションレイヤープロトコルまたはALPNを設定するだけです。

アプリでこれらの技術を使用する方法の詳細については、「HTTP/3とQUICでネットワークを加速する」セッションをチェックしてください。

QUICは多くのシナリオで役に立ちます。

しかし、一部のアプリケーションでは、TCPは依然として正しい選択かもしれません。

TCPを使用する場合、TCPハンドシェイクと一緒にアプリデータを送信することで、往復全体を排除できます。

TCPファストオープンは、ネットワークフレームワークとソケットでサポートされています。

NWConnectionsで使用するには、2つのオプションがあります。最初のオプションは、接続でファストオープンを許可することです。この場合、アプリはハンドシェイクで送信される初期データを提供します。

これを有効にするには、allowFastOpenパラメータをtrueに設定し、接続を作成します。

そして、スタートを呼び出す前に、最初のデータで送信を呼び出します。

TCP Fast Openを使用する場合は、ハンドシェイクで冪等要求のみを送信するように注意する必要があります。

Idempotentは基本的に、データがネットワーク上で安全に再生できることを意味します。

アプリが独自の初期データを送信する必要がないTCP Fast Openを使用する別の方法があります。

アプリがTCPでTLSを使用している場合は、最初のデータとしてTLSハンドシェイクメッセージを送信することを選択できます。

これを有効にするには、TCP固有のオプションに移動し、enableFastOpenをtrueに設定します。

TCP Fast Openを使用する推奨される方法は、ネットワークフレームワークAPI経由ですが、アプリがソケット上に構築されている場合は、それぞれのフラグでconnectx APIを呼び出すと、ハンドシェイクで冪等データを送信することを指定します。

私は冪等について何度か言及しました。

それが何を意味するのか、そしてなぜ握手で冪等要求だけを送ることが重要なのかを説明しましょう。

冪等でリプレイセーフな操作は、複数回実行しても追加効果のない操作です。

たとえば、ユーザーがdeveloper.apple.comのWebページにアクセスすると、このWebページのHTTP GETリクエストがTCPハンドシェイクで送信されます。

このリクエストの確認がネットワークで遅延またはドロップされた場合、デバイスはHTTP GETリクエストを再送信し、別のサーバーにルーティングされる可能性があります。

そして今回は、HTTPレスポンスと一緒に確認応答が届きます。

HTTP GETリクエストは、ネットワーク経由で再送信されたときに追加の効果がないため、冪等要求と見なされます。

さて、ユーザーが新しいiPhone 12を購入しようとしているとしましょう。

この操作に対して送信されたHTTPリクエストは、冪等要求ではありません。

データがネットワーク経由で再生されるたびに要求が異なるサーバーに送信されると、複数のトランザクションが発生する可能性があります。

それを念頭に置いて、TLS 1.3について話しましょう。

TLS 1.3は、TLS 1.2と比較して、ハンドシェイクから往復全体を削除します。

また、より強力なセキュリティを提供します。

URLSessionとNWConnectionのiOS 13.4以降、デフォルトで有効になっています。

TLS 1.3プロトコルは、早期データサポートを定義し、TLSハンドシェイクメッセージと一緒に冪等要求を送信することで、さらに別の往復を節約できます。

ギアを切り替えて、ネットワークの遅延を減らすために少し異なる方法で機能するマルチパスTCPを見てみましょう。

マルチパスTCPを使用すると、デバイスが1つのネットワークから別のネットワークに切り替わるときに、単一のTCP接続を継続できます。

マルチパスTCPの低レイテンシ機能を取得するには、インタラクティブモードAPIを使用します。

新しい接続を確立するために必要なすべての往復が保存され、システムは自動的にデータパケットのより高速なネットワークパスを選択します。

クライアントからオプトインするには、multipathServiceTypeプロパティをURLSession設定またはNWParametersでインタラクティブに設定します。

これらの近代的な技術で節約できる往復の数のアイデアを与えるために、基準点から始めましょう。

あなたのアプリが現在TCPでTLS 1.2を実行しているとしましょう。

この場合、最初のバイトをユーザーに取得するには4往復かかります。

サーバーがTLS 1.2からTLS 1.3に切り替わると、接続は往復全体を排除します。

接続でTCP Fast Openを有効にすると、さらに別の往復が保存されます。

iOS 15では、HTTP/3 over QUICは2往復に削減されます。

QUICプロトコルはまた、早期データサポートを定義し、1往復にさらに削減することができます。

Appleでの測定値に基づいて、ユーザーは600ミリ秒にも急上昇する往復時間を見るのが一般的です。

それがあなたのアプリにとって何を意味するのか見てみましょう。

600ミリ秒での4往復は、ユーザーがデータが届くのをほぼ2秒半待っていることを意味します。

それは、ネットワークスピナーを待って見つめる膨大な時間です。

最新のネットワークプロトコルを採用することで、その時間を最初のバイトに2.4秒から約0.5秒に短縮できます。

データは1秒半早く到着すると、ユーザーは確実に違いに気づくでしょう。

優れたネットワークパフォーマンスを望むすべての開発者は、往復の数に注意を払う必要があります。

ここが大きな勝利があるところです。

私が話したすべての技術は、現実世界のネットワーク条件でアプリのネットワーク遅延を減らすのに役立ちます。

5G、LTE、または高速Wi-Fiネットワークでアプリをテストすると、アプリの応答性は問題ないと思われるかもしれません。

しかし、ユーザーが常に最高のネットワーク条件でアプリを使用しているとは限りません。

現実的なネットワークをシミュレートするために、ネットワークリンクコンディショナーツールは開発者設定メニューからiOSで利用可能です。

macOSの場合は、Apple DeveloperのWebサイトからダウンロードできます。

このツールは、ユーザーが日常生活で経験する可能性のあるさまざまなネットワーク条件でアプリをテストするための信頼性が高く反復可能な方法です。

思い出せば、スチュアートは先ほど、ネットワークの往復時間を短縮することはあまりできないと述べました。

まあ、それは完全に真実ではありません。

アプリのトラフィックについてシステムに正しく通知すると、ネットワークの往復時間を短縮する方法を説明します。

ほとんどのアプリには、送受信するトラフィックが混在しています。

たくさんのアプリを実行すると、ユーザーのデバイスから多くのデータが交換されます。

家庭やオフィスのWi-Fiなどの現実世界のネットワークでは、多くのデバイスが同じネットワークを共有しています。

これらのデバイスは、一連のアプリを使用している間、同時に大量のデータを送受信します。

この共有ネットワークで長いキューを構築することを避けるために、ネットワーク遅延を低く維持するために、システムがトラフィックを効率的に管理できるように、アプリデータを適切に分類することが重要です。

また、システムが低ネットワーク遅延を維持できるようにすると、アプリのフォアグラウンドトラフィックが速くなり、ユーザーにとって最も重要なデータが迅速に配信されます。

これを例で説明しましょう。

多くのアプリは、グラフィックス、オーディオファイルなどのコンテンツをプリフェッチして、後で使用できるようにします。

アプリがかなりの量のデータをプリフェッチしているとき、これはネットワークがどのように見えるかです。

ボトルネックキューがいっぱいになる可能性があります。

この時点で、ユーザーがプロファイルページの表示など、ネットワークアクティビティを開始すると、この要求に対する応答はネットワークキューの最後にキューに入れられ、プロファイルが表示されるまでに数秒かかる場合があります。

これは良いユーザーエクスペリエンスではないでしょう。

では、これらの非ユーザーが開始したプリフェッチタスクをバックグラウンドとしてマークすると、ネットワークに何が起こるかを見てみましょう。

これらの非ユーザー主導の転送をバックグラウンドとしてマークすると、ネットワークキューのサイズが劇的に縮小され、他のフォアグラウンドデータで利用できるようになります。

したがって、フォアグラウンドデータ、つまりグリーンパケットは、迅速で楽しい体験のために即座に配信されます。

iOS 15とmacOS Montereyでは、バックグラウンドサービスタイプが劇的に改善されました。

バックグラウンドのアップロードとダウンロードのための新しい混雑制御アルゴリズムを追加しました。

これらの新しいアルゴリズムは、より良いユーザーエクスペリエンスのためにネットワークの遅延を大幅に削減するだけでなく、バックグラウンド転送が他のトラフィックとほぼ同じ時間に終了することを保証します。

バックグラウンドサービスタイプを利用するために採用できるネットワークAPIを見てみましょう。

アプリがフォアグラウンドにあり、ユーザーが開始していない転送を実行する場合は、デフォルトのURLSessionを使用し、URLリクエストでネットワークサービスタイプをバックグラウンドに設定します。

繰り返しになりますが、これにより、システムは低いネットワーク遅延を維持できます。

また、NWConnectionの場合、サービスクラスをNWParametersのバックグラウンドに設定します。

ユーザーが開始したかどうかにかかわらず、アプリが長時間の転送を開始した場合、アプリが一時停止されている場合でも実行を続けるためのバックグラウンドURLSessionを作成します。

時間に敏感なタスクでは、isDiscretionary プロパティを true に設定できます。

これにより、システムは転送を実行するための最適な条件を待つことができます。

私たちはあなたのアプリがネットワークキューを短く保つのにどのように役立つかについて話しました。

もう1つの遅延の原因は、送信デバイス自体にある可能性があります。

歴史的に、ネットワークスタックは非常に大きな送信バッファを使用してきました。

これにより、パケットがネットワークに入る前に、時には秒単位で多くの不必要な遅延が追加されます。

私たちは2015年にURLSessionとNWConnectionのためにこれを修正しました。

しかし、インターネット上のほとんどのサーバーはLinuxで動作し、BSDソケットを使用しています。

サーバーオペレーターに連絡して、ソースでの遅延を減らすために、TCPが送信されていない低透かしソケットオプションを使用していることを確認してください。

次のステップでは、最新のネットワークプロトコルを採用して、複数の往復旅行を排除します。

バックグラウンドモードを使用して、アセット、一括転送、および緊急ではないタスクをプリフェッチします。

さまざまなネットワーク条件でアプリのパフォーマンスをテストします。

ネットワークリンクコンディショナーは、それを行うための優れたツールです。

ネットワークの遅延を低く保つことで、アプリの応答性が向上し、全体的なユーザーエクスペリエンスが向上します。

見てくれてありがとう、素晴らしいWWDCを!

♪