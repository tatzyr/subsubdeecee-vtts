10002

こんにちは、「watchOS 8の新機能」へようこそ。私の名前はジェイク・ベーレンスで、アップルのウォッチエバンジェリストです。

watchOS 7は、ファミリーセットアップなどの機能で多くの新しい機会を開き、家族がiPhoneなしで接続を維持できます。複数のコンプリケーションにより、ウォッチフェイスのより豊かなエクスペリエンスを作成できます。ウォッチフェイスの共有では、誰かと共有したり、オンラインで投稿したりできる、お気に入りのコンプリケーションで自分のウォッチフェイスを作成できます。

watchOS 8では、さらに素晴らしいWatchアプリ体験を作成するのに役立つトップリクエストのいくつかに焦点を当てました。

話すことがたくさんあるので、飛び込みましょう。

まずは常時表示です。

Apple Watch Series 5とwatchOS 6では、常時表示ディスプレイが文字盤に搭載され、watchOS 8では、アプリに常時表示ディスプレイが導入されています。

また、HealthKitデータのバックグラウンド配信とBluetoothスキャンを利用して、健康関連の合併症を最新の状態に保つ方法についても説明します。

Apple Watchは時間の経過とともにより自立しています。

watchOS 8では、地域ベースのユーザー通知を手首にもたらします。

私は、これらが適切な場所で適切なタイミングで誰かに関連情報をもたらす方法について話します。

最後に、watchアプリの開発と使用をさらに良くするwatchOS 8の新しいシステムとAPIの強化について話します。

常時表示ディスプレイから始めましょう。

常時表示ディスプレイを使用すると、手首を上げることなく、時計のコンテンツを見ることができます。

手首を上げると、ディスプレイが再びアクティブになります。

常時表示ディスプレイは、Apple Watch Series 5と6でサポートされています。

watchOS 7では、常時オンの状態は、時間のオーバーレイでアプリのUIがぼやけて表示されました。

watchOS 8 SDKでアプリを再構築すると、アプリのUIは代わりに暗い状態で表示され、誰かがUIをタップするとすぐにインタラクティブになります。

常時オンの状態では、システムは誰かが見るのに十分な明るさを保ちながら、ディスプレイの全体的な明るさを自動的に下げます。

アプリのUIをこの明るさの低下に適応させるために、isLuminanceReducedというSwiftUI環境プロパティを導入しています。

特に重要な情報を強調し、非公開にしておくべき情報を隠すことで、この状態に対応できます。

迅速な反復を支援するために、この環境プロパティのサポートをXcodeプレビューとシミュレータに含めました。

シミュレータでは、ウィンドウのボタンをクリックして、リストダウンイベントをシミュレートします。

これは、アプリのUIが常時オンの状態にどのように反応するかを見たいときに本当に役立ちます。

それでは、常時オン状態のアプリのUIのいくつかの指導原則について話しましょう。

アクティブ状態から常時オン状態への移行はシームレスに感じられるはずです。

UIを大幅に変更したり、情報を再編成したりしないでください。

そうでなければ、常時オン状態からアクティブへの移行は不快になります。

アクティブなUIのコンテキストを維持することが鍵です。

この例では、FitbodはUIを接地し、状態間で一貫性を保ちながら、より明るい要素と二次テキストの一部をさらに調光させます。

次に、重要でない情報や要素を暗くする必要があります。

二次テキスト、画像、または塗りつぶしがある場合は、それらを自分でさらに暗くして、強調表示して表示したい情報をより際立たせることができます。

AnyListは、食料品の買い物リストを作成して共有し、レシピを整理するのに役立ち、リストアイテムの背景を削除し、ギリシャヨーグルトの味や牛乳の量などの二次情報をさらに暗くします。

これにより、ショッピングカートを押したり、買い物かごを運んだりする可能性があるため、メインリストアイテムのタイトルがさらに目を見やすくなります。

UIに色や画像で満たされた大きな要素がある場合は、それらの要素をストロークまたは薄暗い色で表現するように減らし、UIのグラウンディングを再び維持しますが、強調表示された情報を表示できるようにします。

この例では、Pandoraは下部に沿ったセカンダリコントロールを暗くし、アルバムのアートワークを削除し、似ているが薄暗い色を使用します。

これは、曲名とアーティスト名を一目で強調するのに本当にうまく機能します。

輝度が低下すると、機密情報を編集または削除することもできます。

この例に示されている口座番号、残高、およびいくつかの個人的な健康データなどの情報は、誰かの手首が下がっている間に詮索好きな目から不明瞭にする良い候補者かもしれません。

SwiftUIを使用した編集の詳細については、ウィジェットが同様の編集モデルを共有しているため、開発者アプリの「素晴らしいウィジェットの原則」ビデオを参照してください。

最後に、アニメーションが発生している場合は、ループの最初のフレームにリセットするか、休んだ状態に解決する必要があります。

アニメーションの途中でそれらを残さないのが最善です。

常時オン状態でUIを最高に見せる方法がわかったので、手首を下げている間にアプリのUIを更新する方法の技術的な側面について話しましょう。

ワークアウトセッションや継続的なランタイムを提供するオーディオセッションなど、進行中のアクティブなセッションがあるアプリでは、UIを1秒間に1回まで更新できます。

これにより、カウンタ、メトリクス、その他のデータを最新の状態に保つことができますが、10分の1秒などのサブ秒の増分を削除する必要があります。

アクティブなセッションのないアプリの場合、1分間に1回まで更新できます。

システムが時計の文字盤に戻るまでのデフォルトのタイムアウトは2分ですが、顧客がこの設定を変更する可能性があるため、アプリがこれよりも長く表示されるように計画する必要があります。

では、非アクティブなアプリがUIを更新する必要があることをどのように伝えますか?

そのために、SwiftUIでTimelineViewを作成しました。

TimelineViewはスケジュールを取り、日付に応じてビューを構築します。

更新のスケジュールに関しては、アプリに適したことを何でもできるように、一握りのTimelineSchedulesを提供しました。

毎分があり、毎分更新されます。

これはまた、システムクロックと一致します。つまり、各更新はデバイスの分の上部で発生します。

周期的には、2分ごとやアプリに適したものなど、間隔を設定できます。

1分間隔で定期的なスケジュールを使用する場合、それらはシステムクロックに整列されません。

これは、ワークアウトが開始されたときなど、特定のイベントに関連して更新のタイミングを測る必要がある場合に本当に便利です。

1.5分後に更新が必要になり、2.5分後に更新が必要になるなど、特定の時間に発生する変更がある場合は、明示的です。

カスタムもあります。

毎分更新されるタイマーのようなものを持っているが、最後の60秒間1秒間に1回更新したい場合、これは本当にうまく機能します。

アプリがアクティブなセッションではなく、このタイマーの最後の60秒のように、短期間でより高速な更新が必要だと私たちに言う場合、システムはそうしようとしますが、それらの更新は保証されません。

最後に、アニメーションのスケジュールがあります。

TimelineView、スケジュール、アニメーションなどの詳細については、開発者アプリの「SwiftUIの新機能」と「SwiftUIアプリに豊富なグラフィックを追加する」ビデオをご覧ください。

私たちは、健康とフィットネスのアプリがApple Watchに与えた影響が大好きです。

watchOS 8では、WatchアプリにHealthKitデータのバックグラウンド配信をもたらしました。

これにより、アプリのパッシブヘルスモニタリングが開き、ファミリーセットアップ構成で使用されるスタンドアロンのWatchアプリに大きな影響を与える可能性があります。

HealthKitデータのバックグラウンド配信を設定すると、iOSと同様に機能します。

watchOSでは、新しい健康データが収集されたために述語が一致し、バックグラウンドオブザーバークエリが処理されると、アプリは結果を受信するためにウェイプされます。

これは、Watchアプリで1時間に1回までできます。

誰かがあなたのアプリのコンプリケーションをアクティブなウォッチフェイスに追加した場合、1時間に最大4回まで結果を受け取ることができます。

これらの機会はすべて、アプリのバックグラウンドアプリの更新予算にカウントされるため、1時間あたり最大4つの結果しか追加されないため、他の理由でバックグラウンドアプリの更新ウェイクに影響を与える可能性があります。

アップデート周波数について話しましょう。

アプリに結果を配信すると、転倒イベント、低血中酸素飽和度、心拍数イベントなど、さまざまな重要なデータタイプに対してすぐに行います。

影響を受けるデータ型の完全なリストについては、Apple Developer Webサイトの開発者ドキュメントを参照してください。

他のすべてのデータタイプは、1時間ごとまたはより長い間隔で配信されます。

また、アプリがApple Watch上の健康データの認知度を高めたことを顧客に知らせるために、HealthKit認証シートに新しい情報を追加しました。

HealthKitデータのバックグラウンド配信は、ウォッチフェイスの健康とフィットネス関連の合併症に新たな可能性をもたらすと考えています。

watchOS 4では、BluetoothデバイスがApple Watchに直接接続し、Core Bluetoothを使用できるようにしました。

私たちはこれのいくつかの本当に信じられないほどの用途を見てきました。

watchOS 8では、さらに一歩前進し、アクティブなウォッチフェイスにあるときにアプリのコンプリケーションが得られるバックグラウンドアプリの更新機会中にデバイスが接続できるようにしています。

例えば、これは人々がQardioの医療グレードのECGで心臓病を監視することを可能にするQardioです。

そして、これはSonra Watchで、米国以外のサッカーコーチやサッカーは、GPSトラッカーを使用してトレーニング中の選手のパフォーマンスの最大28のリアルタイムメトリックを監視することができます。

バックグラウンドアプリの更新中にBluetooth接続を使用すると、アプリのコンプリケーションをBluetoothデバイスで最新の状態に保ち、1日を通して更新された情報を表示できることを意味します。

バックグラウンドアプリの更新は、アクティブなウォッチフェイスにあるアプリのコンプリケーションに、1時間あたり最大4つの接続と更新の機会を提供します。

これらの機会は、アプリの全体的なバックグラウンドアプリのリフレッシュ予算にカウントされることを忘れないでください。

アプリがフォアグラウンドにあるときに、最初のデバイス接続を必ず設定してください。

これはバックグラウンドからはできません。 バックグラウンドではできません。

デバイスへの接続が確立されると、バックグラウンドアプリの更新により、アプリに接続して新しいデータを取得する機会が与えられます。

また、非常に短期間でデータを接続して処理することも重要です。

これを支援するために、WKRefreshBackgroundTaskに新しい有効期限ハンドラを追加したので、時間が足りず、今やっていることを終わらせる必要があるときに伝えることができます。

これにより、必要に応じてアプリをクリーンアップし、優雅に劣化させることができます。

詳細については、開発者アプリの「BluetoothデバイスをApple Watchに接続する」をご覧ください。

Apple Watchは、常にあなたの上にあるデバイスです。

独立したWatchアプリがより普及し、顧客がコーヒーや時計だけで店に行くためにますます不足するにつれて、場所は重要なことを把握するための重要な部分です。

watchOS 8では、地域ベースのユーザー通知をApple Watchに導入しています。

これは、ジオフェンスに基づいて重要なことを通知できることを意味します。

たとえば、スロープを使用して、リフトにいるときにスキートレーニングを開始することを思い出させることができます。

または、App in the Airを使用して空港に着いたときにフライト情報を受け取ることができます。

watchOSの地域ベースのユーザー通知は、iOSと同様に機能します。

顧客のプライバシーを保護するために、最初に静的な通知を受け取り、ボタンをタップして完全な動的通知を見ることができます。

これにより、場所に基づいて通知トリガーに設定した地域に出入りする人に基づいて、事前に作成されたローカル通知を配信できます。

これを利用するには、「使用中」の許可が必要であることを覚えておいてください。

また、お気に入りの店舗の場所を設定するなど、誰かが明示的な意図を示した場所の近くの重要なポイントのみを含むように、地域の数を制限する必要があります。

地域は、半径約数百メートルの場合、最も電力効率が高い。

地域ベースのユーザー通知に加えて、watchOS 8はCore Locationの新しい位置情報ボタンをサポートしています。

このボタンは、タップするたびに承認プロンプトを通過することなく、1回限りの位置認証を提供します。

舞台裏では、それは「一度許可する」伝統的な承認のように機能します。

位置情報ボタンは、位置情報を共有したいタイミングをより詳細に制御することで、人々から信頼を得る簡単な方法です。

watchOS 8とiOS 15のCore Locationアップデートの詳細については、Developerアプリで利用可能な「Meet the location button」をご覧ください。

また、Core Motionに新しい常時オンの高度計APIを導入しています。

これにより、終日のバッテリー寿命への影響を最小限に抑え、誰かがアプリと位置情報を共有することなく、リアルタイムの標高更新にアクセスできます。

watchOS 8に搭載される新機能とAPIとは別に、Watchアプリの開発と使用をこれまで以上に簡単にするために多くの機能強化を行いました。

watchOS 8では、Apple Watchは睡眠中の呼吸数を測定できるようになりました。

これにより、睡眠の詳細などのアプリは、呼吸数データを表示し、朝起きたときに変化を視覚化することができます。

手足の違いがある人のために、Apple WatchにAssistiveTouchをお届けできることを嬉しく思います。

アクションを実行し、UIをナビゲートするのに役立つ人の手のジェスチャーを認識できるので、これは本当にエキサイティングです。

また、watchOS 8に大きなアクセシビリティテキストサイズを導入しています。

Watchアプリをよりアクセスしやすくする方法の詳細については、Developerアプリの「Create accessible Experience for watchOS」をご覧ください。

Watchアプリの単体テストとUIテストは、Xcode 12.5で導入されました。

しかし、アプリをアクセシブルにすることがテスト可能にすることなので、watchOSの新しいアクセシビリティ機能により、アプリをよりアクセスしやすくする時間がかつてないほど良くなりました。

watchOS 8はまた、iOSで見られるように、スクロールビューの上部に大きなタイトルを追加し、デバイス間でより一貫した感触を可能にします。

テキスト入力はwatchOS 8で刷新され、誰かがアプリごとにスクリブルまたはディクテーションを好むかどうかを記憶し、テキストの入力中に入力タイプ間の変更にすばやくアクセスできるようになりました。

これにより、より多くのテキストを簡単に入力でき、SwiftUIテキストフィールドでこの機能を無料で利用できます。

新しい検索可能なAPIを使用すると、カスタマイズされた提案で検索フィールドをアプリに簡単に追加できます。

検索フィールドに、候補が利用可能であることを示すボタンが表示されます。

彼らがそれをタップすると、彼らはあなたのカスタマイズされた提案を見るでしょう。

結果にカスタマイズされたUIを提供することもできます。

開発者アプリの「SwiftUIでのクラフト検索体験」ビデオを見て、詳細を学ぶことができます。

リストはスワイプアクションをサポートするようになったので、アイテムを削除することに加えて、お気に入りなどのカスタムアクションを実行できるようになりました。

ボタンの役割は、破壊的なボタンタイプなどの特定のボタンタイプを表示および処理する方法をシステムに知らせますが、タップしたときにそれらのボタンに追加の触覚を与えるcontrolProminence修飾子も含まれています。

また、SwiftUI Canvas APIはwatchOS 8でも利用できます。つまり、Apple Watchにある信じられないほどのGPUを使用して、豊富なプログラム描画を行うことができます。

watchOS 8を搭載したApple Watchの新しい可能性に興奮する理由はたくさんあります。

TimelineViewは、人の手首が下がっていて、一目で情報を取得する必要があるときに、UIを更新するのに役立ちます。

これはすべてのアプリが採用すべきものなので、まずそれをチェックしてください。

アプリの複雑さは、HealthKitデータとBluetooth接続のバックグラウンド配信により、最新の情報を取得する新しい方法を得ました。

これは、合併症が一部の人々がWatchアプリを使用する主な方法であることをさらに支持します。

一目でもっと届けることができれば、絶対にそうすべきです。

地域ベースのユーザー通知により、場所がWatchアプリにとって何を意味するかが強化されました。

これらを理にかなっている場所に採用することで、顧客がアプリに関わり続ける驚きと喜びの瞬間を追加できます。

そして最後に、AssistiveTouchやSwiftUI Canvas APIなどの次のレベルの機能を利用すると、Watchアプリをこれまで以上に使いやすく、没入感のあるものにすることができます。

私はあなたが作るものを見るために見ています。

ありがとうございます。

[音楽]。