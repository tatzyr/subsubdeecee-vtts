10236

こんにちは、私の名前はデビッドで、ここアップルのドキュメンテーションツールチームのエンジニアです。

このセッションでは、DocCドキュメントのホスティングとドキュメントビルドの自動化について学びます。

まず、Xcodeでのドキュメントの構築と、構築されたドキュメントアーカイブをサーバーでホストする方法について説明します。

次に、ドキュメントの構築方法と、ドキュメントの構築を自動化する方法について詳しく説明します。

この講演を通して、同僚と私が取り組んできたプロジェクトであるSlothCreatorを紹介します。

私たちは、人々が始めるのを助けるためにウェブサイトを作りました。

そして今、Xcodeの新しいドキュメント機能を使用して、ウェブサイトでホストできるドキュメントのバージョンを構築することに本当に興奮しています。

これにより、人々がさらに簡単に始めることができます。

それでは、それをどのように達成できるかを見てみましょう。

Xcode 13の新しいドキュメント機能により、Swiftフレームワーク、ライブラリ、パッケージのドキュメントを簡単に作成できます。

セットアップなしですぐに使用を開始し、時間の経過とともに追加の資料を使用してドキュメントを拡張できます。

また、開発者ドキュメントウィンドウからドキュメントをエクスポートするのと同じくらい簡単です。

エクスポートされたドキュメントアーカイブを他の人と共有して、Xcodeでドキュメントをインポートして読み取ることも、ドキュメントアーカイブをオンラインでホストすることもできます。

Xcodeのドキュメントとシンボルのドキュメントの作成についてもっと知りたい場合は、同僚のVictoriaとEthanが「Meet DocC documentation in Xcode」セッションでそれについて話します。

このプレゼンテーションの後半では、コマンドラインでのドキュメントの構築を自動化する方法について説明します。

しかし、今のところ、Xcodeからエクスポートしたドキュメントアーカイブを使用して、サーバー上でホストします。

ドキュメントアーカイブ自体は、Xcodeでドキュメントを読み、オンラインでホストするためのすべてのデータを保持するコンテナです。

これは、参照ドキュメントと記事、および豊富でインタラクティブなチュートリアルの両方をレンダリングするために使用される単一ページのVue.js Webアプリとして構成されています。

ドキュメントアーカイブをホストするためにサーバーが処理する必要がある要求には2つの異なるタイプがあります。

リクエストURLが/documentation/または/tutorials/で始まるドキュメントとチュートリアルページのリクエスト、およびリクエストURLがドキュメントアーカイブ内のファイルの1つの相対ファイルパスと一致するWebアプリによってロードされる追加のファイルとデータのリクエスト。

ページを構成するリクエストの例と、サーバーがそれらにどのように応答すべきかを見てみましょう。

開発者がホストされているドキュメントを読みに行き、ブラウザがページを要求すると、リクエストが/documentation/または/tutorials/で始まる場合、サーバーはドキュメントアーカイブにあるindex.htmlファイルで応答する必要があります。

そのファイルは、ブラウザがウェブアプリの残りの部分を読み込むように要求するドキュメントアーカイブ内のCSSとJavaScriptを参照しています。

それが読み込まれると、ウェブアプリはそのページのコンテンツと、参照する画像やその他のメディアを要求します。

index.htmlファイルによって参照されるファイルと、ウェブアプリによってロードされるコンテンツとメディアの両方が、ドキュメントアーカイブのフォルダ構造に一致するリクエストURLを使用します。

ホスティングサーバーが着信要求にどのように応答する必要があるかを見たので、デモでそれを見てみましょう。

あなたの多くは、すでにあなたのウェブサイトをホストするサーバーを持っているかもしれません。

私たちのプロジェクトでは、Apacheサーバーを使用していますが、カスタムルーティングを可能にする任意のサーバーを使用できます。

これは SlothCreatorに関する当社のウェブサイトです。

ページの中央にある入門テキストの下にこの「ドキュメントを読む」ボタンを追加しましたが、ボタンはまだ機能しません。

だから、それを直しましょう。

私はすでにドキュメントアーカイブをウェブサイトをホストしているディレクトリにコピーし、空の.htaccessファイルを追加しました。

しかし、私はその中にルーティングを設定していません。

追加する必要があるルーティングルールは2つあります。1つはドキュメントとチュートリアルページ用、もう1つは追加のファイルとデータ用です。

最初のルールでは、一致させたいパターンは、最初のパスコンポーネントとして「ドキュメント」または「チュートリアル」で始まるURLです。

このパターンに一致するリクエストは、ドキュメントアーカイブ内のindex.htmlファイルに再ルーティングしたいです。

最後に、リクエストがこのルールと一致する場合、ルールの評価を停止するフラグでルールを終了します。

2番目のルールでは、パターンについてもっと明確にします。

また、このサーバーでウェブサイトをホストしているため、ウェブサイトのリクエストをドキュメントアーカイブのファイルに再ルーティングしたくありません。

ドキュメントアーカイブの内部を見ると、パターンで一致できるトップレベルのファイルとフォルダがいくつかあることがわかります。

だから、それらすべてに一致するパターンを追加します。

この場合、リクエストURLはドキュメントアーカイブ内のファイルの1つの相対ファイルパスであるため、リクエストを一致したパターンに再ルーティングしますが、先頭に SlothCreator.doccarchiveを付けます。

そして、以前と同じように、ルールの評価を停止するために同じフラグを追加しました。

さて、ウェブページをリロードしてドキュメントリンクをクリックすると、サーバーが当社のウェブサイトとドキュメントの両方をホストしていることがわかります。

メインの SlothCreatorページでは、重要なシンボルを上位レベルのタスクに関連するトピックにグループ化します。

そして、これらのグループのそれぞれは、より具体的なトピックに関連付けられています。

DocCには、さまざまなプロジェクトにうまく適合するように作られた、クリーンなデザインが組み込まれています。

これにより、ここでの SlothCreatorのドキュメントのように、プロジェクトのための見栄えの良いエレガントなドキュメントを本当に簡単に作成できます。

ウェブサイトでドキュメントのコピーをホストしたので、ドキュメントアーカイブの構築と更新を自動化する方法を見てみましょう。

これを行うには、xcodebuildを呼び出すスクリプトを書くつもりです。

これを行うスクリプトを入手したら、新しい変更が行われるたびに実行できるため、ホストされたドキュメントが常に最新になります。

Xcode 13の新機能では、xcodebuildの新しいdocbuildアクションを使用して、コマンドラインでドキュメントを構築できます。

Xcodeまたはxcodebuildでドキュメントをビルドすると、ドキュメントもビルドする標準ビルドのように機能します。

ビルド中、Swiftコンパイラは、すべてのパブリックシンボル、その関係、およびインソースドキュメントコメントに関する詳細情報を収集し、これをシンボルグラフと呼ばれるファイルとしてドキュメントコンパイラに渡して、Xcodeでドキュメントを読み、オンラインでホストするために必要なすべてのデータを含むドキュメントアーカイブを作成します。

ターゲットがプロジェクトの追加記事、メディア、またはチュートリアルを含む関連するドキュメントカタログを持っている場合、ドキュメントコンパイラは、ドキュメントアーカイブを生成するときに、そのすべてのコンテンツをシンボル情報と組み合わせます。

ドキュメントカタログについて詳しく知りたい場合は、「XcodeでDocCドキュメントを昇格する」セッションでは、同僚のBeaとJackがさまざまな種類のドキュメントと、それぞれを活用して開発者にプロジェクトについて学ぶための素晴らしい方法を提供する方法について話します。

建物のドキュメントは、ターゲットに適用されるだけではありません。

ターゲットに他のSwiftフレームワーク、ライブラリ、またはパッケージへの依存関係がある場合、同じプロセスがそれらすべてにも適用され、プロジェクトに関連するすべてのドキュメントを1か所で取得できます。

スクリプトを使用してホストされているドキュメントの構築と更新を自動化しようとしているので、コマンドライン上のxcodebuildはそれに最適です。

Xcodebuildの新しいdocbuildアクションは、デフォルトのビルドアクションと同じように機能しますが、ドキュメントもビルドします。

ビルドアクションと同様に、構築したいスキームと、その一部であるプロジェクトまたはワークスペースを渡します。

また、プロジェクト、ワークスペース、またはSwiftパッケージを含むディレクトリ内からxcodebuildを呼び出すことができ、スキームのみを渡すことができます。

プロジェクトとスキームによっては、sdk、宛先、構成などの他のフラグを渡して、プロジェクトの構築方法をカスタマイズできる場合があります。

そうする必要はありません。そうする必要はありません。

しかし、より簡単にフォローできるように、ビルド製品とビルドドキュメントが書き込まれるカスタムd derivedDataPathを指定します。

ビルドが完了したら、.doccarchiveファイル拡張子を使用して構築されたドキュメントアーカイブをすべて見つけ、それぞれを別の場所または別のマシンにコピーできます。

デモでそれを見てみましょう。 

これは以前からホストしていたドキュメントです。

関連するシンボルをトピックにグループ化して、開発者が特定のタスクのコアタイプを簡単に見つけられるようにします。

このバージョンを構築して以来、私の同僚はエッセンシャルセクションに表示されるいくつかの新しい記事やチュートリアルを追加しました。

だから今は、最新のドキュメントを構築し、私たちのウェブサイトを更新する自動化スクリプトを書くのに最適な時期です。

先ほど見たように、xcodebuildのdocbuildアクションを呼び出してドキュメントを作成し、ドキュメントアーカイブを見つけてウェブサイトをホストしているディレクトリにコピーしてウェブサイトを更新します。

Xcodeのスキームセレクタで見るのと同じなので、どのスキームを渡す必要があるかはすでにわかっています。

Xcodeをまだ開いていない場合は、コマンドラインでxcodebuild -listを実行して、利用可能なすべてのスキームを一覧表示することもできます。

繰り返しますが、カスタムdededDataPathは必要ありませんが、構築されたドキュメントが書かれ、見つかった場所に従うことが容易になります。

ビルドが完了したら、すべてのドキュメントアーカイブを見つけて、それぞれをウェブサイトをホストしているディレクトリにコピーできます。

そして、それが終わったら、私はスクリプトを実行する準備ができています。

さて、更新すると、エッセンシャルセクションで追加された記事とチュートリアルを見ることができます。

これらの最新の変更により、私たちのドキュメントはより完全に見えます。

そして、 SlothCreatorを初めて行う人は、記事の内容やチュートリアルの1つでステップバイステップの指示を好むかどうかにかかわらず、始めるのに最適な場所を持っています。

これで、ホストされているドキュメントの更新は、スクリプトを実行するのと同じくらい簡単です。

また、継続的インテグレーションサーバー上のマージ後のフックの一部として実行すると、ホストされているドキュメントを常に最新の状態に保つことができます。

このセッションで話したことを要約すると、ドキュメントアーカイブを共有したり、オンラインでホストしたりして、Xcodeで使い始める前から、フレームワークの消費者に素晴らしいドキュメント体験を提供することができます。

また、コマンドラインでドキュメントを構築すると、自動化ワークフローにドキュメントを含めることができます。

DocCドキュメントについてもっと知りたい場合は、「XcodeでDocCドキュメントに会う」は、Xcodeの新しいドキュメント機能の素晴らしい紹介です。

「XcodeでDocCドキュメントを昇格する」は、DocCカタログでドキュメントを強化する方法について深く掘り下げています。

そして、「DocCを使用してインタラクティブなチュートリアルを構築する」は、アイデアを構造化し、プロジェクトのための素晴らしいチュートリアルを作成する方法を詳述しています。

ご覧いただきありがとうございます。

[音楽]。