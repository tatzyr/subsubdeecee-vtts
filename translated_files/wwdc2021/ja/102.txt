102

組合のWWDC2021プラットフォームの状態へようこそ。

WWDCは、私たちが開発者コミュニティとして集まり、近い将来が私たちのプラットフォームに何をもたらすかを見る時です。

また、あなたがした仕事が私たち全員がこの1年を乗り切るのにどのように役立ったかについて少し考えたいと思います。

あなたのアプリとあなたの創造性は、人々が異常な状況下で物事を動かし続ける新しい方法を見つけることを可能にしました。

開発者が違いを生み出す素晴らしい例はたくさんあり、あなたが世界をより良くするためにできることはもっとたくさんあることを知っています。

そのため、今年は、より多くのことを達成できるように設計されたツール、テクノロジー、APIを提供しています。

そして今日は、それを実現する3つの大きな分野について話します。

まず、XcodeとXcode Cloud、Swift、UIフレームワークなど、優れたアプリを構築するのに役立つものについて説明します。

次に、Appleのテクノロジーが、ユーザーが新しい方法で世界を見るための拡張現実とグラフィックス技術を可能にするアプリの構築にどのように役立つかを見ていきます。

最後に、フォーカス、スクリーンタイムAPI、ウィジェット、シェアプレイなどの新機能により、あなたが構築したアプリが、ユーザーが互いによりよくつながり、最も重要なことに優先順位を付けるのに役立つ方法を見ていきます。

アプリの開発から始めましょう。

さらに詳しくお伝えします。アリソン、ロンダ、アンドリューです。

今日のアプリの開発はかなり洗練されたプロセスであり、集中力と効果を維持するためにツールに依存しています。

プロセスの最も重要な部分はコーディングですが、今日質の高いアプリを構築するには、多くの専門的なステップとツールが必要です。

さまざまな構成でコードをテストする必要があります。

チームはコードをレビューし、変更を共有リポジトリに統合します。

あなたはベータテスターに配信します。

そして、彼らのフィードバックに基づいて、あなたは常にあなたのアプリを洗練させます。

これらのステップはすべて重要であり、それらをすべて正しく行うことが重要です。

すべてを成し遂げるには、さまざまなアプリ、ウェブサイト、サービス間を移動しなければならないことがよくあります。

このすべてのコンテキスト切り替えは、あなたの焦点を乱し、あなたのコードからあなたを引き離します。

それについて何かをする時が来ました。摩擦を取り除き、すべてをまとめるので、あなたとあなたのチームは素晴らしい経験を生み出すことに集中することができます。

そのため、Xcode Cloudを作成しました。Xcodeに組み込まれ、クラウドでホストされている新しい継続的インテグレーションと配信サービスです。

開発プロセスのあらゆる段階を管理するのに役立ち、重要なことを簡単に正しく理解できます。

Xcode Cloudは、すべてのAppleプラットフォームの開発をサポートするためにゼロから設計および構築されました。

Xcodeに深く統合されており、1か所に集中することで時間を節約できます。

Appleのクラウドインフラストラクチャを活用して、ビルド、テスト、さらには配布用のコード署名をオフロードします。

Test FlightやApp Store ConnectなどのAppleサービス、およびすべての主要なgitベースのソース管理プロバイダーと統合されています。

開発プロセスの他の側面に接続するのに役立つREST APIもあります。

そして、それはあなたとあなたのプロジェクトを保護するために高度なセキュリティで構築されています。

これは、Xcodeの元のリリース以来、私たちが開発者ツールに行った最大の投資であり、そのすべてはあなたがすでに知っている経験の中にあります。

Xcode 13でXcode Cloudワークフローを作成および管理し、テストスイート、コード署名、およびTestFlight配布が処理されている間、コードにとどまることができます。

そして、Xcode Cloudがビルドを完了すると、結果はXcode内にあります。

これはあなたの働き方を変えるでしょう。

それはすでに私たちの働き方を変えています。

Appleの多くのチームは、Xcode自体の背後にあるチームを含め、Xcode Cloudを開発プロセスに組み込んでいます。

Xcode Cloudを使い始めるのは信じられないほど簡単です。

製品の選択、ワークフローの確認、ソースコードへのアクセスの許可、App Store Connectへのリンクの4つのステップしかかかりません。

SwiftUIのサンプルアプリであるFrutaでプロセスを進めましょう。

Xcode Cloudはプロジェクトの製品とプラットフォームを自動的に検出するので、「次へ」をクリックします。

次に、Xcode Cloudに何をすべきか、いつ行うべきかを伝える、提案されたワークフローを確認します。

デフォルトのアクションは、私が行うすべての変更をビルドし、それはまさに私が望むものです。

これで、Xcode Cloudは私のソースコードのホストアカウントに安全に接続します。

私はすでに資格情報を使用してアクセスを許可したので、先に進むことができます。

最後に、Xcode CloudはFrutaがApp Storeにすでに存在していることを認識し、情報を確認するように依頼します。

アプリがまだ登録されていない場合は、Xcode Cloudがあなたのためにそれを行います。

[完了] をクリックして、クラウドで最初のビルドを開始します。

ビルドが完了したら、レポートナビゲーターで結果を表示できるようになります。

そして、ちょうどそのように、私はXcode内から1分でアプリの継続的インテグレーションと配信を設定しました。

結果がどのように提示されるかを詳しく見てみましょう。

レポートナビゲーターの[クラウド]タブでは、各ワークフローで実行されたビルドがブランチまたはプルリクエストごとにグループ化されます。

個々のビルドを選択すると、いつどのように開始されたか、どのXcodeとmacOSのバージョンが使用されたか、すべてのアクションのステータスなどの情報を含む概要が表示されます。

ソースをチェックしたり、再構築を開始したりすることもできます。

デフォルトのワークフローは始めるのに最適ですが、Xcode Cloudは、アプリの分析やTest FlightやApp Storeへの新しいリリースのデプロイなどの目標を達成するためのさらに多くのパワーを提供します。

私のチームは、すべての新しいプルリクエストでiOSテストを実行したいので、今すぐそのワークフローを設定しましょう。

Xcode Cloudの製品メニューに戻り、今回は[ワークフローの管理]を選択し、[プラス]をクリックして新しいものを追加します。

ワークフローのプルリクエストに名前を付け、その開始条件を編集して、メインブランチをターゲットとするすべてのプルリクエストで実行します。

テストをXcodeとmacOSのパブリックベータ版で実行したいので、ここで設定します。

次に、ワークフローのアクションを見て、テストアクションを追加し、プロジェクトから既存のiOSテストプランを選択します。

私のアプリの幅広いテストカバレッジを得るために、Xcode Cloudは私が使用するシミュレータを推奨しています。

わずか2回のクリックで、ワークフロー用にキュレーションされたiPhoneとiPadのセットが手に入る。

今、それはかなりきちんとしています。

また、私たちのチームは、ビルドが成功または失敗したときに通知を受ける必要があります。

そこで、通知投稿アクションを追加し、チームのSlackチャンネルを追加します。

[保存]をクリックすると、Xcode Cloudの製品にワークフローが追加されました。

今、私のチームは、私たちが行っている変更に自信を持てるようになるでしょう。

カスタムビルドスクリプトの実行や、Xcode CloudのWebフックとAPIを使用して、あなたとあなたのチームが依存している他のシステムと統合するなど、ワークフローでできることはたくさんあります。

また、Xcodeで見たワークフロー管理とビルドレポートは、ウェブ上のApp Store Connectでも入手できます。

これにより、あなたやチームの他のメンバーがどこからでもXcode Cloudを簡単に使用できます。

Xcode Cloudでの作業の基本を見たので、開発サイクルの各特定の分野でどのように役立つかを見てみましょう。

優れたテストを書いて繰り返し実行することは、質の高いアプリケーションを作成するために不可欠です。

Xcode Cloudを使用すると、コードをより徹底的に、より一貫して、より効率的にテストできます。

Xcode Cloudワークフローを設定して、複数のプラットフォーム、デバイスシミュレータ、OSバージョンで複数のテストプランを並行して実行できます。

ベータ版を自分のマシンにダウンロードする前に、ベータOSリリースでXcode Cloudでテストを実行することもできます。

したがって、Xcode Cloudはより多くのテストに役立ち、Xcode 13はより良いテストに役立ちます。

私たちのアプリFrutaは、ライトとダークの外観、ポートレートとランドスケープの向きをサポートし、2つの言語にローカライズします。

私はFrutaの最も人気のある機能を実行する一連のユーザーエクスペリエンステストに取り組んできました。

私のテストコードでは、このシンプルなXCテストAPIを採用して、各バリエーションで各テストを自動的に実行することで、これらのテストをさらに進めます。

最新のビルドと設定したワークフローテストアクションを選択して、Xcode Cloudでのテストカバレッジを見てみましょう。

結果は、おなじみのXcodeテストレポートに表示されます。

これらのテストは、設定ごとに1回、iOS 15を実行している推奨されるiPadシミュレータのセットで実行され、途中でスクリーンショットをキャプチャしました。

Xcode 13には、これらの結果を確認する素晴らしい新しい方法があります。

エディタオプションメニューから、新しいギャラリービューを有効にします。

私のテストのスクリーンショットは、すべてのバリエーションに表示され、各テストの画像が一緒に表示されます。

さらにズームアウトしてすべての画像を見ることができ、本当に興味のある画像を見つけたら、クイックルックを使ってフル解像度で見ることができます。

ギャラリービューでは、アプリがすべての条件、言語、レイアウトで幻想的に見えることを簡単に確認できます。

私の単体テストでは、あなたが関係すると確信しているテストの失敗があります。

テストが合格する時もあれば、失敗する時もある。

私たちは皆、以前にここに来たことがあります。

そして、Xcode 13がお手伝いします。

テストソースに移動し、テストジェムをクリックし、「テストを繰り返し実行」を選択します。

100回実行することで、信頼性の感覚を良くしましょう。

以前にこれをやりたいと思ったら、自分で何度も何度もテストを実行しなければならないだろう。

今、ツールがすべての作業を行うので、私は後ろに座ることができます。

私が疑ったように、Xcodeはこのテストが非常に信頼性が低いことを示しています。

私のコードに問題があるに違いない。

しかし、私がそれを修正できるまで、私は新しいExpected Fail APIを採用し、私のチームの残りの部分が見るために信頼性についてのメッセージを含めます。

物事が期待通りであることを確認するために、製品メニューから入手可能なTest Again機能を利用します。

Xcodeは前回何をしたかを覚えているので、本当に簡単です。

私のテストはまだ主張を上げていますが、もう失敗していません。

そして、私は道に沿ってそれを修正するための穏やかなリマインダーを持っています。

それはまさに私が必要としているものです。

ご覧のとおり、Xcode 13とXcode Cloudは、アプリやテストの問題をより迅速に見つけて対処するのに役立ちます。

テストは、コードに関する洞察の一形態です。

もう1つは、コードレビューとプルリクエストを通じて、同僚からの入力です。

コードに集中するために、Xcode 13はチームとのこれらの議論をエディタに直接もたらします。

私が取り組んでいる機能ブランチからプルリクエストを作成しました。

私の機能により、ユーザーは最もおいしいスムージーをお気に入りにすることができます。

左側のナビゲーターでは、新しいソースコントロールの変更タブを見ることができます。

ローカルで変更したすべてのファイル、プルリクエスト、および含まれている変更が表示されます。

プルリクエストを選択すると、すべてのアクティビティと会話の完全な概要がわかります。

そして、スクロールすると、私の説明と興味深いイベントと時間、そして私のチームからのコードフィードバックと私が作った新しいコミットが表示されます。

しかし、私たちはXcode Cloudを使用しており、プルリクエストワークフローは、私が行うすべてのコミットを構築し、テストしています。

上部では、すべてのワークフローからライブステータスを取得します。

ロンダは、私のコードをさらに良くするためにいくつかの提案をしています。

ソースコードに移動すると、エディタにロンダからのコメントが表示されます。

このコードでは、ユーザーがログインする必要があります。

そのため、レシピをお気に入りにする前にサインインできるように作り直す必要があります。

私が変更に取り組んでいることをロンダに知らせるために返信し、また彼女に警告します。彼女が最初にサインインしない場合、これはビルドでクラッシュする可能性があります。

プルリクエストを超えて、Xcode 13はローカルの変更のレビューも本当に簡単にします。

作業中のファイルに移動すると、Xcodeはこの美しい新しいインラインプレゼンテーションで、最新のリビジョンに対する変更の差分を自動的に表示します。

更新されたリビジョンセレクタを使用して、ローカルの変更を履歴のブランチやタグと比較することができます。

何よりも、ウィンドウ内の異なるファイルに分割された複数のエディタを使用している場合でも、どのエディタでもコードレビューを使用できます。

そして今、インライン比較とサイドバイサイドの2つのオプションで、私は私が取り組んでいることに最適なプレゼンテーションを選ぶことができます。

最後のコード変更とコメントで、私のチームからの洞察を確認して応答するのは簡単ではありません。

素晴らしい体験を提供することの一部は、アプリをチームとベータテスターの手に渡すことです。

Xcode Cloudは、そのプロセスを楽にします。

Xcode 13は現在、クラウドを使用して、アプリのコード署名に必要なものすべてを安全に取得し、管理しています。

これは、Macで証明書やプロファイルを最新の状態に保つことを心配する必要がなくなったことを意味します。

Xcode Cloudワークフローのアーカイブアクションは、同じシステムを使用して、配布のためにアプリに署名します。

また、Xcode Cloudワークフローにポストアクションを追加することで、新しいTest Flight for Macを搭載したmacOSを含むすべてのAppleプラットフォームにTest Flightを通じてベータ版が自動的に配信されます。

最新のビルドを配信すると、ベータテスターからさらに多くの洞察を得ることができます。

Xcode 13には、App Store Connectで見つかったのと同じ診断とフィードバックによりよく接続するための大幅な改善が含まれています。

テストフライトアプリからのクラッシュログは、数分以内にオーガナイザーに直接配信されるようになりました。

そして、オーガナイザーは、ユーザーがクラッシュレポートに添付した書面によるフィードバックを表示するようになりました。

これにより、クラッシュを分析する際の貴重なコンテキストと、アプリの使用状況に関するより広い視野が得られます。

アンドリューのテストに合格した後、Xcode CloudはビルドをTest Flightに直接提出した。

Frutaの新しいiOSビルドの通知を携帯電話で受け取ったばかりで、Test Flight for MacのMacバージョンがあります。

Frutaはマルチプラットフォームプロジェクトなので、私は両方の場所で同時にこの新しいビルドを取得しています。

このビルドをインストールして、新機能がどのように感じるかを見ることに本当に興奮しています。

だから、今からやります。

まだいくつかの粗いエッジがあると思います。

このスムージーをお気に入りにしようとすると、アプリがクラッシュするかもしれません。

そして、確かに、それはそうです。

テストフライトのクラッシュフィードバックUIを使用して、アンドリューに知らせることができます。

アプリがクラッシュしたときに私が何をしていたかを説明します、そして彼は問題を修正し、これが次回早くキャッチされることを確認するためにテストを追加することができます。

私はオーガナイザーで最新のアプリリリースを見てきました。最終日までフィルタリングすると、ロンダがほんの少し前に経験したクラッシュがあり、完全に象徴化され、調査の準備ができています。

新しいテストフライトフィードバックインスペクタには、彼女のコメント、アプリのビルド、バージョン、および彼女のデバイスに関する情報が含まれています。

そして、私は彼女の経験についてもっと学ぶために彼女に連絡することさえできます。

さらに良いことに、Xcodeは私のコードの中でこのクラッシュがどこから来たのかを知っています。

だから、ワンクリックで、私のプロジェクトでそれを開くことができます。

デバッグナビゲーターには完全なバックトレースがあります。

私のソースエディタはアサーションを強調表示し、プルリクエストの会話も表示されます。

Xcodeでこの問題を解決するために必要なものを持っているのは信じられないほどエキサイティングです。

テスト結果、同僚からのコメント、ユーザーのフィードバックなど、毎日使用するツールに必要なものをすべて持ち込み、より大きな洞察を提供し、アプリの次の素晴らしいバージョンを提供するのに役立ちます。

Xcode Cloudは、お客様のプライバシーとセキュリティを念頭に置いて構築されました。

ソース、アクセストークン、サインインキー、ビルドアーティファクトなどのデータは安全に処理されます。

そして、サービスを実行するために可能な限り最小限のデータを使用します。

これは私たちの開発者ツールにとって大きな年です。

Xcode 13とXcode Cloudを使用すると、これまで以上に少ない時間と労力で、Appleのすべてのプラットフォームで高品質のアプリを構築し、配信できます。

Xcode Cloudは当初、無料の限定ベータ版として利用可能になります。

開発者プログラムのアカウント所有者は、developer.apple.comで今すぐサインアップできます。

来年、すべての開発者がこれを利用できるようにするために、徐々にチームを追加します。

この秋、価格と在庫状況の詳細を提供します。

登録状況は、App Store ConnectのXcode 13またはXcode Cloudタブから確認できます。

ここで見たすべてのものに加えて、XcodeでのSwiftサポートの素晴らしい機能強化など、今年のセッションで学ぶことができる開発者ツールの改善点と機能の膨大なリストがあります。

それは今年のスウィフトのエキサイティングな物語の始まりにすぎません。

もっと詳しく言うと、ここにジョシュ、ホリー、マットがいます。

Swiftは、Appleのプラットフォームおよびそれ以降の開発者にとって重要な言語となっています。

SwiftUI、CreateML、新しいStoreKit 2などの新世代のフレームワークの基盤として、最新のテクノロジーが有効になっています。

Xcode PreviewsやSwift Package Managerなどの強力なツールを使用して、最も複雑なアプリを作成し、開発を加速するためのモダンでタイプセーフな言語を提供します。

また、新規参入者にとってフレンドリーで親しみやすく、コーディング方法を学ぶためにSwift Playgroundsで利用可能な魅力的なコンテンツとレッスンがあります。

さて、技術があなたにとって素晴らしいものであることを保証するための重要な部分は、それを自分たちで採用することです。

音楽のような知名度の高いアプリは何年も前からSwiftで書かれており、ウィジェットのようなシステム全体の機能はSwiftUIでゼロから設計されています。

SwiftとSwiftUIを学ぶと、すべてのプラットフォーム用の完全ネイティブアプリを構築するための共通で強力なツールとAPIのセットが提供されます。

また、Swift自体はオープンソースであるため、過去数年間で多くの新しい機能を提供するために、多くのお客様と協力することができました。

さて、アプリを構築する上で重要な機能の1つは、並行性のサポートです。

そして、ここにホリーがそれについてすべて話します。

あなたがそれについて考えるかどうかにかかわらず、あなたは今日並行コードを書いています。

並行性により、アプリは同時に複数のタスクを実行できます。これにより、ユーザーが都市を選択している間に天気予報データを取得する気象アプリのように、バックグラウンドで作業しながら、アプリがユーザーの入力に応答し続けることができます。

また、マルチコアプロセッサを活用して、ビデオアプリで複雑な視覚効果をレンダリングするなど、重い計算で高いパフォーマンスを実現することが不可欠です。

しかし、言語サポートがなければ、並行コードを書くのは本当に難しいです。

そのため、Swiftに並行性に対するファーストクラスのサポートを提供しています。

言語に並行性を構築するための私たちのアプローチは、Swift自体と同じコア原則に従っており、プログラミングミスのクラス全体を排除する、モダンで安全で高速なコードを書くことが容易になります。

まず、Swiftに並行性を構築するための現代的なアプローチをどのように採用したかについて話しましょう。

今日、私たちは現代のコードは構造化され、あなたがやりたいことを簡単に表現できると考えています。

残念ながら、今日の非同期コードのほとんどは、構造化されておらず表現しにくい補完ハンドラを使用しています。

非同期関数の表現を容易にするために、最新の非同期/待機パターンをSwiftに組み込みました。

これで、非同期キーワードで非同期関数をマークできます。

関数が呼び出されると、awaitキーワードを使用して、呼び出し元の非同期関数の結果を待っている間に他の作業が実行できることを示します。

Async/awaitが補完ハンドラにもたらす改善を理解するために、例を見てみましょう。

スウィフトコンパイラに取り組んでいないときは、踊るのが好きです。

ショーの準備をするために、ダンスカンパニーは最初にウォームアップしなければならず、乗組員は倉庫から風景と小道具を取り、その後、ステージが設定されます。

それがすべて完了すると、ダンサーはオープニングポジションに移動できます。

これは、完了ハンドラを使用する「prepareForShow」の非同期実装です。

このコードが達成しようとしていることは本当に簡単ですが、コードは複雑です。

実行の流れを不自然にするネストされた完了ハンドラを使用するため、コードは本当に読みにくいです。

この例でasync/awaitを採用すると、直線になったコードが残ります。

このコードはとても理解しやすいです。

コントロールフローは、他の機能と同様に、上から下へ行きます。

Swiftで慣れているのと同じ方法でエラーを処理し、値を返します。

通常の制御フロー構造もすべて使用できます。

したがって、条件付きロジックを簡単に追加できるため、リハーサル中に関数の動作が異なります。

Async/awaitは、すでに知っているツールを活用することで、非同期コードの作成を容易にします。

また、構造化並行性を使用して、必要な場所に並行性を導入する方が簡単です。

構造化並行性は、並行タスクを整理して推論しやすくする方法です。

prepareForShowに並行性を導入しましょう。

現在、この機能は、ダンサーがウォームアップを終えるまで待ってから景色をフェッチし始めますが、これらのタスクは並行して行うことができます。

構造化並行性を使用すると、このようなローカル変数を使用してasync/awaitを使用して、同時子タスクを簡単に作成できます。

現在、コードは「async let」変数を使用して、親と同時に実行される子タスクを作成します。

したがって、会社のウォームアップと景色の取得は、prepareForShowの残りの部分と同時に実行されます。

これらの子タスクの結果が必要なときは、結果を待ちます。

fetchStageSceneryは同時に実行されるため、prepareForShowを使用する必要があるときに結果がまだ準備ができていない可能性があるため、結果へのアクセスは非同期に行う必要があります。

スウィフトの並行性モデルも安全であるように設計されています。

Swiftがオプションでヌルポインタの間違いを排除するように、コンパイラは、共有状態へのアクセスが並行タスク間で安全に調整されるようにすることで、一般的な並行性の問題を排除するのに役立ちます。

この安全な並行性モデルの中核部分は、アクターを中心に構築されています。

アクターは、安全な同時プログラミングのための業界で実績のあるモデルであり、強力な同期プリミティブです。

概念的には、アクターは、相互に排他的なアクセスのみを提供することによって、独自の状態を保護するオブジェクトです。

これにより、同時アクセスとそれに付いている低レベルのデータレースが完全に排除されます。

この概念は、俳優に触発されたディスパッチキューを持つクラスにすでに使用している可能性のあるパターンに似ているため、聞き覚えがあるかもしれません。

このパターンでは、クラス内のインスタンスプロパティは、相互排除を維持するためにシリアルディスパッチキューを使用して慎重にアクセスされます。

しかし、このパターンは間違いを犯しがちです。

定型文が多く、キューを一度だけ手動で使用して、コードに競合状態を導入するのを忘れるのは簡単すぎます。

これらの問題を解決するために、私たちは俳優のコアアイデアに戻り、それを一流の構造としてSwiftに組み込みました。

これで、簡単なキーワードでSwiftでアクタータイプを宣言できます。

それはあなたがすでに知っている構造と同じ構造を持ち、手動同期の必要はありません。

アクターがSwift言語に組み込まれているため、アクター状態への同期アクセスを自動的に管理できます。

アクターは独自のプロパティに直接アクセスすることができ、外部的にアクターと対話すると、相互排除を保証するためにasync/awaitを使用します。

アクターの概念は非常に強力であるため、UI操作などのためのメインスレッドの適切な使用である並行性問題の別の一般的な原因も解決します。

今日では、メインスレッドで実行する必要があるAPIを呼び出すたびに、メインキューに手動でディスパッチする必要があります。

次に、APIが常にメインアクターを使用してメインスレッドで実行されていることを述べる方法を紹介します。

APIが常にメインアクターで実行されていることを確認することは、MainActor属性で宣言に注釈を付けるのと同じくらい簡単です。

他の俳優と同じように、主役で実行される関数を呼び出すのはただ待つだけです。

全体として、これは、自分で管理する必要がない安全な同時コードを書く方が簡単であることを意味します。

並行性のサポートを言語に直接構築することで、並行コードのパフォーマンスをより良く最適化する機会が得られます。

Async/awaitを使用すると、コンパイラはコードの並行性を理解し、より効果的な最適化を可能にします。

これには、参照数の削減とインライン化、過剰なコンテキストスイッチなどの並行性固有のパフォーマンス問題への対処が含まれます。

そしてもちろん、コンパイラが今後数年間で賢くなるにつれて、同時コードはさらに速くなります。

SDKには、すでにアプリで使用している非同期APIがたくさんあります。

これらの非同期APIでasync/awaitを有効にするようにSDKを改良したので、既存のコードでasync/awaitをすぐに採用できます。

そして、私たちはそこで止まりませんでした。

URLで作業するとき、非同期I/Oを行うときにasync/awaitを利用する新しい意図的に作成されたAPIを追加し、ファイルを非同期に行ごとに反復するサポートも追加しました。

Async/awaitは非同期コードを自然に表現し、構造化された並行性は並行コードを推論しやすくし、アクターは並行プログラムで共有状態を安全にモデル化するのに役立ちます。

Swiftの並行性モデルは、これらの基本的な部分をまとめて、より効率的にし、より多くのパワーを与え、並行アプリの構築をより楽しくできるようにします。

もちろん、言語はパズルの1つのピースにすぎません。

Swiftで構築されたフレームワークも同様に重要です。

さて、ジョシュに戻ります。

Swiftは次世代のAPIの基盤です。

並行性などの新機能により、言語とフレームワークを一緒に進化させているので、SwiftUIのような主要な技術を含め、SDK全体にすぐにメリットがあります。

2年前、私たちはプラットフォームでUI開発を再発明し始めました。

私たちは、既存のアプリケーションでSwiftUIを段階的に採用できるコアAPIで、小規模から始めました。

昨年、アプリのライフサイクルを説明するAPIを追加し、コードの最初の行からSwiftUIで完全にアプリを開発できるようにしました。

そして今年、SwiftUIはさらに大きな一歩を踏み出し、すべてのAppleプラットフォームですべてのユーザーに素晴らしい体験を提供するのに役立ちます。

私たちは、私たちのアプリを構築するためにも必要だったので、あなたのアプリにとって重要であるとわかっているAPIに焦点を当てました。

そして、あなたのフィードバックは、開発経験を向上させながら、最も重要なAPIを強化するのに役立ちました。

今年は、マップ、写真、ショートカットなどのアプリでSwiftUIを使い始めました。

そして、WeatherのようなiOSアプリ、Apple Pay支払いシートのようなシステムインターフェース、Find Myのような新しいwatchOSアプリを完全にSwiftUIで再構築しました。

これを可能にする機能強化をいくつか見るために、Frutaを改善できるいくつかの方法を見てみましょう。

私たちは、すべてのプラットフォームで最もユビキタスなコンポーネントであるリストから始めます。

スムージーをお気に入りとしてマークするスワイプアクションを簡単に追加できるようになりました。

Pull-to-refreshを追加すると、もう1行です。

そして、Swiftは、修飾子を単一のプラットフォーム、この場合はiOSに簡単に制限するようになりました。

検索フィールドの追加は、もう1行だけです。

さて、私たちはそこで止まることができますが、入力中に表示される検索候補も追加しましょう。

そして、ここでXcodeでそれをテストしましょう。

わずか数行のコードで、スワイプアクション、プルツーリフレッシュ、提案を含む完全な検索サポートがあります。

次に、Frutaのアクセシビリティサポートを洗練させましょう。

まず、アクセシビリティローターを追加する新しい修飾子により、VoiceOverでアプリをより速くナビゲートできます。

そして第二に、このカスタムステッピングコントロールのアクセシビリティを向上させます。

カスタムコントロールはしばしば貧弱なアクセシビリティの原因ですが、標準のステッパーから完全なアクセシビリティ実装を継承できるようになりました。

ほとんどのSwiftUI APIはすべてのプラットフォームで利用できますが、必要に応じてプラットフォームを個別に前進させています。

macOSアプリに複数列のテーブルを追加しましょう。

私はすでにこのために新しいファイルを追加したので、ここに新しいテーブルコンポーネントを追加します。

そして、その中に3つの列のデータを追加するだけです。

では、私たちのアプリのmacOSバージョンを実行しましょう。

検索フィールドはツールバーの表示場所に配置され、入力中にそのすぐ下に提案が表示されます。

追加した新しい複数列のテーブルに切り替えると、検索結果も表示されることがわかります。

そしてもちろん、私たちはそれらすべてを取り戻すために検索をクリアすることができます。

では、レシピに切り替えてVoiceOverをオンにしましょう。

VoiceOverを使用すると、追加したローターに簡単にアクセスして、リストからスムージーをすばやく選択できます。

また、カスタムステッパーとのVoiceOverインタラクションは、標準ステッパーとまったく同じように動作し、すべてのユーザーが簡単に使用できるようになりました。

私たちはこれらの新機能を使用してアプリを構築しているので、あなたの機能にも役立つことを知っています。

そして、私たちは新しいものの表面を傷つけました。

例えば、あなたはSwiftUIの新しいマテリアルサポートを気に入るはずです。

Frutaアプリでは、このようなビューは背景画像を追加することでより面白くなり、コンテンツの背後にある新しい素材スタイルの1つを適用することで読みやすく保たれます。

コンテンツはこの背景に動的に反応するため、不透明なコンテキストでセカンダリコンテンツに通常使用されるグレーの代わりに、SwiftUIはテキスト、シンボル、さらにはセパレータのような標準UIに自動的に鮮やかなレンダリングを適用します。

したがって、1行のコードで、このような見栄えの良い結果を自動的に得ることができます。

そして、もっとたくさんあります。

これらすべての改善により、SwiftUIは、すべてのプラットフォームですべてのユーザーにとって素晴らしい体験を構築するための最良の方法です。

そして今年は、SwiftUIを使ったアプリ開発をSwift PlaygroundsのiPadにもたらします。

それはとても楽しいです、そしてマットはそれがどのように機能するかについてあなたにすべてを見せます。

Swift Playgroundsは、コーディング方法を学ぶための素晴らしい方法を提供し、Swiftの知識を広げるために何百万人もの人々によって使用されています。

そして、学ぶための素晴らしい方法であるだけでなく、多くの人がすでにSwift Playgroundsを使って実験し、新しいアイデアをスケッチし、iPadOS SDKの最新機能で遊んでいることを知っています。

今年、Swift Playgrounds 4は、アプリを構築し、iPadから直接App Storeに提出できるようにすることで、大きな一歩を踏み出しています。

iPadでアプリを作成する機能により、Swift Playgroundsではこれまで以上に生産性が高くなり、どこにいても、どのデバイスでもアイデアに取り組むことができます。

また、新しいパッケージベースのプロジェクト形式により、Swift PlaygroundsとXcodeの間でシームレスに作業を持ち込むことができます。

飛び込んで見てみましょう。 

これはスウィフトプレイグラウンド4です。

世界中の新しい開発者を鼓舞するのに役立つ素晴らしいLearn to Codeコンテンツがすべてあり、今ではSwiftUIアプリを構築できるプロジェクトを作成できます。

今すぐ新しいものを作って、何を構築できるか見てみましょう。

作成した新しいプロジェクトを開きます。

Swift Playgroundsのアプリプロジェクトでは、私のコードは左側にあり、私の作業の結果は私が慣れているように右側にあります。

新機能は、Xcodeで使用されているのと同じ技術を搭載したライブインタラクティブプレビューを備えた、SwiftUIの深く統合されたサポートです。

私の新しいプロジェクトテンプレートにはHello Worldプレースホルダが付属しており、自分のテキストビューに簡単に置き換えることができます。

テキストの入力を開始し、すぐにコード補完から役立つ提案が得られます。このリリースでは、挿入ポイントのすぐ下に表示されます。

完了を受け入れて、自分の挨拶メッセージを書きます。

入力中、アプリがライブで更新され、キーストロークごとに変更が表示されます。

さあ、少し楽しみましょう。

この静的なテキストをボタンに置き換えます。

テキストビューを選択し、ライブラリからボタンを追加します。

ここライブラリでは、プロジェクトのアセットや、iPadOSが提供するSwiftUIビュー、修飾子、色、SFシンボルを閲覧して検索できます。

とりあえず、ボタンを追加するだけです。

簡単な印刷ステートメントでアクションを埋めます。

ボディには、システムイメージのラベルを使用します。

テキストは「こんにちは」になります。

そして、画像はスウィフトのSFシンボルになります。

今、私のアプリにインタラクティブなボタンがあります。

それをタップすると、私が書いた印刷メッセージが画面の下部にメッセージバブルとして表示されます。

コンソールを開くと、このプロジェクトを開いてから実行された印刷ステートメントの履歴が表示され、アプリとやり取りするとリアルタイムで更新されます。

さて、このボタンは紫色です。なぜなら、それは私がプロジェクトを作成したときにSwift Playgroundsが私のために選んだ私のアプリのアクセントカラーだからです。

ドキュメントサイドバーを開くと、名前、アクセントカラー、アイコンなど、アプリのすべてのトップレベルの設定にアクセスできます。

私は紫が大好きですが、このスマイリーフェイスはオレンジ色で大きくて明るく見えると思うので、ここでアクセントの色を変更し、アプリのアイコンと今作ったボタンの色合いの色の両方が変更を反映して更新されます。

これは本当に楽しかったですが、Swift Playgroundsは実験のためだけではありません。

私はしばらく取り組んできた別のアプリを持っています。 

私はこのアプリを使って、お気に入りの趣味に費やした時間を追跡し、他の人も役に立つかもしれないと思います。

フルスクリーンで撮影することで、インストールされたアプリがどのように見えるかを感じることができます。

これで、全幅の2列または3列のレイアウトでアプリを探索できます。

フルスクリーンから飛び出して、いつでも好きなときにコードに戻ることができます。

これは素晴らしい気分で、私のハードワークはTestFlightで友人や家族と共有する準備ができていると思います。

開発者アカウントを持っている人は誰でも、App Store Connectの準備ができたら、アプリ設定エリアからアプリをアップロードできます。

アップロードボタンをタップすると、Swift Playgroundsがアプリをビルド、パッケージ化、アップロードします。

その後、App Store Connectのウェブサイトにアクセスし、TestFlight経由でアプリを利用できるようにし、準備ができたらApp Storeに提出し、世界と共有することができます。

そして、それはあなたのiPadでSwiftUIを使用してアプリを作成する機能を備えたSwift Playgrounds 4を簡単に見ることができます。

Swift Playgrounds 4は今年後半に利用可能になります。

私たちは、あなたがどこに行っても、どのデバイスでも、あなたのアプリのアイデアを開発する自由を持つことを愛することを知っています。

そして今、私はそれをスーザンに返します。

私たちが世界を体験する方法の多くはビジュアルコミュニケーションであり、それはAppleデバイスを使用する上で大きな部分を占めています。

Apple WatchのAlways on Displayをちらっと見たり、iPad Proでビデオツールを操作しながらProMotionを楽しんだり、iPhoneでゲームをプレイしたり、Macで没入型の3Dコンテンツを作成したりするなど、グラフィックス、ディスプレイ、拡張現実のための当社の技術は前面と中心です。

そして今、マイラとエリックは、拡張現実から始めて、今年の新機能を説明します。

ARは強力な技術であり、何千人もの人々がすでにアプリでそれを使用して、私たち全員が働き、遊び、自分自身を表現する方法を変革しています。

今日、世界中で10億台以上のAR対応のiPhoneとiPadで、アプリにAR体験を追加したり、まったく新しいアプリを構築したりするのに、これほど良い時期はありません。

歴史的に、優れたARアプリを構築するには、3Dモデリングに関する深い知識と洗練されたレンダリングエンジンの習得が必要でした。

しかし、私たちは皆さんが素晴らしいAR体験を創造できることを望んでいます。

そのため、ARを簡単に使い始めるための一連のテクノロジーをリリースしました。

そのうちの1つは、AR用にゼロから構築された3Dレンダリング、オーディオ、アニメーション、物理エンジンであるRealityKitです。

RealityKitは、フォトリアリスティックなレンダリングと、ノイズやモーションブラーなどのカメラエフェクトを特徴とする、没入型AR体験のレンダリングをシンプルにします。

RealityKitはまた、LiDARスキャナーのような最新のハードウェアを利用して、仮想オブジェクトが人やオブジェクトのオクルージョンと一緒に実際にそこにいたように振る舞うことを可能にします。

そして、それはすべてSwiftで書かれています。

本日、RealityKit 2を発表します。これは、より多くのビジュアル、オーディオ、アニメーションのコントロールを提供し、3Dモデルを作成するという優れたARアプリの作成の最も難しい部分に取り組む大きなアップデートです。

以前に作成したことがあるなら、単一のモデルを作るのに数時間と数千ドルかかることを知っています。

これで、Object Captureを使用すると、iPhoneを使用してオブジェクトの2D画像をキャプチャし、MacのObject Capture APIを使用して、これらの画像をAR用に最適化されたリアルな3Dモデルに変換して、数分で3Dモデルを作成できます。

このプロセスはとても簡単です。

オブジェクトの反転と自動フォアグラウンドセグメンテーションをサポートしているため、iPhoneまたはiPadで一連の写真を撮って、下部を含むオブジェクトのすべての角度をキャプチャすることから始めます。

ワークフローを合理化するための優れたガイドを提供するQloneのようなアプリを使用できます。

次に、Object Capture APIを使用して、3Dモデルを生成するのに数行のコードしかかかりません。

RealityKitで、キャプチャした画像のフォルダを指す新しいフォトグラメトリセッションを開始します。

次に、プロセス関数を呼び出すと、目的の詳細レベルでモデルが生成されます。

そんなに簡単だよ！

オブジェクトキャプチャを使用すると、ARクイックルック用に最適化されたUSDZファイルを生成できるため、ユーザーはメッセージ、メール、Safari、その他のアプリで表示できます。

また、レイトレーシングやその他のポストプロダクションワークフローに使用できるObject Capture APIからUSDまたはOBJアセットバンドルを生成することもできます。

現実世界のオブジェクトを3Dモデルに変えることは、かつてないほど簡単になりました。

サンプルコードで今日からオブジェクトキャプチャの使用を開始できます。また、主要な3Dコンテンツ作成ツールのいくつかと協力して、今年後半に利用可能なUnity Mars、Cinema 4D、Qloneなど、すでに使用している多くのプロアプリにこのワークフローを組み込んでいます。

オブジェクトキャプチャモデルをXcodeに持ち込み、新しいRealityKit APIを使用してエフェクトを追加するのは簡単です。

私のチームと私は、お気に入りの食べ物をスキャンしてオブジェクトキャプチャをテストし、料理のARプレビューを含むレシピを共有するためにARアプリクリップを構築しました。

Qloneを使って捕獲したチョコレートクロワッサンは、実際には私のチームの誰かが焼いたクロワッサンの仮想レプリカであり、アプリクリップに別のレシピとして追加したいと思います。

クロワッサンの3DモデルをARAppプロジェクトにドラッグすることから始めます。

次に、ARKitを使用してApp Clip Codeに固定し、アセットのModelEntityを初期化します。

アプリクリップを展開する前に、プロジェクトの構築中はいつでもXcode Quicklookで3Dモデルを直接完全に調べることができます。

App Clipの新しいRealityKit APIを使用して、各ARディッシュにエフェクトを追加して、より現実的なものにしました。

RealityKitはネイティブレンダリングエンジンであるため、複数のARシーンやレシピをApp Clipに収めることができます。

調べてみましょう。

アプリクリップコードをスキャンすると、アプリクリップが起動し、チョコレートクロワッサンを右上に固定します。

クロワッサンをより現実的にするために、新しいRealityKitカスタムサーフェスシェーダーを使用して、発光光を追加し、アンビエントオクルージョンを引き戻しました。

焼いたステーキなど、チームからさらにいくつかの料理を見てみましょう。

ここでは、新しいProcedural Geometry APIでスチームエフェクトを作成して、フリップブックシェーダーにレイヤー化することで、カスタムサーフェスシェーダーに追加しました。

蒸気は手続き的であるため、このピザのような多くのレシピで同じ効果を使用することができます。

蒸気効果がピザのサイズとともに手続き的にどのように拡大したかに注目してください。

このバーベキューチキン料理には、この料理がスパイシーであることを示すために、フルスクリーンのポスト処理火災効果を追加しました。

そして最後に、私たちは炎を落とし、代わりに新しい計算シェーダーとジオメトリ修飾子を使用して、バースデーケーキの周りにお祝いの紙吹雪を追加しました。

ご覧のとおり、私たちはより多くのカスタマイズにRealityKitレンダリングを開放し、これらの新しいAPIの使用方法に関するあなたの創造性を見るのが待ちきれません。

これらは、すべての開発者が3Dモデルを作成して、より没入感のあるリアルなAR体験を構築することを可能にする、ARのエキサイティングな新しい改善のほんの一部です。

ARKitとRealityKitで行うことの基本的な側面の1つは、グラフィックス技術です。

そして、エリックは最新情報を教えてくれます。

Appleで製品を構築する方法のコアアイデアは、最も素晴らしいハードウェアとソフトウェアをまとめることであり、グラフィックスへのアプローチはその理想を反映しています。

長年にわたり、Appleが設計したiPhoneとiPad用の強力なGPUを提供し、MetalグラフィックスとコンピューティングAPIと組み合わせて、製品を最大限に活用できるようにしてきました。

そして今、M1チップでは、最新のMacとiPad Proで前例のないレベルのグラフィックス性能と電力効率を提供しているだけでなく、iPhoneからiPad、Macまで、Metal、Apple GPU、ユニファイドメモリに基づく共通のアーキテクチャを備えた統一されたAppleグラフィックスプラットフォームを作成しました。

そして、このプラットフォームは根本的な変化を可能にします。

以前はハイエンドワークステーションやディスクリートGPUゲーミングコンピュータを必要としていたグラフィックスワークロードが、最も人気のある製品で可能になりました。

たとえば、この統一されたプラットフォームのコンソールレベルのパフォーマンスにより、ラリアンのような開発者はAAAゲームであるDivinity Original Sin 2をMacに、そしてiPadに持ち込むことができました。

そして、Deep SilverはM1とMetalの最新のシェーダーパイプラインを使用して、Mac用のサバイバルゲームMetro Exodusで高性能で没入型グラフィックスを実現しています。

しかし、このグラフィックプラットフォームはゲームのためだけではありません。

MetalコンピューティングAPIは現在、OTOYのまったく新しいOctane XやCinema 4DのMaxonのRedshiftレンダラーなど、次世代のプロフェッショナルGPUレンダラーを加速しており、Macで初めてMetal-acceleratedを実行しています。

そのため、Appleのすべての強力なデバイスにグラフィックアプリとゲームをもたらすために、今年は高度なグラフィックスとゲーム機能、強力なグラフィック開発者ツールの2つの大きな分野に焦点を当てました。

まず、現代のハイエンドゲームとGPUレンダリングアルゴリズムに不可欠な3つの主要機能に焦点を当てました。複雑な数学的操作を加速し、光の動作をモデル化し、現実的な表面を表現するために、現代のGPUレンダラーは同じパイプラインでMetalグラフィックスとコンピューティングコマンドをインターリーブする必要があるため、Metalはグラフィックシェーダーから直接動的ライブラリとRay Queryプリミティブを呼び出すことができます。

また、Metal Ray Tracing APIの新しいStochastic Motion Blur機能を使用して、さらにフォトリアルなレンダリングを作成できます。

ゲームがより低いレイテンシとより少ないジャダーでより高いフレームレートを達成するためには、開発者はディスプレイをより詳細に制御する必要があります。

これを達成し、最新のiPad Proの素晴らしいグラフィックスパフォーマンスを活用するために、ゲームはMetalプレゼンテーションタイムAPIとProMotionディスプレイを使用して、レンダリングと入力の間の希望するレイテンシーに基づいてアプリのフレームレートを動的に調整できます。

また、macOS MontereyはAdaptive Sync Displaysのサポートを追加します。

これは、Macゲームでもこれらの超低遅延と可変リフレッシュレートディスプレイを利用できるようになったことを意味します。

現在、高度なグラフィックスを備えたハイエンドゲームは、多くの場合、ゲームコントローラーを入力として使用して設計されています。

また、ゲームコントローラーのサポートを追加することは、共通の入力モデルを使用して、ゲームを統一されたグラフィックプラットフォームに持ち込む強力で簡単な方法です。

当社のゲームコントローラーフレームワークは、最新のXbox Series XワイヤレスコントローラーとPlayStation 5 DualSenseコントローラーのサポートを含む、最も人気のあるコントローラーをサポートしています。

コントローラーベースのゲームをiPhoneやiPadにさらに簡単に持ち込むために、わずか数行のコードで画面上の仮想ゲームコントローラーを有効にできるように、新しいAPIを追加しました。

macOS MontereyとiPadOS 15では、プレイヤーは友達がプレイしているゲームを見つけ、アプリライブラリに直接移動してゲームを起動し、「共有」ボタンを押してお気に入りのゲームのハイライトを記録することができるため、ゲームコントローラーのサポートはこれまで以上に価値があります。

現在、これらの新しい高度なAPIと機能とともに、Xcode 13は、GPUコードを最適化およびデバッグするための強力な新しいグラフィックス開発者ツールを追加し、それぞれが最新のハイエンドゲームやグラフィックスアプリケーションを次のレベルに引き上げるように設計されています。

まず、高度なGPUレンダラーやゲームを構築するとき、GPUシェーダーは本当に大きくなる可能性があります。

並行して実行されている何千ものワークグループで10,000行のシェーダーコードをデバッグするには、本当に長い時間がかかることがあります。

このプロセスを合理化するために、Xcode 13は選択的シェーダーデバッグを追加します。

ここでは、選択的シェーダーデバッグを使用して、はるかに大きなGPUシェーダー内で、デバッグする機能を正確に選択しています。

これにより、最大のシェーダーの反復とデバッグにかかる時間を大幅に短縮できるため、より迅速に開発でき、GPUコードに機能とパフォーマンスを追加することに集中できます。

次に、ハイエンドのAAAゲームには、最新のテクスチャ圧縮サポートも必要です。そのため、強力なメタルテクスチャコンバータツールを更新して、テクスチャコンバータ圧縮パイプラインを直接制御し、まったく新しいガンマ認識ピクセル変換を追加し、Mac、PC、iOSゲームで使用される最新のASTCおよびBCテクスチャ圧縮フォーマットのサポートを大幅に拡張しました。

これにより、Appleの各デバイスに対してゲームのテクスチャアセットを最適化することがさらに簡単になります。

最後に、最先端のレンダリングでピークパフォーマンスを達成するために、Xcode 13はMetal Debuggerにまったく新しいGPUタイムラインビューを追加します。

この強力な新しいビューでは、強力なパフォーマンスカウンターとボトルネック分析情報に加えて、イベントのタイムラインで、Metalコマンド、リソース、バッファを視覚的にデバッグする最高のものを組み合わせることができます。

Apple CPU、GPU、Metalを使用して、10億台以上のデバイスを備えた統合グラフィックスプラットフォームを作成し、最新の機能と開発者ツールを使用して、グラフィックス、プロアプリ、ゲームのまったく新しいレベルの機能とパフォーマンスを解き放つことができます。

そして今、あなたに戻ります、スーザン。

あなたのアプリは、人々をアイデア、サービス、ツール、そして最も重要なのは、他の人と結びつけるのに役立ちます。

バランスを見つけることは接続と同じくらい重要なので、今年はユーザーが適切なタイミングでアプリに集中し、プライバシーを尊重しながら愛する人のデバイスを管理し、アプリのコンテンツをAppleプラットフォーム全体で構築された新しい、共有された、親密な体験の中心にすることができます。

私たちはあなたのアプリがそのような関係を作成するのに役立つ強力な新しいAPIセットを作成しました。

ヒーナとマットから始めて、フォーカスについて教えてください。

iOS 15は、人々が集中するのに役立つ強力な新しいツールセットを導入しています。

これらのツールは、人々がその瞬間にいることができるように、気晴らしを減らすのに役立ちます。

そして、それは通知に対する全く新しいアプローチから始まります。

ロック画面に積み上げられた通知をいくつか紹介します。

彼らの緊急性のレベルは明らかに異なります。

しかし、彼らは皆同じように振る舞った。

彼らは同じ外観、同じ触覚、同じ明らかな重要性を持っていました。

今、新しい中断レベルAPIでは、アプリがさまざまなレベルの緊急性を伝えるためのより微妙な方法があります。

通知には、4つの中断レベルのいずれかを割り当てることができます。

受動的な中断は静かで、デバイスを目覚めさせません。

人々は次に電話を取るときに彼らに会うでしょう。

これらを、時間に敏感ではない通知に使用することをお勧めします。

アクティブな中断は、今日の通知と同じように音や触覚を再生します。

時間に敏感な中断は、ユーザーがタップしていない場合、視覚的に目立ち、ロック画面に少し長くハングアップするように設計されています。

また、誰かがAirPodsを着用している場合は、Siriによっても発表されます。

そして、あなたはすぐに注意を必要とする通知にこれを使用したいと思うでしょう。

クリティカルアラートは最も緊急なカテゴリです。

デバイスがミュートされていても、彼らは音を再生します。

これらは非常に深刻な健康と安全上の懸念のためだけに予約されており、承認された資格が必要です。

特別な注意に値する通知の別のカテゴリがあります:人々からのコミュニケーション。

コミュニケーションアプリをお持ちの場合は、メッセージと通話通知についてシステムに伝えることが重要です。

その後、システムはこの情報を使用して通知の外観と行動を調整し、人々がそれらをよりよく解釈するのに役立ちます。

実装されると、通知は標準的な外観からこのようになります。アプリのアイコンが重ねられた目立つアバターが特徴で、同じアバターがシェアシートのようにシステム内の他の場所で使用されます。

私はそれらのアバターを見てとても興奮しています!

さて、通知は人々の注意を引くための本当に効果的な方法です。

しかし、彼らはまた、一種の一時的なものになる可能性があります。

彼らがタイミングが良くなければ、人々は簡単にそれらを見逃すことができます。

ユーザーが自分の時間に通知に参加できるように、通知サマリーを導入しています。これは、ユーザーが選択した時に便利なバンドルとして通知を配信し、最適なときにすぐに追いつくことができます。

サマリーは、ユーザーが選択したアプリからのパッシブ通知とアクティブ通知をバンドルし、美しいレイアウトで表示します。

その後、見られるまでしばらくロック画面に固執します。

要約はまた、ユーザーごとにパーソナライズされています。

ご覧のとおり、上部に2つのマーキースロットがあります。

そこで特集されているのは、いくつかの要因に基づいています。まず、多様性を提供するために、これらの2つのアプリは要約の中からサンプリングされます。

そこから、私たちはいくつかの追加の重み付けを行います。

大きなサムネイル付きの通知は、常にサムネイルのない通知よりも選択されます。

そして、あなたが決定した最も高い関連性スコアを持つ通知は、同じアプリから他の通知よりも選択されます。

さて、あなたは「私のアプリはどのようにして要約に終わるのか」と疑問に思うかもしれません。まず、通知の概要を使用するかどうかは、完全にユーザー次第です。

そして、もしそうなら、最も多くの通知を送信するアプリが提案されます。

ユーザーは、どのアプリが要約に入るか、それを受け取る時間もカスタマイズできます。

アプリがスケジュールされたサマリーに配置されている場合、リアルタイムでユーザーに連絡する方法はまだあります。

そこで、時間に敏感な通知が届きます。

この中断レベルを使用する通知は、すぐに配信されます。

通知が即時の注意を必要とし、その瞬間に関連している場合にのみ、通知をタイムセンシティブとしてマークする必要があることを忘れないでください。

邪魔をしない以上に気を散らす機能はありません。

しかし、Do Not Disturbはすべての通知を沈黙させ、ユーザーにより多くの柔軟性を与えたいと考えました。

Focusを使用すると、ユーザーは現在行っていることに基づいて、通知を受け取る必要があるアプリや人を選択できます。

彼らは仕事のために一日を切り開くか、ゲーム、読書、フィットネスなどの活動のための焦点を作成することができます。

フォーカスにいる間、ユーザーは自分のステータスを他の人と共有できるので、中断しないように知っています。

しかし、それが本当に緊急であれば、メッセージはとにかく突破して通知することができます。

コミュニケーションアプリは、ユーザーのフォーカスステータスへのアクセスをリクエストすることもできます。

許可された場合、システムは変更時にアプリに通知されるため、アプリはステータスをシステムの残りの部分と同期させることができます。

あなたのアプリは、緊急のコミュニケーションのために突破する機能をユーザーに提供することもできます。

私たちは、通知を管理するためのこれまで以上に多くのコントロールと柔軟性をユーザーに提供しています。

また、これらのツールが機能していることを確認するために、システムは定期的にチェックインして、設定の特定の調整が役立つかどうかを確認します。

これは、ユーザーがアプリや通知とどのようにやり取りするかに基づいています。

したがって、ユーザーが通常フォーカス中にアプリを使用している場合、システムはそのフォーカス中にそのアプリの通知を許可することを提案するかもしれません。

または、ユーザーがアプリのタイムセンシティブ通知を操作している場合、システムはそれらをアクティブな通知に戻すことを提案するかもしれません。

アプリが次々と通知を送信し、ユーザーが関与していない場合も同様です。

システムは、そのアプリからのすべての通知をミュートするか、限られた時間だけの会話でミュートすることを提案するかもしれません。

したがって、これらの新機能を最大限に活用するには、必要な重要なことがいくつかあります。

通知に関連性スコアを設定し、適切なサムネイルを添付することで、要約の上部にあるマーキースロットに適切なコンテンツが紹介されていることを確認するのに役立ちます。

どの中断レベルが通知に理にかなっているかを慎重に考える必要があります。

コミュニケーションアプリをお持ちの場合は、新しいユーザー通知APIを採用して、メッセージと通話通知をシステムに伝える必要があります。

また、新しいフォーカスステータスAPIを使用して、ユーザーのフォーカスをアプリに反映する必要があります。

これらのツールは、あなたの助けを借りて、ユーザーが気晴らしを減らすのに大いに役立つと思います。

次に、マーティンは新しいスクリーンタイムAPIについて教えてくれます。

ありがとう、マット。

さて、スクリーンタイムとペアレンタルコントロールについて話すためにギアを切り替えましょう。

私たちは、親が子供たちが健康的なデジタル生活を築くのを助けるために近代的で革新的なソリューションを必要としていることを認識しており、家族のプライバシーも深く大切にしています。

そして、私たちはこれらのユーザーのニーズに応えるために、あなたの多くからの食欲を見てきました。

そこで今日、私たちはプライバシーへの深いコミットメントに基づいて構築されたオーダーメイドのペアレンタルコントロールフレームワークのセットであるScreen Time APIをリリースします。

スクリーンタイムAPIでは、3つの重要な目標を念頭に置いていました。

ペアレンタルコントロールアプリを開発するための最新のソリューションを提供します。

ダイナミックな体験を構築し、今日のスクリーンタイムが提供するものを超えて革新できるようにします。

そして、ユーザーのプライバシーを保護するために。

そのために、ペアレンタルコントロールの世界で革新することを可能にする3つの新しいSwiftフレームワークをiOS SDKに追加しました：マネージド設定、ファミリーコントロール、デバイスアクティビティ。

まず、管理された設定について話しましょう。

基本的に、ペアレンタルコントロールアプリには、子供がデバイス間でできることを制限し、親がそうでないと言うまでそれらの制限が維持されるようにする方法が必要です。

管理された設定を使用すると、アプリは、スクリーンタイムのように、アカウントのロック、パスワード変更の防止、Webトラフィックのフィルタリング、アプリケーションへのアクセスの制限など、多くの制限を設定できます。

アプリのブランディングと機能でカスタマイズされています。

このフレームワークを活用することで、アプリはこれらの制限をすべて管理できるようになります。

制限を超えて、必要に応じてアプリやウェブサイトへのアクセスを制限し、ユースケースに固有の一連のアクションを提供することができます。

そして最後に、親の明示的な承認がある場合にのみ削除できるように、アプリを所定の位置にロックします。

現在、ファミリーコントロールフレームワークは、当社のプライバシーモデルの中心であり、2つの主要なユーザー向けエクスペリエンスを提供します。

まず、親がiCloudの資格情報を使用してアプリの管理を承認し、デバイスがその家族の子供用であることを保証します。

また、システムアプリとウェブサイトピッカーを介してパーソナライズされた体験を提供します。これにより、保護者はユーザーのプライバシーを保護しながら、制限するアプリやサイトを選択できます。

私たちは、親が子供が使用するアプリやウェブサイトを管理および制限できるようにしたかったが、プライベートアプリケーションやウェブブラウジングの詳細を漏らさない方法でそうしたい。

したがって、生のバンドルIDとURLの選択を返すのではなく、ピッカーは代わりに不透明なトークンを返します。

これらのトークンを使用すると、親が管理したいアプリやウェブサイトをアプリが追跡でき、親がこの機密性の高い情報にアクセスできるのは親だけです。

そして、これらのトークンは、これらすべてのフレームワークで機能を有効にします。

トークンを使用して、管理された設定で特定のアプリやウェブサイトへのアクセスを制限したり、デバイスアクティビティフレームワークを使用して、今日までiOSでは不可能だったアプリやウェブサイトのアクティビティに関する洞察を得ることができます。

ファミリーコントロールのアクティビティピッカーが提供するトークンを使用すると、デバイスアクティビティの力を活用する準備が整いました。

さまざまなアプリやアクティビティに一意のタイムウィンドウを登録することができ、それぞれに「あと5分」などの警告と完了イベントが発令されます。

アプリがこれらのイベントを受信すると、制限を変更したり、関連するアプリやウェブサイトへのアクセスを制限したりすることで、それに応じて反応することができます。

子供たちに宿題をするように励ます。

ユーザーに提供しようとしている経験が何であれ。

ブラウザのアクティビティだけでなく、デバイス上のすべてのアプリでデバイスのアクティビティを見るというこの概念はまったく新しく、ペアレンタルコントロールの世界で革新するユニークな機会です。

スクリーンタイムAPIを使用すると、家族全体のダウンタイムを有効にしたり、宿題をした後にゲームのロックを解除するなど、教育的なことの後に何か楽しいことをするインセンティブを作成することもできます。

私たちは、親や家族が私たちのデバイスを使用する方法を管理するのを助けるために、あなたがこれらのAPIをどのように構築するかを見て非常に興奮しています。

そして今、Widgetsの新機能を教えてください。

昨年、私たちはホーム画面にウィジェットを導入しました。

そして人々は彼らを愛していました。

ウィジェットは、アプリから最も関連性の高いコンテンツの楽しくタイムリーなビューで深いパーソナライゼーションを提供します。

それらはすべて一目見やすさに関するものです。

人々は、ウィジェットがアプリから最も有用な情報を一目で、正確に適切なタイミングで提示する方法が大好きです。

タップすると、アプリの右側にディープリンクできます。

過去1年間で、あなたは本当に私たちにインスピレーションを与えたいくつかの素晴らしいウィジェット体験を作成しました。

最高のウィジェットは、集中的でダイナミックで、一日を通してアプリのユニークなビューを提供します。

このように、初日から。

それはサンタクルーズへの旅行中の私と私の子供たちです。

適切なコンテキストで適切なコンテンツを浮上させることは、ユーザーがアプリの魔法を発見するのに役立ちます。

そして、ウィジェットは人々があなたのアプリをさらに使用することを奨励しているのを見てきました。

今年は、ウィジェットでアプリをより便利で見つけやすくするための次のステップを踏み出します。

そして、それは人々がiPadのホーム画面であなたのアプリの中にウィジェットを配置させることから始まります。

大画面を利用するために、ウィジェット用の新しい特大サイズを導入しています。

これは、iPadで最もよく機能するまったく新しいタイプのウィジェットのための全く新しい機会を意味します。

ウィジェットへの追加をさらに簡単にするために、iPhoneとiPadのウィジェットで新しいデフォルトのホーム画面レイアウトを追加します。

これらには、スマートスタックに配置された、人々が最もよく使用するアプリのウィジェットが含まれます。

スタックを使用すると、複数のウィジェットを互いの上に配置することで、スペースを節約できます。

スマートスタックは、デバイス上のインテリジェンスを使用して、現在最も関連性の高いウィジェットを表示します。

昨年のTimelineRelevance APIの基盤に基づいて、私たちは単にデバイス上のインテリジェンスでスタックを回転させるだけではありません。

今、私たちは、それがまだスタックになかった場合でも、それを提案することによって、あなたのウィジェットにより多くの露出を与えることができます。

そして、私たちはこれをどのように行うのですか?

ウィジェットの提案を入力します。

人々があなたのアプリとどのようにやり取りするか、そしてあなたが私たちに何を伝えることができるかは、スタック内のウィジェットを提案するのに役立ちます。

これがFrutaの例アプリでどのように機能するか見てみましょう。

ユーザーが毎朝グリーンジュースを注文した場合、デバイス上のインテリジェンスはそれを提案することを学びます。

オプトインするには、インテントフレームワークを採用し、インタラクションを寄付する必要があります。

それでおそれ！

これで、あなたのウィジェットは、人々があなたのアプリをどのように使用するかに基づいて自動的に提案することができます。

ユーザーに新しい情報を提供したい場合は、Intents APIを使用して寄付することもできます。

たとえば、Frutaアプリはこれを採用して、無料のバースデースムージーを提供できます。

過去の使用行動と新しい関連する意図の寄付の両方は、適切なタイミングでスタック内のウィジェットを提案するのに役立ちます。

また、ユーザーがウィジェットが役に立つと感じた場合は、長押しで永久に簡単に追加できます。

これが今年のウィジェットの大きなアップデートです。

これまで以上に便利で、発見しやすい。

次はSharePlayに関するいくつかのニュースです。

ライアンとフアンへ。

今年、私たちは皆、新しい接続方法を見つけるために即興でやらなければなりませんでした。

そして、あなたの多くが革新し、人々が遠くにいる間に一体感を感じるための素晴らしい新しい方法を構築するのを見るのは印象的でした。

そして、人々が接続を維持するためにこれまで以上にFaceTimeとiMessageに依存しているため、人々が離れているときに人々がより一緒に感じるのを助けるために、それらの経験に基づいて構築するのは当然のことでした。

人々が一緒に過ごす最も有意義な瞬間のいくつかは、単に会話を共有するだけでなく、経験を共有することです。

だから、その親密さの感覚を育むために、私たちは全く新しいものを構築する必要がありました。

そして、私たちは野心的な目標を持っていました。

私たちは、FaceTimeが人々を親しい友人や家族と同じ空間に運んだポータルのように感じてほしかった。

そこで、私たちはSharePlayを構築しました。

また、新しいGroupActivitiesフレームワークを使用して、魔法のSharePlayエクスペリエンスを作成するために必要なツールを提供します。

私たちはグループを連れてきて、あなたは活動を持ってきます。

そして、それはすべてこの活動の概念に帰着します。

FaceTime通話の誰かがアクティビティを開始すると、SharePlayはグループを直接アプリに持ち込み、ユーザーが慣れているようにコミュニケーションできる豊かなインタラクティブな体験を可能にします。

グループ活動の枠組みで探求する可能性はたくさんあります。

そして、あなたの親しい友人の何人かとあなたのお気に入りの番組を見るよりも、あなたの仮想リビングルームで行うより良い活動は何ですか。

ねえ、フアン、あなたのチームはSharePlayをテレビアプリに統合し終えたばかりなので、私たちに案内してみませんか？

もちろんです！何を見たいですか？

ちょっとした「テッド・ラッソ」はいかがですか?

よさそうですね。

再生を押すと、共有再生を開始するか、代わりにローカルで再生するかをシステムから求められます。

ここがあなたの出番です。

アプリの既存のビデオ体験にぴったり合うように設計された再生を開始するための新しいAPIを提供しています。

今、私は共有再生を選んだので、システムは私のデバイスとライアンのビデオを、コアメディアとグループアクティビティとまったく同時に調整しています。

つまり、私が一時停止を押すと、フアンのビデオはまったく同じ瞬間に一時停止します。

私はお気に入りのシーンにジャンプすることさえでき、まるで私たち全員が同じ部屋にいるかのように、誰もが私と一緒に来ます。

大丈夫？つまり、ねえ、ヒギンズと私は今日昼食を食べます。

私はこのシーンが大好きです！

この再生調整の背後にある魔法は、あなたのメディアがいかなる方法でも再送信されないことを意味します。

アプリ内で再生され、いつものようにサーバーからストリーミングされるため、誰もがあなたの完全な忠実度のビデオを取得します。

さて、シンプルなメディアアプリでグループアクティビティを採用し、フレームワークを最大限に活用することがどれほど簡単かを見てみましょう。

アプリを共有再生に備えるには、いくつかの手順があります。

まず、グループ活動を定義する必要があります。

グループアクティビティプロトコルに準拠した新しいタイプを作成し、グループ内の全員がロードするためのURLを提供します。

アプリがすでにコンテンツへのディープリンクをサポートしている場合は、ここで使用できます。

また、確認ダイアログや通知などのシステムUIをカスタマイズするための基本的なメタデータをシステムに提供します。

次に、再生ボタンを接続する必要があります。

Play() 関数では、新しいアクティビティを作成し、その上で .prepareForActivation() を呼び出します。

これは、システムが先ほど見た確認ダイアログを表示するときです。

余分な条件なしでこれを呼び出すことができます。

ユーザーがFaceTime通話をしていない場合は、すぐに戻ってきます。

では、入ってくる活動の処理に注意を向けましょう。

イニシエータは他の参加者と同じようにセッションに参加するので、コードは誰にとっても同じように見えます。

ここでは、Swift並行性を使用して、配信されるセッションごとに新しいモデルを作成しています。

その後、プレイヤーが表示されたら、新しいセッションに参加します。

それに応じてUIを更新するために、他の状態の変更についてセッションを観察することができます。

最後に、プレイヤーを同期させましょう。

ステップ1：AVPlayerをつかみ、セッションで.playbackCoordinator.coordinate WithSessionパスを呼び出します。

ステップ2：ステップ2はありません。

それでおそれ！

グループアクティビティやAVPlayerとフレーム正確なAV同期を取得するために必要なのはそれだけです。

残りはシステムが処理します。

今、私たちは共有されたメディア体験についてたくさん話しました。

しかし、私たちはグループ活動が、あなたが夢見ることができる最も野心的な経験にも力を与えることができる基盤を提供することを望んでいました。

そこで、私たちは今日、グループFaceTimeを強化するファブリックの上に構築し始め、アプリに高速で信頼性の高いデータチャネルを提供しました。

グループリーダーとして仕事を引き受けることで、私たちのサーバーはグループ全体の集中状態を調整します。

これらのサーバーは、すべてエンドツーエンドで暗号化されているため、プライベートのままであるため、ユーザーのデータを表示しません。

そして、この高速で安全なデータチャネルを使用すると、共有本のページをめくることから、誰かが共有ホワイトボードに描いたストロークをライブで見ることまで、没入型体験を作成できます。

私たちは、あなたが私たちのAPIを最大限に活用し、かつてないほどユーザーを結びつけるように本当に刺激したいと思っています。

しかし、デモをお見せする前に、これについて少し余分な助けを呼び出す必要があります。

やあ、みんな。参加してくれてありがとう。

グループ活動の力を本当に実証するために、この最後のデモであなたの助けが必要です。

さて、グループアクティビティで何ができるかを示すホワイトボードのデモアプリがあります。

今、共有キャンバスを開くことで、私は一緒に描くためにグループと新しい活動を始めています。

今、私たちは皆同じキャンバスを見ていて、まったく新しい方法でお互いに交流することができます。

キャンバスのどこかに絵を描くと、誰もが私が描いているものをライブで見ることができます。

現在、このアプリは以前に見たのと同じAPIを使用していますが、メディアを同期する代わりに、GroupSessionMessengerを使用して私のストロークを全員のデバイスに送信しています。

そして、これは画面共有ではありません。

このアプリはみんなのiPadでネイティブに実行されているので、キャンバスにも絵を描くことができます。

みんなでやってみましょう。

だから、私たちはどんなに遠く離れていても、共有のキャンバスの周りに集まることができます。

そして、それはかつてないほど私たちを結びつけています。

助けてくれてありがとう、みんな。

最良の部分は、あなたが今見たすべてのもの - SharePlayアクティビティ、再生同期、高速で安全なデータチャネル - アプリをGroupActivitiesフレームワークと統合するだけで、これらすべての利点を得ることができます。

SharePlayは、アプリのコンテンツを高め、ユーザーにとってより没入感のある体験を生み出すのに役立つ素晴らしい新しい方法です。

私たちは、あなたがグループアクティビティを使用して思いつく新しい共有体験を見ることを熱望しています。

さて、スーザンに物事をまとめます。

私たちは、あなたが今日見た進歩は、あなたが違いを生むアプリを構築し続けるのに役立つと信じています。

ワークフローを合理化し、優れたアプリをより迅速に構築するためのツールを構築しています。

プロのクリエイターのための没入型コンテンツ、ゲーム、ツールの構築を容易にしました。

最も重要なことに集中しながら、アプリがユーザーの接続にどのように役立つかをお見せしました。

あなたが今日見たものはほんの始まりに過ぎません。

今週はチェックすべきことがたくさんあるので、触れる機会さえありませんでした。

私たちはあなたが何か素晴らしいものを作ることを知っています、そして私たちはそれを見るのが待ちきれません。