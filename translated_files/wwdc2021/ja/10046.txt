10046

♪ ♪

こんにちは。私の名前はジャスティンです。

私は写真エンジニアです。

同僚のアダムと一緒に、あなたのアプリで写真へのアクセスを改善する方法について話します。

まず、システムフォトピッカーの改善について話します。

次に、Adamは新しいクラウド識別子APIと、それらを使用して異なるデバイス間で同じ資産を識別する方法を示します。

最後に、制限付きライブラリアクセスモードの変更についても説明します。

フォトピッカーから始めましょう。

iOS 14では、UIImagePickerControllerの最新の代替品であるPHPickerを導入しました。

PHPicker APIは、複数の画像の選択や検索など、必要な機能をアプリに提供しながら、プライバシーを保証します。

PHPickerについて聞いたことがない場合は、WWDC 2020の「Meet the new Photos picker」セッションを見て、詳細を知ることができます。

iOS 15では、システムフォトピッカーには4つの大きな改善点があります。

まず、プライバシー。

私たちは、アプリがアクセスできる情報を人々に知らせることが重要であり、信頼を高めると考えています。

iOS 14では、アプリがアウトオブプロセスの写真ピッカーのみを表示し、選択した写真にのみアクセスできる場合でも、アプリがフォトライブラリ全体にアクセスできると考える人もいます。

人々が違いを理解できるように、設定>プライバシー>写真に新しいセクションを追加しました。

新しいセクションには、システムフォトピッカーのみを使用するアプリが含まれており、これらのアプリは人々が選択した写真にしかアクセスできないことを説明しています。

まだ行っていない場合は、カスタムピッカーをシステムピッカーに置き換えることをお勧めします。

次に、順序付けられた選択について話しましょう。

時々、人々はそれらを選択するときに写真の順序を制御したいと思うかもしれません。

iOS 15では、ここに示すように、アプリは選択順序を表示するようにピッカーを設定できます。

デフォルトでは、選択チェックマークが表示されます。

新しい順序付き選択の動作をオプトインするには、複数の選択を有効にし、「選択」を「順序付き」に設定するだけです。

PHPicker APIは、誰かが新しい写真を選択する必要があるときにうまく機能します。

しかし、ピッカーを使用して写真の選択を解除したい場合はどうなりますか?

iOS 15では、新しい事前選択APIが使用できます。

しかし、新しいAPIについて話す前に、PHPicker APIが現在どのように使用されているかを再検討しましょう。

PHPickerConfigurationオブジェクトを作成し、それを使用してピッカーを初期化するだけです。

ピッカーセッションが完了すると、選択した写真がアプリに返されます。

設定がPHPhotoLibraryオブジェクトで初期化されると、ピッカーの結果にはアイテムプロバイダーとアセット識別子の両方が含まれます。

アプリは、アイテムプロバイダーを使用して、選択した写真をロードして表示できます。

iOS 15では、最初に選択した写真をピッカーに表示することもできます。

これにより、より多くの写真を選択したり、アプリで事前に選択した写真の選択を解除したりすることができます。

これを行うには、新しい設定オブジェクトを作成する必要があります。

この場合、以前に取得した資産識別子（ID：1）とID：2の配列を設定できます。

新しいPHPickerViewControllerが表示されると、ID：1とID：2の写真がデフォルトで選択されます。

人々はそれらを選択解除したり、追加の写真を選択したりすることができます。

後で使用する必要があるため、今のところ古いピッカーの結果を保持したいと考えています。

ID：2の写真が選択解除されたが、ID：3の新しい写真が選択に追加されるとします。

ピッカーセッションが完了すると、選択した写真が返されます。

しかし、最初の結果には、実際の資産データのない資産識別子しかありません。

どうして？

それはあなたのアプリによって選択されたからです。

アプリを使用しているユーザーが選択していないすべての結果には、空のアイテムプロバイダーがあります。

古いピッカーの結果には実際の資産データがあるので、古いID：1の結果を使用して、空のアイテムプロバイダーに置き換えることができます。

ID: 2 が選択されなくなったため、古い ID: 2 の結果を破棄できます。

わかりました。

これで、以前のように選択した写真の処理を続けることができます。

要約すると、ピッカーセッションが完了すると、選択解除されていない事前に選択された資産を含む、選択したすべての資産が返されます。

また、事前に選択された資産の返品されたアイテムプロバイダーは空になることを覚えておいてください。

ピッカーセッションがキャンセルされた場合、事前に選択されたアセットのみが返されます。

すべてのアイテムプロバイダーは空になります。

よし、コードを見てみましょう。 

事前に選択されたアセットを設定するには、photoLibraryオブジェクトで設定を初期化し、複数の選択を有効にするだけです。

新しいpreselectedAssetIdentifiers APIを使用して、事前に選択されたアセットを設定できます。

デリゲートコールバックでは、前のピッカーセッションから既存の選択を取得する必要があります。

その後、新しく返されたすべてのピッカー結果を反復処理できます。

既存の選択の一部である場合は、新しい結果を古い結果に置き換える必要があります。

最後に、更新された選択を保存できます。

最後になりましたが、進捗報告について話しましょう。

デバイスでローカルで利用できない場合は、大きなアセットをダウンロードするのに時間がかかる場合があります。これは、iCloud写真とストレージの最適化がオンになっている場合に発生する可能性があります。

以前は、読み込み中にのみスピナーを表示できていましたが、これは必ずしも理想的なユーザーエクスペリエンスではありません。

iOS 15では、アプリがピッカーから実際の読み込みの進捗状況を取得できることをお知らせします。

読み込みの進行状況は、既存のNSItemProvider APIを介して利用できます。

返された進行状況を使用して、それに応じて読み込みUIを表示できます。

フォトピッカーのアップデートは、それがすべてです。

今、私は同僚のアダムに引き渡して、新しいcloudIdentifier APIについてもっと話します。

ありがとう、ジャスティン。

私たちが追加した新機能とAPIにより、写真ピッカーは、ほとんどの開発者がアプリで写真を使用するための最良の方法です。

しかし、写真、カスタムカメラ、または人々がユニークな方法でフォトライブラリを閲覧する方法を提供するアプリを管理または編集するために、より深いレベルのアクセスと統合を必要とするアプリケーションの特別なカテゴリがあることを知っています。

これらのアプリの場合、PhotoKitは、フォトライブラリに保存されている写真、ビデオ、アルバムにアクセスして更新するための豊富なAPIセットを提供します。

アセットとアルバムには、PhotoKitによって一意の識別子が与えられ、アプリに保存され、後でフォトライブラリから同じレコードを取得するために使用されます。

すべてのフォトライブラリとその識別子は、それらのデバイスがiCloud写真とライブラリを同期している場合でも、実行しているデバイスに固有です。

だから、あなたのアプリに注意を戻しましょう。

人々は、外出中にiPhoneでアプリを使用し、机に戻ってラップトップやiPadを使用して、より大きなフォーマットを利用する方法が大好きです。

お客様は、あるデバイスから別のデバイスに切り替える際のシームレスな体験を望んでいます。

例えば、写真やコメントで経験を文書化するための写真ジャーナリングアプリを構築したとしましょう。

外出先でコンテンツをキャプチャするためのiPhoneアプリとして最適です。

彼らは、iPadやMacで私のアプリを開いたときに、携帯電話に追加したすべての写真やコンテンツで、中断したところからそのジャーナルの作業を再開できるはずです。

それで、それはどのように機能しますか?

各デバイスに独自のフォトライブラリと個別の識別子がある場合、同じアセットを見つけるにはどうすればよいですか?

これは、新しいクラウド識別子APIを使用して機能します。

彼らは、デバイス間で同じアセットとアルバムを見つける方法を提供します。

クラウド識別子を使用して、各フォトライブラリに固有のローカル識別子を検索します。

そして、これらの新しいAPIは、iOS、iPadOS、macOS、tvOSなど、PhotoKitをサポートするすべてのプラットフォームで利用できます。

目標は、クラウドを心配することなく、デバイス間でアセットをマッピングする簡単な方法を提供することです。

iCloud写真にサインインしているアカウントで実行しているときに最もよく機能するように設計されていますが、アカウントがサインアウトされているか、iCloudにサインインしたことがないシステムで実行されている場合でも、クラウド識別子は機能します。

それはすべて識別子マッピングに基づいているので、明確にしましょう。

識別子には2種類あります。

ローカル識別子は、先ほど話したもので、そのライブラリに固有のデバイスで使用する識別子です。

以前にPhotoKitを使用したことがある場合は、APIでlocalIdentifierと呼ばれるのを見たことがあります。

クラウド識別子は、あるデバイスまたは別のデバイスでローカル識別子を検索するために使用される新しいAPIです。

それらは、PHCloudIdentifierと呼ばれる新しく利用可能なクラスで表されます。

使い方を掘り下げてみましょう。

アプリが一部のアセットのローカル識別子のリストを収集したソースデバイスから始めます。

そのローカル識別子の配列から、対応するクラウド識別子を取得したいと考えています。

以下は、APIを使用してそれらを取得する方法の例です。

フォトライブラリへのこの呼び出しは、各localIdentifierのcloudIdentifierMappingオブジェクトを含む辞書を返します。

その辞書を反復し、cloudMappingオブジェクトからcloudIdentifierを取得します。

エラー処理については少しお話しします。

今のところ、私たちはクラウド識別子を持っている必要があり、それらを使用する準備ができています。

そして、クラウド識別子の最大の利点は、どこでもそれらを使用することなので、他のクラウド接続デバイスと共有する必要があります。

このiCloudアカウントに接続されているすべてのデバイスで実行されるときに、アプリで利用可能にしたい。

クラウド識別子を文字列にアーカイブし、CloudKitまたは他のネットワークデータサービスを使用してそのデータを共有できます。

このデータをどのようにパッケージ化するかは、本当にあなたとあなたのアプリのニーズ次第です。

2台目のデバイスで情報をどのように使うか考えてみてください。

これらのクラウド識別子によって参照されるコンテンツを含めるために、アプリケーションの状態をどのように再構築しますか?

さて、2台目のデバイスで、クラウド識別子をダウンロードしてアーカイブ解除したら、それらを使用してライブラリ固有のローカル識別子を検索したいと考えています。

反対方向に作業すると、フォトライブラリへのこの呼び出しは、各cloudIdentifierのlocalIdentifierMappingオブジェクトを含む辞書を返します。

繰り返しますが、辞書を反復し、今回はlocalMappingオブジェクトからlocalIdentifierを取得します。

すべてのlocalIdentifierを取得したら、それらを使用して、ソースデバイスに持っていたアセットを取得して表示できます。

APIがどのように両方向で識別子を簡単に検索できるかを見ることができますが、異なるデバイス構成、アカウント設定、ネットワーク状態、および無数の他の変数の現実は、物事が必ずしもそれほど単純ではないことを意味します。

その複雑さを処理するために、APIはペアのヘルパーオブジェクトを使用して、有効な識別子またはマッピングが失敗した理由を示すエラーを保持します。

識別子マッピングを調べるときに処理する必要があるエラーには2種類あります。

基礎となるレコードが存在しないか、アプリがアクセスできないため、フォトライブラリが識別子マッピングを解決できない場合、APIによって返されるマッピングオブジェクトには、識別子が見つかりませんというエラーが含まれます。

ここでは、識別子が設定されていない場合、localIdentifierMappingオブジェクトからエラーコードを取得する方法を確認できます。

Identifier Not Foundエラーの場合、未解決のcloudIdentifierを追跡して、UIにプレースホルダを配置して、このデバイスで写真が見つからないことを示すことは理にかなっています。

他のタイプのエラーは、識別子マッピングを一意に解決できない場合に発生します。

言い換えれば、提供されたクラウド識別子に一致する複数のアセットがあります。

これは、このデバイスでクラウドの状態が完全に同期しておらず、ライブラリが一致するものを見つけるために画像コンテンツに頼らなければならない場合に発生する可能性があります。

この場合、マッピングオブジェクトにはMultiple Identifiers Foundエラーが発生し、エラーユーザー情報には一致する識別子が含まれます。

Multiple Identifiers Foundのエラーコードを使用すると、LocalIdentifiersErrorKeyを使用して、エラーユーザー情報から一致するローカル識別子を取得できます。

この例では、後で一致する資産を取得して表示し、顧客に決定させることができるように、辞書にそれらを隠しました。

これは、クラウド識別子の概要とその使用方法です。

ローカル識別子とクラウド識別子の間のマッピングを調べるとコストがかかる可能性があるため、フォトライブラリとのアプリのインタラクションでローカル識別子を使用し、ロード時にマッピング作業を実行し、ポイントを保存して保存してから、クラウド識別子を保存して共有して他のデバイスで使用できるようにします。

次は、限られた図書館です。

限られたライブラリの更新に飛び込む前に、フォトライブラリへのアクセスがどのように機能するかを簡単に確認しましょう。

誰かがアプリを起動し、PhotoKitを使用して写真データへのアクセスを要求すると、システムはアプリへのアクセスを許可する前に彼らの許可を必要とします。

そして、これが初めて起こると、このようなアラートが表示されます。

これはお客様にとって本当に重要です。

限られた写真の選択へのアクセス、ライブラリ全体へのフルアクセス、またはアクセスを完全に拒否するなど、このアプリケーションにどれだけのアクセスを許可するかを制御できます。

写真の選択オプションを選択すると、アプリには制限されたライブラリアクセスが許可されます。

制限付きライブラリモードのより完全な説明と、それを最大限に活用するようにアプリを設計する方法については、WWDC '20セッション「アプリで限られた写真ライブラリを扱う」を参照してください。

今のところ、制限されたライブラリアクセスは、アプリ開発者にとって透明になるように設計されていることを知っておくだけで十分です。

一般的に、PhotoKit APIは通常どおりに動作し、ライブラリには選択された写真のみが含まれているように動作します。

一般的なワークフローで便利に動作します。

たとえば、アプリがライブラリに写真を追加すると、その写真は自動的にアプリの限られたライブラリ選択に含まれます。

追加したアセットを追跡するために、カスタムアルバムを使用するアプリに見られる別のワークフローがあります。

しかし、iOS 14では、制限付きライブラリモードでは、カスタムアルバムの作成やアクセスが許可されませんでした。

iOS 15では、制限付きライブラリモードで実行しているときに、独自のアルバムを作成、フェッチ、更新するためのアプリケーションのサポートが追加されました。

さて、別のワークフローに注意を向けましょう。このために、写真ジャーナリングアプリの例を参照します。

私のアプリに限られたライブラリアクセスを選択した顧客に素晴らしい体験をしてもらいたいので、新しいジャーナルの作成の一環として、限られたライブラリピッカーを提示するようにインターフェイスをカスタマイズしました。

これは、ジャーナルの作成中に、より多くの写真を選択するための自然なステップを提供します。

しかし、選択が更新されると、私の顧客がこのジャーナルで使用したい写真であるため、どの写真が追加されたかを知るのは素晴らしいことです。

iOS 15の新しいpresentLimitedLibraryPicker APIを使用すると、ピッカーで選択した写真の識別子を提供する完了ハンドラを渡すことができます。

これにより、選択の更新がいつ完了し、どのアセットを追加したかがわかります。

これは、限られたライブラリのアップデート、独自のアルバムを作成して操作するためのアプリのサポート、および限られたライブラリの選択に追加されたものを追跡する方法をアプリに提供するための新しいAPIをカバーしています。

それが私たちが今日話さなければならなかったことのほとんどですが、私たちが行く前に、私はあなたに次のことを残したいと思います。

しばらくコードを更新していない人のために、アセットライブラリから離れる時が来ました。

iOS 9以降は廃止されており、将来のSDKで削除する予定です。

これは、写真とのより深い統合のために、新しい写真ピッカーまたはPhotoKitに移行する時です。

そして、PhotoKitに移行するもう1つの理由：エラー処理に長年のギャップがあったことを知っており、変更要求処理、リソース要求、およびライブラリアクセスコール中の根本的な問題を特定するために、最終的に新しいエラーコードでそれらに対処したことをお伝えできてとてもうれしいです。

iOS 15のフォトピッカーとPhotoKitに追加したすべての素晴らしい新機能をチェックするのが待ちきれません。

ありがとうございます。