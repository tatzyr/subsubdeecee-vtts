10052

Mac Catalystの新機能へようこそ。

私の名前はジェイソン・ビーバーで、後で同僚のニック・テイスラーが参加します。

Mac Catalystは、既存のiOSアプリケーションをmacOSに持ち込み、Macのより大きなディスプレイ、統合されたキーボード、マウスまたはトラックパッドを最大限に活用できるようにする技術です。

何千人もの開発者がMac Catalystを使用してiOSアプリケーションをmacOSに持ち込んでおり、その結果は信じられないほどでした。

最近のApple賞を受賞したMac Catalystアプリについていくつかお話ししましょう。

Shapr3Dは、MacとiPadの両方でサポートされている産業用強力なCADツールです。

iPadバージョンはマルチタッチと鉛筆の体験として設計されていますが、Mac Catalystで構築された新しいMacバージョンは、デスクトップユーザーが期待するように、マウスとキーボードのサポートを利用しています。

Instapaperは、オフラインで記事を読むための非常に人気のあるアプリで、Mac Catalystのおかげで、Macでデビューしました。

Notabilityは優れたメモ取りアプリです。

既存のMacバージョンを置き換えて、アプリの新しいバージョンは、ユーザーにiPadのすべてのクールな機能を提供しますが、Macの画面サイズ、キーボード、およびより速い速度を利用するように最適化されています。

Apple PencilでSidecarもサポートしています。

新しいAPIの概要から始めて、macOS Montereyで強化したAPIについて説明します。

最後に、ニックがデモアプリで採用したときに、これらの新しいAPIを実際に表示します。

macOS Montereyの新しいAPIの概要から始めましょう。

以前は、macOS Big Surでは、showsMenuAsPrimaryActionプロパティを持つボタンにメニューを添付するサポートを追加しました。

これにより、プルダウンメニューを作成できました。

さて、macOS Montereyでは、changesSelectionAsPrimaryActionと呼ばれる新しいプロパティを使用して、ポップアップボタンのサポートを追加しました。これにより、ボタンのタイトルがメニューの選択を追跡します。

これら2つのプロパティにより、ボタンを設定できる4つの方法があります。

両方のプロパティをfalseに設定すると、標準のプッシュボタンが表示されます。

ボタンをクリックして長押ししたときにメニューが設定されている場合、これは引き続きメニューを表示できることに注意してください。

そのボタンを作成するコードは以下の通りです。

changesSelectionAsPrimaryActionのみがtrueに設定されている場合、クリックしてオンとオフを切り替えることができるトグルボタンが表示されます。

これは、アプリケーションの状態を示すために使用できます。

showsMenuAsPrimaryActionのみがtrueに設定されている場合、プルダウンメニューが表示されます。

また、両方のプロパティがtrueに設定されている場合、新しいポップアップボタンが表示されます。

現在、メニューをプライマリアクションとして表示するように構成されたボタンの場合、ボタンはmacOSの左クリックであるプライマリインタラクションですぐにメニューを表示します。

ただし、メニューをプライマリアクションとして表示するように設定されていないボタンの場合、動作はアプリのイディオムによって異なります。

iPadのイディオムでは、メニューはmacOSでの右クリックであるセカンダリインタラクションでトリガーされます。

しかし、アプリケーションがMacのイディオムを採用している場合、メニューはボタンを長押しすることでトリガーされます。

「Meet the UIKitボタンシステム」ビデオで、ボタンの新機能について詳しく知ることができます。

Mac CatalystアプリでToolTipsを利用できるようにしました。

ツールチップは、アプリケーションのビューにカーソルを合わせると表示される小さなフローティングウィンドウです。

また、コンテンツに関するコンテキストや追加の詳細を提供するために使用できます。

UIViewにToolTipを追加するには、UIToolTipInteractionを使用します。

必要なのは、テキスト文字列でUIToolTipInteractionを作成し、そのインタラクションをビューに追加することだけです。

ただし、ToolTipsの一般的な用途の1つは、UI内のコントロールの動作を明確にすることです。

これは、ツールチップをすばやく設定できるように、UIControlに便利なプロパティを追加したほど一般的なパターンです。

ラベルは、編集不可能な文字列を表示するために、iOSアプリ全体で使用されます。

ラベルの内容が長すぎて収まらない場合、ラベルはテキストを切り捨てなければなりません。

さて、macOS Montereyでは、ラベルの完全な内容が利用できるように、拡張ツールチップのサポートを追加しました。

このサンプルUIでは、タイトルラベルの内容が長すぎて収まりません。

拡張ツールチップを有効にすると、ラベルにマウスを合わせると、完全なタイトルが表示されます。

これは、showsExpansionTextWhenTruncatedと呼ばれるUILabelの新しいプロパティで有効にすることができます。

info.plistに追加できるUIApplicationSupports PrintCommandという新しいinfo.plistキーを導入しました。

trueに設定すると、起動時にMac Catalystアプリケーションに「印刷」と「PDFとしてエクスポート」のメニュー項目が自動的に追加されます。

このplistキーは、iOSアプリケーションにも追加でき、iPadOSショートカットオーバーレイに「印刷」オプションが表示され、iOSアプリケーションがM1 Macで実行されているときに「印刷」と「PDFとしてエクスポート」メニュー項目も表示されます。

このplistキーは、「印刷」と「PDFとしてエクスポート」のメニュー項目をオペレーティングシステムに伝えますが、ストーリーの半分にすぎません。

それでも、コードに印刷サポートを明示的に実装する必要があります。

これを行うには、printContentと呼ばれる新しいUIResponderアクションがあります。

任意のUIResponderでこれを実装することができ、レスポンダーチェーン検索は適切な印刷ターゲットを見つけるために使用されます。

printContentの実装が呼び出されたら、通常どおりUIPrintInteractionControllerを設定して使用するだけです。

私たちは今、あなたのウィンドウにサブタイトルを追加するためのサポートを持っています。

これは、アプリケーションの状態に関する補助情報を提供するために使用できます。

これは、サブタイトルと呼ばれるUISceneの新しいプロパティで設定できます。

macOS Montereyでは、ショートカットアプリケーションがMacで利用可能になりました。

アプリケーションがiOSでカスタムインテントを採用している場合、MacのSiriとショートカットで利用可能になります。

アプリ内インテント処理とインテント拡張機能の両方が利用可能です。

したがって、以前にMac CatalystアプリでIntents拡張機能の構築を無効にしたことがある場合は、再有効にすることができます。

詳細については、「Meet Shortcuts for macOS」のビデオをご覧ください。

これは、macOS Montereyで新しいAPIの概要をまとめたものです。

macOS Montereyで強化したAPIの概要に移りましょう。

アプリのテーマに合わせて書いたカスタムボタンやスライダーがある場合は、ネイティブコントロールをオプトアウトしてMacのイディオムを採用するときにMac Catalystにそれらを保持できますが、独自のスケーリングを77%に下げる必要があります。

さて、このアプリ全体で行うことはお勧めしませんが、アプリのエクスペリエンスの鍵となる特定のコントロールに対してのみお勧めします。

新しいボタンシステムは、よりクロスプラットフォームの方法でアプリのテーマに合ったボタンを作成するためにも使用できます。

そして、これについては「UIKitボタンシステムを満たす」ビデオで詳しく知ることができます。

UIBehavioralStyleは、これを可能にする新しい列挙型です。

UIButtonとUISliderにはそれぞれ2つの新しいプロパティがあります。preferredBehavioralStyleはreadwriteで、behavioralStyleはこのプロパティの読み取り専用解決値です。

iOSでは、behavioralStyleの解決された値は変更されないので、このコード行を.padまたはmacに明示的に設定して、iOSアプリに影響を与えずにMac Catalystケースを処理するのは簡単です。

ドキュメントベースのアプリの場合、ウィンドウタブをオプトアウトするUIApplicationSupports TabbedSceneCollectionという新しいplistプロパティがあります。

Falseに設定すると、ウィンドウのタブは無効になり、デフォルトのタブ関連のメニュー項目は追加されません。

現在、Macウィンドウの外に移動しないように、カーソルを非表示にしてロックするためのUIPointerLockStateをサポートしています。

これはゲームにとって本当に便利なので、ユーザーが誤ってゲームの外をクリックして別のアプリケーションを前面に持ち込まないようにします。

アプリやウィンドウを切り替えると一時的にウィンドウのロックが解除され、ウィンドウをクリックすると再ロックされます。

また、水平軸または垂直軸でiBeamカーソルを取得するために使用できるUIPointerShapeもサポートしています。

macOSでこのAPIを使用すると、正規のNSCursorシェイプの1つを取得します。

最後に、アプリで必要に応じてカーソルを非表示にできるように、非表示のポインタスタイルをサポートしています。

私たちは、新しく強化されたUIKit APIをいくつか調べてみました。

さて、ニックに渡して、これらの新しく強化されたAPIを使用して、Mac CatalystアプリをMacでさらにくつろげる方法を説明します。

ありがとう、ジェイソン!

これらの新機能は非常に興味をそそられます。

私はすでにそれらを試してみる機会がありました。

Catalystチームが開発したアプリのデモをご案内します。 

Catalystチームは旅行作家として月明かりであることが判明しました。

そこで、私たちはiPhoneとiPad用のトリッププランナーを開発しました。

これは、M1を搭載した13インチのMacBook Proで実行されているトリッププランナーです。

できるだけ多くのユーザーがアプリを利用できるように、M1 Macで実行するためにアプリを選択しました。

アプリの機能のツアーをしましょう。

トリッププランナーは、世界中で訪れるべき素晴らしい場所をリストアップし、さまざまな頻繁な旅行者プログラムにリワードポイントを引き換えることができるアプリです。

そのUIは3列のスプリットビューコントローラーに基づいています。

サイドバーを使用すると、お気に入りの国の宿泊施設、レストラン、サイト間を移動したり、報酬プログラムを選択してポイントを確認して使うことができます。

サイドバーで何かを選択すると、それがカテゴリの場合、Trip Plannerはスプリットビューコントローラーの補足列にその内容を表示します。

補足ビューコントローラーには、日本、スペイン、ブラジル、タンザニアの観光スポット、レストラン、宿泊施設があります。

代わりに、サイドバーのリーフアイテムまたは補足ビューコントローラーのアイテムを選択すると、セカンダリビューコントローラーはそのアイテムの詳細を表示します。

日本で一番好きなカフェの1つ、エクストリーム抹茶を選びます。

詳細ビューコントローラーには、カフェに関するテキスト、旅行を計画するのに役立つボタン、エクストリーム抹茶がどこにあるかを示すマップビューが含まれています。

トリッププランナーの場合、M1 Macでは箱から出してすべてがうまくいきました。

しかし、iOSアプリなので、Macでくつろげるようにするためにできることはたくさんありました。

さらに進むには、そのチェックボックスをチェックしてMac Catalystアプリにする必要がありました。

具体的には、このチェックボックス。ズームできますか？

そして、チェックボックスをオンにしてアプリを強化します。

これはMac Catalyst用に最適化されたトリッププランナーです。

新しいウィンドウを開くためのダブルタップジェスチャーリコグナイザ、カスタムタイトルバーの外観など、Mac固有の機能を追加し、ネイティブコントロールとシャープなテキストを提供するMac用に最適化することでオールインしました。

そのプロセスに関する完全なストーリーについては、「素晴らしいMac Catalystアプリの資質」と「Mac Catalystアプリのインターフェースの最適化」をご覧ください。

トリッププランナーの最終版では、ジェイソンが先ほど話した新しいAPIを採用しました。

それぞれの養子縁組をカバーします。

サンプルプロジェクトをダウンロードすることを強くお勧めします。

ここに示すすべてのスニペットは、そのコードから直接取得されています。

これはmacOS Monterey用に完全に更新されたアプリです。

エクストリーム抹茶をもう一度選びました。

背景色のmacOSスタイルのボタンの形でUIにいくつかの色に気づくかもしれません。

しかし、私はそれらに戻ります。

最初にシーンの字幕について話したいと思います。

私は新しいUISceneサブタイトルプロパティを使用して2つのことをしています。

まず、サブタイトルを使用して、Macでよりくつろげる方法で詳細ビューコントローラーのタイトルを表示しています。

ウィンドウの字幕は、ナビゲーションアイテムのタイトルよりもMacに似ています。

第二に、ユーザーがアプリをナビゲートする際に役立つコンテキストを提供するために字幕を変更しています。

トリッププランナーでは、日本とタンザニアを選びます。

だから、窓のサブタイトルには「国」と書かれています。

この小さなキャンプ場を選択すると、ここの補足ビューコントローラーで、サブタイトルが変更され、グランプキリマンジャロを選択したことを知らせます。

そして、リワードプログラムセクション全体を選択すると...

サブタイトルは再び国と報酬プログラムに変わり、ユーザーのコンテキストが追加されます。

字幕がCatalystアプリにコンテキストを追加するのにどのように役立つかについても考えてください。

また、字幕はUITitlebarツールバースタイルごとに異なって表示されることに注意してください。

あなたのアプリに最適な外観を見つけるために、これを試してみてください。

字幕を設定するには、文字列値から始めて、シーンへの参照を取得し、字幕プロパティを設定します。

これをシーン接続時に設定するか、後でビューのウィンドウのシーンにアクセスして設定できます。

次に、トリッププランナーでツールチップを採用した方法を紹介します。

macOSの非常に一般的なインタラクションパターンは、その何かについての詳細を得るために、一時的に何かの上にマウスをホバリングすることです。

このテクニックは、アプリのUIを乱雑にすることなくユーザーを教育する長年の方法です。

ツールチップは、切り捨てられたラベルの全文を表示することもできます。

ここで、私はブラジルのイグアスの滝を選びました。

画像にマウスを合わせると、ツールチップが表示されます!

曇りの日には、青々とした深い緑の森が轟音のイグアスの滝を取り囲んでいる。

なんて素敵な説明でしょう。

新しいUIToolTipInteraction APIを使用して、この機能をすべての画像に追加し、Macでアプリをよりくつろげるようにします。

また、UILabel APIを使用して、国際化された通貨フォーマットのために切り捨てられるこれらのラベルの拡張を可能にし、予想よりも少し長くなりました。

ジェイソンが先に調べたように、ToolTip APIにはさまざまな形式があります。

ヒーロー画像の場合、UITooltipInteractionDelegateなしでUIToolTipInteraction APIを使用することは、任意のビューにToolTipとして定数テキストを添付したかったので、私のニーズに合っていました。

通貨テキストには、UILabelのshowsExpansionTextWhenTruncatedプロパティを使用しました。

また、ToolTipを任意のコントロールに添付したい場合は、UIControlのToolTipプロパティが適切なAPIです。

macOS MontereyのCatalystで利用可能なさまざまな新しいボタンに移ります。

新しいiOS 15 UIButtonConfiguration APIの紹介については、「Meet the UIKit button system」ビデオをチェックすることをお勧めします。

これらの新しいUIButtonConfigurationプロパティの多くは、Mac用に最適化されたCatalystアプリに独自の症状があります。

さらに良いことに、iOSと同様に、UIButtonで定義されたプロパティをUIButtonConfigurationのプロパティと混在させて一致させることができます。

たくさんのボタンを見せて、その後、それぞれがコードでどのように構成されたかをお見せします。

新しいボタンの背景色を披露するために、新しい目的地を選びます。

コパカバーナはどうですか？

ここのボタンは塗りつぶされた構成を使用しているので、環境の色合いの色を拾い、画像と背景のぼかしによく一致する色を自動的に取得します。

では、報酬の詳細ビューコントローラーに移動します。

サイドバーからプログラムを持ち出します...

そして、Diamond Dubloonsリワードプログラムを選択してください。

このビューの目的は、旅行で獲得したポイントを交換し、何に交換するかを選択できるようにすることです。

スライダーを使って、何ポイント使うかを選択できます。

このトグルボタンを使用してポイント乗数をアクティブにし、添付のメニューで乗数を選択することもできます。

ポイント乗数だけが理にかなっているので、最大の数字を選ぶような気がします。

だから、私は6つを選びます。

何がキャッチなのかしら。

これらの大きなボタンを切り替えて、引き換えるカテゴリを選択できます。

引き換え、キャッシュアウト、またはポイントの寄付のどちらかを選択できます。

そして、最終的に提出する準備ができたら、右下の送信ボタンをクリックするか、このリセットボタンをクリックしてやり直すことができます。

ここにはかなりの数の新しいボタンがあります。

それぞれを設定する方法を紹介します。

まず、私たち全員がよく知っているもの、つまりプッシュボタンをカバーします。

詳細ビューコントローラーでは、これは送信ボタンでした。

これは、Big Surで導入されたシステムタイプのUIButtonに過ぎ、その役割はプライマリに設定されています。

次に、ポイント乗数メニューボタンがあります。

このボタンは、プライマリクリックで状態を切り替え、長押しするとメニューが表示されます。

最終的にはカスタム背景色が欲しいと思うので、塗りつぶされた設定を使用し、タイトルを「ポイント乗数」に設定します。

トグル動作を取得するには、Jasonが教えてくれた新しいブールプロパティ、changesSelectionAsPrimaryActionを使用します。

それをtrueに設定します。

これで、ボタンの背景色は、アプリの色合いと標準の無色の外観を切り替えます。

乗数の値といくつかのUIActionsで設定されたメニューも添付します。

そして最後に、メニューのアクションハンドラでは、ユーザーが最大のポイント乗数を選択すると、条件付きでトグルの背景色をシステムの赤に変更します。

次に、リセットボタンを設定します。

プレーンな構成を使用して、ボーダレスの外観を得ることができます。

この構成はiPadOSの外観と非常によく似ています。

ボタンの役割を破壊的に設定し、誤ってアクションをトリガーするのを防ぐイベント処理を行うようにシステムに指示します。

そして、そのティントカラーをシステムレッドに設定します。

そのボタンはそれだけです。

引き換え、キャッシュアウト、寄付のどちらかを選択できるビューの左下にあるポップアップボタンについては、ボタン設定APIを使用する必要はありません。

システムボタンを作成し、changesSelectionAsPrimaryActionをtrueに設定します。

意味的には、それはポップアップボタンが行うことです。

次に、showsMenuAsPrimaryActionをtrueに設定します。なぜなら、それは意味的にもポップアップボタンが行うことだからです。

しかし、何を与えますか?ボタンは変わっていません。

実際、それは持っています。

別のトグルボタンを実現しました。

しかし、デフォルトの状態は、もちろんオフです。

ヌル以外のメニュープロパティがありません。

これは、Mac Catalystでポップアップの外観を新しくするために重要です。

メニューを何かに設定したので、ポップアップボタンは完全に機能しています。

最後に、これらの大きなパネルのようなトグルボタンに焦点を当てます。

このレイアウトは、iPadスタイルのボタンがレイアウトされたスペースを埋めるためにどのように伸びるかを利用しています。

Macスタイルを使用するボタンは、このように動作しません。

Trip PlannerがMac用に最適化に設定されていても、iPadの動作を維持することができました。その方法は次のとおりです。

私はさらに別の塗りつぶされたボタン構成から始めました。

次に、設定を使用して画像を設定し、画像のボタンの状態を指定する必要はありません。

.padの動作スタイルを指定すると、iPadのレイアウト動作が取得されます。

つまり、ボタンの背景が伸びてフレームを埋めます。

シンボルはもう少し大きくする必要があったので、より大きなポイントサイズでボタンに好みのシンボル構成を設定しました。

以前と同様に、changesSelectionAsPrimaryActionをtrueに設定し、ボタンのisSelectedプロパティに基づいて、選択されている色と選択されていない色を指定するcolorUpdateHandlerを提供しました。

私はあなたがこれらの新しいオプションのすべてに私と同じくらい興奮していることを知っています。

UIButtonのAPIの長年のメンバーと光沢のある、真新しいプロパティは、Macで自宅で大丈夫なボタンの過多を作成するために、多くの方法で混合し、一致させることができます。

私があなたに見せたいトリッププランナーの最後の特徴は印刷です。

新しい組み込みのキーコマンドサポートにより、印刷はCatalystでこれまで以上に簡単です。

レスポンダーチェーンを使用して印刷を処理する最も適切なオブジェクトを選択することで、トリッププランナーの印刷体験を向上させることができました。

それが何を意味するのかを実証させてください。

トリッププランナーの最新バージョンに戻って、私はスペインで最も愛されているレストランの1つ、Charcuterie Boredを選びました。

Catalyst固有のズームコントロールをクリックして、マップビューを操作します。

これで、アプリケーションのフォーカスとファーストレスポンダーのステータスは、この詳細ビューコントローラーに移動しました。

メニューからファイル印刷を選択すると、印刷ダイアログが表示されます...

この1つのアイテムだけを印刷することを申し出ます。

さて、その日の計画を完了するために、パルケ・グエルとホテル・バルセロナも選びます。

組み込みのショートカットコマンド+Pを使用して印刷します。

印刷ダイアログが表示されたら、選択した3つのアイテムをすべて印刷できるようになりました...

現在の詳細ビューコントローラーだけではありません。

最後に、Shift + Tabがサイドバーの国に集中し、補足または詳細ビューコントローラーで何も選択されていない場合...

そして、印刷しようとすると、トリッププランナーは何をすべきかを知っていて、サイドバーで選択したすべてのアイテムを印刷します。

では、どうすればこれを達成できるのでしょうか?

まず第一に、Jasonが導入した新しいinfo.plistキーは、Trip Plannerが印刷をサポートし、メニュー項目を追加したいことをシステムに知らせるように設定する必要があります。

詳細ビューコントローラーでは、UIResponderから2つのメソッドをオーバーライドしました。

印刷コンテンツは実際の印刷を行い、UIKitはレスポンダーチェーンでこのアクションを実行できるオブジェクトを探します。

場合によっては、アプリケーションのビジネスロジックによって決定され、詳細ビューコントローラは印刷したくない場合があります。

そこで、canPerformActionメソッドを使用して、詳細ビューコントローラーが印刷できるかどうかをレスポンダーチェーンに通知しました。

このメソッドはprintContentの前に呼び出され、falseを返すと、UIKitがそのアクションを実行できるオブジェクトを探してレスポンダーチェーンを登るため、詳細ビューコントローラはスキップされます。

アプリケーションのルートビューコントローラーであり、ほとんどの場合、レスポンダーチェーンの上部に近いBrowserSplitViewControllerでは、別のUIResponderメソッド、targetForAction:withSenderを実装しました。

これにより、スプリットビューコントローラーは、どのオブジェクトが印刷を処理するかを選択できます。

これは、ユーザーの選択とビジネスロジックがいくつかのページセットを印刷する必要があると指示する場合に便利ですが、特定の印刷を実装するオブジェクトはレスポンダーチェーンの一部ではありません。

これは、そのオブジェクトにbeonFirstResponderを送信することによって、そのオブジェクトをレスポンダーチェーンに強制するよりもはるかに好まれます。これは、このシナリオで使用される場合はアンチパターンになります。

そして、それは印刷用です。

私はグリッドから外す準備ができているようです。

このビデオでは、ジェイソンは、あなたのアプリをこれまで以上にMacにもたらすのに役立つ新しいMac Catalyst APIと強化されたMac Catalyst APIを紹介してくれました。

それから、私はトリッププランナーでそれらを採用する方法を示しました。

ほとんどの場合、それらは単なる新しいプロパティであり、設定する1行で、Catalystアプリに典型的なMac機能をもたらします。

これらを自分で試してみてください。

いくつかのマイナーなコード変更を行い、Mac Catalystアプリがどのように大きな改善を得るかを見てください。

見てくれてありがとう。

[パーカッシブミュージック]。