10087

こんにちは、私はパフォーマンスツールエンジニアのソニアです。

今日、同僚のShreyasと私は、アプリでパワーとパフォーマンスの回帰を診断する方法を紹介します。

毎年、あなたは可能な限り最高のアプリをリリースするために一生懸命働いています。

アプリで素晴らしい体験にユーザーを招待したいので、パワーとパフォーマンスの最適化が非常に重要です。

この講演では、アプリのパフォーマンスに影響を与える主要な指標、回帰を発見するのに役立つツール、ディスクの書き込みを減らすのに役立つ洞察、およびパフォーマンスワークフローを自動化するためのAPIについて説明します。

パフォーマンスを最適化するために、アプリを変更することなく、Xcode OrganizerとApp Store Connect APIを通じて利用可能なメトリクスと診断の包括的なセットがあります。

ご存知のように、パフォーマンスを最適化するのは簡単ではありません。

非常に多くのメトリックと診断が利用できるので、情報の海で迷子になりやすいです。

各リリースを前回よりも良くしたいが、パフォーマンスの優先順位を要約する簡単な方法が必要です。

Xcodeオーガナイザーは、パフォーマンスを理解するための素晴らしいツールです。

現在、バッテリー、起動、ハング、メモリ、ディスク書き込み、スクロールヒッチ、終了など、7つのメトリックカテゴリのデータを収集しています。

それは処理すべき多くの情報です。

次にXcodeオーガナイザーに飛び込んで、パフォーマンスの回帰を診断しましょう。

アプリのさまざまな指標を見ることから始めます。

左側のナビゲーションバーにある7つのメトリックカテゴリから選択できます。

バッテリーや終端などの一部のカテゴリには、複数のセクションと、さまざまなイベントタイプを詳述するサブカテゴリがあります。

オプションで、何十もの異なるデバイスタイプと、アプリのトップユーザーと典型的なユーザーのパーセンタイルから選択できます。

オーガナイザーの中央には、過去16のリリースのデータを含むチャートが表示されます。

この場合、アプリの終了を調査したいです。

画面上のチャートは、最新バージョンで終了が大幅に増加したことを示しており、特に青色で強調表示されたより違法な命令の終了により、リリースに問題がある可能性があることを示しています。

現場でのパフォーマンスを理解するために利用できる非常に豊富で興味深いメトリクスのセットがありますが、非常に多くのデバイスオプション、メトリクスカテゴリ、およびサブカテゴリがあるため、パフォーマンスを最適化するためにどこから始めるべきかは明らかではありません。

そのため、主催者にインサイトセクションがあり、すべてのパフォーマンスの優先順位を強調し、ワークフローを合理化します。

Xcodeオーガナイザーは現在、メトリクスデータを処理し、パフォーマンスの回帰などの興味深い傾向を特定します。

飛び込む前に、パフォーマンス回帰とは何か、どのように検出されるかについて話しましょう。

回帰は、最近のリリースと比較して、電力またはパフォーマンス領域でアプリのパフォーマンスが悪い場合に発生します。

例えば、リリース後の起動に時間がかかる場合。

この例では、メトリックは最近のリリースで分析され、値が上昇傾向にあるかどうかを判断します。

その後、メトリックは過去数回のリリースで平均化され、最新の値と比較されます。

メトリックが上昇傾向にあり、最新の値が過去数回のリリースの平均よりも高い場合、回帰としてフラグが付けられ、インサイトセクションに要約されます。

この例では、アプリの起動に平均1.1秒かかりましたが、最後のリリースで突然2.5秒にジャンプし、回帰としてフラグが立てられていました。

回帰がどのようにフラグ付けされるかがわかったので、主催者に戻って、いくつかの例を掘り下げてみましょう。

回帰タブを見てみましょう。

パフォーマンスの最優先事項を発見できるワンストップショップです。

最近のリリース後、あなたのアプリは突然クラッシュしますか?

そのクールな新しいカメラ機能は、デバイスのバッテリーを消耗していますか?

これらの質問に対する答えは、インサイトセクションにあります。

必要なすべてのデータは、現場でのパフォーマンスを理解するために、この移動先セクションで強調表示されます。

ここでは、典型的なパーセンタイルと上位パーセンタイルのデバイス間で異なるメトリックカテゴリとサブカテゴリの回帰を発見できます。

左側は、どのメトリックが回帰したか、どのくらい、どのパーセンタイルで回帰したかを要約し、さらに優れたアプリを作成するために何に焦点を当てる必要があるかを正確に強調します。

私のアプリには、終端、メモリ、ディスク書き込みにわたっていくつかの回帰があります。

次に、それぞれの例とそれらを解釈する方法を見ていきます。

終了回帰から始めます。

解雇を受ける前に、「なぜ私のアプリが殺されるのか」のビデオをチェックしてください。

より多くの文脈のために。

各回帰は、私の最新のアプリリリースからのすべてのトップ問題を要約します。

セクションの上部には、不正な命令がクラッシュを引き起こしていることを示しています。これは、アプリが無効な関数ポインタにアクセスすると発生する可能性があります。

さらに下には、私のアプリの最後の4つのリリースで違法な命令終了のチャートがあります。

チャートの上部は、どのパーセンタイルとデバイスが影響を受けたかを示しています。

この場合、すべてのiPhoneの上位パーセンタイルユーザーは、最新のリリースでより多くのクラッシュを経験しています。

違法な命令出口の平均数と最新の数は、チャートの右側にあります。

この場合、私のアプリは最新バージョンで10日ごとにクラッシュし始めました。

画面上の終了は、ユーザーがホーム画面に戻って頻繁にアプリを再起動する必要があるため、非常に破壊的です。

これらのクラッシュの原因となる無効な関数ポインタへの参照を削除し、クラッシュ診断を見てさらに掘り下げることができます。

クラッシュ診断の詳細については、「Triage TestFlight crashes with Xcode」ビデオをご覧ください。

回帰とクラッシュ診断を使用して、次のアプリのリリースで画面上の終了を減らす必要があることがわかった。

私は画面上の終了で停止したくないし、私にできることがもっとあることを知っています。

アプリの回帰をチェックして、改善のための他の分野を発見します。

タスクのタイムアウトにも回帰があるようです。

一部のメトリックは、複数のデバイスとパーセンタイルで退行する可能性があります。

この場合、タスクのタイムアウトは、典型的なパーセンタイルと上位パーセンタイルの両方ですべてのiPhoneで増加しています。

右側の各回帰をスクロールして、最近のリリースのデータと、メトリックの最新値と平均値を表示できます。

アプリがバックグラウンドに切り替えられると、システムがタスクを終了する前に30秒でタスクを実行します。

これは、バックグラウンドタスクを適切に終了しないと、アプリがより頻繁に終了し、ユーザーが次回切り替えるときに起動が遅くなる可能性があることを意味します。

私のアプリは現在、バックグラウンドで3日ごとに終了しています。

画面上の終了ほど破壊的ではありませんが、バックグラウンド終了ははるかに一般的になる可能性があります。

アプリがバックグラウンドで終了した場合でも、シームレスな起動体験が不可欠です。

UIKitの状態復元機能を統合して、バックグラウンドの出口からスムーズに回復できます。

最後に、私のアプリの回帰に戻ると、私が集中する必要があるもう1つのパフォーマンス領域があります。

ディスク書き込みは前回のリリースで28%増加しましたが、問題の原因は明らかではありません。

パフォーマンスに問題があることは知っていますが、アプリを最適化する前に、どこから始めるべきかについてより多くの洞察が必要です。

次に、Shreyasは、ディスク書き込み回帰の主な原因を発見する方法を説明します。

ありがとう、ソニア。

こんにちは、私はシュレヤスです。

私はAppleのストレージソフトウェアエンジニアであり、ディスク書き込み回帰をデバッグし、アプリのパフォーマンスを把握する方法について説明します。

しかし、これに飛び込む前に、なぜディスク書き込みがそんなに重要なのですか?

ストレージは、CPUやメモリと非常によく似ていますが、限られたリソースです。

チェックされていないディスクの書き込みは、基礎となるデバイスが摩耗し、損傷する可能性があります。

彼らはまた、迷惑な画面上のハングやUIヒッチの一般的な原因です。

私たちが注意しなければ、彼らはすぐにバッテリーの寿命を食い尽くす可能性があります。

これらは、ディスク書き込みの最適化を優れたユーザーエクスペリエンスを確保するための重要なコンポーネントにします。

それを念頭に置いて、高ディスク書き込みを診断するために利用可能なリソースについて学びましょう。

Xcodeオーガナイザーのディスク書き込みレポートペインは素晴らしい出発点です。

これらのレポートは、アプリ分析の共有に同意したデバイスから収集され、書き込みにつながったスタックトレースに関する情報が含まれています。

各レポートのスタックトレースは複数の署名に分割され、書き込みはすべてのレポートで署名のために追跡されます。

このレポートリストでは、署名は書き込みの合計に基づいてソートされて表示されます。

各署名について、書き込みの原因を示す詳細なスタックトレースを見つけることができます。また、受信されたログの数、OSバージョンとハードウェアモデルの内訳などに関する統計情報を見つけることもできます。

問題領域を特定するには、トップの署名に細心の注意を払ってください。

この場合、トップシグネチャは書き込みの67%を担当します。

コールスタックから、これはSQLite関数によるものだと推測できます。

多くの場合、問題の原因であるこれを知ることは、問題の解決に大いに役立ちます。

しかし、多くの場合、この場合のように、修正は明らかではないかもしれません。

ここのコードは私の新機能にとって重要であり、明らかなバグは見当たりませんし、次のステップがどうあるべきかは明らかではありません。

どこを見るべきかを知っていれば、答えはスタックトレースに存在することが判明しました。

スタックの奥深くには、多くの場合、使用しているライブラリの関数があり、何が間違っているのか、十分な研究があれば、それを修正する方法を伝えることができます。

しかし、それは非常に難しい場合があります。

多くの場合、特定のドメインの知識が必要であり、非常に時間がかかる場合があります。

このすべての労力を節約するために、Xcode 13では、オーガナイザーにはインサイトと呼ばれる新しいフィールドがあります。

舞台裏では、リポジトリは高いディスク書き込みを引き起こす既知のアンチパターンで維持されています。

レポートを受け取ると、これらのアンチパターンを示す機能がスキャンされます。

一致がある場合、問題は問題を解決するための最適化の提案とともにここで強調表示されます。

これにより、デバッグの労力を大幅に節約しながら、アプリの書き込みを減らし、パフォーマンスを向上させることが容易になります。

たとえば、トップシグネチャの場合、インデックスを追加するための最適化の提案が表示されます。

また、問題を詳細に説明し、問題をデバッグして修正する手順を説明するドキュメントページへのリンクもあります。

すごい。

さて、アドバイスに従って、それが役立つかどうか見てみましょう。

これを行うには、ファイルアクティビティツールを起動させてください。

ファイルアクティビティインストゥルメントは、ストレージに関連するすべての問題をデバッグするための素晴らしいリソースです。

アプリが実行するすべての読み取りと書き込みの詳細な内訳が表示されます。

それは私の修正を検証するのに最適なツールです。

以前は、機器は一時ファイルへの約180メガバイトの書き込みを示していました。

これにより、780ミリ秒のレイテンシも導入されます。

そして今、インデックスの後、関数による書き込みはゼロに下がります。

これは、SQLiteがより効率的になるためです。

これは、780ミリ秒のレイテンシが遅くなっなくなったことを意味します。SQLiteインデックスはその一例です。

アプリのパフォーマンスを向上させるための他の最適化提案の範囲があり、このリストを拡張するための継続的な作業があるので、今日あなたのアプリの洞察をチェックしてください。

インサイトペインに戻りましょう。

私たちのアプリには3つの回帰がありました。

私たちはそれらのそれぞれを精査し、それらをすべて解決するために利用可能なリソースを発見しました。

それはすごい。

Xcodeオーガナイザーにはたくさんのパワーとパフォーマンスの分析があり、洞察はアプリのパフォーマンスの優先順位を発見するためのゴー・トゥ・ペインであるべきです。

それを最大限に活用してください。

回帰と洞察を定期的に、そして間違いなくすべてのリリース後にチェックすることを計画してください。

Xcodeオーガナイザーに加えて、今日カバーされているすべての分析にアクセスする別の方法があり、それはApp Store Connect APIです。

これらは、プログラムでデータにアクセスし、カスタムソリューションを構築したい場合に最適です。

おそらく、あなたはすでに設定した分析パイプラインを持っています。

これらのAPIは、これらすべてのクールな分析を統合するのに最適なツールです。

WWDC 2020のビデオ「パワーとパフォーマンスAPIでトレンドを特定する」をチェックしてください。

APIのエンドポイントとレスポンスを非常に詳細にカバーしています。

APIの応答の概要を簡単に説明しましょう。

メトリクスについては、perfPowerMetricsエンドポイントにGETリクエストを行うことができます。

これは、最近のバージョンのアプリのメトリクスとインサイトを含むJSONレスポンスを返します。

インサイトセクションに飛び込みましょう。

インサイト内では、アプリで特定されたすべての回帰を見つけることができます。

回帰ごとに、メトリックカテゴリと特定された回帰の概要があります。

これは、Xcode Organizerで以前に発見した違法な命令による画面上の終了です。

次に、人口セクションがあります。

これは、影響を受けるパーセンタイルとデバイスの詳細で構造化されたリストを提供します。

これらを使用して、アプリのパフォーマンスを向上させるための集中的なアクションを実行できます。

同様に、診断レポートの場合、診断署名のエンドポイントにGETリクエストを行うことができます。

応答にはトップ署名のリストがあり、各署名にはそれに関連付けられた詳細へのリンクがあります。

このリンクへのGETリクエストは、詳細な診断ログと署名に関連する洞察を提供します。

分析パイプラインでこれらのAPIを使用し、洞察が表示されたら、すぐに行動を起こしてください。

これで、パフォーマンス回帰とは何か、それらをどのように診断できるか、そしてそれらを修正するための実用的なデータを見つけることができる場所がわかりました。

次にやるべきことは次のとおりです。おく必要があります。

今すぐXcodeオーガナイザーを開いてください。回帰ペインをチェックしてください。

アプリのトップパフォーマンスの回帰が何であるかを確認してください。

あなたのアプリがどれだけ書いているか調べてください。

トップディスク書き込みコールスタックは、あなたが期待するものですか?

それとも、アプリを遅くする隠れたバグがありますか?

最後に、アプリのパフォーマンスを常に把握する計画を立ててください。

Xcodeオーガナイザーを定期的にチェックし、カスタム分析パイプラインでApp Store Connect APIを使用してください。

お時間をいただきありがとうございます。幸せな回帰狩り。

[明るい音楽]。