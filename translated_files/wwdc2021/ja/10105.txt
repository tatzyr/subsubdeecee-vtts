10105

こんにちは。私は認証体験チームのエンジニア、エリン・ウェルズです。

アプリやウェブサイトが誰かにパスワードを要求した場合、アカウントのセキュリティが極めて重要であることを知っています。

このビデオでは、顧客のアカウントをより安全に保つ方法と、iCloudキーチェーンに組み込まれた新しい検証コードジェネレータを使用して、確認コードでさらに簡単にサインインする方法について説明します。

これは大きな話題であり、私はそれを3つの重要な部分に分解するつもりです。

まず、パスワード、セキュリティ上の問題のいくつか、およびマルチステップ認証がこれらの問題のいくつかに対処するのにどのように役立つかについて話します。

次に、iOS 15とmacOS MontereyのiCloudキーチェーンに組み込まれたまったく新しいオーセンティケータを含む、時間ベースの検証コードについて話します。

最後に、私は一歩下がって、認証の世界で起こっている大きな変化の始まりと、人々が検証コードでサインインする方法を改善する他の機会について議論します。

さて、パスワードとマルチステップ認証について話しましょう。

パスワードはどこにでもあり、人々はその使い方を理解しています。

しかし、正しく使用するのが難しいことが判明しました。

実際、パスワードを正しく使用するよりも、パスワードを誤用する方が簡単です。

人々は頻繁に複数のウェブサイトでパスワードを再利用したり、推測しやすいパスワードを選択したりします。

また、攻撃者が誰かにパスワードを放棄するように説得することもかなり簡単です。

したがって、サービスはジレンマに直面しています。ログインを簡単にしながら、ユーザーのアカウントにセキュリティを追加するにはどうすればよいですか?

多くのサービスは、ログインフローにステップを追加します。

彼らは誰かの身元を確認するために追加の情報を求めます。

このような手順を追加すると、誰かのパスワードを持つ攻撃者がその人のアカウントにアクセスできる可能性を減らします。

また、攻撃者は、その人が同じパスワードを使用した他のアカウントに自動的にアクセスできないことを意味します。

確認コードは一般的な追加ステップです。

サービスは、誰かがユーザー名とパスワードを入力した後、これらのコードを要求します。

これらのコードは、SMS、電子メール、またはプッシュ通知を介して配信されるか、その人の電話またはハードウェアキーフォブのオーセンティケータアプリによって生成されます。

これらのコードの本質的な特徴は、シングルユースであることです。

記憶したり保存したりすることを意図していないため、パスワードのように再利用されることはありません。

ただし、検証コードはまだ人間がコードを入力する必要があるため、パスワードと同じようにフィッシングされが実行されがちです。

確認コードが配信される最も一般的な方法は、SMSです。

携帯電話を持っているほとんどすべての人がテキストメッセージを受信でき、人々はテキストの送受信を理解しています。

オートフィルにより、これらのコードの使用がさらに簡単になりました。

1回タップするだけで、任意のテキストフィールドにコードが入力されます。

しかし、SMSで配信される確認コードにはまだ本当の問題があります。

一つには、彼らはあまり安全ではありません。

彼らはキャリアネットワークのスヌーピングや、攻撃者が他の誰かのためのメッセージを受信できるSIMスワップ攻撃に対して脆弱です。

人々は、テキストメッセージがエラーなく行ったり来たりすることを当然のことと考える傾向がありますが、ネットワークアクセスが必要です。

したがって、誰かが飛行機に乗っているか、強力なサービスから離れている場合、メッセージが届くまでに長い時間がかかるか、まったく届かない可能性があります。

最後に、SMSメッセージには、送信と受信の両方にコストがかかります。

したがって、これらのメッセージを何百万も送信すると、本当に加算されます。

検証コードのもう1つの方法は、デバイス上のコードジェネレータです。

これを行うためのアルゴリズムはRFC 6238で定義されており、「時間ベースのワンタイムパスワード」または「TOTP」と呼ばれます。

秘密鍵と時間がかかり、それらの情報のビットに基づいて短い数値コードを生成します。

通常、オーセンティケータアプリまたはハードウェアデバイスがコードを生成します。

サービスとのコミュニケーションは必要ありません。

それはすべてデバイス上で起こります。

これは、セキュリティとユーザーエクスペリエンスの面で大きな利点です。

コードは短時間、通常は30秒ほど有効です。

また、誰もSMSメッセージを送受信する可能性があるため、サービスと顧客の両方のコストが削減されます。

TOTPの課題は、セットアップが少し複雑になる傾向があることです。

サービスは、顧客のデバイスがコードの生成を開始できるように、他のいくつかのパラメータとともに、秘密鍵を顧客と共有する必要があります。

一般的なセットアッププロセスでは、あるデバイスにQRコードを表示し、別のデバイスに認証アプリをダウンロードし、そのアプリでQRコードをスキャンします。

これは面倒なプロセスであり、人々に説明するのは難しいです。

デバイス上でコードを生成することは、誰にとってもより良い経験ですが、セットアップに関する厄介な問題がまだあります。

私たちはこれらの困難のいくつかを注意深く見て、AutoFillと一緒に合理化されたセットアップ体験をもたらすiCloudキーチェーンの新機能を開発しました。

iOS 15とmacOS Montereyで新しく、時間ベースの検証コードジェネレータをiCloudキーチェーンパスワードマネージャーに組み込みました。これがどのように機能するかをお見せできることをとても楽しみにしています。

私たちは基本から始めました:このデバイスまたは他のデバイスで使用するコードを調べてコピーします。

これらは、オーセンティケータアプリの重要な機能です。

しかし、オートフィルは本当にこれを輝かせます。

SMSで配信されるコードと同様に、AutoFillは生成された確認コードをワンタップで入力します。

コードはすぐに利用できるため、顧客はより合理化された信頼性の高いサインイン体験を得ることができるため、SMSメッセージを送信するコストを削減できます。

この機能の私のお気に入りの部分の1つは、新しい確認コードを簡単に設定できることです。

TOTPセットアップページに特別なリンクやボタンを追加すると、iOS 15またはmacOS Montereyを使用している人は、数回タップするだけで同じデバイスに新しい確認コードを設定できます。

それは本当に、本当に簡単です。

最後に、確認コードは人のすべてのデバイスで同期され、iCloudキーチェーンで安全にバックアップされます。

そのため、Macでアカウントにサインインするときに、確認コードを入力するためにiPhoneを取り出す必要はありません。

これはアカウントの復旧にも最適です。

確認コードがiCloudに安全にバックアップされている場合、デバイスを失うことは、もはやアカウントへのアクセスを失うことを意味しません。

リマインダーとして、iCloudキーチェーンのすべてがエンドツーエンドで暗号化されているため、Appleや他の誰かではなく、アカウントの所有者以外の誰もアクセスできません。

iCloudキーチェーンが有効になっているデバイスは、Face ID、Touch ID、またはパスコードで保護されています。

そして、すべてのAppleデバイスは、オペレーティングシステムでサポートされている最高レベルのセキュリティを備えています。

したがって、キーチェーンデータは、人が現時点でどのデバイスを持っていても安全です。

Appleのプラットフォームセキュリティガイドは、これらすべてと、さらに詳細に説明しています。

顧客がコードの設定と入力に可能な限り最高の経験を確実にするために、あなたができる簡単なことがいくつかあります。

セットアップフローには2つのことがあり、ログインフローには1つだけです。

それぞれについて少し話しましょう。

数回タップするだけで新しい確認コードを設定できることは大きな問題です。

何億人ものiPhoneユーザーが、iOS 15にアップデートするとすぐにこれを行うことができるようになるだろう。

セットアップ画面にこれを行うリンクまたはボタンを追加することで、デバイスで確認コードを非常に簡単に設定できます。

TOTPコードでのログインをサポートするインフラストラクチャがすでにある場合は、otpauth: URLsに精通している可能性があります。

これらのURLには、base32でエンコードされた秘密鍵、各コードの桁数、各コードが有効な期間、ドメイン名に設定する必要がある発行者フィールドなど、コードジェネレータの設定に必要なすべての情報が含まれています。

iCloudキーチェーンは、このフィールドを使用して、確認コードを追加するアカウントを提案します。

これは、TOTPセットアッププロセスの一般的な部分であるQRコードにエンコードするのと同じURLです。

URLの前に「apple-」を付けることで、iCloudキーチェーンパスワードマネージャーに直接リンクできます。

このapple otpauth: URLを使用して、Webページのアンカータグに入れることができます。

そして、アプリでは、2つの選択肢があります。

textViewの attributedStringプロパティに割り当てるNSAttributedStringに「link」属性を追加してリンクを作成するか、ウィンドウシーンで開いているAPIを使用してボタンタップに応答してURLを開くことができます。

システムが可用性チェックでapple otpauth: URLsを開くことができるかどうかを確認できます。

以前のバージョンのiOSでは、セットアップボタンを非表示にし、セットアップURLを削除する必要があります。

セットアップ中にできる2番目のことは、他のTOTPアプリでスキャンすることを意図したQRコードにJPG、PNG、GIFなどのラスター画像を使用することです。

Safariは、デバイス上の画像分析を使用してQRコードを検出し、それらに含まれる情報をデコードします。

SafariがQRコードにotpauth: URLが含まれていると判断した場合、QRコード画像のコンテキストメニューでコードジェネレータを設定することを提案します。

最後にやるべきことは、生成されたコードを入力するためのテキストフィールドに関するものです。

自動入力がユーザー名、パスワード、確認コードを入力する場所を正確に把握するために、これらのテキストフィールドにコンテンツタイプを注釈付けします。

これは、textContentTypeビュー修飾子を使用したSwiftUI、UITextFieldsのtextContentTypeプロパティを使用したUIKit、NSTextFieldsのcontentTypeプロパティを使用したAppKitアプリ、およびWebでは、入力要素のオートコンプリート属性を「ワンタイムコード」に設定できます。

だから今、私は一歩後退したい。

認証の全体像を見て、既存のインフラストラクチャをより安全にする方法について少し話しましょう。

認証メカニズムはスペクトル上に存在し、進むにつれて強度とセキュリティが向上します。

パスワードは業界の従来のベースラインであり、サービスがパスワードベースのログインフローを強化する方法はいくつかあります。

最も一般的な2つは、SMSで配信されるパスワード+コードと、TOTPで生成されたパスワード+コードです。

追加の意思決定サービスは、認証プロセス全体を別のサービスに委任するフェデレーションサインインプロバイダーを使用するかどうかです。

フェデレーション認証オプションは、従来の方法と同じメカニズムに基づいていますが、より少ないパスワードを追跡する必要があります。

Appleでサインインの場合と同様に、堅牢で安全なインフラストラクチャに実装すると、従来のメカニズムよりも安全になることもあります。

これらのいずれかを超えたステップは、パスワードを完全に取り除くことです。

WebAuthentication標準、または「WebAuthn」は、まさにこれを行います。

代わりに、公開鍵の暗号化を使用してアカウントを安全に保ちます。

iOS 15とmacOS Montereyには、パスワードの使用可能な代替品を提供するこの技術のプレビューが含まれています。

私のチームメイトのギャレットは、あなたが間違いなくチェックすべきそれについてのビデオを持っています。

業界全体がパスワードなしでその未来の構築に取り組み続けているため、すでに持っているインフラストラクチャのセキュリティを向上させるための措置を講じることにはまだ本当の価値があります。

オンラインで人々をより安全に保つためにできることは何でも良いことです。

一歩一歩、SMSで配信された確認コードの懸念を取ることができます。

時間ベースの検証コードの採用を評価する際には、SMSでコードを送信する必要があるかもしれません。

iOS 14とmacOS Big Surでは、メッセージにドメインバインディングを追加することで、SMSコードをフィッシングに対してより耐性にするためのシンプルなメカニズムを導入しました。

ドメインバインディングは、このメッセージのコードが特定のドメインを対象としていることをオートフィルと通信する方法です。

コードがこのようにバインドされている場合、AutoFillは、バインドされているドメインがWebページのドメインまたはアプリの関連ドメインの1つと一致する場合にのみコードを提供します。

アプリでは、これは関連するドメインやユニバーサルリンクと同じメカニズムで動作します。

したがって、これらの技術用にアプリをすでに設定している場合は、ドメインバインディングを追加する準備が整っています。

これについては、ドメインバインディングによるSMSコードのセキュリティ強化について公開した記事で詳しく知ることができます。

確認コードについてすべて知っているので、これら2つの重要なことを行ってください。

まず、アプリやウェブサイトに時間ベースの検証コードを採用します。

バックエンドにサポートを追加し、SMSでコードを取得するのではなく、顧客にそれらを使用するよう促します。

第二に、SMS確認コードを引き続きサポートする場合は、メッセージにドメインバインディングを追加します。

ご覧いただきありがとうございます。

[音楽]。