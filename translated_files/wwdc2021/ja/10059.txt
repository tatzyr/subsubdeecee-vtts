10059

iOS 15の「UIKitの新機能」へようこそ。

私の名前はマイケルで、後で同僚のジェイミーが加わります。

iOS 15には、驚くべき新技術と機能が満載です。

これらの新機能の採用を支援するために、いくつかのエキサイティングな方法でUIKitを更新しました。

ジェイミーと私は一緒に、生産性の更新、UIの改良、APIの強化、パフォーマンスの向上、そしていくつかの新しいセキュリティとプライバシー機能について説明します。

生産性はiPadOSの中心であり、今年も例外ではなく、iPadマルチタスク、キーボードナビゲーション、キーボードショートカット、iPadポインターのアップデートがあります。

iPadを次のレベルに引き上げるために、マルチタスクをどのように更新したかについての簡単なデモから始めましょう。

メールでは、新しいセンターシーンのマルチタスク機能を使用して、単一のメッセージに集中することをこれまで以上に簡単にしています。

メッセージを長押ししてコンテキストメニューを開き、「新しいウィンドウで開く」を選択します。

これにより、画面の中央にある独自のUIWindowSceneでメッセージが開きます。

これは、手元のタスクに集中するのに最適な方法です。

新しいセンターシーンは、ドラッグアンドドロップを使用するか、ウィンドウシーンの上部にある新しいマルチタスクメニューでスプリットビューオプションを選択することで、スプリットビューに移動することもできます。

または、マルチタスクメニューを下にスワイプして、新しいウィンドウシェルフにシーンをドッキングすることもできます。

この機能をアプリに追加するのは、新しいウィンドウシーンのアクティベーションアクションを作成するのと同じくらい簡単です。

このアクションは、アプリで処理できるNSUserActivityで作成されたアクティベーション設定を返すクロージャを取ります。

このアクションをコンテキストメニューに追加して、準備完了です。

iPadOS 13.4では、Magic Keyboardとポインターを導入しました。

iPadOS 15では、バンド選択を追加することでポインタのサポートを改善しました。

新しいAPIの提供に加えて、複数選択をサポートするUICollectionViewsのバンド選択をデフォルトで有効にしました。

また、セカンダリシェイプと任意のポインタースタイルを組み合わせることで、追加のコンテキストや機能のヒントを伝えることができるポインターアクセサリーも追加しました。

複数のアクセサリを一度に表示し、ポインタの周りに配置できます。

それらはポインタと同じ流動的な性質を持ち、システムは異なるアクセサリーの形状と位置の間でシームレスにアニメーション化します。

iPadOS 15では、キーボードショートカットメニューを完全に再設計しました。

分類されたショートカットと組み込みの検索により、探しているショートカットを見つけることがかつてないほど簡単になりました。

新しいキーボードショートカットメニューは、アプリのiPadとMac Catalystバージョンのパリティも高めます。

これらの新機能を最大限に活用するには、UIMenuBuilderを採用する必要があります。

UIApplicationDelegateにbuildMenuWithBuilderを実装します。

「表示」や「ファイル」などの事前定義されたカテゴリの1つにコマンドを割り当てたり、独自のカスタムカテゴリを作成したりすることもできます。

カテゴリを使用するには、UIResponderのkeyCommandsプロパティの使用についてアプリケーションを監査する必要があります。

このプロパティに割り当てられたコマンドをbuildMenuWithBuilder関数に移動します。

マルチタスク、iPadポインター、新しいキーボードショートカットメニューの詳細については、iPadアプリを次のレベルに引き上げる素晴らしいビデオがあります。

また、iPadOS 15でフォーカスベースのキーボードナビゲーションの豊富なサポートを追加しました。

すでにtvOSのフォーカスシステムに精通している場合は、iPadOSでも利用可能になったことを知って喜んでいるでしょう。

実際、tvOS、CarPlay、iPadOS、Mac Catalystのすべてのフォーカスナビゲーションは、現在UIFocusSystem上に構築されています。

iPadとMac CatalystのUIFocusSystemでは、矢印キーを使用してフォーカスアイテム間を移動し、タブキーを使用してフォーカスグループ間を移動します。

この例では、メールアプリケーションはサイドバーでUISplitViewControllerを使用しており、これらの標準UIKitコンポーネントを使用すると、iPadOS 15でデフォルトで実証されたキーボードナビゲーションが有効になります。

アプリでのキーボードナビゲーションのサポートの詳細については、「キーボードナビゲーションに焦点を当てる」をチェックしてください。

iOSのもう1つの重要な生産性機能は、マルチタッチのドラッグアンドドロップです。

iOS 11で導入されたドラッグアンドドロップは、不可欠な生産性向上です。

1つの簡単なジェスチャーで、アプリケーション間でもアプリケーション内やiPadOS上でデータをシームレスに移動できます。

iOS 15では、UIKitはiPhoneでもアプリ間のドラッグアンドドロップを有効にし、多くのエキサイティングな新しいインタラクションのロックを解除しました。

たとえば、新しい時計バンドのアイデアを友人とすばやく共有することがこれまで以上に簡単になりました。

1つのジェスチャーで、Safariからメッセージを会話に簡単にドラッグできます。

ドラッグアンドドロップAPIは、この拡張機能をサポートするために変更されていません。

技術的な詳細を更新するために、ドラッグアンドドロップを利用する方法について詳しく説明する2017年の4つの素晴らしいビデオがあります。

次に、iOS 15のUIの改良点をいくつか紹介します。

UIToolbarとUITabBarの外観を洗練しました。

この更新された外観は、下までスクロールすると背景素材が削除され、コンテンツがより視覚的に明確になります。

UITabBarでは、SFシンボルのサポートを強化し、お気に入りのシンボルを使用するときに素晴らしい結果をもたらしました。

UIKitは、アプリでこの新しい外観をシームレスにするために最善を尽くしていますが、遭遇する可能性のあるいくつかの問題があります。

バーの半透明プロパティをfalseに設定している可能性のある場所のコードを監査し、非標準のedgeForExtendedLayoutを持つUIViewControllersをチェックする必要があります。

これらの条件は両方とも、新しい外観で視覚的な問題を引き起こします。

新しいデフォルトの動作がアプリに適切でない場合は、カスタムの外観を作成し、バーのscrollEdgeAppearanceプロパティに割り当てるだけです。

このプロパティは、以前はUINavigationBarでのみ利用可能でしたが、現在はUIToolbarとUITabBarでも利用可能です。

カスタム外観を設定すると、前述の互換性のないAPIによる視覚的な問題を回避できます。

さらに、新しいスクロールエッジの外観遷移を実行すると、UIKitが観察のための適切なスクロールビューを推測できない可能性があります。

scrollViewを直接指定するために、UIViewControllerに新しい機能を追加しました。setContentScrollView for edgeです。

すべてのバーを見てください。

外観があなたが期待しているものであることを確認してください。

特別なことをした場所を必ず確認してください。特別な注意が必要かもしれません。

iOS 15のヘッダーが新しく登場しました。

プレーンリストの場合、セクションヘッダーはコンテンツに沿ってシームレスに表示され、下にスクロールするときにトップに固定されたときにのみ、目に見える背景素材が表示されます。

さらに、この新しいデザインでセクションを視覚的に分離するために、各セクションヘッダーの上に新しいパディングが挿入されています。

連絡先アプリで示されているように、リストのコンテンツが長い場合は、このプレーンスタイルをインデックスバーと組み合わせて使用する必要があります。

UIKitはグループ化されたスタイルも提供しています。

これは、カスタムコンテンツや視覚的にリッチなコンテンツがあまり含まれていないUIで使用するためのものです。

これは、設定アプリにあるものと同様に、設定UIや登録フローに最適です。

目立つヘッダースタイルは、iPadのサイドバーリストに使用される既存のサイドバーヘッダースタイルと非常によく似ています。

目立つヘッダーは、.sidebarリストをコンパクトなサイズのクラスの.insetGroupedリストに適応させる場合に最適です。

時計アプリのアラームタブは、この新しいスタイルを大いに活用しています。

そして最後に、ヘッダーが階層を維持し、失われないように、視覚的に豊かなコンテンツで使用するための新しい非常に顕著なグループ化されたスタイルがあります。

WatchアプリのFace Galleryをチェックして、このスタイルの動作を確認してください。

これらの優れたヘッダースタイルすべてにアクセスするには、iOS 14で導入されたUIListContentConfiguration APIを使用します。

iOS 14.5では、リスト内のセパレータを完全に制御できるUIListSeparatorConfigurationを導入しました。

リスト全体の設定を指定することも、システム生成の外観を行ごとに上書きして、セパレータを完全に制御することもできます。

iOS 15のシートは、私たちが中程度の高さのデテントと呼ぶものに表示される画面の半分しかカバーしない機能を得ます。

この新しいハーフハイト機能を使用すると、オプションでこのディテントの後ろの調光を無効にして、シート内と後ろの両方でインタラクションを可能にする非モーダルエクスペリエンスを作成できます。

「UIKitでシートをカスタマイズしてサイズ変更する」を見て、iOS 15でシートを強化したすべての方法について学んでください。

次はUIDatePickerです。

そして、はい、iOS 15では、時間の車輪を再導入しています。

しかし、今では、入力にキーボードを使用する時間をタップするだけです。

また、iPadのMagic Keyboardを使用すると、時間をインラインで編集することもできます。

もちろん、画面をタップして美しいホイールを表示することもできます。

それで、同僚のジェイミーに渡します。

ありがとう、マイク！

iOS 15のUIKit APIのさらなる機能強化を検討し始めます。

私たちの最初のAPI強化は、多くの点でUIの改良でもあります。

ボタンのルックアンドフィールを柔軟に設定できるように、UIButtonに新しいAPIを追加しました。

既存のプレーンスタイルと同様に、グレーの背景を持つグレー、着色された背景を持つティンテッド、完全に不透明なフィルドを追加しました。

新しいスタイルに加えて、ボタンはダイナミックタイプとして知られるシステムの「テキストサイズ」設定に応じてサイズ変更をサポートし、初めて複数行のテキストを正式にサポートできるようになりました。

これらの変更と、それらを可能にする新しいUIButton.Configuration APIは、ボタンをより強力にするだけでなく、よりカスタマイズ可能で更新も簡単です。

iOS 14でリリースされたボタンへのUIMenuの追加とともに、UIButtonConfigurationを使用すると、UIKitで初めてポップアップボタンとプルダウンボタンをネイティブに作成できます。

そしてもちろん、MacでUIKitを使用していて、Xcodeで「Mac用のインターフェイスを最適化」を選択した場合、これらのボタンはすべて期待どおりに見え、動作します。

以下は、APIがいかに使いやすいかの例です。

ボタンの設定を作成するだけです。

このコンストラクターはティンテッドスタイルを与えます。

設定のプロパティは、ボタンをカスタマイズするために使用されます。

そして、ボタンをインスタンス化し、設定を渡します。

ここには表示されていませんが、残っているのはアクションを追加し、ビューにボタンを追加することだけです。

UIButtonConfigurationには、ここでカバーできる以上のものがたくさんあるので、それをカバーする完全なビデオと、UIButtonの他の改善が詳細にあります。

「Meet the UIKit Button System」をチェックして、ボタンAPIについて学んでください。

iOSとiPadOSのUIContextMenuInteractionは、折りたたみ可能なサブメニューをサポートするようになりました。

このメニューの「Sort By」項目のようなシェブロンのアイテムをタップすると表示されます。

これのための新しいAPIはありません。

UIMenu APIはすでにサブメニューをサポートしていますが、iOS 15より前は、タップすると現在のメニューが完全に置き換えられました。

これは、「UIKitボタンシステムに会う」ビデオでももう少し議論されています。

iOS 13では、サンフランシスコのフォントの隣によく似合う何百ものスケーラブルなシンボルであるSFシンボルを導入しました。

iOS 15では、これらはさらに良くなります。

追加のシンボルがあるだけでなく、ヒエラルキー、パレット、マルチカラーの3つの新しい方法で色を使用する機能を追加しました。

モノクロのシンボルは、あなたがすでに知っていて愛している単色の着色可能な画像です。

階層記号は、レイヤーの階層に単一のランタイム指定の色合いの色を適用します。

パレットシンボルでは、複数の色を明示的に指定できます。

そして、以前はAppKitとSwiftUIでのみ利用可能だった多色シンボルは、固定された多色表現を持っています。

これらすべてのカラフルなモードを使用するための新しいAPIは、UIKit、SwiftUI、およびAppKitで利用できます。

APIは本当に使いやすいです。

このコードは、UIImageSymbolConfigurationを設定して、階層的な色合いの基礎としてシステムのオレンジ色を使用し、それを使用して階層的に着色されたオレンジ色の太陽のシンボルのこの画像を作成します。

SFSymbolsを定期的に使用する場合は、いくつかのスタイルのバリエーションがあることを知っています。

例えば、塗りつぶし、円や長方形に。

以前のリリースでは、これらは点線の文字列を指定して選択されています。

iOS 15では、タイプを事前に指定するか、既存の画像のバリアントを生成するかにかかわらず、これらのバリアントを非常に簡単に操作できる新しいUIImage APIがあります。

これは「ハート」文字列で表されるシンボルであり、コードで選択できる2つのバリアントです。

「SFシンボルの設計と構築」コレクションには、SFシンボルのあらゆる側面に関するビデオがたくさんあり、それらをすべてチェックすることをお勧めします。

UIKit APIについては、特に「UIKitとAppKitのSFシンボル」の詳細があります。

UIContentSizeCategory特性は、動的型サイズとも呼ばれるシステムテキストサイズ設定をコードで表します。

ラベル、テキストフィールド、テキストビュー、画像ビュー（おそらくSFSymbolsを含む）を設定して、設定に自動的に調整できます。

iOS 15では、階層の表示に特性を適用する方法を制限する新しい方法を追加しました。

これにより、サイズに床や天井を簡単に設定できます。

これは、すべてのテキストサイズ設定でアプリのテキストと画像が素晴らしく見えることを確認するときに大きな助けになります。

ここでは、時計は大きな時間ラベルがどれだけ小さくなるかを制限しています。

このAPIを使用してテキストサイズを過度に制限しないでください。

これらの設定は非常に重要な機能を果たしており、最高のテキストサイズ設定を使用している人にとって、アプリの機能がすべて利用可能であり、すべてが読みやすいことが最も重要です。

したがって、別の例として、これを使用して、デフォルトのサイズですでに非常に大きい見出しの成長を制限することができます。

私たちはすべてのプラットフォームでシステムの色を統合しました。

これはUIKitにとってどういう意味ですか?

さて、いくつかの色にはいくつかの微妙な変更があり、以前は他のフレームワークでしか利用できなかったいくつかの色は、アプリが実行されている場所ならどこでもUIKitでも利用できるようになりました。

だから、UIKitアプリでsystemMintやsystemBrownを使いたくてうずうずしているなら、今がその時です。

また、UIColor.tintColorも新機能です。

これは、アプリまたはトレイト階層の現在の色合いの色に基づいて、実行時に解決される色です。

新しいUIButton.Configurationと新しいカラフルなSFシンボルAPIで使用するのに最適です。

UIColorに加えて、色を混合してピッキングするための標準インターフェイスであるUIColorPicker ViewControllerも強化されています。

iOS 14.5では、新しいコールバック、colorPickerViewController(didSelect:continuously:)があり、色が混在して変更されたときや、ピッキングが完了したときにアプリのUIを更新できます。

TextKit 2は、iOS、iPadOS、tvOS、macOSで利用可能な新しい次世代のテキストレイアウトシステムです。

これは、テキストでやりたいことを簡単に表現できる強力な新しいシステムであり、高速で高性能な方法で行います。

UIKitは、採用を必要としないカンナダ語のような複雑なスクリプトを持つ言語でテキストにより良いレイアウトをもたらすUITextFieldを強化するために舞台裏で採用しました。

TextKit 2、それができること、そしてアプリでの使用方法についてもっと知りたい場合は、「Meet TextKit 2」をご覧ください。

UISceneSessionは、アプリケーションのUIのインスタンスを表し、アプリスイッチャーで表されるアプリウィンドウに対応します。

インターフェイスの状態はNSUserActivityで表されます。

アプリは、シーンがバックグラウンドに入ったときにこのNSUserActivityをシステムに提供し、シーンが再インスタンス化されたときにインターフェイス状態を復元するために使用する必要があります。

iPadOS 15では、これをより簡単にするための新しいAPIがいくつかあります。

テキスト入力ビューの一時的な状態を取得して設定する新しい方法があります。

ストーリーボードのロード後に状態を復元するためのより便利な場所を提供する新しいUISceneコールバックがあります。

また、状態を返す非同期モデルコードがある場合、アプリの起動プロセスを拡張し、アプリのUIがアクティブになるのを遅らせる機会があります。

すべてのエンジニアリングの取り組みは、UISceneベースのAPIに焦点を当てています。

iPadOS 13でUISceneが導入される前の古いUIApplicationベースのライフサイクルをまだ使用している場合は、今がUISceneに切り替える時です。

すべてのUIKitアプリが使用できます。複数のウィンドウをサポートする必要はありませんが、iPadやMacアプリの場合、それは素晴らしいアイデアです。

UISceneの復習と、強化された状態復元APIの詳細については、「iPadアプリを次のレベルに引き上げる」をご覧ください。

シーンといえば、iOS 15のUIKitには、アプリが各シーンで対話されている現在共有可能なコンテンツを表現できるようにする新しいAPIがあります。

これらは、iOSとMacの新しいSiri「Share This」機能と、Mac CatalystのNSSharingServicePickerToolbarItemで使用されています。

「ショートカット、Siri、提案のための素晴らしいアクションをデザインする」と「素晴らしいMac Catalystアプリの資質」のビデオには、さらに多くの詳細があります。

最後のAPI強化のために、私たちは親愛なる友人、UICollectionViewとUITableViewに戻ります。

iOS 14では、過去よりもはるかに簡単かつ一貫してセルのルックアンドフィールを設定できるように、新しいAPIを導入しました。

iOS 15では、新しいクロージャベースのアップデートハンドラにより、セルの再構成がこれまで以上に簡単になります。

セルサブクラスを作成し、状態を使用してupdateConfigurationをオーバーライドする必要がなくなりました。

セルを作成するのと同じ場所に、そのコードをインラインで書くことができます。

ここでは、セルが無効になっているときにテキストをグレー表示しています。

同様のクロージャベースの機能は、新しいUIButtonConfiguration APIでも利用できます。

コレクションとテーブルビューを簡単に更新できるように、差分可能なデータソースを改善しました。

iOS 15では、違いをアニメーション化せずにスナップショットを適用すると、既存のすべてのセルを破棄することなく、それらの変更に基づいてUIが更新されます。

また、アイテムを効率的に再構成するための新しいAPIがあるため、アイテムのプロパティがアイデンティティを変更せずに変更されたときに、既存のセルに表示されるコンテンツを更新できます。

UIKitが実行されるすべてのデバイスには、複数のプロセッサコアと強力なグラフィックスハードウェアがあります。

物事は早く起こるべきだ。アニメーションとスクロールは常にスムーズであるべきです。

iOS 15では、これらの特性を持つ建物アプリをさらに簡単にするいくつかの機能強化と新しいAPIがあります。

UIKitで利用可能なもののいくつかについて話しましょう。 いくつか話しましょう。

まず、UICollectionViewとUITableViewに戻ります。

iOS 15では、セルのプリフェッチの変更が導入されています。

これらの変更は、iOS 15用にビルドすると自動的に有効になります。

彼らは、完全に滑らかなスクロールを維持しながら、セルを準備するために、最大2倍の時間（ほぼ2つのビジュアルフレームの価値）をアプリに与えることができます。

多くのセルに画像が表示されます。

過去には、メインのUIキューが大きな画像のデコードに縛られているときに、スクロールの一時的な中断に気づいたかもしれません。

iOS 15では、アプリコードがこのプロセスをより詳細に制御できます。

画像を準備するための新しい簡単な機能があるので、アプリが画像を表示する必要があるときに完全に準備が整います。

また、これらの機能は非同期に使いやすいため、画像がデコードされている間、UIキューはイベントを自由に処理できます。

多くのアプリは大きな画像を処理しますが、小さいサイズで表示します。

これを助けるために、画像とディスプレイに関するシステムの知識を使用して、画像のサイズをより効率的に変更し、メモリを節約する新しいUIImage APIがあります。

これらのコレクションビューと画像の改善の詳細、それらを活用する方法に関する情報、およびその他の優れたパフォーマンスのヒントについては、「超高速リストとコレクションビューを作成する」をご覧ください。

Swiftは、非同期コードの作成をこれまで以上に簡単にする新機能を導入しました。

ほとんどのUIKit APIはメインUIキューで呼び出す必要があり、コンパイル時にこれが初めて強制されるように、これらのAPIをメインアクターとして注釈付けしました。

新しいUIImage準備機能のような他の分野では、UIKitが新しい非同期Swift言語機能で簡単かつ安全に使用できるようにAPIを微調整しました。

「Meet async/await in Swift」と「Meet AsyncSequence」をチェックして、非同期コードを開発するこの新しい方法に進んでください。

さて、セキュリティとプライバシー。

私たちは、システムがどのインターフェイスが実際に相互作用しているかを検証できるように、iOS 15にいくつかの新しい技術を構築しました。

私たちはこれをいくつかの場所でUIKitに統合しました。ここでは、あなたのアプリに影響を与える可能性のある3つについて話します。

まず、場所ボタン。

OS 15は、アプリがデバイスの現在の場所へのケースバイケースのワンタイムアクセスを許可するボタンを埋め込むことを可能にする新しいAPIを導入しました。

彼らは、多くのアラートやプロンプトなしでタップされたときにのみ、これを行います。

APIは柔軟性があるので、すべてのアプリの外観に合わせることができますが、舞台裏では、ボタンが常に明確で読みやすいか、機能しないことを保証します。

これを任意のアプリに埋め込む方法を議論するビデオ全体があります。「場所のボタンに会う」私はあなたがiOS 14で導入されたこのバナーに気づいたと確信しています。

アプリが別のアプリのペーストボードにコピーされたデータにアクセスすると表示されます。

iOS 15では、システムが標準のシステムペーストインターフェイスとの意図的な相互作用の後にデータがアクセスされたことを確認できるときはいつでもバナーを排除しています。

たとえば、編集メニューの貼り付けボタンをタップしたり、ハードウェアキーボードのCmd-Vをタップしたりします。

また、いくつかの新しい標準の貼り付けメニュー項目を提供するためにAPIを追加しました。

これらを使用すると、通知バナーも表示されません。

「貼り付け」、「貼り付けと移動」、「貼り付けと検索」、「貼り付けと一致のスタイル」を指定する新しい方法を提供します。

これらのそれぞれについて、UIMenuControllerとUICommandで使用するための標準のUIResponderセレクタと、UIActionで使用するための新しい識別子があります。

時々、アプリはペーストボード上にあるものについてのより多くの情報を求めていますが、完全なアクセスを必要としません。

iOS 14では、アプリがペーストボードに番号、可能性のあるWeb URL、または可能性のあるWeb検索用語があるかどうかを確認するために使用できるAPIを導入しました。

そして、私たちは電卓とSafariでこれらを自分たちで使います。

iOS 15では、このAPIは、すべての標準データ検出器タイプをカバーするように大幅に拡張されました。

データ自体へのアクセスを許可しないため、これらのいずれも通知を表示しません。

テキストを自分で解析することなくデータ値を取得するAPIもありますが、これらのAPIが標準の貼り付けインターフェイスの使用後以外の任意のタイミングで使用される場合、システムには貼り付け通知が表示されます。

私たちの最後のプライバシー強化は、iOS 14.5で新しく、ロケーションとペーストインターフェイスを強化する技術の初期バージョンに基づいて構築されました。

UIEventAttributionは、WebKitチームと協力して開発されました。

WebKitのプライベートクリック測定機能は、WebからWebへのクリック測定を提供します。

UIEventAttributionは、PCMをUIKitにもたらし、App-to-Webクリック測定を提供します。

これは、広告のクリックとタップのプライバシー保護測定を意味します。

使いやすいです - UIEventAttributionViewsで広告をカバーし、広告タップに応答して開いたURLとともにUIEventAttributionオブジェクトを渡すだけです。

これの詳細については、「プライバシーを保護する広告アトリビューションを満たす」ビデオを参照してください。

「プライベートクリック測定の紹介」というタイトルの素晴らしいWebKit.orgブログ記事もあります。

まあ、それはかなりの旋風でした、そして私たちは新しいものをすべてカバーさえしませんでした。

次は何ですか?

iOS 15 SDKを使ってアプリをコンパイルしてください。

iPhoneのドラッグアンドドロップや強化されたシステムカラーなどの新機能をテストしてください。

新しいボタン、バー、リスト、シンボルを備えた新しいiOS 15の外観を採用してください。

より良いマルチタスク、キーボード、トラックパッドのサポートのために、私たちの新しいiPad機能を採用してください。

そして、新しいUIKit APIを使用して、ユーザーのプライバシーを尊重し、さらに優れた、さらに高速なアプリをさらに簡単に作成します。

ありがとうございます。