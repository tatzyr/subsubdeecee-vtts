10208

こんにちは、WWDCへようこそ。

XCTestチームのエンジニア、ジェレミー・ゴールドマンです。

このセッションでは、Xcode 13のUIテストからデバイスと対話するいくつかのエキサイティングな新しい方法を探ります。

特に、iPadOS Pointer、watchOS Digital Crown、macOSトラックパッドの3つの異なるプラットフォームにまたがる3つの新しいインタラクションに焦点を当てます。

iPadOSポインターから始めましょう。

iPadOS 13.4では、Appleはマウスとトラックパッドのサポートを導入し、Magic Keyboardなどのアクセサリを使用して、iPadと対話するまったく新しい方法をユーザーに提供しました。

多くの開発者は、カスタムホバーアニメーションなど、iPadアプリにポインタ固有の動作とインタラクションを追加することで、これを最大限に活用しています。

Xcode 13では、UIテストでiPadOSポインターを制御するための強力な新しいAPIを提供しています。

このAPIを使用すると、iPadアプリで複数のタイプのポインタインタラクションの堅牢な自動テストを作成でき、iPadOS 15以降を実行しているデバイスで使用できます。

この新しいAPIをもっと詳しく調べてみましょう。

まず、XCUIDeviceに新しいプロパティを追加して、デバイスがポインタインタラクションをサポートしているかどうかを示します。

次に、ホバリング、複数のタイプのクリック、2本指のスクロールなど、さまざまなポインタインタラクションを実行するための新しいメソッドをXCUIElementに追加します。

また、より高度なクリックアンドドラッグのユースケースのメソッドと、1つ以上の修飾キーを押しながらコードブロックを実行するためのクラスメソッドも追加しています。

これらの方法は、追加の精度が必要な場合は、XCUICoordinateでも利用できます。

iOSアプリでポインタインタラクションのための新しいUIテストを作成して、これらの新しいAPIが実際にどのように機能するかを探りましょう。

このデモでは、起動時に最初に非表示になっているサイドバーを持つFrutaアプリを使用します。

私は最近、水平方向の2本指のトラックパッドスワイプでサイドバーが開くiPadにポインタ固有の機能を追加しました。

そのためにUIテストを追加しましょう。

ここには空のUIテストクラスがあり、そこで新しいUIテストを追加します。

このテストが何をしているのか、簡単に説明しましょう。

アプリを起動し、起動時にサイドバーが最初に存在しないと主張することから始まります。

次に、水平2本指のトラックパッドスワイプを実行し、サイドバーが存在することをアサートします。

もう1つ指摘したいのは、テスト方法に追加したこの可用性属性です。

これは、特定のiOSバージョンからのみ利用可能な方法を使用する場合はいつでも必要です。

この場合、ポインタインタラクションAPIはiOS 15.0で導入されました。

iPadシミュレーターでテストを実行してみましょう。

画面の左下隅にある暗い円であるカーソルインジケーターに従うことができます。

すごい！私たちのテストはiPadで機能するようです。

ただし、このアプリはiPhoneでも利用でき、ポインタのインタラクションをサポートしていません。

このテストをiPhoneシミュレーターで実行してみましょう。

そのため、テストは「このデバイスではポインターイベントはサポートされていません」というエラーメッセージで失敗したようです。

これを解決するには、ポインタインタラクションをサポートするデバイスでのみ実行されるようにテストを変更する必要があります。

XCUIDeviceの新しいsupportsSupportPointerInteractionプロパティを使用して、失敗するのではなく、サポートされていないデバイスでのテストをスキップすることで、これを行うことができます。

では、もう一度iPhoneシミュレーターでテストを実行してみましょう。

完璧。だから今、このテストはポインタインタラクションをサポートしていないデバイスでスキップされます。

他のプラットフォーム上のデバイス、より具体的にはwatchOSとDigital Crownと対話する新しい方法について話しましょう。

ご存知かもしれませんが、Xcode 12.5はwatchOSアプリのUIテストサポートを導入しました。

このサポートには、タッチイベントや、クラウンのクリックなどのハードウェアボタンイベントを合成するために、watchOSで新しく利用可能な方法が含まれています。

Xcode 13では、デジタルクラウンの回転を合成する新しい方法でこのサポートを拡大しています。

この方法には、回転数という1つのパラメータのみが必要で、クラウンを回転させる速度を指定するオプションの速度パラメータがあります。

この速度パラメータにはXCUIGestureVelocityタイプがあります。つまり、低速、高速、デフォルトなどのプリセット値の1つを使用するか、1秒あたりの回転数でカスタム小数点値を指定できます。

この新しい方法が実際にどのように機能するか見てみましょう。

外の現在の気温を表示するwatchOS用のシンプルな天気アプリを持っているとします。

このアプリには、ユーザーがデジタルクラウンを前方にスクロールして将来の予測気温を確認するか、後方にスクロールして過去に記録された気温を確認できる機能があります。

このクラウン回転機能が期待どおりに動作することを確認する基本的なUIテストを見てみましょう。

テストは、アプリを起動し、予測時間ラベルが最初に現在の温度と表示されていると主張することから始まります。

次に、デジタルクラウンを1回前に回転させ、ラベルが「今から1時間後」と更新されたと主張します。

その後、クラウンを2回回転して後方に回転させ、テストはラベルが「1時間前」と更新されたと主張することで終了します。

最後に、macOSのトラックパッドについて話しましょう。

より具体的には、スクロールに焦点を当てましょう。

スクロールは、離散と連続の2つの異なるカテゴリに分類できます。

離散スクロールには正確な増分移動があります。

物理的なマウスでスクロールホイールを回転させることを考えてください。

画面上のコンテンツは、スクロールホイールのティックごとに均一な単位で移動し、動きは非慣性であり、スクロールホイールの回転を停止するとすぐに動きを停止します。

一方、連続的または段階的なスクロールは、流動的でダイナミックな動きを持っています。

トラックパッドで2本指でスワイプする画像。

画面上のコンテンツはスワイプ中にスムーズにスクロールし、動きは慣性であり、徐々に停止するまで指を持ち上げた後も動き続けます。

XCTestは現在、macOSでスクロール方式を提供しており、UIテストで個別のピクセル精度のスクロールを実行できます。

この方法では、スクロールする正確な水平距離と垂直距離をピクセル単位で指定するために2つのパラメータが必要です。

Xcode 13では、macOSで連続スクロールまたはトラックパッドのようなスクロールを合成するための新しい方法を導入しています。

これらのメソッドは、スクロールする速度を指定するオプションの速度パラメータを受け入れます。

この速度パラメータにはXCUIGestureVelocityタイプがあります。つまり、先ほど探索したrotateDigitalCrownメソッドと同様に、プリセットを使用するか、ピクセル/秒でカスタム小数点値を指定できます。

Xcode 13は、新しい入力方法の自動化を可能にし、より専門的なユースケースをサポートするために、複数のプラットフォームにAPIを導入しています。

この新しい機能を使用して、iPadアプリでポインタ固有のインタラクションのUIテストを作成し、watchOS UIテストでデジタルクラウン回転を自動化し、新しいスワイプ方法でmacOSで連続的なトラックパッドのようなスクロールを実行します。

もっと学ぶことに興味がある場合は、これらの関連セッションを必ずチェックしてください。

WWDCの残りの部分を見て楽しんでくれてありがとう。

[音楽]。