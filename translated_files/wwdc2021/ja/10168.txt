10168

こんにちは。

メールは重要なアプリケーションであり、メールアプリの拡張機能を使用すると、いくつかの信じられないほど新しい方法でそれを強化することができます。

私はAbhilashで、同僚のSethと一緒に、素晴らしいMailアプリの拡張機能を構築する方法を説明します。

macOS Montereyでは、メール拡張機能を構築するための新しいフレームワーク、MailKitを出荷しています。

これらの拡張機能は、Safariアプリ拡張機能や共有シート拡張機能などの他のアプリ拡張機能と同じ基盤の上に構築されています。

それらは、ユーザーのプライバシーとセキュリティを一から念頭に置いて構築されています。

MailKit APIは十分に文書化されており、主要なmacOSリリースでサポートされます。

他のアプリ拡張機能と同様に、適切に署名されたMacアプリにしたり、既存のアプリにバンドルしたり、App Storeで配布したりできます。

メールの拡張機能は、メールの拡張の未来です。

プラグインは、将来のmacOSリリースで機能しなくなります。

メールのユーザーエクスペリエンスを拡張できる4つの新しい方法を導入しています。

まず、拡張機能の作成は、メールメッセージを作成するときに新しいワークフローを可能にします。

アクション拡張機能は、受信メッセージにカスタムルールを提供することで、人々が受信トレイを管理するのに役立ちます。

コンテンツブロッキング拡張機能は、メールメッセージのWebKitコンテンツブロッカーを提供します。

最後に、メッセージセキュリティ拡張機能は、人々がメールを送受信するときにメッセージに署名、暗号化、復号化することで、さらなるセキュリティを提供できます。

これは、メッセージを作成し、受信メッセージに対してアクションを実行し、望ましくないメールコンテンツをブロックし、暗号化と復号化を提供するのに役立つメール拡張機能の完全なスイートを提供します。

それらは書きやすいです。

彼らはとても強力です。

それらは安定しており、OSとメールアプリが時間の経過とともに変化するにつれて機能し続けます。

これらの機能を備えたMail拡張機能を構築する前に、使用中の例を見てみましょう。

私が同僚全員が複数の非常に秘密主義のプロジェクトで協力している大規模な多国籍企業で働いていると想像してみてください。

プロジェクトの機密性を維持するために、メールメッセージの受信者を検証するBig Secrecy Extensionを使用しています。

火星の新しいリモートオフィスの最新情報について、同僚のセスにメッセージを送りたいです。

最初に気づくのは、メール作成ウィンドウのBig Secrecy Extensionのボタンです。

この拡張機能は、私が取り組んでいるプロジェクトのリストを提供し、私はMars Remote Officeを選択します。

件名とセスのメールを入力します。

拡張機能は、セスがこのプロジェクトで開示されていることを検証し、青いチェックマークで彼のメールアドレスに注釈を付けることができました。

もちろん、この重要なプロジェクトでは、マネージャーのマイキーに情報を提供したいので、彼を追加します。

うーん、マイキーは私たちの新しいリモートオフィスについて開示されていないようです。

彼を削除してメッセージを送りましょう。

ああ、セスから返信があり、メッセージリストに赤で表示されます。

これは、Big Secrecy Extensionが火星プロジェクトに関するメッセージを赤に色付けするアクションを実行したためです。

拡張機能がこのメッセージに対してアクションを実行したことを示すアイコンもあります。

メッセージを表示すると、メッセージビューアに、セスからのメッセージが暗号化され、Big Secrecy Extensionによって正常に復号化されたことを示すアイコンがあります。

それでは、MailKit APIを活用して、Big Secrecy Extensionのような強力な拡張機能を構築する方法を学びましょう。

メッセージの作成中にユーザーに新しい機能を提供できる拡張機能の作成から始めましょう。

macOS Montereyでは、拡張機能がメール作成ウィンドウと対話する方法は4つあります。

拡張機能は、ユーザーが編集している受信者の電子メールアドレスを検証したり、構成されているメッセージに関する追加のコンテキストをビューコントローラーに提供したり、送信メッセージに追加のヘッダーを設定したり、送信前にメッセージのエラーをユーザーに警告したりできます。

構成拡張機能を構築する方法を見てみましょう。

既存のmacOSアプリに新しいターゲットを追加することから始めます。

Xcode 13には、新しいメール拡張ターゲットの作成を開始する新しいメール拡張テンプレートがあります。

セットアップ中、Xcodeでは、作成する拡張機能のタイプを選択できます。

構成拡張機能では、[構成セッション ハンドラを含める] 機能を選択します。

拡張ターゲットのInfo.plistでは、MEComposeSession辞書でアイコンと説明的なツールチップも指定する必要があります。

メールは、アイコンとツールチップを使用して、作成ウィンドウにツールバーボタンを表示します。

それでは、拡張機能のプリンシパルクラスの実装を見てみましょう。

拡張機能のプリンシパルクラスは、MEExtensionプロトコルに準拠している必要があります。

MEExtensionは、4種類の拡張機能のそれぞれにオプションのハンドラメソッドを公開します。

compose拡張の場合、プリンシパルクラスはsessionメソッドのハンドラを実装し、MEComposeSessionHandlerプロトコルに準拠したインスタンスを返す必要があります。

MEComposeSessionHandlerのメソッドは、Composeウィンドウのライフサイクルについて拡張機能に通知するためにメールで呼び出されます。

最初に呼び出されるメソッドはComposeSessionDidBeginで、新しい作成ウィンドウを開いたときに発生します。

受信者の電子メールアドレスの編集や電子メールの送信など、ユーザーのアクションに基づいて呼び出されるメソッドもあります。

MEComposeSessionHandlerのすべてのメソッドには、作成ウィンドウに関する情報を提供するMEComposeSession引数があります。

メールは、すべてのメール作成ウィンドウに一意のMEComposeSessionインスタンスを作成します。

編集中のメッセージのさまざまな詳細を公開するMEMessageプロパティがあります。

この情報を利用して、メールが拡張機能のMEComposeSessionHandlerメソッドを呼び出すときに提供する応答をカスタマイズできます。

受信者のメールアドレスに注釈を付ける方法の例を見てみましょう。

メールは、受信者のアドレスが編集されるたびに、ComposeSessionHandlerのannotateAddressesForSessionを呼び出します。

この例では、MEMessageのallRecipientAddressesプロパティを使用して、seth@example.comと一致しない電子メールのエラーアノテーションを提供しています。

作成拡張機能は、メールが作成ウィンドウに表示されるビューコントローラーを提供することもできます。

ビューコントローラーは、各コンポーズウィンドウのビューコントローラーをカスタマイズすることで、ユーザーに貴重なコンテキストを提供できます。

拡張機能のビューコントローラは、MEExtensionViewControllerのサブクラスである必要があります。

Mailは、MEComposeSessionHandlerのviewControllerForSessionメソッドを呼び出すことで、このビューコントローラのインスタンスを要求します。

これらの構成APIの詳細については、MailKitのドキュメントで学び、新しいワークフローの構築を始めることができます。

では、メールのアクション拡張機能について話しましょう。

アクション拡張機能は、受信メッセージに対してアクションを実行し、ユーザーが受信トレイを管理できるようにします。

macOS Montereyでは、拡張機能が新しいメッセージに対して実行できる3種類のアクションを公開しています。

アクション拡張機能は、受信メッセージの読み取りステータスとフラグを変更したり、迷惑メール、ゴミ箱、アーカイブなどのシステムメールボックスにメッセージを移動したり、メッセージリストに表示されたときにメッセージに色を適用したりできます。

メール拡張ターゲットを作成するときに[メッセージアクションハンドラーを含める]機能を選択すると、メッセージアクションのサポートを追加できます。

Compose拡張と同様に、アクション拡張の場合、プリンシパルクラスはメッセージアクションのハンドラーを実装することにより、メッセージアクションハンドラを返す必要があります。

この例では、プリンシパルクラスはMEMessageActionHandlerを採用することでアクションハンドラとしても機能しています。

アクション拡張機能は、メッセージメソッドのMEMessageActionHandlerの決定アクションを実装する必要があります。

メッセージのDecisionActionは、MEMessage引数で呼び出されます。

ここでは、ヘッダーのプロパティに「Mars」が含まれているかどうかをチェックして、メッセージを赤く着色しています。

アクションハンドラーについて注意すべき点がいくつかあります。

メールは、受信トレイに表示される前に、ダウンロードされるすべての新しいメッセージに対して、ハンドラーの決定アクションを呼び出します。

メールがメッセージメソッドの拡張機能の決定アクションを初めて呼び出すとき、MEMessageインスタンスはメッセージヘッダーのサブセットのみを持ちます。

利用可能なヘッダーに基づいてメッセージを色付けするなどの決定を提供できます。

メールがメッセージにアクションを適用すると、受信トレイに表示されます。

場合によっては、適切な決定を返すためにメッセージの完全な本文とヘッダーが必要になります。

この場合、disisionAction for messageメソッドはinvokeAgainWithBodyの決定を返すことができます。

これにより、メールは、メッセージメソッドのハンドラーの決定アクションを再度呼び出す前に、完全なメッセージ本文とヘッダーを取得します。

受信トレイに表示される前に、より正確な決定を返すことができます。

今、私はそれをセスに引き渡すつもりです。セスは、コンテンツブロッキングとセキュリティ拡張機能を構築する方法を紹介します。

ありがとう、アビラッシュ。

まず、コンテンツブロッカー拡張機能を追加する方法を説明します。

コンテンツブロッカーは、メッセージビューのMailのWebKit構成にフックして、拡張機能がメッセージのHTMLのトリガーに基づいてコンテンツの読み込みをブロックできるようにします。

これにより、拡張機能はURLなどのHTMLの基準に基づいてコンテンツの読み込みをブロックできます。

この例では、拡張機能は、拡張機能のコンテンツルールリストのルールに基づいてリモート画像の読み込みをブロックすることができました。

メール拡張ターゲットを作成するときに[コンテンツブロッカーを含める]を選択すると、コンテンツブロックのサポートを追加できます。

次に、拡張機能のプリンシパルクラスのコンテンツブロッカーのハンドラを返します。

この例では、プリンシパルクラスはMEContentBlockerプロトコルを採用しているため、selfを返します。

コンテンツルールリストは、Safariのコンテンツブロッカーと同じ構文で指定されます。

したがって、Safariコンテンツブロッカー拡張機能のコンテンツルールリストをすでにお持ちの場合は、メールアプリの拡張機能にも同じルールを使用できます。

「Webkitコンテンツブロッカーの紹介」のドキュメントを参照することで、コンテンツルールリストの作成方法に関する詳細情報を入手できます。

ルールリストが完了したら、contentRulesJSONメソッドで返してメールに提供できます。

このメソッドは、コンテンツルールリストJSONのデータエンコーディングを期待します。

そして、それはメールのコンテンツブロッカーのためのものです。

最後に、メッセージセキュリティ拡張機能について説明します。

メッセージセキュリティ機能は、拡張機能に暗号化されたメッセージをエンコードおよびデコードする機能を提供します。

また、メッセージに署名し、署名されたメッセージの証明書を表示する方法を提供することもできます。

メール拡張ターゲットの作成時に[メッセージセキュリティハンドラを含める]を選択すると、メッセージセキュリティのサポートを追加できます。

次に、拡張機能のプリンシパルクラスでMEMessageSecurityHandlerプロトコルをサポートする拡張機能からハンドラを返す必要があります。

この例では、拡張機能のプリンシパルクラスもMEMessageSecurityHandlerプロトコルを採用しているため、selfを返します。

それでは、構成されているメッセージをエンコードする方法を見てみましょう。

メッセージのエンコードは2つの部分に分かれています。

1つ目は、メッセージが構成されるときにUIを駆動するのに役立ちます。

これにより、拡張機能は、現在のメッセージに署名して暗号化する機能があるかどうかを表示できます。

次の部分は、送信されるメッセージを実際に暗号化して署名することです。

メッセージが構成されると、メールは送信者と現在の受信者リストを含むメッセージを拡張機能に送信します。

拡張機能は、メッセージに署名して暗号化する機能があるかどうかを判断できます。

拡張機能によって返されるものに基づいて、メッセージに署名して暗号化できるかどうかに応じて、メールはロックと証明書のアイコンを強調表示します。

送信者または受信者が変更されるたびに、Mailは拡張機能のメッセージセキュリティハンドラでgetEncodingStatusメソッドを呼び出します。

拡張機能は、メッセージに署名して暗号化し、現在のエンコーディングステータスをメールに戻すことができるかどうかを確認します。

ここでの例は、メッセージのエンコーディングステータスをチェックする実際の作業を行うためにExampleEncoderをインポートすることです。

メッセージセキュリティハンドラーは、利用可能になったらステータスを返します。

次に、メッセージが送信されると、MailはRFC822メッセージデータを受け取り、それを拡張機能に渡します。

拡張機能は、必要に応じてメッセージに署名して暗号化し、署名され暗号化されたRFC822データをメールに戻します。

その後、メールはこのデータを送信サーバーに送信します。

メッセージを送信する準備ができたら、MailはencodeMessageメソッドを使用して現在のメッセージを拡張機能のメッセージセキュリティハンドラに渡します。

拡張機能のメッセージセキュリティハンドラは、エンコードされたメッセージを返します。

繰り返しますが、この例では、ExampleEncoderを使用してメッセージをエンコードする実際の作業を行います。

メッセージセキュリティハンドラは、エンコードされたメッセージを返します。

メッセージのデコードも同様に機能しますが、逆に機能します。

メッセージが表示されると、メールはエンコードされたRFC822メッセージデータを拡張機能に送信します。

拡張機能は、メッセージを暗号化されていない、または署名されたRFC822データにデコードし、それをメールに戻します。

その後、メールにデコードされたメッセージが表示されます。

メールがメッセージをデコードする準備ができたら、decodedMessageメソッドを呼び出す拡張機能のセキュリティハンドラに呼び出します。

拡張機能がメッセージをデコードする機能を持っている場合、そうし、デコードされたRFC822メッセージを返します。

メッセージのデコードに拡張機能が不要な場合は、すぐにnilを返すはずです。

メッセージが表示されると、署名され暗号化されているかどうかを判断できます。

署名されたメッセージの場合、署名者ラベルの横にある署名者証明書をクリックすると、送信者の証明書情報を表示できます。

メールを使用すると、拡張機能はこの証明書情報をレンダリングするための独自のビューコントローラを提供できます。

デコードされたメールメッセージの一部として、拡張機能は一連のメッセージ署名者を返す機能を持っています。

提供されたラベルは、メッセージビューで署名者として表示されます。

この拡張機能は、署名証明書の表示に必要な情報をコンテキストプロパティに入力することもできます。

証明書アイコンをクリックすると、メールは拡張機能からViewControllerを要求し、現在のメッセージの署名者のセットを渡します。

これらの署名者は、メッセージが最初にデコードされたときに内線によってメールに返されたものです。

ビューコントローラは、MEExtensionViewControllerのサブクラスでなければなりません。

そして、それはメッセージセキュリティ拡張機能のためのものです。

メール拡張機能は、メール体験を向上させるための強力な新しい方法です。

これらのメール機能を活用して素晴らしい新製品を構築する方法に興奮しており、ご意見をお聞かせください。

だから、私たちに電子メールを送るか、開発者フォーラムにメッセージを投稿してください。

これらの例は、メールアプリの拡張機能のパワーを示しています。

受信者を確認する構成拡張機能、受信メッセージを色付けするアクション拡張機能を作成しました。

コンテンツブロッカーがリモート画像をブロックしているのを見ました。

最後に、メールにカスタム暗号化と復号化を追加するのがいかに簡単かを見ました。

このビデオでは、メールアプリの拡張機能を構築する方法を取り上げました。

私たちは、あなたが本当にクールなことをするためにメールをどのように拡張するかを楽しみにしています。

だから、外に出て、いくつかの素晴らしい新しいメールアプリ拡張機能を構築してください。

見てくれてありがとう。