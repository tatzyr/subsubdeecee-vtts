10159

♪ベース音楽の演奏♪

デビッド・ヘイワード:皆さん、ようこそ。

私の名前はデビッド・ヘイワードです。

私はCore Imageチームのシニアエンジニアで、今日は短いプレゼンテーションを行い、XcodeプロジェクトにカスタムMetal Core Imageカーネルを追加する際の最新のベストプラクティスを紹介します。

このプレゼンテーションでは、MetalでカスタムCIKernelsを書くことの一般的な利点について説明します。

次に、メタルCIKernelsを構築できる2つの推奨方法を紹介します。

そして、これらをプロジェクトに追加する方法を段階的に実演します。

まず、MetalでカスタムCIKernelsを書くことの利点を確認しましょう。

CIKernels in Metalを書くことで、自動タイルや連結などのCore Image機能にアクセスできます。

カーネルをコンパイルする時間をランタイムからアプリが構築されたときにシフトすることで、アプリのパフォーマンスが向上します。

そうすることで、カーネルはギャザーリード、グループライト、ハーフフロート数学などの高性能機能にアクセスできます。

最後になりましたが、入力時のシンタックスハイライトとビルド時のインラインエラーチェックにより、開発者としての生活が楽になります。

モチベーションのために、Metal Core Imageカーネルをアプリケーションに追加する方法を段階的に紹介します。

CIKernelsをプロジェクトに追加するには、推奨される2つの方法があり、両方の方法を詳しく説明します。

カーネル関数を外部「C」として指定し、カスタムビルドフラグを使用して構築する必要があるため、これを外部メソッドと呼びます。

2番目の方法は、iOS 15とmacOS 12で新しい方法です。

カーネル関数がステッチ可能として帰属する必要があるため、これをステッチ可能な方法と呼びます。

その実装はメタルダイナミックライブラリを使用しています。

どちらの方法でも、従うべき4つの一般的なステップがあります。

まず、プロジェクトを適切に設定することです。

次に、Metal CIKernelのソースファイルをプロジェクトに追加することです。

3つ目は、Metal CIKernelコードを書くことです。

そして4つ目は、SwiftまたはObjective-Cコードを書いて、カーネルを初期化して適用して新しいCIImageを作成することです。

まず、プロジェクト構成から始めて、外部CIKernelsを使用する際のこれらの4つのステップを説明しましょう。

従来のMetalコンピューティングやグラフィックスシェーダーとは異なり、このCore Image Metalコードはコンパイルされ、特別なフラグでリンクする必要があります。

これらのフラグを自動的に使用するために、プロジェクトターゲットに2つのカスタムビルドルールを追加することをお勧めします。

まず、プロジェクトのターゲット設定に移動し、.ci.metalで終わるファイルのビルドルールを追加します。

この拡張子を持つファイルの場合、このルールは、必要な-fcikernelフラグでMetalコンパイラを呼び出す1行のスクリプトを実行します。

このビルドルールは、.ci.airで終わる出力バイナリを生成します。

次に、.ci.airで終わるファイルの2番目のビルドルールを追加します。

この拡張子を持つファイルの場合、このルールは、必要な-cikernelフラグでMetalリンカを呼び出す1行のスクリプトを実行します。

このビルドルールは、.ci.metallibで終わるアプリのリソースディレクトリに出力を生成します。

カスタムビルドルールを追加したので、プロジェクトに.ci.metalソースを追加するだけです。

これを行うには、ファイルメニューから新しいMetalファイルを追加するものを選択し、その新しいファイルに.ci.metalで終わる名前を付けます。

次のステップは、CIKernelをMetalソースファイルに書き込むことです。

まず、ソースの上部にCoreImage.hヘッダーを含めると、Core Imageが提供するすべてのクラスにアクセスできます。

カーネルは、コアイメージによって認識される外部「C」として指定する必要があります。

実際のカーネル実装の内容は、あなたの想像力次第です。

あなたができることの1つの例として、「AVFoundationを使用したHDR編集と再生」に関するWWDC 2020プレゼンテーションを見ることをお勧めします。

最後のステップは、Swiftコードを追加してカーネルをロードし、それを適用して新しいイメージを作成することです。

カーネルは通常、inputImageやその他の入力パラメータなどのプロパティを持つCIFilterサブクラスで使用されます。

フィルターは、CIKernelオブジェクトを静的プロパティにインスタンス化することをお勧めします。

このようにして、metalibリソースをロードする作業は、最初に必要なときに一度だけ行われます。

先ほど説明したカスタムビルドルールのため、ソースと同じ名前のリソースURLと.ci.metallibの拡張子を指定する必要があります。

最後に、CIFilterサブクラスはoutputImageプロパティをオーバーライドする必要があります。

ゲッターでは、静的プロパティからカーネルを取得し、その適用メソッドを使用して、入力プロパティに基づいて新しいイメージを作成します。

そのため、外部CIKernelsを構築するプロセスを完全に説明しています。

それでは、ステッチ可能なCIKernelsを構築する新しいプロセスについて説明しましょう。

ステッチ可能な方法では、Xcodeプロジェクトを構成するのに必要な設定変更は1つだけです。

この設定は、Core ImageフレームワークとリンクするようにMetalリンカーに指示します。

これを行うには、プロジェクトのターゲット設定に移動し、「-framework CoreImage」の値を持つOther Metal Linker Flagsのビルド設定を追加するだけです。

ステッチ可能なCIKernelsはカスタムビルドルールを必要としないため、特別なサフィックスなしでプロジェクトに.metalソースを追加するだけです。

1つまたは複数のソースファイルにカーネルを追加できます。

デフォルトでは、Xcodeはそれらをすべて1つの.metallibリソースに組み込みます。

次のステップは、CIKernelをMetalソースファイルに書き込むことです。

以前と同様に、Core Imageクラスにアクセスするには、CoreImage.hヘッダーを含めます。

しかし、この方法では、カーネルはコアイメージによって認識されるために]として帰属する必要があります。

もう一度、最後のステップは、カーネルをロードするためにSwiftコードを追加し、それを適用して新しいイメージを作成することです。

Stitchable CIKernelsの唯一の変更は、default.metallibの標準名でリソースをロードできることです。

これで、ステッチ可能なCIKernelsを構築するプロセスが終了します。

この方法を使用することの利点のいくつかに言及する価値があります。

ステッチ可能なカーネルは、他のメタルライブラリとリンクできます。

そして、彼らは現在、整数型と符号なし整数ベクトル型である入力パラメータをサポートしています。

もう1つのニッチな利点は、ステッチ可能なカーネルを実行時にソースからコンパイルできることです。

ほとんどのアプリケーションは、初期コンパイル時間が長くなるため、この機能を使用すべきではありません。

とはいえ、この柔軟性の恩恵を受ける可能性のあるアプリケーションのクラスがいくつかあります。

このプレゼンテーションで取り上げる最後のトピックが1つあります。

ステッチ可能なCIKernelの実装は、2つの重要な金属機能に依存します。

1つ目は、新しいメタルシェーディング言語バージョン2.4です。

とりわけ、このバージョンは、コンパイラが追加のメタデータを各関数に関連付ける]属性をサポートしています。

2つ目は、カーネルがCore Image Metalクラスとリンクできるように使用されるMetal Dynamic Libraries機能です。

これらのメタル機能の詳細については、「Discover Compilation Workflows in Metal」のプレゼンテーションを必ずご覧ください。

ただし、Metal Dynamic Librariesは、一部のグラフィックスデバイス、特にA11以降を搭載したiPhoneとiPad、Appleシリコンを搭載したすべてのMac、AMD NaviとVega GPUを搭載したIntel Macでのみサポートされていることに注意してください。

アプリケーションは、ステッチ可能なCIKernelsを使用する前に、Metal deviceプロパティsupportsDynamicLibrariesを確認する必要があります。

これで、Metal CIKernelsをアプリケーションに追加する2つの推奨方法を使用する方法についてのステップバイステップの説明は終わりです。

各メソッドについて、プロジェクトを設定し、カーネルソースを書き、カーネルオブジェクトを初期化する方法を取り上げました。

これにより、アプリの画像やビデオに素晴らしい視覚効果を追加できることを願っています。

ありがとう、WWDC 2021の残りを楽しんでください!

♪