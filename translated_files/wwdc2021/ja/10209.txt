10209

♪ベース音楽の演奏♪

♪

ハン・ミン・オン:こんにちは、私の名前はハン・ミン・オンです。

私はXcode Debugger UIチームのエンジニアです。

今日は、デバッグの生産性を高めるブレークポイントに対するチームの改善について話したいと思います。

全員を同じページに乗せるために、いくつかのブレークポイントの基本から始めましょう。

プログラムでバグに遭遇した場合、それはあなたの期待に実行されていないことを意味し、現実が分岐した理由をデバッガで確認する必要があります。

この時点で、あなたが行う2つの一般的な活動があります。

1つは、状況をさらに理解するためにプロセス状態を検査することです。

第二に、プロセスの実行を踏むことで論理を確認します。

どちらのアクティビティでも、理想的にはバグが発生する直前に一時停止する必要があります。

そして、プロセスを一時停止する最善の方法は、ブレークポイントを使用することです。

Xcodeで作成できる3つの一般的なブレークポイントについて説明します。

1つ目は、ソースファイルのブレークポイントです。

これらは1つのファイルに設定されているブレークポイントです。

最も一般的なタイプは、行ブレークポイントです。

これはブレークポイントの主力であり、検査したいコード行で一時停止するのに最適です。

作成する最速の方法は、一時停止したい行のすぐ隣にある溝をクリックするだけです。

この時点で、関数 convertedToVolume のロジックを踏んで確認したいとします。

しかし、私が足を踏み入れるとき、私は実際に別の表現に足を踏み入れています。

コンパイラは、justedDensityを最初に実行する必要があると正しく判断しました。

もちろん、私は外に出て機能に戻ることができますが、何度も繰り返さなければならないとき、これは面倒になる可能性があります。

私たちがここで見ているのは、時にはラインブレークポイントが十分に粒状ではないということです。

これは、コンパイラがLLDBが停止するための複数の場所を生成したためです。

私たちが本当に欲しいのは、変換されたToVolumeが実行される直前に一時停止することです。

Xcode 13では、列ブレークポイントを導入しています。

これにより、行に沿って特定の式で一時停止する必要があるときに、行のブレークポイントの欠点を回避できます。

convertedToVolumeで列ブレークポイントを設定するには、Commandキーを押しながら式をクリックしてアクションポップオーバーを表示し、列ブレークポイントの設定を選択します。

ラインブレークポイントと同様に、アイコンをクリックして無効または有効にすることができます。

ブレークポイントを変更する必要がある場合は、ダブルクリックしてブレークポイントエディタを表示できます。

行のブレークポイントはもう必要ないので、溝からドラッグして削除できます。

あなたは私たちのコラムのブレークポイントに同じことをすることができますが、私はそれをそこに残すつもりです。

コントロールまたはマウスの右クリックで、以前のアクションを含むコンテキストメニューが表示されます。

ここでは、ブレークポイントナビゲーターで「公開」を選択します。サブタイトルが修正され、ブレークポイントの列が表示されます。

続行すると、次のNutritionFactを反復し、新しく設定された列ブレークポイントにヒットします。

ブレークポイントが当たると、XcodeはラインPCを使用して一時停止したラインを伝えます。

それは線の上に薄緑色のハイライトを描きます。

Xcode 11.4では、カラムPCを導入しました。

列PCは、式の下に緑色のアンダースコアを描画することで、一時停止した列を表示します。

そのため、デバッガが次に実行する式を知ることができます。

convertedToVolumeの下で列PCを見ているので、私は自信を持って機能にワンステップを行うことができます。

列ブレークポイントは、SwiftのクロージャやObjective-Cのブロックに特に役立ちます。

時には、単一のSwift行は、この単一の行269のように、複数のクロージャを持つことができます。

コンパイラがデバッグ条件でファイルをコンパイルすると、ソース行と列をコンパイルされたアドレスにマップするラインテーブルと呼ばれるマップが作成されます。

したがって、この行のクロージャごとに、コンパイラはデバッガが一時停止に使用する行テーブルエントリを生成します。

最後のクロージャの匿名パラメータ$0を検査したいと仮定すると、269で行ブレークポイントを設定できますが、一時停止後、最後のクロージャに到達するには、生成された行テーブルエントリのために多数のステップインとステップアウトを行う必要があります。

Xcode 13では、最後の0ドルで列ブレークポイントを簡単に設定でき、一時停止すると、まさに私たちがなりたい場所になり、0ドルを心ゆくまで検査できることがわかります。

うーん、朝食に香り高いドリアンスムージーを食べるのは、一日を始めるのに最適な方法です。

おいしい！

象徴的なブレークポイントに移りましょう。

これらは、これらの関数が実行されたときにプロセスを一時停止する関数名のブレークポイントです。

これらは、ソースファイルのブレークポイントが使用できない、または不便な状況で非常に役立ちます。

たとえば、ソースファイルにアクセスできないため、デバッグ情報でコンパイルすることはできません。

または、共通の関数を実装する多くのサブクラスがあり、それぞれにファイルブレークポイントを設定するのは面倒です。

見てみましょう。 

ブレークポイントナビゲーターの下部にある追加ボタンをクリックします。

これにより、作成できるブレークポイントのリストが表示されます。

シンボリックブレークポイントを選択すると、すぐにブレークポイントエディタが表示され、シンボル名を入力できます。

いくつかのクラスで実装されているトグル関数で一時停止することに興味があるとします。

それぞれを探す代わりに、ここでトグルを入力するだけです。

しかし、一般的な単語である関数名には注意する必要があります。

これは、LLDBがシステムライブラリを含む、プロセスでロードされるすべてのライブラリの名前と一致するためです。

制限されていない場合、多くの解決されたブレークポイントの場所があり、時には数千の場所でさえあります。

それらの多くが常に実行パスに打たれている場合、これは迷惑になる可能性があります。

ありがたいことに、検索を特定のモジュールに制限することができます。

モジュールは、メインバイナリを含む、実行中にロードできるバイナリまたはイメージです。

ここでは、アプリのバイナリ名である「Fruta」と入力します。

そして、私たちは3つの解決された場所を取得します。これははるかに管理しやすいです。

スムージーを選んだので、お気に入りのボタンを切り替えましょう。

設定されたばかりの象徴的なブレークポイントにヒットします。

さて、シンボリックブレークポイントの場合、タイポグラフィエラーを起こすのはかなり簡単であることを知っています。

そして、プログラムの実行中に、ブレークポイントがヒットせず、頭を悩ませています。

convertToMassと呼ばれるものを作ってみましょう。

Xcode 13の新機能、ブレークポイントがLLDBによってどの場所にも解決されない場合、Xcodeは破線アイコンを表示します。

ブレークポイントが解決されない理由は無数にありますが、いくつかの一般的な説明があります。

未解決のブレークポイントアイコンにカーソルを合わせると、役立つツールチップがあります。

最初のいくつかの理由は、ブレークポイントの種類に関連しています。

したがって、シンボリックブレークポイントの場合、名前を正しく綴るには、シンボルはライブラリに存在する必要があります。

次の理由は、より一般的です。ブレークポイントのライブラリを読み込む必要があります。

ライブラリは、ボタンをクリックするなどのユーザーアクションを実行した後にのみロードされ、その時点でLLDBは自動的にブレークポイントを解決します。

この場合、スペルが悪いのではないかと思います。

考えてみましょう。

1つの方法は、検索ナビゲーターを使用して「変換」を検索することです。

ご覧のとおり、かなりの数の結果があり、それらを視覚的に分析するには時間がかかります。

代わりに、LLDBを通じて別のトリックを使いましょう。

Xcodeコンソールでは、モジュールを意味する「image」と入力します。「lookup -r」は正規表現、「n」は名前、「convert」は「convert」で、検索を制限するためにモジュール名「Fruta」を指定します。

一致は4つしかなく、確かに関数名のスペルを間違えていることがわかります。

それは「convertedToMass」であるべきです。

コピーしてブレークポイントエディタに貼り付けましょう。

そして今回、LLDBはそれをうまく解決し、私たちに場所番号1を与えました。

他のLLDBのヒントやコツに興味がある場合は、前回のプレゼンテーション「LLDB: Beyond 'po'」をご覧ください。

別のファイルを持ち出しましょう。

未解決のブレークポイントは、ソースファイルのブレークポイントでも見ることができます。

彼らに関連する理由は2つあります。

まず、ブレークポイントの行をコンパイルする必要があります。

この場合、23行はコンパイラ条件の他の部分にあるため、コンパイルされませんでした。

また、コンパイラはモジュールのデバッグ情報を生成している必要があります。

そうでない場合は、ビルド設定を確認する必要があります。

次はランタイム問題のブレークポイントです。

ランタイムの問題は、バックグラウンドスレッドのUI状態を変更するなど、実行時に発生する問題です。

クラッシュほど深刻ではなく、デフォルトでは、Xcodeはプロセスを一時停止しません。これは、別のバグに焦点を当てているときに破壊的すぎる可能性があるためです。

代わりに、ランタイムの問題が発生すると、Xcodeはバックトレースを記録し、イシューナビゲーターに表示します。

しかし、この問題は過去に起こったため、現在のプロセス状態を検査しても意味がありません。

だから時々、あなたはそれが起こったときにそれを捕まえたいと思う。

ランタイムの問題のブレークポイントがあると、デバッガで一時停止し、そこでプロセスを突くことができます。

ランタイム問題のブレークポイントにはさまざまな種類があります。

タイプポップアップを使用すると、特定のタイプを簡単に選択できます。

それらのいくつかについては、スキームエディタの診断タブで対応する機能を有効にする必要があることを覚えておいてください。

Go Toボタンをクリックするだけでそこに行くことができます。

メインスレッドチェッカーのランタイム問題のブレークポイントを利用したいので、メインスレッドチェッカーを有効にしたい。

私のセッションで、Xcode 13のブレークポイントの改善点が示されたことを願っています。

ブレークポイントはデバッグ能力を大幅に向上させることができ、間違いなくあなたのレパートリーの一部であるべきです。

ありがとう、WWDCの残りの部分を楽しんでください。

♪