10202

♪ ♪

Tôi là Ravi Kandadai Madhavan, và trong video này, tôi sẽ chỉ ra cách sử dụng trình phân tích tĩnh trong Xcode để tìm và sửa lỗi trong ứng dụng của bạn.

Đầu tiên, tôi sẽ trình bày cách sử dụng máy phân tích tĩnh để tìm lỗi và cũng hiểu chúng.

Sau đó, tôi sẽ mô tả các kiểm tra mới trong Xcode 13, điều này có thể giúp tìm ra nhiều loại vấn đề hơn trong mã của bạn.

Cuối cùng, tôi sẽ mô tả những cách mà bạn có thể tùy chỉnh máy phân tích để tích hợp nó tốt hơn với quy trình phát triển của bạn.

Bây giờ chúng ta hãy xem cách sử dụng máy phân tích để tìm lỗi.

Trình phân tích tĩnh là một công cụ trong Xcode có thể phát hiện lỗi bằng cách phân tích mã nguồn mà không cần chạy nó, vì vậy nó có thể tiết lộ lỗi, ngay cả trước khi bạn kiểm tra và đảm bảo chất lượng ứng dụng của mình.

Nó cũng có thể tìm thấy các vấn đề trong các đường dẫn mã hiếm và không được bao phủ bởi các bài kiểm tra.

Trình phân tích tìm thấy các lỗi trong mã C/C++ và Objective-C, ngay cả trong các dự án Swift và Objective-C hỗn hợp.

Hãy để chúng tôi xem trình phân tích đang hoạt động bằng cách sử dụng một ứng dụng mà tôi đang phát triển.

Tôi đang cố gắng cải thiện một ứng dụng hiện có được viết bằng Swift và Objective-C cho phép khám phá hệ mặt trời.

Đây là dự án Xcode cho ứng dụng.

Tôi sẽ chạy Trình phân tích tĩnh để xem liệu nó có tìm thấy bất kỳ vấn đề gì với mã của tôi không.

Nó rất dễ chạy.

Chỉ cần vào Sản phẩm và chọn Phân tích, hoặc sử dụng phím tắt Command-Shift-B.

Bạn có thể thấy máy phân tích đang chạy trong thanh trạng thái của Xcode.

Phân tích dự án của bạn rất giống với việc xây dựng nó.

Trình phân tích quét tất cả các tệp nguồn trong các mục tiêu của sơ đồ hiện đang hoạt động để tìm kiếm lỗi.

Như bạn thấy trong trạng thái, máy phân tích đã tìm thấy một vấn đề trong dự án của tôi.

Tôi có thể vào trình điều hướng vấn đề của Xcode để tìm hiểu thêm về nó.

Như tôi đã chỉ cho bạn, tất cả những gì cần thiết để chạy máy phân tích trên dự án của bạn là một cú nhấp chuột.

Và với một cú nhấp chuột này, bạn có thể tìm thấy một số loại lỗi, như vấn đề bảo mật, lỗi logic, lạm dụng API và nhiều hơn nữa.

Máy phân tích không chỉ có thể tìm thấy lỗi mà còn có thể giải thích chúng.

Hãy quay lại với lỗi được tìm thấy trong ứng dụng của tôi và cố gắng hiểu nó.

Vấn đề ở đây là phương thức Objective-C positionAtDate đang trả về nil khi nó không được cho là như vậy.

Giá trị trả về của phương thức được khai báo là non-null trong định nghĩa của phương thức.

Nhưng bây giờ, tôi muốn hiểu phương pháp này trả về số không như thế nào.

Bạn có thể mở rộng các vấn đề của máy phân tích và xem chuỗi sự kiện dẫn đến lỗi.

Các sự kiện cũng được hiển thị trong trình chỉnh sửa, cùng với các tuyên bố nơi chúng xảy ra.

Các mũi tên cho thấy các sự kiện được sắp xếp như thế nào.

Tôi thấy dễ dàng hơn để đọc những báo cáo này từ dưới lên trên.

Sự kiện cuối cùng cho thấy giá trị trả về, vị trí, là số không.

Các sự kiện trước đó cho thấy điều này là do phương thức regularPositionAtDate, có nghĩa là khởi tạo vị trí, không được gọi vì đối tượng người nhận của nó là số không.

Nhìn vào các mũi tên, điều này xảy ra dọc theo trường hợp mặc định của công tắc.

Quay trở lại phần đầu của báo cáo cho thấy rằng đối tượng người nhận được khởi tạo thành số không và vẫn như vậy trong trường hợp mặc định.

Bây giờ, tôi hiểu rằng tôi chưa xử lý các vật thể không có hình cầu hoặc không đều trong công tắc.

Để khắc phục điều này, tôi sẽ làm cho trường hợp mặc định giống hệt với trường hợp hình cầu.

Tôi sẽ chạy lại máy phân tích để đảm bảo sự cố đã được khắc phục.

Tôi khá nhẹ nhõm vì lỗi này được phát hiện trong khi tôi đang phát triển ứng dụng.

Điều này là do việc trả về nil từ phương thức Objective-C được chú thích là trả về giá trị không null có thể dẫn đến hành vi thời gian chạy bất ngờ khi phương thức được gọi từ Swift, điều này xảy ra trong mã của tôi.

Rất may, chạy trình phân tích tĩnh đã tiết lộ lỗi này trước khi nó có thể ảnh hưởng đến người dùng ứng dụng của tôi.

Trong Xcode 13, chúng tôi đã làm cho máy phân tích thậm chí còn tốt hơn và chúng tôi có một số kiểm tra hoàn toàn mới cho bạn.

Trình phân tích bây giờ có thể bắt được nhiều lỗi logic hơn trong mã của bạn.

Nó có thể phát hiện các vòng lặp vô hạn và mã dự phòng, chẳng hạn như các điều kiện nhánh không cần thiết.

Nó có thể báo cáo các tác dụng phụ trong các khẳng định và trong mã C++, nó có thể phát hiện các lỗi trong việc sử dụng các toán tử di chuyển và chuyển tiếp.

Các phần của các kiểm tra mới này là các đóng góp nguồn mở được thực hiện cho trình biên dịch Clang của Apple.

Hãy xem một số ví dụ về lỗi mà những kiểm tra mới này có thể bắt được.

Nói chung, đó là một cách thực hành tốt để sử dụng các khẳng định để xác thực kỳ vọng của bạn về mã của bạn.

Tuy nhiên, bạn phải đảm bảo rằng các khẳng định không có tác dụng phụ, chẳng hạn như ghi vào các biến hoặc bộ nhớ.

Ví dụ, hãy xem xét đoạn mã được hiển thị ở đây đi qua một mảng các vật thể thiên văn và đếm số lượng những vật thể có liên quan đến mặt trăng.

Nó có một NSAssert kiểm tra xem số lượng vật thể có mặt trăng nhỏ hơn hoặc bằng số lượng hành tinh hay không.

Nhưng khẳng định có tác dụng phụ là tăng bộ đếm theo dõi các vật thể bằng mặt trăng.

Các bản cập nhật như thế này có thể bị mất trong cấu hình xây dựng bản phát hành, nơi các bản khẳng định có thể bị vô hiệu hóa để làm cho mã của bạn chạy nhanh hơn.

Vì vậy, mã này có thể không tăng bộ đếm chút nào trong các bản dựng phát hành.

Thật dễ dàng để bỏ lỡ những lỗi như thế này trong quá trình phát triển, vì chúng không hiển thị trong các bản dựng gỡ lỗi.

Bắt đầu từ Xcode 13, máy phân tích có thể tìm thấy những vấn đề như vậy trong mã của bạn và báo cáo nó.

Kiểm tra này hoạt động không chỉ đối với NSAsserts, mà còn đối với các khẳng định trong C và C++.

Những lỗi này rất dễ sửa và bạn chỉ cần di chuyển tác dụng phụ ra ngoài khẳng định, như được hiển thị ở đây.

Vòng lặp vô hạn là một lỗi phổ biến khác.

Bạn có thể đã thấy nó xảy ra khi có các vòng lặp với logic phức tạp.

Ví dụ, vòng lặp lồng nhau được hiển thị ở đây cố gắng điền vào lưới hai chiều với một giá trị.

Nó ẩn một lỗi trong đó giá trị biến được tăng lên bởi vòng lặp bên trong thay vì cột, đó là bộ đếm vòng lặp thực tế.

Máy phân tích bây giờ có thể phát hiện những lỗi như vậy và giải thích nó cho bạn.

Một khi bạn phát hiện ra nó, lỗi này rất dễ sửa.

Chỉ cần thay thế giá trị bằng cột.

Mặc dù những kiểm tra này tìm thấy lỗi đơn giản, chúng tôi đã tìm thấy lỗi thực sự với chúng.

Bây giờ bạn cũng có thể sử dụng chúng, tìm lỗi và sửa chúng khi bạn phát triển ứng dụng của mình.

Xcode cung cấp nhiều tùy chỉnh để tinh chỉnh máy phân tích để phù hợp với quy trình phát triển của bạn.

Bạn có thể làm cho trình phân tích chạy cùng với mọi bản dựng của dự án của bạn từ cài đặt xây dựng của dự án.

Để nhanh chóng thu hẹp các cài đặt có liên quan, hãy sử dụng chức năng tìm kiếm.

Ví dụ, sử dụng "phân tích" làm từ khóa tìm kiếm, tôi chỉ có thể xem xét các tùy chọn có liên quan đến máy phân tích.

Để bật Phân tích trong khi 'Xây dựng', tất cả những gì bạn cần làm là bật cài đặt xây dựng.

Giống như các bản dựng gia tăng, phân tích chỉ chạy trên các tệp được sửa đổi.

Điều này làm cho việc chạy máy phân tích sau khi thay đổi mã nhanh chóng và dễ dàng.

Máy phân tích cung cấp hai chế độ phân tích: nông và sâu.

Chế độ nông nhanh hơn, nhưng tránh khám phá các lỗi trải rộng trên nhiều chức năng.

Sử dụng chế độ này trong các dự án nhạy cảm với thời gian xây dựng và phân tích.

Như tôi đã đề cập trước đó, máy phân tích đã kiểm tra tìm các loại lỗi khác nhau và một số trong số chúng là chọn tham gia.

Bạn có thể tinh chỉnh các kiểm tra phù hợp với dự án của mình bằng cách bật hoặc tắt chúng một cách có chọn lọc từ cài đặt xây dựng.

Ví dụ, nếu dự án của bạn có mã quan trọng về bảo mật, hãy bật kiểm tra các vấn đề bảo mật.

Mặt khác, nếu bạn thấy rằng một số vấn đề không liên quan đến mã của mình, bạn có thể vô hiệu hóa các kiểm tra ít hữu ích hơn một cách riêng lẻ và vẫn được hưởng lợi từ các kiểm tra khác.

Bạn cũng có thể phân tích một tệp duy nhất thay vì toàn bộ dự án.

Chọn tệp để phân tích từ menu Sản phẩm > Thực hiện Hành động.

Sử dụng cái này để kiểm tra các thay đổi của bạn một cách nhanh chóng, thậm chí không cần xây dựng dự án của bạn.

Điều này đặc biệt hữu ích khi sửa đổi các tệp tiêu đề.

Nó sẽ bỏ qua việc phân tích lại tất cả các tệp nhập nó.

Trình phân tích tĩnh trong Xcode có thể phát hiện lỗi trong mã của bạn rất sớm trong quá trình phát triển.

Chạy nó chỉ với một cú nhấp chuột và tìm thấy nhiều loại lỗi.

Và đừng quên tùy chỉnh nó theo quy trình làm việc của bạn.

Trong Xcode 13, chúng tôi đã cải tiến hơn nữa trình phân tích và thêm nhiều kiểm tra mới để tìm lỗi logic.

Sử dụng trình phân tích và sửa lỗi trong ứng dụng của bạn trước khi chúng tiếp cận người dùng của bạn.

Cảm ơn bạn, và tận hưởng phần còn lại của WWDC!

[Nhạc lạc quan].