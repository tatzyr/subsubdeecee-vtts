10041

Xin chào, và chào mừng đến với WWDC.

Tên tôi là Frank Doepke, và tôi là một Kỹ sư trong nhóm Tầm nhìn.

Khung Tầm nhìn đã phát triển qua nhiều năm, tập trung vào phân tích hình ảnh.

Để nắm bắt tốt hơn, chúng ta có thể xem xét các khả năng của Vision về trọng tâm sử dụng của nó.

Thể thao.

Theo dõi các đối tượng và phân tích tư thế của con người chỉ là một số yêu cầu có thể giúp bạn tạo một ứng dụng thể thao.

Khả năng tiếp cận.

Yêu cầu tầm nhìn như OCR hoặc phân loại hình ảnh và phát hiện đối tượng đang giúp người dùng khiếm thị.

Con người.

Vision cung cấp một số yêu cầu liên quan đến khuôn mặt và cơ thể mà ứng dụng của bạn có thể sử dụng.

Bạn có thể tìm hiểu thêm về điều này trong phiên "Khử kiến mọi người, khuôn mặt và tư thế bằng Vision".

Sức khỏe.

Từ quét mã vạch và OCR đến phân tích tư thế của con người, Vision cung cấp các khối xây dựng để tạo ra một ứng dụng Sức khỏe thông minh.

Nhiếp ảnh tính toán.

Các tính năng như chế độ chân dung dựa vào nhận diện khuôn mặt và phân đoạn.

An ninh.

Các yêu cầu như phát hiện khuôn mặt và con người rất hữu ích cho các ứng dụng như phát hiện chuyển động trong camera an ninh.

Và các tài liệu.

Đây là những gì chúng tôi muốn tập trung vào trong phiên này.

Vision cung cấp một số yêu cầu giúp bạn phân tích tài liệu: phát hiện mã vạch, nhận dạng văn bản hoặc thường được gọi là OCR, phát hiện đường viền, phát hiện hình chữ nhật và mới cho năm nay, phát hiện phân đoạn tài liệu.

Đây là chương trình nghị sự của chúng tôi.

Đầu tiên, chúng ta sẽ nói về phát hiện mã vạch.

Sau đó, chúng ta sẽ nói về nhận dạng văn bản.

Và cuối cùng, chúng ta sẽ nói về việc phát hiện tài liệu.

Hãy xem xét phát hiện mã vạch.

Năm nay, chúng tôi đang giới thiệu một bản sửa đổi mới của yêu cầu phát hiện mã vạch.

VNDetectBarcodesRequestRevision2 cung cấp hỗ trợ cho các ký hiệu mới.

Codabar, GS1Databar, bao gồm Expanded and Limited, MicroPDF và MicroQR, trong đó cái sau đặc biệt hữu ích nếu bạn muốn tạo mã QR cho URL và cần đặt nó trên một nhãn hoặc gói nhỏ, vì nó sử dụng ít dung lượng hơn rất nhiều.

Chúng tôi đã thay đổi hành vi cho bản sửa đổi mới này để phù hợp với phần còn lại của Tầm nhìn liên quan đến cách các hộp giới hạn kết quả được báo cáo liên quan đến khu vực quan tâm mà khách hàng đã chỉ định.

Hãy xem xét sự thay đổi đó một cách chi tiết.

Ở đây, chúng tôi có một tài liệu với mã QR.

Khi chúng tôi không chỉ định Khu vực quan tâm, còn được gọi là ROI, hộp giới hạn sẽ được báo cáo liên quan đến hình ảnh đầy đủ.

Bây giờ, hãy chỉ định ROI, giống như chúng ta chỉ muốn tập trung vào phần trung tâm của những gì máy ảnh nhìn thấy.

Bản sửa đổi 2 hiện báo cáo hộp giới hạn liên quan đến ROI, giống như các yêu cầu Vision khác.

Thật không may, Bản sửa đổi 1 luôn báo cáo liên quan đến hình ảnh đầy đủ.

Nhưng chúng tôi không muốn thay đổi hành vi đó, vì nó có khả năng phá vỡ các khách hàng hiện tại.

Và như một lời nhắc nhở, khi bạn biên dịch ứng dụng của mình dựa trên SDK mới nhất và không chỉ định bản sửa đổi cụ thể, bạn sẽ luôn nhận được bản sửa đổi mới nhất theo yêu cầu của mình.

Nhưng đối với các ứng dụng chỉ định Bản sửa đổi 1 hoặc không biên dịch lại với SDK mới, chúng vẫn sẽ nhận được hành vi Bản sửa đổi 1 cũ.

Hãy để tôi nhấn mạnh một vài khía cạnh thú vị của yêu cầu phát hiện mã vạch trong Vision.

Vision hỗ trợ mã vạch 1D và 2D.

Nhưng điều làm cho nó thực sự thú vị là trong một hình ảnh, nó có thể phát hiện nhiều mã, cũng như nhiều ký hiệu, cùng một lúc.

Điều đó có nghĩa là bạn không cần phải quét đi quét lại để nhận được nhiều mã.

Đây là một lợi thế rất lớn so với hầu hết các máy quét cầm tay.

Hãy nhớ rằng nếu bạn quét nhiều ký hiệu, bạn đã chỉ định càng nhiều ký hiệu sẽ mất nhiều thời gian hơn.

Vì vậy, bạn muốn thiết lập yêu cầu chỉ với các ký hiệu có liên quan đến trường hợp sử dụng của bạn.

Với việc mở rộng các ký hiệu mới để quét mã vạch, Vision có thể đóng một vai trò đặc biệt hữu ích trong lĩnh vực y tế.

Với iPhone, bạn có thể phân tích nhiều mã cùng một lúc và nhờ kết nối với internet, hãy lấy thông tin mà không cần máy quét riêng.

Và nhờ khả năng ánh sáng yếu mạnh mẽ của iPhone, bạn có thể quét mã, ngay cả trong các tình huống tối, mà không cần bắn tia laser hoặc làm phiền bệnh nhân khi họ đang nghỉ ngơi.

Bây giờ, hãy xem Vision thực hiện phát hiện mã vạch như thế nào.

Mã 1D sẽ được quét dưới dạng dòng.

Điều đó có nghĩa là bạn có thể sẽ nhận được nhiều phát hiện cho cùng một mã.

Thật dễ dàng để khử trùng lặp chúng bằng cách nhìn vào tải trọng, đó là dữ liệu thực được bao gồm trong mã vạch.

Mã 2D được quét dưới dạng một đơn vị duy nhất.

Điều đó có nghĩa là bạn nhận lại một hộp giới hạn cho toàn bộ mã.

Một ví dụ cho mã 2D sẽ là mã QR.

Mỗi mã vạch được báo cáo với sự quan sát riêng của nó.

Nhưng như tôi đã đề cập trước đây, mã 1D có thể trả về nhiều quan sát, với cùng một nội dung, nhưng ở các vị trí vật lý khác nhau.

Tải trọng là nội dung của mã vạch, tức là dữ liệu được bao gồm trong mã có thể đọc được bằng máy này.

Đặc biệt đối với tải trọng của mã QR, bạn có thể muốn sử dụng máy dò dữ liệu để phân tích URL được mã hóa.

Bây giờ, hãy xem xét điều này trong một bản demo nhỏ.

Được rồi, ở đây chúng ta có một sân chơi Xcode, nơi bạn thấy rằng tôi có một hình ảnh với tất cả các mã vạch trong đó.

Tôi sử dụng VNDetectBarcodesRequest, và tôi đặt Bản sửa đổi thành 2.

Bây giờ, với tư cách là biểu tượng, tôi chỉ có codabar, và khi chúng ta nhìn vào cái này, chúng ta thấy codabar được tô sáng màu đỏ.

Bây giờ, tôi có thể thay đổi cái này thành, giả sử, QR.

Điều xảy ra bây giờ là chúng tôi chạy lại yêu cầu và chúng tôi thấy rằng mã QR được tô sáng.

Nhưng đó là một mảng, vì vậy tôi cũng có thể chỉ định các yêu cầu khác với nó, giả sử ean8.

Và khi tôi làm điều đó, bây giờ chúng ta sẽ thấy rằng chúng ta có cả hai, ean8 và mã QR.

Nhưng nếu tôi muốn lấy tất cả chúng thì sao?

Tôi chỉ đơn giản là vượt qua một mảng trống, và trong khoảnh khắc đó, tất cả các ký hiệu đều được đọc.

Và như bạn thấy, tất cả được đánh dấu ngay bây giờ với mã ở dưới cùng.

Hãy quay lại các trang trình bày của chúng ta.

Từ mã vạch, chúng ta hiện đang chuyển sang xem xét nhận dạng văn bản.

Vision đã giới thiệu nhận dạng văn bản vào năm 2019.

Nó hoạt động ở hai chế độ: Nhanh và Chính xác.

Kể từ đó, Vision đã mở rộng hỗ trợ ngôn ngữ của mình.

Hãy xem cách nhận dạng văn bản hoạt động và vai trò của ngôn ngữ.

Trong Fast path, chúng ta có một công cụ nhận dạng ký tự Latinh.

Mặt khác, đường dẫn chính xác sử dụng bộ nhận dạng dựa trên máy học hoạt động trên các từ và dòng.

Sau khi nhận dạng xong, mỗi con đường sẽ trải qua giai đoạn chỉnh sửa ngôn ngữ.

Và, cuối cùng, chúng tôi nhận lại văn bản được nhận dạng.

Việc lựa chọn ngôn ngữ ảnh hưởng đến giai đoạn nhận dạng.

Trong Fast path, điều đó có nghĩa là các bộ ký tự Latinh khác nhau được hỗ trợ, giống như umlaut cho tiếng Đức.

Trong con đường Chính xác, một mô hình hoàn toàn khác được sử dụng khi chúng ta phải nhận ra tiếng Trung, vì cấu trúc của nó rất khác với các ngôn ngữ dựa trên tiếng Latinh.

Điều đó có nghĩa là nếu bạn cần đọc văn bản tiếng Trung, thì điều quan trọng là tiếng Trung là ngôn ngữ chính trong yêu cầu.

Việc lựa chọn ngôn ngữ cũng ảnh hưởng đến việc điều chỉnh ngôn ngữ, vì nó chọn từ điển chính xác cho công việc của mình.

Vậy, các phương pháp hay nhất khi sử dụng ngôn ngữ trong nhận dạng văn bản là gì?

Mặc dù có vẻ như một bộ ngôn ngữ cố định được hỗ trợ, nhưng tốt hơn hết là bạn nên truy vấn ngôn ngữ nào được hỗ trợ cho một cấu hình yêu cầu nhất định bằng cách sử dụng supportedRecognitionLanguages().

Bạn có thể chỉ định nhiều ngôn ngữ, và, trong trường hợp đó, thứ tự quan trọng.

Khi có sự mơ hồ, nó được giải quyết theo thứ tự ngôn ngữ.

Đặc biệt đối với đường dẫn Chính xác, ngôn ngữ đầu tiên quyết định mô hình nhận dạng nào được sử dụng.

Điều đó có nghĩa là trường hợp sử dụng của bạn quyết định ngôn ngữ bạn muốn sử dụng trong yêu cầu.

Hãy xem xét điều này trong một bản demo nhỏ.

Vì vậy, bây giờ tôi có ở đây một phiên bản sửa đổi của mã mẫu của chúng tôi và bạn có thể thấy rằng tôi có một hình ảnh với các ngôn ngữ văn bản khác nhau trong đó.

Bây giờ, tôi đã chỉ định Bản sửa đổi 2 và tôi có thể xem ngôn ngữ nào được hỗ trợ.

Chúng tôi có tiếng Anh, tiếng Pháp, vân vân.

Bây giờ, nếu tôi chuyển, ví dụ, trở lại Bản sửa đổi 1, chúng ta có thể thấy tôi chỉ có tiếng Anh.

Và điều đó cũng tương tự đối với Fast cũng như đối với đường dẫn Chính xác.

Bây giờ, hãy quay lại Bản sửa đổi 2.

Lưu ý rằng bây giờ khi tôi chuyển sang tiếng Đức, tôi thực sự nhận được umlaut một cách chính xác ở Grüsse aus Cupertino.

Nhưng tôi không có sự hỗ trợ trong con đường Nhanh cho người Trung Quốc.

Trên con đường Chính xác, bây giờ tôi có thể chọn tiếng Trung.

Và bây giờ, cuối cùng chúng ta cũng nhận được các chữ cái tiếng Trung chính xác cho "Hello World".

Hãy quay lại các trang trình bày.

Cuối cùng nhưng không kém phần quan trọng, hãy xem xét Phát hiện Tài liệu.

Vision giới thiệu một yêu cầu mới được gọi là VNDocumentSegmentationRequest.

Đó là một máy dò dựa trên máy học mà chúng tôi đã đào tạo trên nhiều loại tài liệu khác nhau, như tờ giấy, biển báo, ghi chú, biên lai, nhãn, v.v.

Kết quả của yêu cầu là mặt nạ phân đoạn có độ phân giải thấp, trong đó mỗi pixel đại diện cho sự tự tin nếu pixel đó có phải là một phần của tài liệu được phát hiện hay không.

Ngoài ra, nó cung cấp bốn điểm góc của hình tứ giác.

Trên các thiết bị có Neural Engine, yêu cầu có thể chạy trong thời gian thực trên máy ảnh hoặc nguồn cấp dữ liệu video.

VNDocumentCamera trong VisionKit hiện đang sử dụng yêu cầu thay vì VNDetectRectanglesRequest trên các thiết bị hiện đại với Neural Engine.

Nói về VNDetectRectanglesRequest, hai yêu cầu này khác nhau như thế nào, vì cả hai đều có thể được sử dụng để phát hiện một tài liệu?

DetectDocumentsRequest, như tôi đã đề cập, dựa trên máy học và hoạt động nhanh nhất trên Neural Engine.

Nhưng nó cũng có thể được sử dụng trên GPU hoặc CPU, nhưng nó không đủ nhanh để có hiệu suất thời gian thực.

Máy dò hình chữ nhật là một thuật toán thị giác máy tính truyền thống chỉ chạy trên CPU và có thể theo kịp hiệu suất thời gian thực, miễn là CPU không bão hòa với các tác vụ khác.

Yêu cầu tài liệu được đào tạo trên nhiều loại tài liệu và chúng không nhất thiết phải là tất cả các hình chữ nhật, đó là một trong những điểm mạnh chính của nó.

Mặt khác, máy dò hình chữ nhật hoạt động bằng cách tìm các cạnh và giao điểm tạo thành hình tứ giác, đây có thể là một thách thức với các góc hoặc nếp gấp bị che khuất trong tài liệu.

Các yêu cầu tài liệu cung cấp mặt nạ phân đoạn và các điểm góc, trong khi máy dò hình chữ nhật chỉ cung cấp các điểm góc.

Và máy dò tài liệu được đào tạo để chỉ tìm kiếm một tài liệu.

Với máy dò hình chữ nhật sẽ trả về nhiều hình chữ nhật.

Những hình chữ nhật này thậm chí có thể được lồng vào nhau.

Hãy xem xét điều này nhiều hơn một chút.

Như tôi đã đề cập, máy dò tài liệu tìm thấy một tài liệu, mà chúng ta thấy ở đây với hình tứ giác của vật thể được phát hiện.

Nhưng máy dò hình chữ nhật sẽ cung cấp lại nhiều quan sát về tất cả các hình chữ nhật mà nó tìm thấy trong hình ảnh và tôi đã đánh dấu một vài ở đây.

Tùy thuộc vào ứng dụng để quyết định hình chữ nhật nào là tài liệu.

Làm thế nào về việc chúng ta thử tất cả những điều này trong một bản demo?

Được rồi, chúng tôi muốn tạo một cuộc khảo sát nhỏ, chúng tôi đang làm tốt như thế nào tại WWDC.

Bây giờ, thật không may, bạn không ở bên tôi, vì vậy tôi đã phải yêu cầu nhóm quay phim ở đây điền vào bản khảo sát cho bạn.

Vì vậy, tôi đã tạo ra một ứng dụng nhỏ mà bây giờ tôi có thể quét thẻ khảo sát của chúng tôi.

Và chúng ta nhận được gì?

QuickDraw cho người mới bắt đầu cảm thấy lỗi thời.

Chà, bây giờ nó hơi cũ rồi.

Hãy đi cho cái tiếp theo.

À, Vision rất thú vị và nhiều thông tin.

Và cuối cùng nhưng không kém phần quan trọng, Cobol, chỉ là những gì tôi cần.

Ai đó đang ở sai phiên ở đây.

Được rồi, bây giờ hãy xem chúng ta đã làm điều này như thế nào trong mã.

Vì vậy, tôi đã tạo lại một sân chơi nhỏ ở đây vì việc xây dựng những thứ này cho chúng tôi dễ dàng hơn.

Những gì bạn có thể thấy là tôi đã tải lên một hình ảnh và tôi đã sử dụng CIImage, bởi vì tôi cần thực hiện một số thao tác hình ảnh trên đó.

Tôi đã tạo một requestHandler, và tôi đã sử dụng VNDetectDocument SegmentationRequest() mới.

Khi tôi thực hiện yêu cầu, bây giờ tôi nhận lại kết quả và tôi đã tạo một chức năng trợ giúp nhỏ mà tôi đã sử dụng hình ảnh cốt lõi để sử dụng bây giờ làm hình ảnh đã sửa phối cảnh và chúng tôi nhận lại chỉ là một thẻ đã cắt ở dạng đã sửa phối cảnh.

Vì vậy, điều đó thật dễ dàng.

Vậy, chúng ta phải làm gì tiếp theo?

Chúng ta cần phát hiện mã vạch, phát hiện các hình chữ nhật và nhận dạng văn bản.

Khi chúng tôi thực hiện yêu cầu này, chúng tôi phải quét các hộp kiểm để xem cái nào đã được đánh dấu.

Được rồi, tôi đã chuẩn bị điều này một chút, vì vậy hãy bắt đầu với việc phát hiện mã vạch.

Và tôi đang sử dụng, như những ký hiệu, chỉ là mã QR.

Tôi đã tải vào tiêu đề tài liệu vì tôi biết đó là-- nội dung mã QR của tôi sẽ là tiêu đề của những gì chúng tôi nhận được từ nó.

Tiếp theo, chúng ta cần phát hiện các hình chữ nhật.

Một lần nữa, chúng tôi có một đoạn mã hình chữ nhật nhỏ cho điều đó.

Vì vậy, tôi tạo ra hai mảng.

Tôi muốn lấy tất cả các checkBoxImages, đó là dữ liệu cần thiết cho việc phân tích.

Và tôi lấy tất cả các hình chữ nhật ra.

Vì vậy, tôi đã sử dụng VNDetectRectanglesRequest.

Bây giờ, những gì tôi làm ở đây là tôi sắp xếp chúng theo thứ tự dọc để tôi nhận lại kết quả theo đúng thứ tự.

Được rồi, bây giờ chúng ta cần nhận ra văn bản của mình.

Điều đó thật đơn giản.

Chúng tôi lưu trữ tất cả các khối văn bản kết quả và chúng tôi sử dụng VNRecognizeTextRequest.

Vì vậy, bây giờ, những gì chúng ta phải làm chỉ đơn giản là thực hiện yêu cầu.

Và như bạn có thể thấy, tôi đã sử dụng documentRequestHandler, đây là tài liệu đã sử dụng hình ảnh được cắt ra và thực hiện các yêu cầu trên đó.

Và nếu tôi quay lại đây, tôi đã có thể thấy rằng tôi đã nhận được mã QR chính xác của mình, nhưng có điều gì đó không ổn với hình chữ nhật của tôi.

Tôi không nhận được bất kỳ hình chữ nhật nào.

Vậy, tôi phải làm gì?

Chà, theo mặc định, máy dò hình chữ nhật chỉ tìm kiếm các hình chữ nhật có ít nhất 20% hình ảnh.

Vì vậy, chúng ta cần phải sửa chữa điều đó.

Vì vậy, tôi đi vào và đặt Kích thước tối thiểu thành, giả sử, khoảng 10%.

Và một khi chúng ta làm điều đó, chúng ta sẽ có một hình chữ nhật.

Được rồi, đó chỉ là một.

Chà, một điều khác với máy dò hình chữ nhật là tôi cần nói cho nó biết nó sẽ trả lại bao nhiêu.

Theo mặc định, phát hiện hình chữ nhật sẽ chỉ trả về một, hình chữ nhật nổi bật nhất.

Nhưng tôi muốn có được tất cả chúng.

Tôi làm điều này bằng cách đặt maximumObservations thành 0.

Và một khi tôi đã làm điều đó, bây giờ tôi nhận được tất cả các hộp kiểm của chúng tôi và mã vạch, bởi vì nó trông giống như một hình chữ nhật.

Được rồi, vậy là chúng tôi ổn.

Bây giờ đến phần cuối cùng, và tôi thực sự cần quét các hộp kiểm.

Vì vậy, vì điều đó, tôi thực sự đã chuẩn bị một bản demo học máy nhỏ.

Tôi có một mô hình ở đây mà tôi đã đào tạo trước đó với Create ML.

Đó là một trình phân loại hình ảnh và tất cả những gì tôi làm là tôi đã sử dụng một số hình ảnh hộp kiểm này, được đánh dấu và một số trong số chúng không được đánh dấu, cho nhãn "có" và "không" của tôi.

Và tôi cũng đã thu thập được một vài hình ảnh không phải là cả hai.

Đó là NotIt của tôi.

Một lần nữa, chúng ta có thể sử dụng cái này trong mã của mình.

Vậy, chúng ta có gì?

Chúng tôi tạo yêu cầu của mình bằng cách tải mô hình và tạo yêu cầu Tạo ML của chúng tôi.

Và sau đó chúng tôi lặp lại, trên tất cả các hình ảnh hộp kiểm, tạo một ImageRequestHandler từ nó và thực hiện phân loại của chúng tôi.

Bây giờ, tôi có thể nhìn vào phân loại hàng đầu của mình.

Nếu đó là "Có", thì tôi chỉ cần tìm dòng văn bản nào với hộp kiểm mà tôi có, và cuối cùng chúng ta sẽ nhận được gì?

Tầm nhìn mang tính giải trí và nhiều thông tin.

Hãy quay lại các trang trình bày.

Hãy tóm tắt lại những gì chúng ta đã thấy.

Phân tích tài liệu là trọng tâm trong Vision API.

Phát hiện mã vạch trong Vision linh hoạt hơn máy quét và chúng tôi đang giới thiệu một phát hiện phân đoạn tài liệu mới.

Nếu bạn muốn tìm hiểu thêm về cách sử dụng OCR, vui lòng xem phiên của chúng tôi từ WWDC 2019.

Phiên "Tầm nhìn và hình ảnh cốt lõi" từ WWDC 2020 cung cấp cho bạn những hiểu biết bổ sung trong việc thực hiện phân tích tài liệu tùy chỉnh của riêng bạn bằng cách xử lý trước hình ảnh và phát hiện các đường viền.

Cảm ơn bạn, và tận hưởng phần còn lại của WWDC.

[Âm nhạc].