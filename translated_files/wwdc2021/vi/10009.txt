10009

♪ Nhạc bass đang phát ♪

♪

Brady White: Xin chào, tôi là Brady.

Tôi là một kỹ sư trong đội Thể hình.

Cảm ơn vì đã tham gia cùng tôi.

Có rất nhiều ứng dụng tập luyện tuyệt vời đã có sẵn trong App Store.

Apple Watch là một thiết bị tuyệt vời có khả năng theo dõi tất cả các loại hoạt động thể dục.

Nó có thể theo dõi khoảng cách và độ cao trên những chuyến đi xe đạp đầy thử thách đó.

Bạn có thể theo dõi nhịp tim và năng lượng bị đốt cháy trong quá trình tập luyện cường độ cao.

Đối với bơi lội, nó thậm chí có thể phát hiện loại đột quỵ và đếm vòng đua.

Tất cả những điều này và hơn thế nữa có sẵn để bạn xây dựng một ứng dụng tập luyện tuyệt vời.

Hãy xem những gì chúng ta sẽ đề cập hôm nay.

Phiên này là một Code-Along.

Chúng tôi sẽ xem xét điều đó có nghĩa là gì và cách bạn có thể tham gia.

Chúng tôi sẽ xây dựng chế độ xem tập luyện của mình trong SwiftUI.

Sau đó, chúng tôi sẽ tích hợp HealthKit vào quan điểm của mình.

Chúng tôi cũng sẽ chỉ cho bạn cách hỗ trợ trạng thái Luôn Bật.

Tôi rất phấn khích, hãy bắt đầu nào.

Phiên này là một mã-cùng.

Chúng tôi sẽ cùng nhau xây dựng một ứng dụng tập luyện từ đầu.

Trong khi bạn chuẩn bị sẵn Xcode, hãy đề cập đến một vài khái niệm.

Ứng dụng tập luyện là gì?

Một ứng dụng tập luyện theo dõi hoạt động thể dục trong quá trình tập luyện.

Một bài tập có thể được bắt đầu chỉ với một cú chạm.

Trong khi tập luyện đang diễn ra, các chỉ số trực tiếp được hiển thị, chẳng hạn như thời gian đã trôi qua, năng lượng bị đốt cháy, nhịp tim và khoảng cách.

Khi bài tập kết thúc, một bản tóm tắt hiển thị các số liệu được ghi lại cho bài tập.

Đây là những gì chúng ta sẽ xây dựng ngày hôm nay.

Hãy bắt đầu xây dựng quan điểm tập luyện của chúng ta.

Hãy mở Xcode và bắt đầu một dự án mới.

Nhấp vào Tạo một dự án Xcode mới, watchOS, Xem Ứng dụng, nhấp vào Tiếp theo.

Đặt tên cho ứng dụng tập luyện của bạn, chẳng hạn như "MyWorkouts".

Đảm bảo Giao diện là SwiftUI, và ngôn ngữ là Swift và nhấp vào Tiếp theo.

Tìm một địa điểm cho dự án của bạn và nhấp vào Tạo.

Hãy giấu thanh tra và thay đổi kích thước khung vẽ của chúng ta.

Hãy nhấp vào Tiếp tục để xem ứng dụng của chúng tôi trông như thế nào, sử dụng bản xem trước Xcode.

Tuyệt vời, ứng dụng SwiftUI của chúng tôi đã sẵn sàng.

Hãy cung cấp một cách để ai đó bắt đầu tập luyện với StartView.

Một bài tập có thể được bắt đầu chỉ với một cú chạm.

Chế độ xem danh sách với bố cục kiểu băng chuyền sẽ cung cấp danh sách các bài tập cuộn theo chiều dọc với hiệu ứng chiều sâu tuyệt vời.

Danh sách các bài tập của chúng tôi sẽ bao gồm đạp xe, chạy bộ và đi bộ.

Hãy tạo StartView của chúng ta.

Hãy đổi tên "ContentView" thành "StartView".

Nhấp chuột lệnh vào ContentView, nhấp vào Đổi tên, Nhập "StartView" làm tên mới.

Lưu ý rằng trong MyWorkoutsApp.swift StartView bây giờ là chế độ xem gốc của NavigationView.

Nhấp vào Đổi tên.

Hãy xác định một loạt các loại bài tập để hiển thị trong danh sách StartView của chúng tôi.

Đầu tiên, hãy nhập HealthKit để có quyền truy cập vào HKWorkoutActivityType.

Tiếp theo, hãy thêm mảng các loại bài tập của chúng ta.

Danh sách tập luyện của chúng tôi sẽ có HKWorkoutActivityCác loại đạp xe, chạy bộ và đi bộ.

Hãy làm cho HKWorkoutActivityType có thể truy cập vào danh sách của chúng tôi bằng cách mở rộng danh sách HKWorkoutActivityType để phù hợp với giao thức có thể nhận dạng và thêm biến tên.

Biến được tính toán ID sẽ trả về giá trị thô của enum.

Biến tên sẽ chuyển qua các trường hợp để trả về một tên như "Chạy", "Xe đạp" hoặc "Đi bộ".

Hãy thêm chế độ xem Danh sách vào phần thân StartView của chúng tôi để hiển thị danh sách các bài tập.

Danh sách sử dụng biến workoutTypes làm mô hình của nó.

Một NavigationLink được hiển thị cho mỗi loại bài tập.

NavigationLink xác định đích đến cho giao diện dựa trên điều hướng.

Hiện tại, điểm đến sẽ là chế độ xem văn bản.

Chúng tôi sẽ thiết lập các liên kết điều hướng này sau để đảm bảo rằng chúng đang theo dõi bài tập phù hợp.

Đệm làm cho các liên kết điều hướng cao hơn để cung cấp cho chúng một khu vực chạm lớn hơn để dễ dàng bắt đầu tập luyện.

Danh sách sử dụng listStyle băng chuyền để cung cấp hiệu ứng chiều sâu khi cuộn.

Tiêu đề thanh điều hướng sẽ hiển thị "Bài tập".

Hãy nhấp vào Tiếp tục để xem bản xem trước StartView của chúng tôi.

Nhấp vào Xem trước Trực tiếp để có thể cuộn.

Cuộn lên để xem hiệu ứng độ sâu băng chuyền ListStyle.

Trông thật tuyệt.

Buổi tập luyện sẽ được trình bày như một trải nghiệm phương thức.

Trong quá trình tập luyện, mọi người thường chỉ cần chức năng dành riêng cho phiên.

Họ không cần xem lại danh sách các bài tập hoặc truy cập các phần khác trong ứng dụng của bạn.

Cung cấp các mục quan trọng nhất trong trải nghiệm phương thức có thể giúp mọi người quản lý phiên của họ trong khi giảm thiểu sự phân tâm.

Những người sử dụng ứng dụng tập luyện trên Apple Watch mong đợi lượt xem theo thứ tự này.

Ở bên trái, chế độ xem điều khiển của chúng tôi có các nút điều khiển phiên đang tiến hành như Kết thúc, Tạm dừng và Tiếp tục.

Ở trung tâm, các số liệu xuất hiện trên một màn hình chuyên dụng mà mọi người có thể đọc trong nháy mắt.

Ở bên phải, các điều khiển phát lại phương tiện cho phép điều khiển phương tiện trong quá trình tập luyện.

TabView trên watchOS chuyển đổi giữa nhiều chế độ xem con khi ai đó vuốt sang trái hoặc phải.

TabView cũng cung cấp một chỉ báo trang ở cuối chế độ xem.

TabView sẽ hoạt động tốt để hiển thị chế độ xem trong phiên của chúng tôi.

Hãy tạo một SessionPagingView với TabView cho ba chế độ xem buổi tập luyện của chúng tôi.

Nhấp vào Tệp > Mới > Tệp...

SwiftUI View, nhấp vào Next, đặt tên cho cái này là "SessionPagingView" và nhấp vào Create.

Hãy tạo một tab enum để mô hình hóa từng chế độ xem có thể được chọn trong TabView của chúng tôi.

Tab enum có ba trường hợp: điều khiển, số liệu và hiện đang phát.

Chúng tôi cũng đã thêm một biến @State có tên là "lựa chọn" để cung cấp ràng buộc cho lựa chọn của TabView.

Giá trị mặc định của lựa chọn sẽ là số liệu, để khi bắt đầu tập luyện, chế độ xem số liệu sẽ được hiển thị.

Hãy thêm TabView.

Tham số lựa chọn của TabView sử dụng liên kết với biến trạng thái lựa chọn của chúng tôi.

Chế độ xem văn bản là trình giữ chỗ cho mỗi chế độ xem cho đến khi chúng được tạo.

Mỗi lượt xem có một thẻ để chúng có thể được chọn.

Hãy nhấp vào Tiếp tục và xem SessionPagingView của chúng tôi trông như thế nào.

Nhấp vào Xem trước Trực tiếp để có thể vuốt giữa các chế độ xem.

Lưu ý chế độ xem văn bản Metrics được hiển thị trước, bởi vì giá trị mặc định của biến lựa chọn của SessionPagingView là số liệu.

Vuốt sang trái sẽ hiển thị chế độ xem văn bản Điều khiển.

Vuốt hết bên phải sẽ hiển thị chế độ xem văn bản Đang phát.

Tuyệt vời!

Trong khi bài tập đang chạy, các số liệu trực tiếp được hiển thị.

Khi một phiên yêu cầu chuyển động, như đang chạy, ứng dụng của bạn nên sử dụng kích thước phông chữ lớn và sắp xếp văn bản sao cho thông tin quan trọng nhất dễ đọc.

MetricsView của chúng tôi sẽ hiển thị thời gian đã trôi qua, năng lượng hoạt động, nhịp tim hiện tại và khoảng cách.

HealthKit có nhiều HKQuantityTypes khác có sẵn để bạn sử dụng.

Hãy tạo MetricsView.

Nhấp vào Tệp > Mới > Tệp SwiftUI Xem, nhấp vào Tiếp theo, đặt tên cho "MetricsView" này và nhấp vào Tạo.

VStack sẽ chứa bốn chế độ xem Văn bản số liệu của chúng tôi.

Chế độ xem Văn bản hiện có các giá trị mặc định cho đến khi chúng tôi kết nối các chế độ xem Văn bản này với mô hình của mình.

Hãy biến thời gian đã trôi qua thành tiêu điểm bằng cách đặt cho nó một Màu nền trước màu vàng và trọng lượng phông chữ bán đậm.

Chế độ xem văn bản năng lượng hoạt động tạo ra một phép đo bằng cách sử dụng giá trị mặc định trong đơn vị năng lượng kilocalories.

Phép đo sử dụng một chức năng được định dạng mới viết tắt đơn vị, cách sử dụng là tập luyện để đốt cháy năng lượng tập luyện và numberFormat có chiều dài phân số bằng 0 để cắt các phân số.

Chế độ xem văn bản nhịp tim sử dụng giá trị mặc định được định dạng bằng fractionLength zero.

Nó nối thêm "bpm" - cho nhịp mỗi phút - vào chuỗi được định dạng.

Chế độ xem văn bản khoảng cách sử dụng giá trị mặc định với UnitLength.meters.

Phép đo được định dạng với các đơn vị viết tắt.

Cách sử dụng là đường bộ, hiển thị các đơn vị đế quốc hoặc số liệu tiến triển tự nhiên dựa trên địa phương.

Chúng tôi sẽ sử dụng phông chữ hệ thống của tiêu đề với thiết kế tròn trịa, chữ số đơn cách và chữ thường SmallCaps.

Chúng tôi muốn các số liệu của mình được căn chỉnh theo cạnh trước, vì vậy chúng tôi đã cung cấp cho VStack một công cụ sửa đổi chế độ xem khung hình với vô cực maxWidth và căn chỉnh hàng đầu.

Chúng tôi muốn cho phép nội dung của VStack này mở rộng đến cuối màn hình.

Để cho phép điều này, chúng tôi bỏ qua khu vực an toàn phía dưới.

Chúng tôi muốn các số liệu của mình được căn chỉnh theo tiêu đề thanh điều hướng, vì vậy chúng tôi đã sử dụng scenePadding() để thực hiện việc này.

Chúng tôi muốn chế độ xem Văn bản thời gian đã trôi qua của mình định dạng thời gian đã trôi qua đúng cách và ẩn hoặc hiển thị các giây phụ dựa trên trạng thái Luôn Bật.

Để làm điều này, hãy tạo một ElapsedTimeView và tạo một ElapsedTimeFormatter tùy chỉnh.

Nhấp vào Tệp > Mới > Tệp, Chế độ xem SwiftUI, nhấp vào Tiếp theo, đặt tên cho nó là "ElapsedTimeView" và nhấp vào Tạo.

ElapsedTimeView của chúng tôi có elapsedTime, là TimeInterval, mặc định là 0.

showSubseconds là một đối số Boolean mặc định là true.

timeFormatter là một biến trạng thái ElapsedTimeFormatter mà chúng tôi xác định bên dưới.

Nội dung của Chế độ xem chứa chế độ xem Văn bản chuyển Thời gian đã trôi qua sang Số NS để Trình định dạng thời gian có thể sử dụng nó.

Chế độ xem văn bản có fontWeight bán đậm.

Khi showSubseconds thay đổi, biến showSubseconds của timeFormatter cũng thay đổi.

ElapsedTimeFormatter là một trình định dạng tùy chỉnh sử dụng DateComponentsFormatter.

Chúng tôi muốn thời gian đã trôi qua để hiển thị phút và giây và pad số không.

Biến showSubseconds ra lệnh nếu giây con được hiển thị.

Chúng tôi ghi đè chuỗi cho hàm giá trị, trả về một Chuỗi tùy chọn.

Người bảo vệ đầu tiên đảm bảo giá trị là một TimeInterval.

Bộ phận bảo vệ thứ hai đảm bảo các thành phần Formatter trả về một chuỗi.

Nếu showSubseconds là đúng, hãy tính các giây con bằng cách lấy Remainder bị cắt ngắn bằng cách chia cho 1, sau đó nhân với 100.

Sử dụng decimalSeparator được bản địa hóa, sau đó trả về một formattedString, nối thêm các giây con.

Nếu showSubseconds là sai, thì chỉ cần trả về formattedString mà không có subseconds.

Nhấp vào tiếp tục để xem bản xem trước của ElapsedTimeView của chúng tôi.

Có vẻ ổn.

Phút có các số không được đệm ở phía bên trái của đại tràng.

Giây có các số không được đệm ở phía bên phải của đại tràng.

Giây con được hiển thị sau số thập phân.

Hãy thêm ElapsedTimeView vào MetricsView.

Nhấp vào MetricsView.

Thay thế chế độ xem Văn bản thời gian đã trôi qua bằng Chế độ xem Thời gian trôi qua.

Hãy xem trước MetricsView của chúng tôi.

Trông thật tuyệt!

ControlsView có các nút điều khiển phiên đang tiến hành, chẳng hạn như Kết thúc, Tạm dừng và Tiếp tục.

Khi nhấn nút Kết thúc, bản tóm tắt bài tập sẽ được hiển thị.

Khi nút Tạm dừng được nhấn, bài tập sẽ tạm dừng và MetricsView sẽ được hiển thị.

Hãy tạo ControlsView.

Nhấp vào Tệp > Mới > Tệp, Chế độ xem SwiftUI, đặt tên cho "ControlsView" này và nhấp vào Tạo.

Hãy thêm các nút Kết thúc và Tạm dừng.

Một HStack chứa hai VStacks trong đó mỗi VStack chứa một nút và một chế độ xem văn bản.

Nhãn của nút Kết thúc là một Hình ảnh với systemName "xmark".

Nút có tông màu đỏ và sử dụng phông chữ title2 để tăng kích thước của biểu tượng.

Chế độ xem văn bản bên dưới có chuỗi "Kết thúc".

Nút tạm dừng sử dụng một hình ảnh với systemName "tạm dừng".

Nó có tông màu vàng.

Chế độ xem văn bản bên dưới có chuỗi "Tạm dừng".

Nhấp vào Tiếp tục để xem trước ControlsView.

Trông thật tuyệt.

NowPlayingView cung cấp các điều khiển phát lại phương tiện trong khi tập luyện đang diễn ra.

Điều này bao gồm các điều khiển cho các ứng dụng của bên thứ ba hiện đang phát phương tiện.

Hãy thêm NowPlayingView.

Chọn SessionPagingView.

NowPlayingView được cung cấp bởi WatchKit.

Hãy nhập WatchKit.

Hãy thay thế chế độ xem văn bản của chúng tôi bằng ControlsView, MetricsView và NowPlayingView.

NowPlayingView là một chế độ xem SwiftUI được cung cấp bởi WatchKit.

Thật đơn giản.

Nhấp vào Tiếp tục để xem bản xem trước của SessionPagingView.

Trong Xem trước, chúng ta có thể thấy MetricsView của mình.

Vuốt sang trái để xem ControlsView.

Vuốt hết sang phải...

...Để xem NowPlayingView.

Hãy quay lại StartView của chúng tôi và thay đổi đích đến của NavigationLink thành SessionPagingView.

Chọn StartView.

Cập nhật điểm đến đến SessionPagingView.

Màn hình Tóm tắt xác nhận rằng một bài tập đã kết thúc và hiển thị thông tin đã ghi lại.

Chúng tôi sẽ nâng cao bản tóm tắt bằng cách bao gồm Vòng hoạt động để mọi người có thể dễ dàng kiểm tra tiến trình hiện tại của họ.

Hãy tạo chế độ xem Tóm tắt.

Nhấp vào Tệp > Mới > Tệp, Chế độ xem SwiftUI, nhấp vào Tiếp theo, đặt tên cho "Chế độ xem tóm tắt" này và nhấp vào Tạo.

Hãy tạo một SummaryMetricView tùy chỉnh mô tả số liệu và giá trị của nó.

Tóm tắtMetricView lấy một tiêu đề mô tả số liệu và một chuỗi giá trị của số liệu.

Nội dung chứa hai chế độ xem văn bản và một dải phân cách.

Chế độ xem văn bản hiển thị giá trị số liệu sử dụng phông chữ hệ thống tiêu đề với thiết kế tròn và chữ thường SmallCaps.

Nó sử dụng accentColor làm màu nền trước của nó.

Hãy tạo trình định dạng thời lượng tập luyện cho Chế độ xem tóm tắt.

durationFormatter là một DateComponentsFormatter hiển thị giờ, phút và giây cách nhau bằng dấu hai chấm và số không.

Hãy thêm SummaryMetricViews và nút Xong vào SummaryView của chúng tôi.

ScrollView và VStack chứa bốn nút SummaryMetricViews và Done của chúng tôi.

Chế độ xem văn bản Tổng thời gian sử dụng durationFormatter để hiển thị giờ, phút và giây, cách nhau bằng dấu hai chấm.

Tổng khoảng cách Tóm tắtMetricView sử dụng Phép đo với giá trị mặc định được định dạng bằng cách sử dụng đơn vị viết tắt.

Cách sử dụng là đường bộ, hiển thị các đơn vị đế quốc hoặc số liệu tiến triển tự nhiên dựa trên địa phương.

Tóm tắt tổng năng lượngMetricView sử dụng Phép đo với giá trị mặc định và đơn vị năng lượng là kilocalories.

Nó được định dạng bằng cách sử dụng một đơn vị viết tắt.

Sử dụng là tập luyện cho năng lượng tập luyện, và numberFormat có độ chính xác với fractionLength zero.

Tóm tắt nhịp tim trung bìnhMetricView sử dụng giá trị mặc định được định dạng với độ chính xác của số, độ dài phân số 0 và thêm "bpm" cho nhịp mỗi phút.

Chúng tôi sẽ cung cấp các giá trị tập luyện thực tế sau cho SummaryMetricViews.

Chúng tôi muốn các chế độ xem văn bản và dải phân cách căn chỉnh theo tiêu đề thanh điều hướng nên chúng tôi đã sử dụng .scenePadding() trên VStack.

Tiêu đề điều hướng sẽ là "Tóm tắt" và sẽ hiển thị nội tuyến trong thanh điều hướng.

Tiếp theo, hãy thêm Vòng hoạt động vào bản tóm tắt tập luyện.

Nhấp vào Tệp > Mới > Tệp, Tệp Swift, nhấp vào Tiếp theo, đặt tên cho "ActivityRingsView" này và nhấp vào Tạo.

Nhập HealthKit để có quyền truy cập vào HKHealthStore.

Nhập SwiftUI để có quyền truy cập vào WKInterfaceObjectRepresentable.

Cấu trúc ActivityRingsView phù hợp với WKInterfaceObjectRepresentable.

Hằng số healthStore được chỉ định khi khởi tạo.

Hai chức năng được yêu cầu để phù hợp với giao thức: makeWKInterfaceObject và updateWKInterfaceObject.

Bên trong makeWKInterfaceObject, chúng tôi khai báo activityRingsObject là WKInterfaceActivityRing.

Tiếp theo, chúng tôi tạo vị ngữ cho HKActivitySummaryQuery và sử dụng các thành phần ngày cho ngày hôm nay.

Sau đó, chúng tôi tạo truy vấn và xử lý kết quả, đặt tóm tắt hoạt động trên activityRingsObject trên hàng đợi chính.

Sau đó thực hiện truy vấn trên HKHealthStore.

Cuối cùng, trả về activityRingsObject.

Hãy thêm ActivityRingsView vào SummaryView.

Nhấp vào Xem Tóm tắt.

Hãy nhập HealthKit để có quyền truy cập vào HKHealthStore.

Tiếp theo, hãy thêm chế độ xem Văn bản và Chế độ xem Vòng hoạt động phía trên nút Xong.

Chúng tôi đã thêm chế độ xem Văn bản và Chế độ xem ActivityRings với chiều rộng và chiều cao khung là 50.

Chúng tôi sẽ tạo một HKHealthStore ngay bây giờ.

Sau đó, chúng tôi sẽ sử dụng lại một cái.

Hãy xem trước Chế độ xem Tóm tắt của chúng tôi. Nhấp vào Tiếp tục.

Nhấp vào Xem trước Trực tiếp để có thể cuộn.

Xem từng nút SummaryMetricViews, Activity Rings và Done của chúng tôi.

Hãy nói về việc tích hợp HealthKit.

HealthKit cung cấp chức năng tích hợp để theo dõi hoạt động thể dục trong quá trình tập luyện và lưu bài tập đó vào HealthKit.

Điều này giúp bạn tiết kiệm thời gian với tư cách là nhà phát triển và khách hàng của bạn sẽ lưu tất cả các bài tập của họ đến một địa điểm.

Buổi tập luyện HK chuẩn bị các cảm biến của thiết bị để thu thập dữ liệu để bạn có thể thu thập chính xác dữ liệu liên quan đến việc tập luyện, như lượng calo và nhịp tim.

Nó cũng cho phép ứng dụng của bạn chạy trong nền khi bài tập đang hoạt động.

HKLiveWorkoutBuilder sẽ tạo và lưu một đối tượng HKWorkout.

Nó tự động thu thập các mẫu và sự kiện cho bạn.

Để tìm hiểu thêm, hãy xem phiên "Những cách mới để làm việc với các bài tập".

Hãy xem luồng dữ liệu sẽ như thế nào cho ứng dụng của chúng tôi.

WorkoutManager sẽ chịu trách nhiệm giao tiếp với HealthKit.

Nó giao tiếp với một HKWorkoutSession để bắt đầu, tạm dừng và kết thúc bài tập.

Nó giao tiếp với HKLiveWorkoutBuilder để lắng nghe các mẫu tập luyện và cung cấp dữ liệu đó cho quan điểm của chúng tôi.

WorkoutManager sẽ là một đối tượng môi trường.

Một đối tượng môi trường làm mất hiệu lực chế độ xem hiện tại bất cứ khi nào đối tượng có thể quan sát được thay đổi.

Chúng tôi sẽ chỉ định Điều hướng của Ứng dụng MyWorkouts Xem đối tượng môi trường WorkoutManager, điều này sẽ truyền WorkoutManager đến các chế độ xem trong hệ thống phân cấp chế độ xem của NavigationView.

Lượt xem sau đó sẽ khai báo @EnvironmentObject để có quyền truy cập vào WorkoutManager trong môi trường.

Hãy tạo ra WorkoutManager.

Nhấp vào Tệp > Mới > Tệp, Tệp Swift, nhấp vào Tiếp theo, đặt tên cho "Trợ quản lý tập luyện" này và nhấp vào Tạo.

Nhập HealthKit để WorkoutManager có quyền truy cập vào API của HealthKit.

Sau đó xác định lớp WorkoutManager là một NSObject phù hợp với giao thức ObservableObject.

Chúng tôi muốn cung cấp cho tất cả các quan điểm của chúng tôi quyền truy cập vào WorkoutManager.

Chúng tôi làm điều này bằng cách chỉ định WorkoutManager làm đối tượng môi trường trên NavigationView của MyWorkoutsApp.

Chọn MyWorkoutsApp.

Thêm workoutManager làm StateObject.

Thêm công cụ sửa đổi chế độ xem environmentObject vào NavigationView.

Khi một NavigationView được gán một environmentObject, nó sẽ tự động chuyển environmentObject đến các chế độ xem trong hệ thống phân cấp chế độ xem của nó.

Hãy thiết lập mô hình điều hướng của chúng ta.

Chọn WorkoutManager.

WorkoutManager sẽ quản lý bài tập đã chọn, đây là một HKWorkoutActivityType tùy chọn.

Chúng tôi đã thêm biến Bài tập đã chọn để theo dõi bài tập đã chọn.

Bây giờ NavigationLink của StartView của chúng tôi cần liên kết lựa chọn của nó với WorkoutManager's selectedWorkout.

Chọn StartView.

Thêm workoutManager EnvironmentObject vào StartView.

Hãy cập nhật NavigationLink với thẻ và lựa chọn.

Thẻ là loại bài tập.

Lựa chọn là một ràng buộc đối với selectedWorkout trên workoutManager.

Bây giờ, bất cứ khi nào một bài tập được nhấn, selectedWorkout on workoutManager sẽ cập nhật.

Bây giờ hãy bắt đầu một HKWorkoutSession và HKLiveWorkoutBuilder khi một bài tập được chọn.

Chọn WorkoutManager.

Thêm HKHealthStore, HKWorkoutSession, và HKLiveWorkoutBuilder.

Bây giờ, hãy tạo một chức năng startWorkout để bắt đầu tập luyện.

Chức năng startWorkout nhận một tham số workoutType.

Cấu hình HKWorkout được tạo bằng cách sử dụng workoutType.

Đối với ứng dụng của chúng tôi, tất cả các bài tập của chúng tôi sẽ ở ngoài trời.

Lưu ý rằng loại vị trí xác định cách thức hoạt động của HKWorkoutSession và HKLiveWorkoutBuilder.

Ví dụ, một hoạt động đạp xe ngoài trời tạo ra dữ liệu vị trí chính xác, trong khi một hoạt động đạp xe trong nhà thì không.

Tạo HKWorkoutSession bằng cách sử dụng healthStore và cấu hình.

Chỉ định trình tạo cho Trình tạo bài tập được liên kết của phiên.

Điều này được thực hiện trong một khối do-catch để xử lý bất kỳ lỗi nào được ném.

Chỉ định nguồn dữ liệu của người xây dựng cho HKLiveWorkoutDataSource bằng cách sử dụng healthStore và workoutConfiguration.

HKLiveWorkoutDataSource tự động cung cấp dữ liệu trực tiếp từ một buổi tập luyện tích cực.

Tạo startDate, gọi startActivity trên phiên và beginCollection trên trình tạo.

Bất cứ khi nào selectedWorkout thay đổi, hãy gọi startWorkout.

selectedWorkout có thể là nil.

Sử dụng câu lệnh bảo vệ để chỉ gọi startWorkout khi selectedWorkout không phải là số không.

Trước khi ứng dụng của chúng tôi có thể tạo một buổi tập luyện, chúng tôi cần thiết lập HealthKit và yêu cầu ủy quyền để đọc và chia sẻ bất kỳ dữ liệu sức khỏe nào mà ứng dụng của chúng tôi dự định sử dụng.

Hãy thêm một chức năng để yêu cầu ủy quyền.

Đối với các buổi tập luyện, chúng tôi phải yêu cầu quyền chia sẻ các loại bài tập.

Chúng tôi cũng muốn đọc bất kỳ loại dữ liệu nào được Apple Watch tự động ghi lại như một phần của phiên.

Chúng tôi cũng muốn được phép đọc bản tóm tắt Activity Rings.

Sau đó gọi yêu cầu Ủy quyền trên healthStore.

Hãy ủy quyền yêu cầu StartView từ HealthKit khi chế độ xem xuất hiện.

Nhấp vào StartView.

Khi xuất hiện, chức năng ủy quyền yêu cầu của workoutManager sẽ được gọi.

Hãy kích hoạt HealthKit cho tiện ích mở rộng của chúng tôi.

Chọn tệp dự án của MyWorkouts...

... Tiện ích mở rộng, ký và khả năng của MyWorkouts WatchKit.

Chọn Thêm Khả năng, cuộn xuống, chọn HealthKit.

Các ứng dụng có phiên tập luyện tích cực có thể chạy ở chế độ nền, vì vậy bạn cần thêm khả năng chế độ nền vào Tiện ích mở rộng WatchKit của mình.

Các buổi tập luyện yêu cầu chế độ nền xử lý bài tập.

Chọn Thêm Khả Năng, Chế Độ Nền.

Chọn xử lý bài tập.

Chúng tôi cần thêm mô tả sử dụng vào tệp Info.plist của WatchKit Extension.

Chọn Info.plist.

Chọn hàng cuối cùng, sau đó nhấn Return.

Sử dụng khóa NSHealth ShareUsageDescription.

Mô tả lý do tại sao ứng dụng của bạn cần đọc dữ liệu được yêu cầu.

Nhấn Return.

Sử dụng khóa NSHealth UpdateUsageDescription.

Mô tả dữ liệu mà ứng dụng của bạn dự định viết.

Hãy xây dựng và chạy ứng dụng của chúng tôi để xem ứng dụng của chúng tôi yêu cầu sự cho phép từ HealthKit.

Nhấp vào Chạy.

Ứng dụng của chúng tôi đã yêu cầu ủy quyền HealthKit.

Cuộn xuống và nhấp vào Đánh giá.

Chọn Tất Cả Dữ Liệu Được Yêu Cầu Bên Dưới.

Thấy rằng ứng dụng của chúng tôi đã yêu cầu chia sẻ Bài tập.

Xem lời giải thích được cung cấp của chúng tôi.

Nhấn Tiếp Theo.

Ứng dụng của chúng tôi đã yêu cầu quyền truy cập đọc.

Chọn Tất Cả Dữ Liệu Được Yêu Cầu Bên Dưới.

Xem các loại dữ liệu mà ứng dụng của chúng tôi đã yêu cầu quyền truy cập đọc.

Xem lời giải thích được cung cấp của chúng tôi.

Nhấn Xong.

Bây giờ buổi tập có thể bắt đầu, chúng ta cần kiểm soát HKWorkoutSession.

Chọn WorkoutManager.

Hãy thêm logic kiểm soát trạng thái phiên của chúng ta.

Một biến @Published có tên "đang chạy" theo dõi nếu phiên đang chạy.

Chức năng tạm dừng và tiếp tục tạm dừng và tiếp tục phiên.

Chức năng togglePause sẽ tạm dừng hoặc tiếp tục phiên dựa trên việc phiên có đang chạy hay không.

Chức năng endWorkout sẽ kết thúc phiên.

Hãy mở rộng WorkoutManager để trở thành một HKWorkoutSessionDelegate để lắng nghe những thay đổi đối với trạng thái phiên.

Chức năng workoutSession didChangeTo toState fromState with Date được gọi bất cứ khi nào trạng thái phiên thay đổi.

Biến đang chạy của chúng tôi sẽ cập nhật dựa trên việc toState có đang chạy hay không và được gửi đến hàng đợi chính để cập nhật giao diện người dùng.

Khi phiên chuyển sang kết thúc, hãy gọi endCollection trên trình tạo với ngày kết thúc được cung cấp để ngừng thu thập các mẫu tập luyện.

Sau khi endCollection kết thúc, hãy gọi finishWorkout để lưu HKWorkout vào cơ sở dữ liệu Sức khỏe.

Đảm bảo chỉ định WorkoutManager làm đại biểu HKWorkoutSession.

Bây giờ hãy để ControlsView tạm dừng, tiếp tục và kết thúc phiên.

Chọn ControlsView.

Thêm workoutManager làm Đối tượng Môi trường để chế độ xem của chúng tôi có thể kiểm soát phiên.

Có lệnh gọi hành động của nút Kết thúc endWorkout trên workoutManager.

Nút Tạm dừng/Tiếp tục cần tạm dừng hoặc tiếp tục phiên và cập nhật hình ảnh và văn bản của nó dựa trên trạng thái phiên.

Hành động của nút gọi chức năng togglePause của workoutManager để tạm dừng hoặc tiếp tục phiên.

Tên hệ thống của Hình ảnh của nút là "tạm dừng" hoặc "chơi", dựa trên biến chạy của workoutManager.

Văn bản bên dưới nút hiển thị "Tạm dừng" hoặc "Tiếp tục", cũng dựa trên biến chạy của workoutManager.

Hãy cập nhật SessionPagingView của chúng tôi để hiển thị tên bài tập trong thanh điều hướng.

Chọn SessionPagingView.

SessionPagingView cần quyền truy cập vào biến môi trường WorkoutManager, vì vậy hãy thêm điều đó.

Bây giờ hãy cấu hình thanh điều hướng của chúng tôi.

Tiêu đề điều hướng là tên của WorkoutManager's selectedWorkout.

Nút quay lại của thanh điều hướng bị ẩn, vì chúng tôi không muốn ai đó quay lại StartView khi họ đang tập luyện.

Khi NowPlayingView được hiển thị, chúng tôi muốn ẩn thanh điều hướng.

Khi ai đó tạm dừng hoặc tiếp tục tập luyện, họ không cần phải vuốt đến MetricsView.

Chúng ta có thể làm điều này cho họ bằng cách thêm công cụ sửa đổi chế độ xem onChange.

Khi biến được xuất bản đang chạy của WorkoutManager thay đổi, hàm displayMetricsView được gọi.

displayMetricsView đặt biến trạng thái lựa chọn thành số liệu với Hoạt hình.

Bây giờ bài tập có thể kết thúc, hãy thêm khả năng hiển thị và loại bỏ Chế độ xem tóm tắt.

Nhấp vào WorkoutManager.

Thêm một biến đã xuất bản có tên "showingSummaryView" là một Boolean mặc định là false.

Biến này sẽ cung cấp một ràng buộc cho lựa chọn của trang tính trên chế độ xem điều hướng của ứng dụng của chúng tôi.

Trong endWorkout, đặt showingSummaryView thành true.

Hãy thêm Chế độ xem Tóm tắt dưới dạng Trang tính vào Chế độ xem Điều hướng của Ứng dụng MyWorkouts.

Nhấp vào MyWorkoutsApp.

Thêm công cụ sửa đổi chế độ xem trang tính vào NavigationView.

Tham số isPresented là một ràng buộc với workoutManager's showingSummaryView.

Nội dung của trang tính là một Chế độ xem Tóm tắt.

Trong SummaryView, hãy thêm khả năng loại bỏ trang tính.

Nhấp vào Xem Tóm tắt.

Thêm biến Dnvironment loại bỏ.

Trong hành động của nút Xong, hãy gọi dismiss().

Hãy chạy ứng dụng của chúng tôi để bắt đầu và kết thúc phiên và xem Chế độ xem Tóm tắt được hiển thị.

Nhấp vào Dừng lại để dừng lần chạy trước đó.

Nhấp vào Chạy.

Nhấn vào bài tập Run.

Các giá trị số liệu mặc định sẽ vẫn được hiển thị trong phiên và trong bản tóm tắt.

Chúng tôi sẽ thiết lập nó sau.

Vuốt sang trái.

Nhấn Tạm Dừng.

Lưu ý rằng MetricsView được hiển thị.

Vuốt sang trái.

Lưu ý rằng nút bây giờ hiển thị "Tiếp tục".

Nhấn vào Kết thúc.

Bản tóm tắt tập luyện của chúng tôi hiển thị dưới dạng một tờ.

Cuộn xuống.

Nhấn Xong.

Trang tính bị loại bỏ và StartView được hiển thị.

Hãy lấy MetricsView và SummaryView của chúng tôi để hiển thị các chỉ số tập luyện thực tế.

WorkoutManager sẽ hiển thị các chỉ số tập luyện đã công bố mà MetricsView và SummaryView có thể quan sát được.

Chọn WorkoutManager.

Hãy thêm các biến số liệu đã xuất bản vào WorkoutManager.

averageHeartRate sẽ được sử dụng bởi SummaryView.

heartRate, activeEnergy và khoảng cách sẽ được MetricsView quan sát.

WorkoutManager cần quan sát các mẫu tập luyện được thêm vào trình tạo bằng cách trở thành một HKLiveWorkoutBuilderDelegate.

Hãy làm điều này ngay bây giờ.

Đầu tiên, hãy chỉ định đại diện của người xây dựng làm WorkoutManager.

Bây giờ hãy làm cho WorkoutManager tuân thủ giao thức HKLiveWorkout BuilderDelegate.

Chúng tôi đã mở rộng WorkoutManager để phù hợp với giao thức HKLiveWorkout BuilderDelegate.

workoutBuilderDidCollectEvent được gọi bất cứ khi nào người xây dựng thu thập một sự kiện.

Chúng tôi sẽ để trống chức năng này cho ứng dụng của chúng tôi.

workoutBuilder didCollectDataOf collectedTypes được gọi bất cứ khi nào người xây dựng thu thập các mẫu mới.

Chúng tôi sẽ lặp lại từng loại trong các loại được thu thập.

Người bảo vệ đảm bảo loại được thu thập là HKQuantityType.

Thống kê được đọc từ người xây dựng cho loại số lượng đó.

updateForStatistics - một hàm mà chúng tôi sẽ tạo trong thời gian ngắn - sẽ được gọi, cập nhật các giá trị số liệu đã xuất bản.

Hãy tạo chức năng updateForStatistics.

updateForStatistics lấy một đối tượng HKStatistics tùy chọn.

Một người bảo vệ trả lại sớm nếu số liệu thống kê là không.

Gửi các bản cập nhật số liệu không đồng bộ đến hàng đợi chính.

Chuyển qua từng loại số lượng.

Đối với heartRate, chúng tôi muốn nhịp mỗi phút, vì vậy chúng tôi sử dụng số HKUnit chia cho một phút HKUnit.

Gán heartRate là giá trị kép của nhiều nhất của số lượng gần đây nhất cho nhịp đập mỗi phút.

Chỉ định averageHeartRate làm thống kê.averageQuantity's doubleValue cho beats mỗi phút.

Đối với loại số lượng năng lượng ActiveEnergyBurned, hãy sử dụng kilocalorie energyUnit.

Gán activeEnergy làm giá trị kép của sumQuantity cho energyUnit.

Đối với khoảng cách đi bộ, chạy và đạp xe, hãy lấy giá trị kép của sumQuantity cho meterUnit.

Bây giờ hãy để MetricsView sử dụng các giá trị số liệu từ WorkoutManager.

Chọn MetricsView.

Thêm workoutManager làm biến Môi trường.

Hãy cập nhật quan điểm của chúng tôi để sử dụng các giá trị số liệu từ WorkoutManager.

ElapsedTimeView sử dụng workoutManager's builder's elapsedTime.

Phép đo của chế độ xem văn bản activeEnergy sử dụng activeEnergy của workoutManager.

Chế độ xem văn bản heartRate sử dụng heartRate của workoutManager.

Phép đo của chế độ xem văn bản khoảng cách sử dụng khoảng cách của người quản lý tập luyện.

Biến thời gian trôi qua của trình tạo không được công bố, vì vậy chế độ xem của chúng tôi hiện tại sẽ không cập nhật khi thời gian trôi qua của trình tạo cập nhật.

Những gì chúng ta có thể làm là bọc VStack trong TimelineView.

TimelineView là mới trong năm nay.

Chế độ xem dòng thời gian cập nhật theo thời gian phù hợp với lịch trình của nó.

Các ứng dụng watchOS hiện hỗ trợ trạng thái Luôn Bật.

TimelineViews làm cho quan điểm của chúng ta nhận thức được những thay đổi đối với ngữ cảnh Luôn Bật.

Để tìm hiểu thêm, hãy xem các phiên "Có gì mới trong watchOS 8" và "Có gì mới trong SwiftUI".

Các ứng dụng có thể ở trạng thái hoạt động hoặc trạng thái Luôn bật.

Các ứng dụng có các buổi tập luyện tích cực có thể cập nhật, nhiều nhất, mỗi giây một lần ở trạng thái Luôn Bật.

Điều này có nghĩa là MetricsView cần ẩn các giây phụ ở trạng thái Luôn Bật.

Các cân nhắc thiết kế khác nên được thực hiện cho trạng thái Luôn Bật, chẳng hạn như ẩn các điều khiển chỉ báo trang để đơn giản hóa chế độ xem.

Chế độ xem dòng thời gian của chúng tôi cần một Lịch trình dòng thời gian tùy chỉnh thay đổi khoảng thời gian của nó dựa trên Chế độ TimelineSchedule được quyết định bởi ngữ cảnh Luôn Bật.

Hãy tạo Lịch trình Dòng thời gian tùy chỉnh của chúng tôi.

MetricsTimelineSchedule có Ngày bắt đầu khi nào lịch trình nên bắt đầu.

Trình khởi tạo của nó có một startDate.

MetricsTimelineSchedule triển khai chức năng các mục nhập để tạo ra các mục nhập PeriodicTimelineSchedule.

Hàm tạo ra một PeriodicTimelineSchedule bằng cách sử dụng startDate.

Khoảng thời gian được xác định bởi TimelineScheduleMode.

Khi TimelineScheduleMode có tần số thấp, khoảng thời gian TimelineSchedule là một giây.

Khi TimelineScheduleMode bình thường, khoảng thời gian là 30 lần mỗi giây.

Hãy gói VStack của chúng ta trong TimelineView.

TimelineView sử dụng MetricsTimelineSchedule của chúng tôi, sử dụng startDate của trình tạo.

ShowSubseconds của ElapsedTimeView được xác định bởi context.cadence của TimelineView.

Khi nhịp hoạt động, các giây con được hiển thị.

Nếu không thì giây con sẽ bị ẩn trong trạng thái Luôn Bật.

Hãy chạy ứng dụng của chúng tôi để xem các số liệu được cập nhật trong quá trình tập luyện.

Nhấp vào Dừng lại để dừng quá trình chạy hiện tại.

Nhấp vào Chạy.

Nhấn vào bài tập Run.

Lưu ý rằng thời gian đã trôi qua đang tăng dần.

Trình mô phỏng watchOS tự động mô phỏng việc thu thập các mẫu tập luyện trực tiếp cho bạn.

Calo đang tích lũy.

Nhịp tim đang cập nhật.

Khoảng cách đang tích lũy.

Hãy thử trạng thái Luôn Bật bằng cách nhấp vào nút Khóa trên trình giả lập.

Lưu ý giây phụ bị ẩn và số liệu chỉ cập nhật một lần mỗi giây.

Nhấp vào nút Mở khóa để trở về trạng thái hoạt động.

Vuốt sang trái và kết thúc bài tập.

Chế độ xem tóm tắt vẫn cần các giá trị HKWorkout thực tế.

Hãy làm điều này ngay bây giờ.

Đầu tiên, hãy thêm HKWorkout vào WorkoutManager để được sử dụng trong Chế độ xem tóm tắt.

Chọn WorkoutManager.

Thêm một biến HKWorkout Published.

Khi người xây dựng đã lưu xong bài tập, hãy chỉ định bài tập cho WorkoutManager khi chức năng finishWorkout của người xây dựng hoàn thành.

Chúng tôi thực hiện bài tập này trên hàng đợi chính để cập nhật giao diện người dùng.

Khi Chế độ xem Tóm tắt bị loại bỏ, chúng ta cần đặt lại mô hình của mình.

Hãy tạo một chức năng resetWorkout thực hiện việc này.

Chức năng resetWorkout đặt lại tất cả các biến mô hình của chúng tôi trở lại trạng thái ban đầu.

Hãy gọi resetWorkout khi bản tóm tắt bị loại bỏ.

Điều này được thực hiện trong didSet of showingSummaryView.

Hãy hiển thị chế độ xem tiến trình khi bài tập kết thúc, trong khi bài tập đang lưu, trước khi hiển thị Chế độ xem tóm tắt.

Hãy đi đến Chế độ xem Tóm tắt của chúng tôi.

Nhấp vào Xem Tóm tắt.

Đầu tiên, thêm workoutManager EnvironmentObject vào SummaryView.

Chúng tôi muốn hiển thị ProgressView cho đến khi workoutManager có HKWorkout được chỉ định khi người xây dựng hoàn thành việc lưu bài tập.

Nếu bài tập của workoutManager là số không, thì hãy hiển thị ProgressView với dòng chữ hiển thị "Tiết kiệm bài tập" và ẩn thanh điều hướng.

Chúng tôi cũng đã cập nhật ActivityRingsView để sử dụng HKHealthStore của workoutManager.

Bạn chỉ cần một HKHealthStore duy nhất cho mỗi ứng dụng.

Hãy cập nhật SummaryMetricViews của chúng tôi để sử dụng các giá trị HKWorkout.

Chế độ xem chỉ số Tổng thời gian sử dụng thời lượng tập luyện.

Chế độ xem chỉ số tổng khoảng cách sử dụng tổng khoảng cách của bài tập.

Chế độ xem số liệu Tổng năng lượng sử dụng totalEnergyBurned của bài tập.

Chế độ xem chỉ số Nhịp tim Trung bình sử dụng Tỷ lệ Nhịp tim trung bình của Người quản lý tập luyện.

Nếu bạn muốn lưu nhịp tim trung bình cho sau này, bạn có thể thêm nó dưới dạng siêu dữ liệu cho trình tạo trước khi lưu bài tập.

Hãy cập nhật SessionPagingView của chúng tôi để phản ứng với trạng thái Luôn Bật.

Chọn SessionPagingView.

Thêm biến isLuminanceReduced Environment.

Trong trạng thái Luôn Bật, chúng tôi muốn ẩn chỉ báo trang của TabView và đảm bảo MetricsView được hiển thị.

Chúng tôi đã đặt indexDisplayMode của tabViewStyle thành không bao giờ hoặc tự động, dựa trên isLuminanceReduced.

Khi isLuminanceReduced thay đổi, hãy gọi hàm displayMetricsView để hiển thị MetricsView.

Hãy chạy ứng dụng của chúng tôi trong trình giả lập và dùng thử.

Nhấp vào Dừng lại để dừng lần chạy cuối cùng.

Nhấp vào Chạy.

Chọn bài tập Run.

Các chỉ số thông báo đang cập nhật trực tiếp từ trình tạo.

Vuốt sang trái. Nhấn Tạm Dừng.

Các chỉ số thông báo đã ngừng cập nhật, vì bài tập bị tạm dừng.

Vuốt sang trái. Nhấn Tiếp tục.

Các chỉ số tiếp tục cập nhật.

Vuốt sang phải, xem NowPlayingView.

Vuốt sang trái.

Nhấp vào Khóa để kích hoạt trạng thái Luôn Bật.

Thông báo giây phụ bị ẩn và các chỉ báo kiểm soát trang bị ẩn.

Nhấp vào Mở khóa để tiếp tục trạng thái hoạt động.

Vuốt sang trái, nhấn Kết thúc.

Việc tập luyện tiết kiệm.

Bản tóm tắt được hiển thị.

Cuộn xuống để xem từng số liệu.

Vòng hoạt động sẽ điền vào dựa trên lượng năng lượng, số phút tập thể dục và giờ đứng.

Nhấn Xong.

Chúng tôi được đưa trở lại chế độ xem bắt đầu, sẵn sàng cho buổi tập luyện tiếp theo của chúng tôi.

Bạn đã thấy việc sử dụng SwiftUI dễ dàng như thế nào để triển khai một ứng dụng tập luyện đầy đủ chức năng được tích hợp với HealthKit hỗ trợ trạng thái Luôn Bật.

Chúng tôi nóng lòng muốn xem bạn sẽ xây dựng ứng dụng tập luyện tuyệt vời nào tiếp theo!

♪