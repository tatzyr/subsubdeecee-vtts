10260

Xin chào, tôi là Michael Ochs.

Tôi là một kỹ sư khung trong nhóm UIKit.

Chào mừng đến với Focus on iPad điều hướng bàn phím.

Mọi người thích sử dụng bàn phím phần cứng với iPad của họ.

Mac Catalyst và iPadOS 15 giới thiệu API mạnh mẽ để hỗ trợ điều hướng bàn phím trong ứng dụng của bạn.

Điều hướng bất kỳ ứng dụng nào bằng bàn phím trên iPadOS sẽ cảm thấy rất quen thuộc.

Phím tab điều hướng giữa các khu vực quan trọng trong một ứng dụng.

Các phím mũi tên điều hướng trong một khu vực và một mục có thể được chọn bằng phím trả về trên iPadOS hoặc phím cách trên Mac Catalyst.

Nếu ứng dụng của bạn đã sử dụng các lệnh chính này, các lệnh tùy chỉnh của bạn sẽ không còn hoạt động nữa.

Tôi sẽ chỉ cho bạn cách giải quyết những xung đột này sau.

Đầu tiên, hãy để tôi chỉ cho bạn điều hướng bàn phím đang hoạt động.

Trong Ảnh, tôi có thể nhấn phím tab để di chuyển tiêu điểm từ ô Thư viện trong thanh bên sang lưới ảnh ở bên phải.

Bây giờ tôi có thể điều hướng giữa các bức ảnh trong lưới bằng cách sử dụng các phím mũi tên.

Khi tôi tìm thấy bức ảnh tôi đang tìm kiếm, tôi có thể chọn nó bằng cách nhấn return.

Khi bạn biên dịch với iOS 15 SDK, hành vi này sẽ được bật tự động cho các trường văn bản, chế độ xem văn bản và thanh bên.

Bạn cũng nên chọn bộ sưu tập, bảng và chế độ xem tùy chỉnh khác để có trải nghiệm tuyệt vời.

Tôi sẽ chỉ cho bạn cách làm điều này trong một phút.

Tôi biết đây là một tính năng thú vị, nhưng đừng làm cho mọi yếu tố trong bàn phím ứng dụng của bạn có thể điều hướng được.

Điều hướng bàn phím nhằm cung cấp cho người dùng quyền truy cập vào các tính năng chính của ứng dụng của bạn, vì vậy hãy tập trung vào đầu vào văn bản, danh sách và chế độ xem bộ sưu tập.

Để các điều khiển như nút, điều khiển được phân đoạn và chuyển sang một bên.

Quyền truy cập Bàn phím đầy đủ đã cho phép các điều khiển này có thể điều hướng bàn phím.

Để tìm hiểu thêm về quyền truy cập bàn phím đầy đủ, hãy xem "Hỗ trợ quyền truy cập bàn phím đầy đủ trong ứng dụng iOS của bạn."

Điều hướng bàn phím trên iPadOS sử dụng cùng một hệ thống lấy nét như tvOS Nếu bạn đã viết các ứng dụng tvOS trước đây, nhiều API sẽ cảm thấy quen thuộc.

Tuy nhiên, có một số API mới và sự khác biệt về hành vi mà bạn nên biết.

Nếu bạn muốn tìm hiểu thêm về hệ thống lấy nét nói chung, hãy xem "Tương tác tập trung trong tvOS".

Trong video này, tôi sẽ chỉ cho bạn cách làm cho nhiều nội dung hơn trong ứng dụng của bạn có thể tập trung và cách tùy chỉnh giao diện của các mục có thể tập trung này.

Tôi sẽ chỉ cho bạn một số hành vi đặc biệt trong thanh bên mà bạn nên biết và chúng ta sẽ nói về các nhóm tập trung, một cách mới để xác định cấu trúc trong ứng dụng của bạn.

Cuối cùng, tôi sẽ chỉ cho bạn một số thay đổi quan trọng trong chuỗi phản hồi mà bạn nên làm quen.

Nhưng bây giờ, chúng ta hãy xem cách làm cho nhiều yếu tố hơn trong giao diện người dùng của bạn có thể tập trung.

canBecomeFocused là nguồn duy nhất của sự thật.

Nó là một thuộc tính chỉ đọc của UIFocusItem.

Ghi đè nó và trả về true để làm cho một mục có thể tập trung được.

Bây giờ, bạn có thể tự hỏi, mục trọng tâm là gì?

Xương sống của hệ thống tập trung là hai giao thức: UIFocusItem và UIFocusEnvironment.

FocusItems chỉ đơn giản là, các mục có thể được tập trung.

FocusEnvironments xác định hệ thống phân cấp của các mục có thể tập trung.

UIView phù hợp với cả hai giao thức này, vì bất kỳ chế độ xem nào cũng có thể tự tập trung, nhưng nó cũng có thể chứa các chế độ xem con có thể được tập trung.

UIViewController, mặt khác, chỉ phù hợp với UIFocusEnvironment, vì bản thân nó không cung cấp bất kỳ hình ảnh nào.

Bạn cũng có thể triển khai cả hai giao thức trên các đối tượng của riêng bạn.

Điều này cho phép bạn tập trung vào nội dung được hiển thị bằng các công nghệ khác, như Metal.

Các ứng cử viên có khả năng nhất cho điều hướng bàn phím là các ô trong chế độ xem bảng hoặc bộ sưu tập.

UIKit cung cấp một số API tiện lợi, vì vậy bạn không cần phải phân lớp.

Đặt cho phép Focus thành true trên bảng hoặc chế độ xem bộ sưu tập để làm cho tất cả các ô của nó có thể tập trung được.

Lưu ý rằng trong các thanh bên, allowsFocus đúng theo mặc định.

Để kiểm soát chi tiết hơn, bạn có thể sử dụng canFocusItemAt indexPath trong đại diện của mình để kiểm soát khả năng lấy nét cho từng ô riêng lẻ.

Cả hai phương pháp này sẽ chỉ có tác dụng đối với các ô không ghi đè canBecomeFocused.

Nếu một mục tiêu điểm không hoạt động như bạn mong đợi, có một số công cụ gỡ lỗi có sẵn.

Trong lldb bạn có thể gọi UIFocusDebugger. Kiểm tra tính tập trung (cho mục:) và chuyển mục bạn muốn gỡ lỗi.

Ví dụ, một chế độ xem mà bạn đang cố gắng làm cho có thể tập trung.

Nó sẽ cung cấp cho bạn một lời giải thích về lý do tại sao hệ thống lấy nét không coi mục này là có thể tập trung.

Vì vậy, chúng tôi đã nói về cách làm cho giao diện người dùng của bạn có thể tập trung.

Chúng ta hãy xem xét kỹ hơn sự xuất hiện của các mặt hàng tập trung.

Có hai phong cách bạn sẽ thường thấy trong toàn hệ thống.

Đầu tiên, có Hiệu ứng Halo, tương tự như vòng lấy nét trên macOS.

Trên thực tế, đây là hiệu ứng mặc định trên Mac Catalyst.

Trên iPadOS, bạn có thể sử dụng hiệu ứng này bằng cách gán UIFocusHaloEffect cho thuộc tính focusEffect.

Nếu được khởi tạo mà không có đối số, hệ thống sẽ suy ra hình dạng của vầng hào quang.

Bạn cũng có thể tùy chỉnh hình dạng để phù hợp hơn với nội dung.

Ví dụ, nếu một hình ảnh có các góc tròn, vầng hào quang phải phù hợp với diện mạo của nó bằng cách cũng có các góc tròn.

UIFocusHaloEffect có một số trình khởi tạo cho các hình dạng khác nhau, bao gồm một cho rects tròn.

Sử dụng các trình khởi tạo này để đảm bảo hình dạng của vầng hào quang tạo ra một đường viền xung quanh nội dung chế độ xem của bạn.

Hiệu ứng Halo cũng cho phép bạn kiểm soát vị trí của nó trong hệ thống phân cấp chế độ xem.

Ở đây vầng hào quang đang hiển thị phía trên huy hiệu trên hình ảnh, nhưng nó sẽ trông đẹp hơn nếu vầng hào quang nằm giữa hình ảnh và huy hiệu.

Bằng cách chỉ định chế độ xem hình ảnh làm chế độ xem tham chiếu, UIKit sẽ hiển thị vầng hào quang trên đầu hình ảnh và bên dưới huy hiệu.

Chế độ xem tham chiếu xác định thứ tự tương đối của vầng hào quang trong hệ thống phân cấp chế độ xem.

Bạn cũng có thể chỉ định chế độ xem vùng chứa, xác định chế độ xem trên của hiệu ứng hào quang.

Điều này rất hữu ích nếu siêu quan trực tiếp của mục tập trung đang cắt nội dung của nó.

Cả hai đều là tùy chọn và bạn chỉ nên cung cấp chúng nếu ngoại hình suy ra không như bạn mong đợi.

Các ô trong chế độ xem bộ sưu tập và bảng chỉ hiển thị một vầng hào quang xung quanh chúng khi chúng có nội dung hoàn toàn mờ đục, giống như một hình ảnh.

Trong tất cả các trường hợp khác, khi một ô trở nên tập trung, nó sẽ trông nổi bật.

Điều này có nghĩa là nền sẽ chuyển thành màu sắc của ứng dụng của bạn và màu nền trước cho văn bản và biểu tượng nên được điều chỉnh để có độ tương phản tốt.

Giao diện nổi bật này không có sẵn dưới dạng UIFocusEffect.

Thay vào đó, bạn sẽ tự động nhận được giao diện này khi sử dụng cấu hình nền và nội dung được giới thiệu trong iOS 14.

Để tìm hiểu thêm về những điều này, hãy xem "Cấu hình ô hiện đại".

Nếu bạn không sử dụng cấu hình nền và nội dung, ứng dụng mẫu sẽ chỉ cho bạn cách lấy màu chính xác trong mọi trường hợp.

Hãy chắc chắn kiểm tra điều đó.

Bây giờ, nếu bạn muốn áp dụng giao diện tùy chỉnh, trước tiên hãy đặt thuộc tính focusEffect thành nil.

Điều này tắt mọi kiểu dáng hệ thống.

Ghi đè tiếp theo didUpdateFocus (trong: ngữ cảnh với Điều phối viên hoạt hình :) trên mục trọng tâm của bạn.

Nếu mục tập trung tiếp theo là tự, hãy áp dụng kiểu dáng để biểu thị tiêu điểm.

Nếu mục tập trung trước đó là bản thân, hãy khôi phục lại giao diện không tập trung.

Bạn chỉ nên thực hiện các thay đổi trong didUpdateFocus (trong: ngữ cảnh) khi mục tiếp theo hoặc trước đó tập trung có liên quan đến môi trường này.

Điều này là do tất cả các môi trường tổ tiên của mục tập trung trước đó, cũng như mục tập trung tiếp theo, nhận được cuộc gọi đến didUpdateFocus (trong: ngữ cảnh).

Vì vậy, mọi chế độ xem và bộ điều khiển chế độ xem sẽ nhận được cuộc gọi này.

Điều này cho phép triển khai rất linh hoạt, nơi cha mẹ có thể phản ứng với những thay đổi trọng tâm của trẻ.

Bây giờ chúng ta hãy xem xét kỹ hơn một tính năng cụ thể cho thanh bên và giao diện người dùng thay đổi ngữ cảnh tương tự.

Lựa chọn và tập trung là hai khái niệm khác nhau.

Tuy nhiên, trong một thanh bên, khi tôi di chuyển tiêu điểm, lựa chọn sẽ theo sau.

Tương tự như vậy, nếu tôi chọn một ô mới bằng cách nhấn vào nó, tiêu điểm cũng sẽ chuyển đến ô mới được chọn này.

Điều này được gọi là "lựa chọn theo trọng tâm."

Đặt thuộc tính này trên bất kỳ chế độ xem bảng hoặc bộ sưu tập nào theo hành vi bạn muốn cho hầu hết các ô.

Nếu bạn muốn thay đổi hành vi cho các ô riêng lẻ, hãy triển khai selectionFollowsFocus ForItemAtIndexPath trong đại diện của bạn.

Tắt selectionFollowsFocus rất hữu ích khi chọn một ô gây ra hành động gây rối, chẳng hạn như đẩy bộ điều khiển chế độ xem mới trong cùng một cột hoặc trình bày cảnh báo.

Ví dụ, trong Ảnh, chọn "album mới" sẽ hiển thị cảnh báo yêu cầu tên của album.

Khi sử dụng đại diện, giá trị của tài sản vẫn quan trọng.

Đặt selectionFollowsFocus cho mục đích tổng thể của chế độ xem bộ sưu tập và sau đó sử dụng đại diện để thể hiện hành vi đặc biệt cho các ô riêng lẻ.

Hệ thống sẽ tính đến cả hai giá trị khi chọn hành vi phù hợp.

Bây giờ, chúng ta hãy xem xét các nhóm tập trung, một tính năng mới để điều hướng bàn phím để thể hiện cấu trúc trong ứng dụng của bạn.

UIKit tự động suy ra các nhóm tập trung từ hệ thống phân cấp, nhưng bạn cũng có thể khai báo chúng một cách rõ ràng để tùy chỉnh cách phím tab di chuyển tiêu điểm thông qua ứng dụng của bạn.

tvOS chỉ sử dụng tiêu điểm định hướng.

Bạn có thể tiếp cận mọi yếu tố đơn giản bằng cách vuốt trên Siri Remote hoặc sử dụng các phím mũi tên trên bàn phím.

Mặt khác, iPadOS và Mac Catalyst có hai phương pháp điều hướng khác nhau bằng bàn phím: Các phím mũi tên và phím tab.

Không giống như tvOS, các phím mũi tên chỉ di chuyển tiêu điểm trong một khu vực xác định của ứng dụng của bạn.

Những khu vực này được gọi là nhóm tập trung.

Ví dụ, tôi có thể điều hướng danh sách lời nhắc bằng cách sử dụng các phím mũi tên lên và xuống.

Để điều hướng danh sách, tôi có thể nhấn phím tab để tập trung vào trường tìm kiếm và sau đó nhấn lại tab để di chuyển đến danh sách.

Nếu tôi nhấn tab một lần nữa, các vòng lặp tập trung trở lại lời nhắc.

Các lời nhắc, trường tìm kiếm và danh sách đều là một nhóm tập trung và phím tab di chuyển tiêu điểm giữa chúng.

Khi tiêu điểm chuyển sang một nhóm, nó sẽ chọn một mục bên trong nhóm đó để tập trung vào.

Mục đó được gọi là mục chính của nhóm.

Mục chính của một nhóm có thể thay đổi.

Ví dụ, ở đây tôi tập trung vào lời nhắc thứ hai.

Hệ thống tập trung ghi nhớ điều này khi tôi rời khỏi nhóm này và khi tôi quay lại phần nhắc nhở, tiêu điểm sẽ chuyển sang mục thứ hai một lần nữa vì mục này hiện là mục chính của nhóm.

Phím tab kết nối các mục chính của mỗi nhóm và di chuyển tiêu điểm giữa chúng.

Đây được gọi là vòng lặp tab.

Một số môi trường xác định các nhóm tập trung của riêng chúng theo mặc định.

Chúng bao gồm các chế độ xem cuộn như chế độ xem bộ sưu tập và bảng, cũng như các lớp nhập văn bản, như trường văn bản và chế độ xem văn bản.

Nếu một môi trường không xác định nhóm riêng của nó, nó sẽ kế thừa nhóm của môi trường mẹ, thường là bộ điều khiển siêu xem hoặc chế độ xem của nó.

Ví dụ, theo mặc định, mọi ô tự động thuộc về nhóm chế độ xem bộ sưu tập của nó.

Bằng cách ở trong cùng một nhóm, bạn có thể điều hướng giữa các ô bằng các phím mũi tên.

Để tự xác định một nhóm tập trung, hãy chỉ định một mã định danh nhóm tập trung cho bất kỳ chế độ xem hoặc bộ điều khiển chế độ xem nào.

Khi hai môi trường chia sẻ cùng một mã định danh, rõ ràng hoặc theo kế thừa, chúng là một phần của cùng một nhóm.

Để tùy chỉnh mục chính của một nhóm, hãy chỉ định mức độ ưu tiên của nhóm tập trung cho mục đó.

Điều này xác định tầm quan trọng của một mặt hàng trong nhóm.

Mục có thể nhìn thấy với mức độ ưu tiên cao nhất là mục chính của nhóm.

Theo mặc định, hệ thống chỉ định một trong những ưu tiên được xác định trước: Bỏ qua, ưu tiên mặc định; tập trung trước đó; được ưu tiên, cho biết một mục quan trọng hơn các mục khác, như một ô đã chọn; và hiện đang được tập trung, đó là mức độ ưu tiên cao nhất có thể.

Điều quan trọng là phải hiểu rằng bạn không bao giờ có thể hạ thấp mức độ ưu tiên của một mặt hàng xuống dưới mức độ ưu tiên do hệ thống cung cấp của nó.

Thay vào đó, bạn nên nâng cao mức độ ưu tiên của một mặt hàng khác.

Ví dụ: nếu bạn chỉ định mức độ ưu tiên cao hơn .trước đây Tập trung vào một ô, ô đó sẽ trở nên quan trọng hơn mục tập trung cuối cùng của nhóm đó.

Vì vậy, ngay cả khi ô tùy chỉnh này và ô tập trung trước đó đều có thể nhìn thấy được, ô tùy chỉnh sẽ trở thành mục chính vì nó có mức độ ưu tiên cao hơn.

Vì vậy, bây giờ bạn đã biết cách nhóm các mặt hàng của mình lại với nhau.

Tiếp theo, hãy tập trung vào cách các nhóm này được sắp xếp.

Ở đây, chúng ta lại thấy Lời nhắc.

Như đã đề cập trước đó, mỗi bảng và chế độ xem bộ sưu tập, cũng như mỗi trường văn bản, xác định nhóm riêng của nó.

Như đã thấy trước đây, khi nhấn phím tab liên tục, tiêu điểm đi từ trường tìm kiếm đến danh sách trong thanh bên, và sau đó đến lời nhắc ở bên phải.

Đây là những gì UIKit làm theo mặc định.

Tuy nhiên, nếu bạn tự xây dựng loại chế độ xem vùng chứa này, tiêu điểm sẽ chuyển từ trường tìm kiếm thẳng đến lời nhắc vì tất cả các nhóm được sắp xếp theo thứ tự đọc, dẫn đến cuối, từ trên xuống dưới.

Hệ thống lấy nét không biết rằng thanh bên là một cột riêng biệt.

Để đảm bảo trường tìm kiếm và danh sách được sắp xếp trong một khối liên tục, bạn có thể đặt chúng vào một nhóm mẹ chung.

Điều này được thực hiện bằng cách xác định mã định danh nhóm tiêu điểm trên chế độ xem vùng chứa của thanh bên.

Mặc dù nhóm mới này không chứa trực tiếp bất kỳ mục có thể tập trung nào, vòng lặp tab sẽ di chuyển từ nhóm trường tìm kiếm sang nhóm danh sách trước khi chuyển sang danh sách nhắc nhở.

Nhiều bài thuyết trình UIKit tiêu chuẩn đã cung cấp các nhóm trung gian này.

Đối với các chế độ xem vùng chứa tùy chỉnh, hãy khai báo FocusGroupIdentifier của riêng bạn về tổ tiên chung.

Các nhóm tập trung là một cách dễ dàng để xác định cấu trúc trực quan của ứng dụng của bạn.

Bạn không cần phải xác định một thứ tự cố định cho vòng lặp tab của mình.

Thay vào đó, hệ thống sử dụng các nhóm tập trung để lấy thứ tự vòng lặp tab có tính đến hướng đọc, bố cục và khả năng hiển thị để cung cấp trải nghiệm nhất quán.

Khi tùy chỉnh các nhóm tập trung trong ứng dụng của bạn, UIFocusDebugger là bạn của bạn.

Nếu bạn gọi checkFocusGroupTree (cho môi trường:), nó sẽ in cấu trúc nhóm tiêu điểm, bắt đầu từ môi trường được truyền vào.

Bạn thậm chí có thể vượt qua chính hệ thống tập trung để xem tất cả các nhóm hiện tại.

Bây giờ, cấu trúc văn bản này rất hữu ích, nhưng có một công cụ gỡ lỗi nữa.

Nhớ ảnh chụp màn hình tôi đã cho bạn xem với các nhóm tập trung và Lời nhắc không?

Bạn thực sự có thể tải trực tiếp điều này trong ứng dụng của mình.

Khi được bật, trình gỡ lỗi vòng lặp tiêu điểm sẽ trực quan hóa thứ tự vòng lặp tab trong ứng dụng của bạn khi bạn nhấn và giữ phím tùy chọn.

Và khi nhấn tùy chọn và điều khiển, bạn sẽ có được hình ảnh trực quan về các nhóm tập trung.

Trong chế độ này, mục chính của một nhóm được biểu thị bằng một đường chấm chấm.

Để kích hoạt nó, hãy chuyển đến cài đặt sơ đồ của bạn trong Xcode, chọn "chạy" và sau đó chọn "lập luận".

Sau đó thêm đối số khởi chạy -UIFocusLoopDebuggerEnabled CÓ, và đừng quên đặt dấu gạch ngang trước nó.

Bây giờ, bất cứ khi nào bạn chạy ứng dụng của mình từ Xcode, lớp phủ gỡ lỗi này có sẵn ngay trong ứng dụng của bạn.

Điều này bao gồm những điều cơ bản về tập trung vào iPadOS và Mac Catalyst.

Có một chủ đề nữa cần đề cập đến điều hướng bàn phím, và đó là chuỗi phản hồi.

Vì cả chuỗi phản hồi và hệ thống tiêu điểm đều xử lý đầu vào bàn phím, UIKit đồng bộ hóa các hệ thống này càng nhiều càng tốt để đảm bảo mục tập trung luôn nằm trong trình phản hồi đầu tiên hoặc là chính trình phản hồi đầu tiên.

Hãy xem xét một hệ thống phân cấp chế độ xem đơn giản với trường văn bản và ô chế độ xem bộ sưu tập.

Hiện tại, trường văn bản được tập trung, được biểu thị bằng vòng rắn và nó cũng là phản hồi đầu tiên, được biểu thị bằng vòng đứt nét.

Khi tiêu điểm di chuyển đến ô xem bộ sưu tập này, UIKit cũng cố gắng di chuyển người phản hồi đầu tiên sang ô này.

Nếu ô này trả về false từ canBecomeFirstResponder, hệ thống sẽ lặp lại chuỗi phản hồi để tìm một responder trả về true.

Trong trường hợp này, người phản hồi đó là bộ điều khiển chế độ xem của ô.

Lưu ý rằng nghịch đảo cũng đúng.

Khi người phản hồi đầu tiên thay đổi, hệ thống lấy nét sẽ cố gắng tìm một mục có thể tập trung mới bên trong người phản hồi đó.

Với mối quan hệ này giữa người phản hồi đầu tiên và mục tập trung, các sự kiện chính sẽ luôn được chuyển đến mục tập trung và di chuyển lên chuỗi người phản hồi từ đó.

Điều này cho phép một số hành vi mới thú vị.

Ví dụ, nếu một ô phản hồi lệnh chính và trở nên tập trung, lệnh khóa sẽ được chuyển đến ô đó.

Để biết cách sử dụng cái này, hãy xem ứng dụng mẫu của chúng tôi.

Khi cập nhật ứng dụng của bạn cho iPadOS 15, hãy lưu ý về nơi bạn gọi becomeFirstResponder.

Vì chuỗi phản hồi và tiêu điểm được đồng bộ hóa, việc thay đổi phản hồi đầu tiên sẽ buộc tiêu điểm phải cập nhật.

Điều này có thể gây rối cho người dùng của bạn.

Thông thường tốt nhất là tránh gọi becomeFirstResponder, đặc biệt là để đáp ứng với bản cập nhật tập trung.

Hệ thống tập trung cung cấp trải nghiệm nhất quán trên tất cả các ứng dụng.

Để làm điều này, nó cần ưu tiên cho một số lệnh chính nhất định.

Nếu ứng dụng của bạn đang sử dụng lệnh phím như tab hoặc mũi tên xuống, lệnh phím đó sẽ không còn hoạt động khi biên dịch với iOS 15 SDK.

Nếu lệnh phím này được sử dụng để xây dựng điều hướng bàn phím tùy chỉnh của riêng bạn, bạn có thể để nó không bị ảnh hưởng.

Nó sẽ hoạt động trên các phiên bản trước và trên iPadOS 15, hệ thống lấy nét sẽ tiếp quản.

Nếu không, hãy ánh xạ lại lệnh chính này.

Nếu bạn thực sự muốn tiếp tục sử dụng lệnh phím này, hãy đảm bảo rằng nó không làm hỏng điều hướng bàn phím và sau đó đặt wantsPriorityOverSystemBehavior thành true.

Nếu bạn muốn tìm hiểu thêm về những cải tiến đối với phím tắt, hãy xem "Đưa các ứng dụng iPad của bạn lên một tầm cao mới."

Nếu bạn xử lý máy ép theo cách thủ công bằng cách triển khai pressesBegan, pressesChanged, pressesEnded và pressesCancelled, hãy đảm bảo triển khai tất cả các phương pháp này và gọi siêu nhất quán cho các máy ép mà bạn không xử lý.

Điều hướng bàn phím trong iPadOS 15 và Mac Catalyst là một công cụ mạnh mẽ cho người dùng của bạn.

Làm cho chế độ xem bộ sưu tập và bảng có thể tập trung để cung cấp trải nghiệm người dùng tuyệt vời.

Cập nhật các lệnh phím của bạn để chúng không va chạm với điều hướng bàn phím.

Ngoài ra, hãy xem ứng dụng mẫu, minh họa thêm một vài tính năng, chẳng hạn như xây dựng trải nghiệm tìm kiếm tuyệt vời, lựa chọn tùy chỉnh, hướng dẫn tập trung và hơn thế nữa.

Tôi nóng lòng muốn xem bạn đang xây dựng gì với điều hướng bàn phím trên iPadOS 15.

Cảm ơn bạn đã xem.

[Nhạc gõ].