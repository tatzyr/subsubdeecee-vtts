10049

♪ Nhạc bass đang phát ♪

♪

Daniel Li: Chào mừng đến với "Thêm trí thông minh vào các vật dụng của bạn."

Tên tôi là Daniel, và tôi là một kỹ sư trong nhóm Proactive Intelligence tại Apple.

Trong phiên này, tôi sẽ chỉ cho bạn cách các tiện ích của bạn có thể hoạt động với hệ thống để cung cấp trải nghiệm thông minh cho người dùng của bạn để các tiện ích của bạn có thể hiển thị ngay khi họ cần.

Widgets sống ở nhiều nơi.

Từ Màn hình chính trên iOS đến Trung tâm thông báo trên macOS, các tiện ích cung cấp cho người dùng thông tin mà họ có thể xem nhanh chóng chỉ trong nháy mắt.

Với iPadOS 15, các tiện ích cũng xuất hiện trên Màn hình chính của iPad.

Hiện tại có nhiều nơi hơn bao giờ hết để các vật dụng của bạn gọi về nhà.

Đầu tiên tôi sẽ nói về ý nghĩa của việc các tiện ích thông minh trong hệ thống và sau đó tôi sẽ chỉ cho bạn cách bạn có thể kích hoạt trí thông minh cho các tiện ích của mình bằng cách quyên góp thông tin liên quan với các API có sẵn.

Trước tiên chúng ta hãy xem qua trí thông minh tiện ích.

Trên iPhone và iPad, các tiện ích có thể được đặt cùng nhau trong Ngăn xếp thông minh, nơi chúng có thể được cuộn qua để cung cấp các loại thông tin khác nhau ở một nơi.

Khi người dùng chỉnh sửa một ngăn xếp, ngoài việc có thể thêm, xóa hoặc sắp xếp lại các tiện ích, họ cũng có thể xem và quản lý các hành vi thông minh của ngăn xếp.

iOS 14 giới thiệu Smart Rotate.

Smart Rotate cho phép hệ thống, vào đúng thời điểm, tự động cuộn đến một tiện ích đã có trong ngăn xếp.

Để biết khi nào cần xoay sang một tiện ích, hệ thống sử dụng các tín hiệu liên quan mà tiện ích cung cấp cùng với các mục nhập dòng thời gian của nó.

Nó cũng có thể xoay sang một tiện ích bằng cách học các mẫu trong hành vi của người dùng.

Nó làm như vậy bằng cách nhận quyên góp từ ứng dụng bất cứ khi nào người dùng xem thông tin tương ứng với tiện ích.

Với Smart Rotate, nếu tôi có tiện ích Thời tiết, tiện ích Nhắc nhở và tiện ích Lịch trong ngăn xếp, tiện ích Thời tiết có thể yêu cầu hệ thống tự đề xuất vào buổi sáng khi tôi thức dậy để cung cấp cho tôi cái nhìn tổng quan trong ngày.

Vào lúc 9:30, tiện ích Lịch có thể cho hệ thống biết rằng tôi có một cuộc họp sắp tới lúc 10 giờ, vì vậy ngăn xếp của tôi có thể xoay sang Lịch.

Vào buổi chiều, một trong những lời nhắc của tôi có ngày đến hạn là 3:00 chiều, vì vậy tiện ích có thể yêu cầu ngăn xếp xoay thành Lời nhắc.

Và vào buổi tối, tiện ích Thời tiết có thể yêu cầu hệ thống hiển thị lại cho tôi thời tiết vì trời vừa bắt đầu mưa, vì vậy tôi biết mang theo ô nếu tôi ra ngoài ăn tối.

iOS 15 giới thiệu một tính năng mới được gọi là Đề xuất tiện ích, một cách hoàn toàn mới để người dùng khám phá tiện ích của bạn và nhận thông tin chủ động và có liên quan.

Đối với Smart Stacks với Widget Suggestions được bật, hệ thống có thể chèn một widget mới vào một ngăn xếp chưa chứa nó.

Hệ thống có thể làm điều này với sự đóng góp rõ ràng từ ứng dụng của bạn.

Và giống như với Smart Rotate, hệ thống cũng có thể tạo Đề xuất Widget bằng cách tìm hiểu các mẫu hành vi của người dùng trong ứng dụng của bạn.

Với Đề xuất Tiện ích, nếu tôi chỉ có tiện ích Thời tiết và tiện ích Nhắc nhở trong ngăn xếp của mình, tôi vẫn sẽ thấy Xoay thông minh cho các tiện ích này suốt cả ngày.

Nhưng vì tôi có cuộc họp đó lúc 10:00 và tôi không có tiện ích Lịch trong ngăn xếp của mình, ứng dụng Lịch có thể yêu cầu hệ thống chủ động chèn tiện ích vào ngăn xếp của tôi lúc 9:30 để tôi không quên.

Sau khi tiện ích không còn phù hợp nữa, hệ thống sẽ xóa nó khỏi ngăn xếp của tôi.

Khi tôi hoàn thành bài tập buổi tối của mình, hệ thống có thể hiển thị cho tôi tiện ích Thể dục để tôi có thể tóm tắt nhanh về tiến trình trong ngày của mình trong việc đóng nhẫn.

Và sau đó, ngăn xếp sẽ lại trở lại trạng thái ban đầu.

Vì các ứng dụng yêu cầu hệ thống tạm thời chèn các tiện ích khi chúng hữu ích, chúng có thể giúp người dùng khám phá các tiện ích mà họ thậm chí có thể không biết đã tồn tại.

Bây giờ hãy xem cách bạn có thể áp dụng cả Smart Rotate và Widget Suggestions bằng cách sử dụng các API có sẵn để tặng các tín hiệu có liên quan cho hệ thống.

Khi quyên góp, bạn nên xem xét tất cả các thông tin có thể mà tiện ích của bạn có thể hiển thị và xác định loại nào phù hợp với đề xuất hơn các loại khác.

Mục tiêu cuối cùng khi chọn cách quyên góp cho hệ thống là cung cấp thông tin kịp thời, có thể xem được với giá trị rõ ràng cho người dùng, vì vậy bạn nên cân nhắc làm nổi bật các tình huống mà người dùng có thể thấy thú vị hơn những người khác.

Ví dụ, một tiện ích thời tiết có thể coi lượng mưa sắp xảy ra là một tình huống phù hợp để gợi ý trái ngược với, giả sử, một thời điểm mà chỉ có nhiệt độ thay đổi một lượng không đáng kể.

Bạn có thể áp dụng Smart Rotate và Widget Suggestions cho các widget của mình theo ba cách riêng biệt.

Đầu tiên, ứng dụng của bạn có thể tặng INRelevantShortcut để cho hệ thống biết khi nào nó nên tạo Đề xuất Tiện ích cho một trong các tiện ích của bạn.

Thứ hai, tiện ích của bạn có thể cung cấp điểm liên quan thông qua TimelineEntryRelevance để bật Xoay thông minh khi tiện ích nằm trong ngăn xếp.

Và thứ ba, nếu tiện ích của bạn có thể định cấu hình, khi ứng dụng của bạn tặng ý định cấu hình bằng INInteraction, hệ thống có thể tìm hiểu các mẫu hành vi của người dùng để quảng bá tiện ích của bạn thông qua cả Xoay thông minh và Đề xuất tiện ích.

Mỗi API này tăng cường sự hiện diện của tiện ích của bạn theo những cách mạnh mẽ nhưng tất cả chúng đều hoạt động hơi khác nhau, vì vậy hãy chia nhỏ nó.

Hãy bắt đầu với việc quyên góp INRelevantShortcuts cho Widget Suggestions.

Cho dù bạn có sử dụng ý định cấu hình tiện ích của mình hay không, khi ứng dụng của bạn nhận thức được tình huống có liên quan cao để hiển thị tiện ích của bạn cho người dùng, việc tặng INRelevantShortcut cho phép hệ thống chủ động chèn tiện ích của bạn vào một trong các ngăn xếp của người dùng nếu họ chưa có tiện ích của bạn

Một phím tắt có liên quan có thể chỉ định một khoảng thời gian có liên quan hoặc yêu cầu hệ thống xác định thời điểm chèn tiện ích dựa trên các mẫu hành vi của người dùng.

INRelevantShortcut hỗ trợ cả tiện ích tĩnh và cấu hình ý định nhưng việc quyên góp sẽ trông hơi khác nhau đối với từng loại cấu hình, vì vậy chúng ta hãy xem cách áp dụng cho cả hai loại.

Nếu tiện ích của bạn hỗ trợ Cấu hình tĩnh, chỉ cần tạo một INRelevantShortcut mới mà không có ý định và đặt thuộc tính widgetKind thành chuỗi loại của tiện ích.

Điều này cho hệ thống biết những tiện ích nào trong ứng dụng của bạn cần đề xuất.

Sau đó, tùy chọn đặt thuộc tính relevanceProviders thành một mảng INRelevanceProviders.

Điều này cho hệ thống biết khi nào nên đề xuất tiện ích của bạn.

Tôi sẽ giải thích điều này chi tiết hơn một chút.

Nếu tiện ích của bạn hỗ trợ IntentConfiguration, hãy tạo một phiên bản của ý định được sử dụng để cấu hình với các tham số cần thiết.

Sau đó tạo INRelevantShortcut bằng cách chuyển ý định dưới dạng INShortcut.

Và tất nhiên, hãy đặt thuộc tính widgetKind và relevanceProviders giống như bạn làm cho một widget tĩnh.

Để tặng một phím tắt có liên quan, hãy đưa nó vào một loạt các phím tắt có liên quan để đặt trong INRelevantShortcutStore mặc định.

Để cập nhật các phím tắt được tặng, bạn có thể thay thế mảng các phím tắt có liên quan trong cửa hàng thành một mảng mới.

Điều này có nghĩa là bạn có thể vô hiệu hóa một phím tắt có liên quan được quyên góp trước đó bằng cách bỏ qua nó trong mảng mới.

Và việc tặng một phím tắt có liên quan có chứa ý định cũng có thể hiển thị ý định trên mặt đồng hồ Siri.

Để cho hệ thống biết khi nào nó có thể chèn tiện ích của bạn, hãy đặt một mảng INRelevanceProviders trên phím tắt có liên quan của bạn.

Có hai lựa chọn ở đây.

Đầu tiên, bạn có thể sử dụng INDateRelevanceProvider để cung cấp ngày bắt đầu và ngày kết thúc cho một khoảng thời gian cố định, đã biết có liên quan, chẳng hạn như một sự kiện sắp tới hoặc tin tức nóng hổi.

Bạn thậm chí có thể sử dụng nhiều nhà cung cấp để chỉ định nhiều hơn một khoảng thời gian có liên quan.

Thứ hai, bạn cũng có thể chọn cung cấp một mảng trống các nhà cung cấp liên quan để thông báo cho hệ thống rằng tiện ích của bạn có một cái gì đó mới để hiển thị và hệ thống sẽ chọn thời gian để đề xuất tiện ích dựa trên thời điểm người dùng thường sử dụng ứng dụng của bạn.

Tất cả các nhà cung cấp liên quan khác đều hỗ trợ INRelevantShortcuts cho mặt đồng hồ Siri và không được hỗ trợ bởi Widget Suggestions.

Bây giờ tôi sẽ hướng dẫn bạn cách nhận con nuôi có thể trông như thế nào khi sử dụng một ứng dụng ví dụ.

Chúng tôi đã xây dựng một ứng dụng có tên Thẻ cho phép bạn xem các giao dịch và số dư trên tất cả các thẻ tín dụng của mình và bao gồm một tiện ích hiển thị các giao dịch mua gần đây.

Hãy xem cách chúng tôi có thể bật Đề xuất tiện ích cho tiện ích Mua hàng gần đây bằng cách quyên góp INRelevantShortcuts trong ứng dụng của chúng tôi.

Chúng tôi muốn đề xuất tiện ích sau khi giao dịch mua gần đây vừa được thực hiện trên một trong các thẻ của chúng tôi.

Vì tiện ích được cấu hình với một ý định, để cho phép Đề xuất Tiện ích, trước tiên chúng tôi sẽ đảm bảo rằng ý định của chúng tôi hỗ trợ các khoản đóng góp trong tệp định nghĩa ý định của chúng tôi.

Đây là trình chỉnh sửa ý định của chúng tôi cho ý định ViewRecentPurchases của chúng tôi, cho tiện ích của chúng tôi biết thẻ tín dụng nào sẽ hiển thị và danh mục người bán nào cần lọc các giao dịch mua theo.

Chúng tôi muốn đảm bảo rằng "Ý định đủ điều kiện cho Đề xuất Siri" được kiểm tra.

Điều này cho phép các đề xuất cho tiện ích của chúng tôi trên Màn hình chính cũng như các đề xuất ở những nơi khác xung quanh iOS nếu chúng tôi chọn quyên góp chúng, nhưng chúng tôi sẽ làm điều đó sau với INInteractions.

Sau đó, chúng ta cần tạo ra một tổ hợp tham số bao gồm các tham số cần thiết để tạo thành ý định.

Vì chúng tôi cần cả thẻ tín dụng và danh mục người bán để định cấu hình tiện ích của mình, chúng tôi sẽ tạo một sự kết hợp được hỗ trợ với cả thông số thẻ và danh mục.

Bây giờ chúng ta có thể tạo ra ý định trong mã của mình.

Trong mã này, ứng dụng của chúng tôi vừa được thông báo rằng người dùng vừa mua hàng.

Để quyên góp, chúng tôi bắt đầu bằng cách tạo một mảng trống của INRelevantShortcuts, trong trường hợp chúng tôi muốn quyên góp nhiều phím tắt.

Chúng tôi khởi tạo ý định mà chúng tôi đã sử dụng để định cấu hình tiện ích Mua hàng gần đây và đặt bất kỳ thông số nào mà chúng tôi có thể cần.

Ở đây, chúng tôi muốn đặt tham số thẻ về ý định thành một đối tượng thẻ đề cập đến thẻ mà giao dịch mua gần đây đã được thực hiện và đặt danh mục thành tất cả để tiện ích hiển thị tất cả các giao dịch mua trên thẻ đó.

Sau đó, chúng tôi tạo một INShortcut với mục đích và tạo một INRelevantShortcut với nó.

Chúng tôi đặt vai trò phím tắt là vai trò phím tắt thông tin, vì người dùng xem thông tin trong tiện ích và đặt loại tiện ích.

Chúng tôi cung cấp một INDateRelevanceProvider bắt đầu ngay bây giờ và kết thúc sau 30 phút, hoặc 1800 giây, để hệ thống có thể xóa nó 30 phút ngay sau khi mua hàng được thực hiện.

Sau đó, chúng tôi thêm phím tắt vào mảng Phím tắt có liên quan của mình.

Cuối cùng, chúng tôi tặng phím tắt bằng cách đặt mảng relevantShortcuts của chúng tôi trong INRelevantShortcutStore mặc định và xử lý bất kỳ lỗi nào trong trình xử lý hoàn thành.

Bây giờ bất cứ khi nào giao dịch mua gần đây được thực hiện, hệ thống có thể thực hiện Đề xuất tiện ích với tiện ích bằng cách chủ động chèn nó vào Ngăn xếp thông minh.

Bây giờ hãy nói về TimelineEntryRelevance.

Khi tiện ích của bạn cung cấp các mốc thời gian cho WidgetKit, bạn có thể chỉ định mức độ liên quan của tiện ích của mình bằng cách cung cấp TimelineEntryRelevance trong mỗi mục nhập dòng thời gian.

Chú thích một mục nhập có liên quan cho biết tiện ích đó xứng đáng như thế nào của Vòng quay thông minh tại thời điểm mục nhập.

Sự đáng giá của vòng quay này liên quan đến tất cả các mục nhập khác trong dòng thời gian mà tiện ích cung cấp, vì vậy bạn nên xác định mục nào có thể phù hợp với người dùng hơn các mục khác.

TimelineEntryRelevance là một thuộc tính cấu trúc tùy chọn trên TimelineEntry, cùng với ngày nhập.

Cấu trúc liên quan chứa điểm số và thời lượng.

Điểm float của cấu trúc thể hiện mức độ liên quan của mục nhập này so với các mục khác.

Điểm càng cao, hệ thống càng có nhiều khả năng xoay sang tiện ích.

Khi xác định điểm số nào sẽ trả lại, hãy biết rằng điểm số tích cực cho biết các mục nhập dòng thời gian đủ điều kiện cho Smart Rotate.

Điểm 0 cho hệ thống biết rằng không nên xoay tiện ích, chẳng hạn như khi tiện ích không có bất kỳ thông tin nào để hiển thị và xoay sang tiện ích sẽ không phải là trải nghiệm tích cực cho người dùng.

Hãy nhớ rằng tầm quan trọng của bất kỳ điểm số nào được cung cấp là liên quan đến những điểm số khác trong dòng thời gian của tiện ích.

Bất kể tỷ lệ nào bạn quyết định sử dụng cho điểm số liên quan của mình, chỉ cần đảm bảo rằng nó nhất quán trên các mốc thời gian bạn quay lại.

Chúng ta sẽ xem xét một ví dụ trong một chút.

Thời lượng trong cấu trúc liên quan xác định thời gian điểm liên quan hợp lệ.

Hệ thống sử dụng điều này, cùng với ngày nhập cảnh, để xác định khung thời gian hợp lệ để xoay ngăn xếp sang tiện ích.

Sau khi thời lượng trôi qua, hệ thống sẽ coi điểm số là 0 cho đến khi mức độ liên quan được cung cấp lại trong một mục nhập trong tương lai.

Bạn có thể chỉ định thời lượng bằng 0 để giữ điểm số hợp lệ cho đến mục nhập tiếp theo cung cấp mức độ liên quan.

Hãy cùng xem cái này trông như thế nào trong mã.

Ở đây chúng tôi có cấu trúc CardRecentPurchasesEntry, phù hợp với giao thức TimelineEntry.

Vì giao thức yêu cầu một thuộc tính liên quan tùy chọn, chúng tôi có thể khai báo thuộc tính liên quan trong cấu trúc của mình.

Bây giờ khi chúng tôi tạo mục nhập dòng thời gian, chúng tôi có thể đính kèm phiên bản TimelineEntryRelevance vào mục nhập của mình khi chúng tôi tạo mục nhập dòng thời gian của mình.

Bây giờ chúng ta hãy xem xét dòng thời gian có thể trông như thế nào đối với tiện ích Mua hàng gần đây và xem một số ví dụ về điểm số mà chúng tôi có thể cung cấp cho mức độ liên quan của dòng thời gian của mình.

Đây là một dòng thời gian ví dụ mà tiện ích Mua hàng Gần đây có thể quay lại trong suốt một ngày.

Có lẽ, chúng ta có thể nghĩ rằng người dùng quan tâm nhiều hơn đến các giao dịch mua liên quan đến chi tiêu cao hơn.

Sau đó, chúng tôi có thể làm cho điểm số mua hàng của mình theo tỷ lệ tuyến tính với số tiền đã chi tiêu.

Hãy để thời lượng liên quan là 0 ngay bây giờ.

Vào lúc 8:15, chúng tôi sẽ trả lại số điểm 0, vì không có giao dịch mua nào để hiển thị.

Vào lúc 9:41, giao dịch mua 52 đô la và 60 xu của chúng tôi có nghĩa là điểm số của chúng tôi sẽ là 52,6, v.v.

Vẽ nó trên biểu đồ, chúng tôi thấy rằng việc mua sắm của chúng tôi có điểm số tương đối cao so với các điểm khác, vì vậy hệ thống sẽ ưu tiên xoay sang tiện ích của chúng tôi nhiều hơn với mục nhập này so với các mục khác.

Các mục nhập khác vẫn có điểm số dương, vì vậy hệ thống vẫn có thể xoay sang tiện ích vào những thời điểm đó, mặc dù với mức độ ưu tiên thấp hơn.

Và vì chúng tôi đặt thời lượng của mình thành 0, điểm liên quan vẫn có hiệu lực cho đến mục nhập dòng thời gian tiếp theo với bản cập nhật liên quan.

Chúng tôi cũng có thể chọn một cơ chế tính điểm khác.

Giả sử chúng tôi trả lại điểm 50 nếu giao dịch mua trên 50 đô la và 1 cho giao dịch mua bên dưới.

Một lần nữa, chúng tôi trả lại 0 nếu không có giao dịch mua nào cả.

Đối với các giao dịch mua hàng tạp hóa và mua sắm của chúng tôi, chúng tôi đã trả lại 50, và đối với chi tiêu của chúng tôi tại Soup Diner và rạp chiếu phim, chúng tôi trả lại 1.

Với biểu đồ điểm số, chúng ta có thể thấy rằng điểm số tăng lên 50 lúc 9:41 và ở đó cho đến 6:52.

Vì 50 là điểm số cao nhất có thể trong dòng thời gian của chúng tôi, hệ thống có nhiều khả năng hiển thị tiện ích của chúng tôi nhất tại thời điểm này.

Vì tiện ích của chúng tôi hiển thị các giao dịch mua gần đây, chúng tôi không muốn hệ thống xoay vòng sang tiện ích của chúng tôi với các giao dịch mua được thực hiện từ lâu.

Vì vậy, hãy chỉ cho phép hệ thống xoay vòng đến tiện ích của chúng tôi trong vòng 30 phút sau khi giao dịch mua được thực hiện.

Để đạt được điều này, chúng ta có thể sử dụng thuộc tính thời lượng trên cấu trúc liên quan.

Chúng tôi đặt thời lượng liên quan là 30 phút, hoặc 1800 giây, cho mỗi mục nhập.

Bằng cách đặt thời lượng liên quan là nửa giờ, chúng tôi yêu cầu hệ thống đánh dấu các mục nhập đủ điều kiện để luân chuyển trong nửa giờ và sau đó đánh dấu chúng là không đủ điều kiện để luân chuyển sau đó.

Trong những ví dụ này, chúng tôi dựa trên điểm số của mình dựa trên số tiền mua, nhưng thực sự, điểm liên quan đến dòng thời gian có thể là bất cứ điều gì bạn thích.

Chúng tôi cũng có thể đã sử dụng thẻ tín dụng nào, nơi giao dịch mua được thực hiện, khi giao dịch mua được thực hiện hoặc một cái gì đó hoàn toàn khác.

Không có cách nào đúng để làm điều đó.

Bây giờ để quyên góp INInteractions.

Trong ứng dụng của bạn, bạn có thể tạo và tặng một ý định được sử dụng để định cấu hình tiện ích của mình để kích hoạt cả Xoay thông minh và Đề xuất tiện ích thông qua INInteractions.

Một ứng dụng tặng INInteraction mỗi khi người dùng xem thông tin trong ứng dụng tương ứng với thông tin mà tiện ích hiển thị.

Mỗi lần quyên góp là một điểm dữ liệu cho mô hình hành vi của hệ thống để tìm hiểu khi người dùng có xu hướng xem thông tin trong ứng dụng.

Bất cứ khi nào mô hình dự đoán rằng người dùng có thể muốn thực hiện lại tương tác, hệ thống sẽ tạo ra một gợi ý cho mục đích.

Và miễn là ý định quyên góp giống như ý định được sử dụng để định cấu hình tiện ích của bạn, hệ thống sẽ tự động tạo ra cả Xoay thông minh và Đề xuất tiện ích từ dự đoán, cùng với các đề xuất khác xung quanh hệ thống.

Để bắt đầu quyên góp INInteraction trong dự án Thẻ, giống như với việc quyên góp INRelevantShortcuts, chúng tôi muốn đảm bảo rằng ý định của chúng tôi đủ điều kiện nhận đề xuất và tạo kết hợp được hỗ trợ với các tham số cần thiết để định cấu hình tiện ích của chúng tôi.

Ở đây, cũng đảm bảo cuối cùng thiết kế giao diện người dùng gợi ý khi khoản đóng góp của bạn hiển thị ở các vị trí khác trong hệ thống.

Trong ứng dụng Thẻ, bất cứ khi nào người dùng của chúng tôi xem tất cả các giao dịch mua thẻ gần đây, chúng tôi có thể quyên góp ý định của tiện ích để cho hệ thống biết rằng người dùng hiện đang quan tâm đến thông tin mà tiện ích của chúng tôi hiển thị.

Đầu tiên, chúng tôi khởi tạo ý định của mình.

Chúng tôi đặt tham số thẻ thành thẻ mà người dùng hiện đang xem và đặt danh mục là tất cả, vì người dùng hiện đang xem tất cả các giao dịch cho thẻ này.

Sau đó, chúng tôi sẽ kết thúc ý định của mình bằng INInteraction và gọi phương thức quyên góp.

Bây giờ hệ thống sẽ biết rằng người dùng vừa xem các giao dịch mua gần đây cho thẻ này trong ứng dụng của chúng tôi.

Sau một thời gian, hệ thống có thể biết khi nào người dùng có xu hướng làm điều này và đề xuất tiện ích phù hợp vào những thời điểm thích hợp nhất.

Các khoản đóng góp INInteraction mà bạn thực hiện không chỉ kích hoạt Xoay thông minh và Đề xuất tiện ích mà còn cho phép hệ thống hiển thị ý định của bạn dưới dạng Đề xuất Siri trên Màn hình khóa, trong Tiêu điểm và trong tiện ích Đề xuất phím tắt Siri.

Điều này đúng ngay cả khi tiện ích của bạn không áp dụng ý định.

Để tìm hiểu thêm về những gì quyên góp INInteractions có thể làm cho ứng dụng của bạn và nhận được nhiều hơn từ trí thông minh trên thiết bị, hãy nhớ xem cuộc nói chuyện, "Đóng góp ý định và mở rộng sự hiện diện của ứng dụng của bạn." Vì vậy, INRelevantShortcut, TimelineEntryRelevance và INInteraction là ba cách mà bạn có thể hỗ trợ Smart Rotate và Widget Suggestions cho các tiện ích của mình.

Do các khoản đóng góp khác trong hệ thống, cùng với các cân nhắc về hiệu suất, việc quyên góp không đảm bảo rằng tiện ích của bạn sẽ được hiển thị.

Nhưng bằng cách áp dụng các API này một cách gắn kết, bạn có thể làm việc với hệ thống để cung cấp cho tiện ích của mình cơ hội tốt nhất có thể khi được hiển thị.

Trong khi phát triển, cũng có thể hữu ích khi bỏ qua các giới hạn của hệ thống đối với các tiện ích nổi bật bằng cách bật Chế độ dành cho nhà phát triển WidgetKit, được tìm thấy trong Cài đặt dành cho nhà phát triển trong ứng dụng Cài đặt.

Vì vậy, để kết thúc, Đề xuất tiện ích là một cách hoàn toàn mới để các tiện ích của bạn chủ động hiển thị ngay khi người dùng của bạn cần chúng, những người thậm chí có thể không biết chúng tồn tại.

Và đối với các tiện ích của bạn đã được thêm vào ngăn xếp, Smart Rotate cho phép chúng trở thành một phần đáng tin cậy và đáng tin cậy trong ngày người dùng của bạn.

Bằng cách làm việc với hệ thống và tận dụng trí thông minh trên thiết bị, các tính năng này cho phép tiện ích của bạn dễ khám phá hơn và chủ động hơn, đồng thời đóng góp vào trải nghiệm Màn hình chính thông minh.

Chúng tôi vô cùng hào hứng khi thấy cách bạn thêm trí thông minh vào các tiện ích của mình.

Cảm ơn bạn và chúc bạn có một WWDC tuyệt vời.

♪