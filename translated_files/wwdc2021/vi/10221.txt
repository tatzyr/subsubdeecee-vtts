10221

♪ Nhạc bass đang phát ♪

♪

Thomas Naudet: Xin chào, và chào mừng đến với WWDC.

Tôi là Thomas từ nhóm bản địa hóa tại Apple, và hôm nay tôi sẽ chỉ cho bạn cách hợp lý hóa các chuỗi bản địa hóa của bạn.

Bạn sẽ thấy cách dễ nhất để làm cho ứng dụng của bạn hoạt động bằng nhiều ngôn ngữ.

Chúng ta sẽ bắt đầu bằng cách viết mã UI.

Sau đó, chúng tôi sẽ xem cách sắp xếp các chuỗi trong các mục tiêu của bạn.

Sau đó chúng tôi sẽ để Xcode thực hiện công việc nặng nhọc cho chúng tôi.

Cuối cùng, chúng ta sẽ học các kỹ thuật mới cho các chuỗi nâng cao.

Với tất cả những điều này, chúng tôi sẽ đảm bảo ứng dụng của bạn được chuẩn bị cho những bản dịch tuyệt vời.

Điều này cực kỳ quan trọng vì văn bản có ở khắp mọi nơi trong cuộc sống của chúng ta.

Chúng tôi sử dụng văn bản để giao tiếp và nhận thông tin trong thế giới thực.

Nó rõ ràng là đúng hơn trên các thiết bị được kết nối của chúng tôi với tất cả các ứng dụng, thông báo và bài báo mà chúng tôi đọc hàng ngày.

Hơn bao giờ hết, điều quan trọng là văn bản có thể được đọc, chính xác và có thể truy cập được.

Hãy tưởng tượng bạn bị lạc hoàn toàn trên con phố này khi cố gắng tìm một cửa hàng nhỏ trong số tất cả những biển báo đó.

Nó có thể giống nhau đối với người dùng ứng dụng của bạn.

Văn bản là một tính năng cốt lõi - nó hướng dẫn người dùng và mang lại sự quen thuộc.

Theo cách đó, bản địa hóa ứng dụng của bạn là cơ hội để tiếp cận tất cả người dùng trên toàn thế giới, đặc biệt là ở tất cả các thị trường mà App Store cung cấp.

Là một nhà phát triển, bạn đã quen thuộc với văn bản, vì các nhà phát triển chúng tôi thích đặt tên mọi thứ.

Chúng tôi gọi văn bản là "chuỗi".

Chuỗi ở khắp mọi nơi: tiêu đề, nút, nội dung người dùng, nội dung trực tuyến, truy vấn tìm kiếm, đồ họa, nhãn khả năng truy cập, v.v.

Hãy nghĩ về tất cả các chuỗi trong ứng dụng của bạn dưới dạng phụ đề phim.

Trong bộ phim bạn xem, bạn muốn tất cả phụ đề phải bằng đúng ngôn ngữ, vào đúng thời điểm, với bối cảnh phù hợp và nhất quán trong suốt bộ phim.

Điều này hoàn toàn giống nhau ở đây.

Chuỗi của bạn truyền tải ý nghĩa cho nội dung trực quan của bạn và giúp người dùng điều hướng qua các đường phố của ứng dụng của bạn.

Bây giờ chúng ta hãy xem, từ góc độ nhà phát triển, quy trình bản địa hóa là gì.

Giao diện người dùng của bạn trình bày các chuỗi trong chế độ xem.

Những chuỗi đó tồn tại trong các tệp của riêng chúng.

Điều này giúp phân tách các mối quan tâm giữa nội dung trực quan của bạn - nội dung chung cho tất cả các ngôn ngữ - và các bản dịch cụ thể của bạn.

Ở giữa, khung Foundation liên kết giao diện người dùng của bạn và tất cả các chuỗi của bạn.

Trong buổi nói chuyện này, tôi sẽ đi vào chi tiết về từng thành phần này.

Điều đó có vẻ như rất nhiều, nhưng chúng tôi sẽ khám phá mọi thứ từng bước một.

Sau đó, hãy bắt đầu bằng cách xác định các chuỗi trong giao diện người dùng của bạn.

Hiển thị các chuỗi được bản địa hóa thật dễ dàng bằng cách kết hợp các công nghệ mới nhất của Apple.

Tôi khuyến khích bạn sử dụng những kỹ thuật này trong ứng dụng của mình, để bạn không bao giờ phải suy nghĩ hai lần về bản địa hóa nữa!

Chà, bất kỳ chuỗi nào bạn xác định trong giao diện người dùng đều cần được bản địa hóa.

Có hai loại dây có thể nhìn thấy được.

Một cái được định nghĩa trực tiếp khi bạn tạo chế độ xem của mình.

Ở đây, tôi đã xác định một nhãn trong SwiftUI và Storyboard.

Và vâng! Cả hai đều có thể định vị được.

Tôi đã nói với bạn rằng nó thật dễ dàng!

Loại chuỗi thứ hai tổng quát hơn và có thể được tìm thấy trong mã mô hình trong SwiftUI mà còn trong AppKit hoặc UIKit.

Bạn có thể cần lưu trữ một chuỗi trong một biến hoặc trả về nó từ một hàm.

Trong tất cả các trường hợp này, bạn có thể sử dụng NSLocalizedString.

Mới trong iOS 15 và macOS Monterey, bạn có thể sử dụng phương pháp tinh chỉnh của chúng tôi cho Swift, String(được bản địa hóa:).

Hãy tập trung vào phương pháp đầu tiên trong SwiftUI trong giây lát.

Mọi thứ bạn trình bày trong giao diện thực sự là chế độ xem, cho dù đây là nhãn văn bản hay nút, tất cả đều có thể định vị theo mặc định, sẵn sàng lưu trữ các chuỗi đã dịch trong tương lai của bạn.

Vì điều này được bật theo mặc định, nếu bạn có nội dung giả như bản xem trước, hãy đảm bảo bạn chọn không tham gia bằng cách sử dụng nguyên văn.

Điều này sẽ tránh được những công việc không cần thiết cho các dịch giả.

Bạn có thể học thêm các kỹ thuật trong phiên liên quan này.

Bây giờ chúng ta đã đề cập đến những điều cơ bản, hãy học cách làm cho chuỗi này năng động hơn.

Tôi hiện đang hiển thị một nút bản địa hóa để đặt hàng.

Bạn có thể không biết tôi thích các buổi hòa nhạc, và tôi thích xem các nghệ sĩ sống với bạn bè hơn nữa!

Trong ứng dụng này, không rõ tôi đang đặt bao nhiêu vé cho tất cả bạn bè của mình.

Vì vậy, hãy cải thiện nút đó để bao gồm số lượng vé tôi đã chọn.

Điều đó thật dễ dàng.

Tôi vừa chèn một biến vào chuỗi giống như tôi đã quen trong Swift.

Ở đây, số lượng sẽ được thay thế trong thời gian chạy bằng số thực tế, 3.

Bây giờ chúng ta đã thấy tất cả các tùy chọn của mình, tôi muốn gọi ra một cạm bẫy phổ biến: Chuỗi với (định dạng:).

Chuỗi với (định dạng:) rất tuyệt, nhưng nó không có ý định được sử dụng cho các chuỗi cục bộ.

Hãy xem tại sao với một ví dụ bằng tiếng Ả Rập trong đó hướng văn bản và các chữ số có thể khác nhau.

Tin tốt là cả hai đều được quản lý tự động khi bạn sử dụng String(localized:).

Bây giờ, số "ba" được viết chính xác bằng tiếng Ả Rập trong nút, theo các chữ số ưa thích của người dùng trong Cài đặt.

Chuỗi (được bản địa hóa:) cũng hỗ trợ số nhiều và cách ly từng phần của chuỗi, có nghĩa là các từ không bị xáo trộn trong văn bản hai chiều.

Cuối cùng, hãy cẩn thận để không lạm dụng các biến số.

Dán các chuỗi lại với nhau rất tiện dụng nhưng có thể dẫn đến các vấn đề dịch thuật.

Ở đây từ "Đặt hàng" có thể được viết khác nhau trong một số ngôn ngữ cho dù bạn đặt hàng ngay bây giờ hay đặt hàng sau.

Sử dụng hai dây riêng biệt sẽ an toàn hơn.

Được rồi. Có một khía cạnh quan trọng, cuối cùng mà chúng ta cần thấy mà tôi đã bí mật giữ bạn cho đến bây giờ.

Các chuỗi bạn đã xác định sẽ cần được dịch bởi ai đó khác ngoài bạn.

Người dịch không có giao diện người dùng ứng dụng đầy đủ trước mặt họ trong khi họ dịch từng chuỗi một và họ cần phải nhất quán trong tất cả các chuỗi.

Vì vậy, bạn cần giúp họ, giống như bạn giúp đồng nghiệp hiểu mã của bạn bằng cách thêm nhận xét mã.

Tôi nhấn mạnh, bất kể chuỗi nào, bạn nên luôn xác định một bình luận.

Và đừng quên các tệp Bảng phân cảnh của bạn; chúng có một trường nhận xét trong trình kiểm tra danh tính.

Hãy để tôi chia sẻ một số mẹo để giúp người dịch.

Đầu tiên, các bình luận nên giải thích nơi hiển thị chuỗi.

Ví dụ, đây có phải là một cái nút không? Một nhãn hiệu? Một số văn bản VoiceOver?

Biết đây là một hành động - để đặt hàng - hay một tuyên bố - một đơn đặt hàng - là rất quan trọng.

Thứ hai, họ nên giải thích bối cảnh.

Nếu tôi nhấn Đặt hàng, tôi đang hoàn thành giao dịch hay sắp xếp danh sách?

Cuối cùng, các bình luận nên giải thích các biến số.

Khi người bản địa hóa nhìn thấy chuỗi của bạn, họ không nhìn thấy mã của bạn, vì vậy họ không nhìn thấy tên của các biến của bạn để có manh mối, thay vào đó chỉ là một trình giữ chỗ chung.

Vậy đối với ví dụ cuối cùng ở đây, con số trước "Đã đặt hàng" đại diện cho điều gì?

Đây có phải là số lượng đơn đặt hàng trong quá khứ không?

Số lượng vé tôi vừa đặt?

Vâng! Nhờ bình luận, tôi biết đó là tổng số vé.

Người dịch bằng nhiều ngôn ngữ sẽ có thể dịch chính xác theo giới tính của từ "vé".

Đôi khi cách dễ nhất cũng là viết một giá trị ví dụ của biến trong nhận xét.

Với ý nghĩ đó, nó đây rồi.

Bạn đã chuẩn bị sẵn mã giao diện người dùng để bản địa hóa.

Bây giờ, chúng ta sẽ tìm hiểu cách bạn có thể duy trì mã giao diện người dùng của mình tách biệt với các chuỗi của mình.

Về cơ bản, bạn sẽ có thể sắp xếp nơi dây của bạn sẽ sống.

Để làm điều này, hãy xem Foundation sẽ đảm bảo rằng mã của bạn tải các tệp chuỗi được bản địa hóa chính xác như thế nào.

Tất nhiên, bản địa hóa bắt đầu bằng một ngôn ngữ.

Bạn có thể vào cài đặt dự án của mình để thêm một cái mới.

Hãy cùng xem Xcode.

Chọn dự án của bạn và nhấp vào nút dấu cộng (+) để thêm bản địa hóa.

Bạn sẽ thấy menu đạt được rất nhiều ngôn ngữ mới trong phiên bản mới nhất.

Hãy xem nào... Trong danh sách bản địa hóa ứng dụng của chúng tôi, nó bắt đầu với Base ở trên cùng.

Thật vậy, đây là nơi các yếu tố giao diện người dùng sống vì chúng được chia sẻ giữa các ngôn ngữ.

Ví dụ, một tệp Bảng phân cảnh được chia sẻ; một tệp Siri Intents cũng được chia sẻ.

Sau đó chúng cần được thêm vào Base.

Vì vậy, hãy đảm bảo rằng bạn nhấp vào nút Bản địa hóa cho tất cả các tài sản được chia sẻ.

OK nhưng mặt khác, các chuỗi của bạn không được chia sẻ.

Strings thuộc về một ngôn ngữ.

Vì vậy, bạn sẽ có dây của bạn bằng tiếng Anh và tất cả các dây của bạn bằng tiếng Ả Rập.

Để kiểm tra ứng dụng của bạn bằng các chuỗi bằng một ngôn ngữ nhất định, bạn có thể thay đổi môi trường xem trước trong SwiftUI hoặc thay đổi cài đặt sơ đồ ứng dụng.

Nếu thiết bị bằng ngôn ngữ mà ứng dụng của bạn không hỗ trợ, Foundation sẽ cố gắng tìm ra giải pháp thay thế tốt nhất.

Nếu điện thoại của tôi bằng tiếng Tây Ban Nha Mexico, Foundation sẽ cố gắng dự phòng bằng tiếng Tây Ban Nha Mỹ Latinh, sau đó sang tiếng Tây Ban Nha, sau đó sang ngôn ngữ phát triển ứng dụng của bạn - ví dụ: tiếng Anh.

Cuối cùng, khi các chuỗi đến từ máy chủ, hãy đảm bảo rằng bạn tôn trọng ngôn ngữ ưa thích của người dùng.

Tuyệt vời.

Chúng tôi đã thấy rằng mỗi ngôn ngữ có một tập hợp các chuỗi.

Những chuỗi đó có thể được sắp xếp thêm thành các tệp được gọi là "bảng".

Bạn có thể sử dụng tính năng này để sắp xếp mọi chuỗi theo ý muốn.

Ví dụ, bạn có thể có một bảng cho mỗi tính năng hoặc mỗi màn hình.

Vì đây là tùy chọn theo mặc định, tất cả các chuỗi được đặt trong một bảng có tên Localizable.

Cụ thể, điều này có nghĩa là tất cả các chuỗi được lưu trữ trong một tệp có tên Localizable.strings.

Hãy xem xét một ví dụ để tóm tắt lại những gì chúng ta đã học được cho đến nay.

Tôi có mã sau đây khai báo một chuỗi với một biến, một tên bảng tùy chỉnh và một nhận xét.

Giả sử ứng dụng của tôi hỗ trợ tiếng Pháp.

Trong Xcode, sau đó bạn sẽ cần một tệp UserProfile.strings chứa bản dịch tiếng Pháp từ tiếng Anh.

Nó sẽ được lưu trữ trong một thư mục tài nguyên của Pháp được đặt tên theo quy ước, fr.lproj.

Nhận xét rất hữu ích cho người dịch tiếng Pháp.

Họ đã sử dụng chữ "e" để đánh dấu nữ tính, là "địa điểm;" tiếng Pháp cho vé là nữ tính.

Hãy thêm gia vị cho mọi thứ một chút và nói về gói.

Tham số này cho phép tải các chuỗi qua các mục tiêu.

Tham số gói là chính theo mặc định.

Trong ứng dụng của riêng bạn, bạn không cần nó.

Chính là ứng dụng đó.

Trong tiện ích mở rộng ứng dụng của bạn, main đề cập đến tiện ích mở rộng của riêng bạn, vì vậy bạn cũng không cần nó.

Nhưng giả sử bạn muốn chia sẻ một chuỗi giữa ứng dụng của bạn và tiện ích mở rộng của nó.

Trong tiện ích mở rộng của bạn, bạn sẽ cần cung cấp gói ứng dụng chính.

Làm như vậy tránh trùng lặp các chuỗi giữa hai chuỗi.

Bạn cũng có thể lấy chuỗi của mình từ một khuôn khổ.

Trong trường hợp đó, bạn nhấn trực tiếp vào chuỗi của khung bằng cách chỉ định gói của nó trong mã ứng dụng của bạn hoặc khung chứa các biến bạn có thể sử dụng trực tiếp.

Các biến chuỗi được bản địa hóa đó đã được xác định trong khung bằng cách chỉ định gói riêng của khung.

Hãy nhìn lại mô hình của chúng tôi, chỉ bây giờ chúng tôi sẽ cập nhật nó để làm cho ứng dụng của chúng tôi tải chuỗi được cung cấp bởi khung.

Khung xác định chuỗi và thông báo cho Foundation bản dịch được lưu trữ bên trong gói riêng của nó trong tệp chuỗi.

Nếu không có tham số này, chuỗi sẽ được tìm nạp từ ứng dụng lưu trữ thay thế và không tìm thấy.

Trong thực tế, nó trông như thế này.

Bạn cung cấp gói nơi văn bản của bạn được lưu trữ.

Khung sẽ tìm kiếm các chuỗi thành gói riêng của nó.

Sau đó, nó dễ dàng cho ứng dụng của bạn.

Chuỗi có thể được sử dụng trong một dòng mã đơn giản.

Hơn nữa, nếu bạn thực hiện bản địa hóa trong các khuôn khổ của mình theo cách này, bạn thậm chí sẽ không phải tạo tệp chuỗi được trình bày ở đây có chứa "Hoàn thành". Bây giờ hãy xem tại sao.

Chúng tôi đã thấy mọi thứ bạn có thể làm trong mã để khai báo và sắp xếp các chuỗi.

Nhưng chúng tôi chưa thấy cách thực sự tạo các tệp sẽ giữ bản dịch của bạn.

Hóa ra bạn thực sự không cần phải tạo các tệp chuỗi đó.

Xcode có thể đảm nhận việc tạo tất cả các tệp .strings cho bạn.

Khi bạn sử dụng Export Localizations, nó sẽ đọc mã của bạn và trích xuất tất cả các chuỗi của bạn.

Điều này thật tuyệt vì bạn không cần phải duy trì các tệp chuỗi.

Nếu bạn đã từng quên bản địa hóa chuỗi bạn vừa mã hóa trong giao diện người dùng của mình, thì điều này là dành cho bạn.

Nếu bạn gặp khó khăn với 'genstrings', điều này cũng dành cho bạn.

Năm nay, trong Xcode 13, chúng tôi đã thêm hỗ trợ trình biên dịch để trích xuất chuỗi Swift.

Ngoài ra, không gian làm việc hiện được hỗ trợ đầy đủ.

Điều này tiếp tục tách biệt mối quan tâm giữa logic của bạn và bản dịch của bạn.

Xcode sẽ phát hiện và trích xuất văn bản từ các phương pháp Swift và Foundation mà chúng ta đã thấy trước đó.

Xin lưu ý, nếu bạn có mã tùy chỉnh bao bọc các API đó, điều này sẽ không hoạt động theo mặc định.

Bạn không cần phải sử dụng một phương thức hoặc macro thông thường, nhưng nếu bạn thực sự cần, bạn có thể thêm chúng vào cài đặt xây dựng của mình trong Tên Macro Chuỗi được Bản địa hóa.

Đối với phần còn lại, Xcode sẽ trích xuất để bản địa hóa tên ứng dụng và mô tả quyền riêng tư của bạn được xác định trong Info.plist và nói chung tất cả các tài sản được đánh dấu là Bản địa hóa trong trình kiểm tra của Xcode.

Nếu bạn có bản địa hóa hiện có, bạn đã có thể chuyển sang xuất Xcode cho giao diện người dùng mới của mình.

Các chuỗi mới sẽ được tự động thêm vào các tệp hiện có của bạn.

Điều này thật tuyệt nếu bạn muốn chuyển đổi dự án của mình theo tốc độ của riêng bạn.

Như một phần thưởng, ảnh chụp màn hình từ các bài kiểm tra giao diện người dùng của bạn hiện đã được bao gồm.

Thật tuyệt vời cho những người bản địa hóa của bạn để họ có được ngữ cảnh ở một chuỗi và thật tuyệt vời khi bạn giới thiệu ảnh chụp màn hình được bản địa hóa của ứng dụng của mình trên App Store.

Được rồi, Xcode đã trích xuất tất cả các danh mục bản địa hóa, vì vậy bạn sẽ nghĩ rằng đến lượt người dịch làm việc ngay bây giờ.

Thực ra, bạn cũng có thể làm điều đó!

Tính năng mới trong Xcode 13, các danh mục bản địa hóa đã xuất có thể được xem và chỉnh sửa trực tiếp trong Xcode.

Bạn có thể thấy từng tệp được tạo - vì vậy mỗi bảng - trong các gói của chúng ở bên trái.

Và đối với lựa chọn của bạn, bạn có thể thấy tất cả các chuỗi, hình ảnh và tệp chứa trong đó.

Bạn có thể lọc các chuỗi, sắp xếp chúng, xem nhận xét, ảnh chụp màn hình và thậm chí dịch!

Điều này rất thuận tiện nếu bạn phát triển và dịch ứng dụng của riêng mình.

Nó cũng cho phép bạn tự xem lại và sửa lỗi.

Khi người dịch gửi lại cho bạn các danh mục chuỗi đã dịch, bạn có thể nhập chúng vào dự án của mình bằng cách sử dụng menu Sản phẩm trong Xcode.

Và bùng nổ! Các tệp chuỗi, stringsdicts và các tài sản khác của bạn sẽ được tạo và cập nhật.

Sử dụng dòng lệnh tương đương, bạn có thể chạy xuất và nhập tự động trên một hệ thống tích hợp liên tục.

Bằng cách gọi cho họ thường xuyên, dự án của bạn nhận được các chuỗi cập nhật nhất và quay vòng nhanh chóng trong việc dịch giao diện người dùng mới của bạn.

Bạn có thể thấy quy trình làm việc nâng cao đang hoạt động trong phiên năm nay, "Nơ phương hóa ứng dụng SwiftUI của bạn" và tìm hiểu thêm trong phiên giới thiệu.

Thế là xong!

Bạn đã chứng kiến cách các chuỗi được sinh ra và sống trong ứng dụng của bạn.

Để kết luận, tôi sẽ chỉ cho bạn cách xử lý một số chuỗi phức tạp hơn.

Và tôi chắc chắn rằng bạn sẽ thích những tính năng mới mà chúng tôi có trong cửa hàng.

Hãy bắt đầu với một cái tuyệt vời!

Chúng tôi đã cải thiện các chuỗi được quy kết để có bản địa hóa tích hợp sẵn.

Bây giờ nó có thể thực hiện được với sự hỗ trợ của cú pháp Markdown!

Bây giờ bạn có thể bản địa hóa các chuỗi của mình mà không làm mất bất kỳ định dạng nào.

Không còn các thao tác nhân vật rủi ro nữa, chỉ để in đậm một từ.

Nói về điều đó, ở đây tôi sử dụng dấu hoa thị để nhấn mạnh vào "hoàn thành". Tôi khuyến khích bạn kiểm tra "Có gì mới trong Foundation" để tìm hiểu cách bạn có thể thêm liên kết, điểm nhấn, văn bản không gian đơn, v.v.

Chúng tôi đã thấy rằng một chuỗi bạn xác định trong mã sẽ có một bản dịch trong tệp chuỗi.

Nhưng đôi khi bạn cần chuỗi của mình có nhiều biểu diễn.

Điều này có thể thực hiện được với tệp stringsdict, một tập hợp các chuỗi thích ứng với các quy tắc bạn xác định.

Ví dụ, hãy nhớ ví dụ của chúng tôi nơi chúng tôi muốn đặt một vài vé?

Trong tiếng Anh, chúng tôi sẽ thêm chữ "s" làm hậu tố nếu có nhiều vé và không có chữ "s" cho một vé.

Để giữ cho mã của bạn đơn giản và chính xác, bạn cần xác định quy tắc số nhiều này bằng cách sử dụng stringsdict.

Bởi vì nếu bạn bản địa hóa ứng dụng của mình, những quy tắc đó sẽ khác nhau đối với mỗi ngôn ngữ.

Nhìn vào một số trường hợp bằng tiếng Nga.

Bạn không muốn giải quyết điều đó trong mã, nó đúng hơn là một cái gì đó bản địa hóa nên quan tâm.

Hãy xem chúng ta sẽ thực hiện điều đó như thế nào.

Không cần thay đổi mã; chúng tôi vẫn sẽ sử dụng mã hiện có của mình ở trên.

Đầu tiên, so với các tệp chuỗi được tạo cho bạn, stringsdict là một lựa chọn tham gia thủ công.

Vì vậy, hãy tạo một cái bằng cách sử dụng mẫu Xcode và đảm bảo rằng bạn đã nhấp vào Bản địa hóa trong trình kiểm tra.

Được rồi, tất cả bắt đầu với chuỗi bạn đã xác định trong mã.

Nếu bạn có nhiều chuỗi số nhiều trong mã, bạn có thể thêm mục nhập gốc này vào đây cho mỗi chuỗi.

Bên trong, bạn xác định giá trị thực tế được trình bày.

Giá trị này tuân theo cơ chế tìm kiếm-thay thế.

Ở đây trong ví dụ này tôi đã định nghĩa một mã thông báo có tên là "vé".

Nó sẽ giữ chuỗi cuối cùng đầy đủ.

Tốt nhất là bao gồm hầu hết văn bản bên trong mã thông báo, nhưng trường đó sẽ có thể định vị được trong trường hợp người dịch cần thêm tiền tố, hậu tố hoặc di chuyển mã thông báo xung quanh trong trường hợp bạn có nhiều biến.

Được rồi, mã thông báo đó sẽ thay đổi tùy theo một biến số của bạn trong mã.

Sau đó hãy xác định mã thông báo vé đó.

Đầu tiên, chúng tôi chỉ xác nhận rằng chúng tôi đang thực hiện một số số số nhiều.

Sau đó, chúng tôi chỉ ra biến là một số với bộ định dạng kiểu C d.

Và cuối cùng, chúng ta có thể viết các quy tắc số nhiều.

Trong tiếng Anh, chúng ta chỉ có thể khai báo quy tắc "một" và "khác" và "không", nếu bạn muốn.

Đối với mỗi mục nhập, chúng tôi viết giá trị thực của mã thông báo vé.

Sau đó, nếu chúng ta có ba vé, trong tiếng Anh nó sẽ sử dụng "khác" và tạo "Đặt 3 vé".

Bằng cách thay thế %d bằng số 3.

Nếu một ngôn ngữ cần nhiều trường hợp hơn, đừng lo lắng.

Xcode sẽ thêm chúng cho bạn tại thời điểm xuất.

Trong tiếng Nga, nó sẽ thêm "vài" và "nhiều" lên trên những cái hiện có.

Thế là xong!

Chuỗi của chúng tôi sẽ được số nhiều trong thời gian chạy.

Trước khi chúng ta tiếp tục, tôi muốn gọi ra một trường hợp.

Mặc dù stringsdict nên được sử dụng cho số nhiều, nhưng nó có nghĩa là cho các chuỗi chứa một số.

Chúng ta đã thấy trước đó trường hợp "một" cho số ít trong tiếng Anh.

Nó thực sự cũng dành cho số một trong tiếng Nga, nhưng, nó cũng được sử dụng cho 21, 31, v.v.

Sau đó, trong trường hợp đó, sử dụng stringsdict sẽ không chính xác vì bạn chỉ muốn bằng một.

Trong ví dụ này, số nhiều thay đổi theo điều này, cả hai hoặc tất cả.

Không có số; vui lòng không sử dụng stringsdict.

Hãy tưởng tượng tôi đặt 21 vé cho tất cả bạn bè của mình, và tôi sẽ thấy bằng tiếng Nga, "Đặt vé này" thay vì "Đặt tất cả vé".

Tôi sẽ hỏi bạn, "Tiền của tôi đâu?"

Thay vào đó, hãy sử dụng if/else đơn giản nhưng hiệu quả này để số nhiều chính xác từng chuỗi trong số ba chuỗi, trong tất cả các ngôn ngữ.

Và đó là hỗ trợ số nhiều, nhưng stringsdict có thể xử lý nhiều loại biến thể hơn của một chuỗi.

Tôi mời bạn xem các phiên liên quan để tìm hiểu thêm.

Điều này thật tuyệt, nhưng chúng tôi muốn cung cấp cho bạn một cách đơn giản hơn.

Vâng, Foundation đã học năm nay cách làm ngữ pháp cho bạn!

Với hỗ trợ Markdown được thêm vào các chuỗi được gán, hãy sử dụng định dạng mới này với thuộc tính inflect và bạn sẽ nhận được giá trị phù hợp được tính toán trong thời gian chạy, như trên nút này.

Đây là một bổ sung mới tuyệt vời cho iOS 15 và macOS Monterey, hiện có sẵn bằng một số ngôn ngữ được chọn.

Nếu bạn muốn kiểm soát nhiều hơn, bạn có thể sử dụng stringsdict.

Chúng tôi đã không dừng lại ở việc thêm hỗ trợ số nhiều.

Chúng tôi muốn các chuỗi phần mềm của mình toàn diện hơn.

Ví dụ, khi một ứng dụng chào đón người dùng, nó khá đơn giản bằng tiếng Anh.

Nhưng nó không phải bằng tiếng Tây Ban Nha vì nó phụ thuộc vào điều khoản địa chỉ của người dùng.

Cho đến nay, bạn phải trình bày một chuỗi không được cá nhân hóa, điều này đúng nhưng cứng nhắc đối với hầu hết người dùng Tây Ban Nha.

Theo nghĩa đen, "Chúng tôi chào đón bạn."

Vậy điều gì sẽ xảy ra nếu chúng ta có thể cá nhân hóa chuỗi cho người dùng?

Với ký hiệu Markdown mới của chúng tôi, bạn có thể làm điều đó ngay bây giờ!

Chuỗi bây giờ sẽ tuân theo thuật ngữ địa chỉ bạn chọn trong cài đặt ngôn ngữ của thiết bị.

Vì vậy, "Bienvenida" dành cho những người dùng muốn được gọi là nữ tính, "Bienvenido" trong nam tính và nếu chúng tôi không biết, chúng tôi sẽ sử dụng phương án thay thế uốn hiện có.

Các biến tố nội tuyến cho số nhiều và thuật ngữ địa chỉ có thể được xác định trong mã hoặc bản dịch của bạn.

Chúng tôi rất vui mừng về sự bổ sung mới này cho các ngôn ngữ được chọn và chúng tôi rất nóng lòng được xem ứng dụng của bạn sử dụng nó.

Cuối cùng, hôm nay chúng ta đã thấy tất cả các cách bạn có thể viết các chuỗi có thể định vị.

Nhưng nếu bạn muốn trình bày dữ liệu, bạn thực sự nên để các khuôn khổ viết chúng cho bạn.

Các nhà định dạng của chúng tôi xử lý hàng trăm sự kết hợp ngôn ngữ và khu vực, và nhiều loại và đơn vị khác nhau.

Vì vậy, đừng mã hóa cứng; hãy để chúng tôi làm công việc khó khăn.

Và điều này dễ dàng hơn bao giờ hết bắt đầu từ năm nay để áp dụng các định dạng trong Swift.

Chúng tôi đã làm cho chúng dễ dàng sử dụng nội tuyến trong phép nội suy chuỗi của bạn.

Kiểm tra "Có gì mới trong Foundation" năm nay để tìm API yêu thích mới của bạn và nhận thông tin chi tiết về tất cả những gì chúng ta đã thấy hôm nay.

Nếu bạn cần triển khai các bản phát hành trước đó hoặc muốn biết chi tiết về các bộ định dạng, hãy kiểm tra phiên năm ngoái.

Được rồi, điều tôi muốn bạn lấy đi hôm nay là nếu bạn viết mã bằng API hiện đại, Xcode sẽ tạo ra tất cả các chuỗi cho bạn.

Chúng tôi đã thấy cách bạn có thể sắp xếp các chuỗi của mình trên các gói và chúng tôi đã phát hiện ra các API mới để giúp bạn dễ dàng sử dụng ngữ pháp và định dạng.

Nếu bạn làm theo tất cả các kỹ thuật này, việc thêm một ngôn ngữ mới sẽ không yêu cầu bất kỳ thay đổi mã nào!

Cuối cùng, luôn luôn kiểm tra.

Cho dù bạn đã nỗ lực bao nhiêu để bản địa hóa các chuỗi của mình, bạn nên kiểm tra ứng dụng của mình để đảm bảo nó chạy tốt trong tất cả các ngôn ngữ.

Với điều đó, tôi nóng lòng muốn đặt các buổi hòa nhạc với ứng dụng được bản địa hóa hoàn toàn của bạn.

Tận hưởng phần còn lại của WWDC, cảm ơn bạn đã xem.

♪