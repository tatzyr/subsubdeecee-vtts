10225

Ngày G'day.

Chào mừng đến với phiên họp, "Phối hợp trải nghiệm truyền thông với các Hoạt động Nhóm."

Tên tôi là Hayden, và tôi là một kỹ sư trong nhóm Hoạt động Nhóm tại Apple.

Hôm nay, chúng ta sẽ nói về cách tạo các ứng dụng đa phương tiện đồng bộ cung cấp cho người dùng khả năng xem và nghe nội dung cùng nhau trên các thiết bị.

Mục tiêu là để người dùng của bạn cảm thấy như thể họ đang ở bên nhau, dù họ ở đâu.

GroupActivities API là một khuôn khổ Swift để tạo ra những trải nghiệm được chia sẻ.

Nó đảm nhận việc điều phối phương tiện cho bạn, thông qua API để điều phối phát lại và quản lý phiên nhóm.

Và nó được hỗ trợ trên một loạt các nền tảng của Apple, chẳng hạn như iOS, iPadOS, macOS và tvOS.

Hãy bắt đầu với bản demo của GroupActivities API, bằng cách gọi cho đồng nghiệp của tôi, Moritz, và chia sẻ video từ ứng dụng mẫu đính kèm với bài nói chuyện này.

Hãy xem Moritz có rảnh không.

Xin chào, Moritz!

Này, Hayden!

Tôi sẽ về nhà và mở ứng dụng mẫu.

Bạn có thể thấy đó là danh sách các cảnh quay bằng máy bay không người lái từ Apple Park.

Tôi sẽ cho Moritz xem đoạn phim nhà hát.

Cái đó trông như thế nào, Moritz? Bạn có muốn xem nó không?

Điều đó trông thật tuyệt. Tôi thực sự yêu cái đó.

Nhưng bạn có thấy cái mới mà tôi đã tải lên tuần trước từ những chiếc nhẫn không?

Ồ, nó trông thật tuyệt!

Tôi sẽ bắt đầu phát lại và các video của chúng tôi sẽ được đồng bộ hóa trên các thiết bị của chúng tôi.

Bạn có thể thấy nếu tôi tạm dừng, nó cũng sẽ tạm dừng cho Moritz.

Và nếu anh ấy tiến về phía trước, nó cũng sẽ tiến về phía trước đối với tôi.

Trông thật tuyệt vời. Được rồi, cảm ơn, Moritz!

Vâng, điều đó thật tuyệt. Tạm biệt, Hayden.

Có ba phần chính mà bạn cần suy nghĩ khi tạo một ứng dụng phát lại phương tiện phối hợp.

Đầu tiên là triển khai GroupActivities API mới.

Thứ hai là cách bạn có thể tận dụng hình ảnh trong hình ảnh để chia sẻ trải nghiệm của bạn liền mạch nhất có thể.

Và thứ ba, đồng nghiệp của tôi, Moritz, sẽ đi sâu vào cách hoạt động của phối hợp phát lại và các tính năng của đối tượng phối hợp phát lại mới.

Hãy tự làm quen với API GroupActivities bằng cách xem vòng đời của ứng dụng GroupActivities.

Ở đây, chúng tôi có hai chiếc iPhone trong một cuộc gọi FaceTime, giống như trong bản demo đầu tiên.

Thiết bị của tôi ở bên trái, và đồng nghiệp của tôi, Moritz ở bên phải.

Trên thiết bị của tôi, tôi mở ứng dụng dùng chung.

Trong ứng dụng, sau đó tôi chia sẻ một hoạt động với nhóm.

Khung GroupActivities tạo ra một đối tượng phiên cho hoạt động và sau đó chuyển nó đến ứng dụng của tôi.

Trong khi đó, đối tượng phiên được chia sẻ với Moritz, nơi khung xử lý việc mở cùng một ứng dụng trên thiết bị của anh ấy.

Cuối cùng, khuôn khổ vượt qua ứng dụng GroupSession của Moritz.

Bây giờ, chúng tôi có hai ứng dụng có thể giao tiếp qua cùng một GroupSession.

Bây giờ, hãy xem xét các bước bạn cần thực hiện để áp dụng khuôn khổ GroupActivities.

Bước đầu tiên là tạo một GroupActivity cùng với siêu dữ liệu của nó.

Vì vậy, hãy nói về GroupActivity là gì và cách bạn định nghĩa nó.

GroupActivity là một giao thức Swift đại diện cho mục mà người dùng của bạn đang trải nghiệm cùng nhau.

Đây sẽ là một phần nội dung duy nhất, như một bộ phim hoặc một bài hát.

Bạn nên bao gồm bất kỳ thuộc tính nào trên loại này mà bạn cần thiết lập trải nghiệm của mình.

Ví dụ, bạn có thể muốn bao gồm URL của một video ở đây, vì vậy bạn có thể tải một video để chuẩn bị cho phiên.

Để khung gửi dữ liệu qua mạng, nó phù hợp với Codable.

Điều này có nghĩa là tài sản của bạn cũng phải phù hợp với Codable.

Bạn sẽ nhận thấy có hai thuộc tính bắt buộc.

ActivityIdentifier là một mã định danh loại duy nhất để hệ thống biết cách tham chiếu hoạt động này.

GroupActivityMetadata chứa thông tin để hiển thị hoạt động này trong giao diện người dùng hệ thống trên thiết bị từ xa.

Bạn sẽ nhận thấy đây là một ví dụ về tính năng thuộc tính chỉ đọc hiệu quả không đồng bộ mới đang được giới thiệu với Swift Concurrency trong năm nay.

Để biết thêm thông tin, hãy xem phiên họp, "Gặp gỡ không đồng bộ/chờ đợi trong Swift" tại WWDC năm nay.

Vì vậy, bạn đã xác định một GroupActivity.

Bây giờ, bạn muốn chia sẻ nó với cuộc gọi bằng cách gọi phương thức kích hoạt trên GroupActivity của bạn.

Khi bạn kích hoạt GroupActivity, khung sẽ tạo ra một đối tượng GroupSession, được phân phối đến cả thiết bị cục bộ và từ xa.

Hệ thống chịu trách nhiệm khởi chạy ứng dụng và giao diện người dùng hệ thống sẽ hiển thị siêu dữ liệu hoạt động.

Nhưng trước tiên, có điều gì đó chúng tôi đã che đậy.

Làm thế nào để ứng dụng của bạn biết rằng bạn đang trong một cuộc gọi FaceTime?

Và điều gì sẽ xảy ra nếu, khi người dùng chọn một phần nội dung, họ không có ý chia sẻ nó với nhóm và thay vào đó chỉ muốn xem nó cục bộ?

Chức năng PrepareForActivation giải quyết những vấn đề này cho bạn, bằng cách để hệ thống thực hiện ý định của người dùng.

Đây là một ví dụ về prepareForActivation API.

Trong câu lệnh chuyển đổi, có ba trường hợp chúng ta cần xử lý.

Đầu tiên, activationDisabled, sẽ được thực hiện khi người dùng không tham gia cuộc gọi FaceTime hoặc hệ thống đã quyết định rằng họ muốn sử dụng nó cục bộ.

Thứ hai, activationPreferred, sẽ được thực hiện khi người dùng đang trong cuộc gọi FaceTime và họ muốn chia sẻ nó với nhóm.

Hủy được thực hiện khi người dùng hủy hành động chia sẻ.

Đây đã là đủ kiến thức để tạo ra một ứng dụng GroupActivities chia sẻ một hoạt động.

Vì vậy, hãy chuyển sang Xcode, và tôi sẽ chỉ cho bạn nó trong thực tế.

Trước khi chúng tôi thêm hỗ trợ GroupActivities, tôi sẽ chạy nhanh qua dự án.

Đây là một ứng dụng xem phim đơn giản cho phép bạn chọn một bộ phim và xem nó.

Nó bao gồm một danh sách các bộ phim để xem, cùng với một trang chi tiết phim để hiển thị cho bạn trình phát video.

Ngay bây giờ, ứng dụng chỉ cho phép bạn xem phim một mình, vì vậy hãy thay đổi điều đó.

Bạn sẽ nhận thấy chúng tôi có bộ quyền Hoạt động Nhóm.

Và sau đó, chúng tôi sẽ thêm một GroupActivity vào Movie.swift.

Điều đầu tiên cần làm là nhập GroupActivities.

Và sau đó, chúng tôi sẽ thêm GroupActivity, MovieWatchingActivity.

Bạn sẽ nhận thấy nó có một thuộc tính phim và nó sử dụng thuộc tính đó để điền vào siêu dữ liệu.

Hãy chia sẻ hoạt động này ngay bây giờ.

Chúng ta sẽ đến CoordinationManager và tìm chức năng prepareToPlay.

Hiện tại, chức năng này bắt đầu phát lại ngay lập tức bằng cách xếp hàng phim.

Thay vào đó, chúng tôi sẽ thay thế chức năng này bằng chức năng prepareForActivation mà chúng tôi đã hiển thị trong các trang trình bày.

Bạn có thể thấy chúng tôi ngay lập tức xếp hàng bộ phim trong hộp kích hoạt Vô hiệu hóa.

Và activate() được gọi khi người dùng muốn chia sẻ nó với cuộc gọi FaceTime của họ.

Sau đó trong buổi nói chuyện, chúng ta sẽ xếp hàng bộ phim để bắt đầu phát lại, nhưng bây giờ, hãy xem điều gì sẽ xảy ra nếu chúng ta chạy ứng dụng nguyên trạng.

Tôi đã lấy thiết bị của Moritz và tôi đã bắt đầu cuộc gọi FaceTime giữa hai chiếc iPhone.

Tôi sẽ về nhà và sau đó khởi chạy ứng dụng mẫu trên điện thoại của mình.

Tôi sẽ chia sẻ video nhẫn mà chúng tôi đã xem trước đó và khởi chạy ứng dụng trên thiết bị của Moritz.

Bạn có thể thấy rằng nó đã nhận được GroupActivity.

Tuy nhiên, nó không tải đúng video và không có đồng bộ hóa phát lại.

Vì vậy, hãy học cách thêm nó vào ứng dụng ngay bây giờ.

Điều chính cần tìm hiểu về việc nhận Hoạt động Nhóm là đối tượng GroupSession và cách bạn nhận GroupSession, chuỗi không đồng bộ GroupSessions.

Đây là một sơ đồ cấp cao cho thấy vòng đời GroupSession điển hình.

Cả thiết bị cục bộ và từ xa đều nhận được một phiên nhóm.

Ứng dụng sau đó sẽ được thiết lập để chuẩn bị phát lại.

Và cuối cùng, khi sẵn sàng, hãy tham gia phiên họp nhóm.

GroupSession là đối tượng đại diện cho phiên thời gian thực giữa các thiết bị của một hoạt động nhóm.

Nó cung cấp trạng thái về phiên, chẳng hạn như hoạt động nhóm mới nhất, trạng thái kết nối và tập hợp những người tham gia tích cực được kết nối với phiên.

Như chúng ta sẽ thấy trong giây lát, nó cũng được sử dụng để đồng bộ hóa phát lại.

GroupSession AsyncSequence cung cấp GroupSessions cho ứng dụng của bạn.

Ứng dụng của bạn không bao giờ khởi tạo trực tiếp đối tượng GroupSession, vì vậy đây là cách duy nhất để nhận GroupSessions.

Điều quan trọng cần lưu ý là bạn nên nhận được GroupSession mới nhất từ trình tự này, trên cả thiết bị cục bộ và từ xa.

AsyncSequence được đề cập trong cuộc nói chuyện Swift Concurrency đã đề cập trước đó.

Đây là những gì đang chờ đợi trên GroupSessions AsyncSequence trông giống như trong mã.

Khi một GroupActivity được kích hoạt, hệ thống sẽ trả về một GroupSession từ AsyncSequence vào vòng lặp await của bạn.

Bây giờ chúng ta đã nhận được GroupSession, hãy tìm hiểu cách sử dụng nó để thiết lập đồng bộ hóa phát lại.

Bản phát hành mới nhất này của AVFoundation giới thiệu một loại mới được gọi là AVPlaybackCoordinator.

Moritz sẽ cung cấp thêm thông tin về đối tượng này sau trong buổi nói chuyện, nhưng hiện tại, tôi sẽ chỉ cho bạn cách đính kèm GroupSession vào điều phối viên phát lại, điều này sẽ cho phép phát lại đồng bộ.

Cách để truy cập điều phối viên phát lại là bằng thuộc tính Điều phối viên phát lại trên AVPlayer.

Sau đó, để đính kèm groupSession với điều phối viên, chúng tôi gọi coordinateWithSession và vượt qua GroupSession.

Và thế là xong.

Dưới mui xe, khung xử lý tất cả sự phức tạp của việc phối hợp phát lại và kết nối mạng thời gian thực cho bạn.

Có một bước cuối cùng để quản lý phiên, và đó là cuối cùng là tham gia phiên.

Ban đầu, một GroupSession không được kết nối và thay vào đó ở trạng thái "đang chờ".

Gọi "join()" kết nối GroupSession với nhóm và bắt đầu kết nối thời gian thực, cho phép tin nhắn được gửi và nhận từ các thiết bị khác trong nhóm.

Khi GroupSession đã tham gia thành công, quá trình đồng bộ hóa phát lại sẽ bắt đầu.

Hãy thêm mã quản lý phiên này vào ứng dụng mẫu của chúng tôi.

Trong CoordinationManager, hãy thêm chuỗi không đồng bộ của phiên trong một vòng lặp chờ.

Hãy nhớ rằng, điều này cung cấp cho ứng dụng GroupSessions của bạn khi chúng được kích hoạt từ các thiết bị cục bộ hoặc từ xa.

Hãy lưu trữ groupSession này trên CoordinatorManager, điều này sẽ truyền bá thay đổi sang MoviePlayerViewController của chúng tôi.

Sau khi thiết lập, chúng tôi sẽ đính kèm đối tượng phiên vào AVPlayer của mình thông qua playbackCoordinator .coordinateWithSession.

Sau đó, trở lại vòng lặp chờ đợi của chúng tôi, chúng tôi sẽ lấy bộ phim từ đối tượng phiên.

Vì hoạt động có thể thay đổi trong suốt phiên, chúng tôi sử dụng nhà xuất bản Kết hợp để có được hoạt động.

Sau đó, chúng tôi xếp hàng một bộ phim để bắt đầu phát lại.

Và cuối cùng, chúng tôi tham gia phiên họp.

Bây giờ chúng tôi đã thiết lập mã để nhận GroupSession và đồng bộ hóa phát lại, hãy chạy ứng dụng trên thiết bị của chúng tôi và xem điều gì sẽ xảy ra.

Một lần nữa, hai thiết bị đang trong cuộc gọi FaceTime và trên thiết bị đầu tiên, tôi sẽ mở ứng dụng mẫu và chia sẻ video đổ chuông.

Bạn có thể thấy thiết bị của Moritz đã nhận được Hoạt động Nhóm, vì vậy chúng tôi sẽ khởi chạy ứng dụng.

Và lần này, cả hai thiết bị đều hiển thị đúng video.

Sau đó, nếu tôi nhấn "phát", chúng ta có thể thấy rằng đồng bộ hóa phát lại hoạt động.

Và nếu tôi tạm dừng một cái, nó sẽ tạm dừng cái kia.

Hoặc tôi có thể tiến lên phía trước, và nó sẽ tiến lên phía trước trên cả hai.

Và phát lại được đồng bộ hóa hoàn hảo.

Một điều cuối cùng cần lưu ý về GroupSession là cách phiên kết thúc.

Có hai cách để hoàn thành GroupSession.

Đầu tiên là rời đi().

Điều này ngắt kết nối người dùng cục bộ khỏi phiên, nhưng để phiên hoạt động cho những người tham gia còn lại trong cuộc gọi.

Thứ hai là end().

Điều này kết thúc phiên họp, không chỉ cho người tham gia địa phương, mà còn cho toàn bộ cuộc gọi.

Để biết thêm chi tiết về việc tạo các ứng dụng GroupActivities nâng cao, hãy xem phiên WWDC sau đây, "Xây dựng trải nghiệm tùy chỉnh với Hoạt động Nhóm."

Nó bao gồm cách thay đổi hoạt động của GroupSession, quan sát trạng thái của GroupSession và cách sử dụng các tính năng nâng cao, chẳng hạn như GroupSessionMessenger, cho phép bạn gửi tin nhắn tùy ý giữa nhóm.

Tôi thực sự giới thiệu nó.

Hãy chuyển đổi bánh răng và xem cách bạn có thể tận dụng hình ảnh trong hình ảnh để chia sẻ Video GroupActivity liền mạch nhất có thể.

Tại sao hình ảnh trong hình ảnh đáng để suy nghĩ cho các ứng dụng GroupActivities?

Chà, hỗ trợ hình ảnh trong hình ảnh cho phép nội dung bắt đầu phát ngay lập tức sau khi được chia sẻ.

Vì nó không đưa người dùng ra khỏi bối cảnh hiện tại của họ, nên không cần sự tương tác rõ ràng của người dùng để bắt đầu phát lại.

Điều này giúp người dùng của bạn tiết kiệm thêm một bước và dẫn đến trải nghiệm chia sẻ nội dung không ma sát.

Để biết thêm thông tin về việc thiết lập hình ảnh trong hình ảnh, hãy xem phiên WWDC 2019 về "Cung cấp phát lại phương tiện trực quan với AVKit."

Tuy nhiên, có một số sắc thái trong cách hoạt động của picture-in-picture với GroupActivitities, vì vậy hãy xem qua chúng ngay bây giờ.

Khung GroupActivities sẽ cung cấp các phiên cho ứng dụng đa phương tiện của bạn trong khi ở chế độ nền, để cho ứng dụng của bạn cơ hội thiết lập hình ảnh trong ảnh.

Nếu GroupSession cho biết việc phát lại có thể bắt đầu ở chế độ nền, bạn nên thiết lập ảnh trong ảnh và sau đó trải qua luồng GroupActivities thông thường.

Hệ thống sẽ bắt đầu phát nội dung trong ảnh trong ảnh mà không cần khởi chạy ứng dụng ở chế độ toàn màn hình, vì vậy người dùng có được trải nghiệm liền mạch đó và không bị đưa ra khỏi bối cảnh hiện tại của họ.

Nhưng trong một số trường hợp, bạn sẽ không thể thiết lập hình ảnh trong hình ảnh vì bạn có thể cần người dùng đăng nhập vào ứng dụng của mình hoặc nội dung có thể không khả dụng nếu không có một số bước bổ sung từ người dùng.

Đối với những trường hợp này, GroupSession cung cấp API cho ứng dụng của bạn để yêu cầu được đặt trước.

Một điều tiện dụng khác mà chúng tôi đã tích hợp vào hình ảnh trong hình ảnh là nó xử lý việc để lại và kết thúc Phiên nhóm cho bạn, thông qua hộp thoại hệ thống, vì vậy không cần phải lo lắng về việc rời khỏi hoặc kết thúc phiên khi hình ảnh trong hình đang hoạt động.

Và bây giờ, tôi sẽ chuyển nó cho đồng nghiệp của tôi, Moritz, để tìm hiểu sâu về đối tượng điều phối viên phát lại.

Xin chào, tên tôi là Moritz Wittenhagen, và tôi là một kỹ sư trong nhóm AVFoundation.

Hayden đã giới thiệu cho bạn AVPlaybackCoordinator như một đối tượng tự động giữ phát lại trên nhiều thiết bị đồng bộ và chúng tôi đã thấy nó hoạt động trong bản demo.

Trong phần này của buổi nói chuyện, tôi sẽ làm sáng tỏ những gì điều phối viên thực sự làm dưới mui xe và cách nó tương tác với mã của bạn.

Phần lớn, tôi sẽ tập trung vào cách điều phối viên tương tác với AVPlayer, cách bạn nên chọn tài sản của mình để phát lại phối hợp, cách những người tham gia cá nhân có thể tạm dừng phối hợp và tôi cũng sẽ cung cấp cho bạn cái nhìn sâu sắc ngắn gọn về cách thực hiện phối hợp khi không sử dụng AVPlayer.

AVPlaybackCoordinator là một đối tượng chia sẻ trạng thái phát lại trên các thiết bị và nó điều phối bắt đầu phát lại trên các thiết bị đó, với mục tiêu không ai bỏ lỡ bất kỳ nội dung nào.

Có hai lớp con của điều phối viên.

Một phiên bản của AVPlayerPlaybackCoordinator luôn được gắn với một AVPlayer cụ thể và nó xử lý tất cả việc quản lý trạng thái từ xa cho bạn.

Điều này làm cho nó trở thành cách dễ nhất để chuyển sang phát lại phối hợp và tôi thực sự khuyên bạn nên bắt đầu ở đây.

Chúng ta sẽ không nói nhiều về AVDelegatingPlaybackCoordinator, nhưng lớp con này cung cấp cho bạn sự linh hoạt để điều khiển bất kỳ đối tượng phát lại nào khác không phải là AVPlayer.

Hãy xem lại thiết lập thiết bị của chúng tôi.

Trong phần còn lại của cuộc nói chuyện, chúng tôi sẽ đại diện cho các đối tượng GroupActivities thông qua GroupSession.

Chúng tôi cũng giả định rằng giao diện người dùng của bạn trình bày một AVPlayer đang chơi một số AVPlayerItem và đây là nơi mà AVPlayerPlaybackCoordinator mới xuất hiện.

Khi bạn gọi điều phối viên coordinateWithSession, như Hayden đã chỉ ra trước đó, chúng tôi đã kết nối hiệu quả hai AVPlayers và chúng bắt đầu ảnh hưởng lẫn nhau.

Quy tắc cơ bản là điều phối viên sẽ chặn bất kỳ API kiểm soát vận chuyển nào, vì vậy bất kỳ API nào thay đổi tốc độ hoặc thời gian hiện tại.

Nó thực hiện các lệnh đó, tìm hiểu xem nó có cần phối hợp chúng với người khác hay không, và sau đó, vào thời điểm thích hợp, để chúng có hiệu lực trên AVPlayer.

Hãy xem xét một ví dụ.

Ở đây, Hayden và tôi đang ở trong một GroupSession cùng nhau, và bởi vì GroupActivity cho chúng tôi biết nên nên nên đã xếp hàng cùng một AVPlayerItem.

Bây giờ, nếu thiết bị của tôi thay đổi thuộc tính tốc độ của AVPlayer, điều phối viên phát lại sẽ chặn lệnh đó và không ngay lập tức cho phép người chơi bắt đầu phát lại.

Thay vào đó, nó sẽ yêu cầu người chơi nhập timeControlStatus của WaitingToPlayAtSpecifiedRate.

Giao diện người dùng thường sẽ đại diện cho trạng thái kiểm soát thời gian này bằng một con quay đang chờ.

Điều phối viên sau đó sẽ gửi lệnh đến iPad của Hayden.

AVPlayerPlaybackCoordinator ở đó nhận được lệnh và tương tự yêu cầu AVPlayer của Hayden thay đổi tỷ lệ và vào trạng thái chờ.

Các điều phối viên cho mọi người một chút thời gian để chuẩn bị phát lại với mục tiêu mọi người bắt đầu phát lại cùng một lúc mà không bỏ lỡ bất kỳ nội dung nào.

Khi mọi người đều ổn, tất cả các thiết bị bắt đầu phát lại cùng nhau.

Tất cả các điều phối viên trong phiên họp đều bình đẳng, có nghĩa là Hayden cũng có thể bắt đầu một lệnh.

Hãy để anh ấy tìm kiếm lần này.

Một lần nữa, API tìm kiếm bị chặn và điều phối viên buộc AVPlayer phải đợi trong khi chia sẻ lệnh với các điều phối viên được kết nối.

Mọi người đều có thời gian để hoàn thành việc tìm kiếm và khi tất cả các thiết bị đã sẵn sàng hoạt động trở lại, việc phát lại sẽ tiếp tục cho mọi người cùng nhau.

Bạn có thể tự hỏi mình, điều gì sẽ xảy ra khi AVPlayers đang chơi các vật phẩm khác nhau?

Và câu trả lời là điều phối viên chỉ áp dụng trạng thái cho người chơi khác khi cả hai người chơi đang chơi cùng một nội dung.

Tôi sẽ giải thích chi tiết về khái niệm nhận dạng sau.

Hiện tại, hãy nghĩ rằng nội dung giống hệt nhau khi bạn tạo các mục từ cùng một URL.

Điều này có nghĩa là bất kỳ lệnh nào bạn gửi cho mục A sẽ chỉ được áp dụng nếu người nhận cũng đang chơi mục A.

Và việc thay đổi mục thành B sẽ bỏ qua tất cả trạng thái từ mục A.

Chúng tôi làm điều này bởi vì việc phân biệt các lệnh cho mỗi mục cho phép tham gia an toàn những người tham gia và chuyển đổi giữa các mục.

Hãy để tôi cho bạn thấy ý tôi là gì.

Đây là ví dụ của chúng tôi một lần nữa, nhưng lần này, chúng tôi bắt đầu với Hayden đã chơi.

Khi tôi tham gia và kết nối điều phối viên phát lại của mình với cùng một phiên, không có gì xảy ra với AVPlayer của tôi, bởi vì tôi không chơi cùng một mục hiện tại với Hayden.

Ngay cả việc tạo ra cùng một vật phẩm đó cũng không có tác động vì vật phẩm đó không phải là hiện tại trong trình phát của tôi.

Điều này có nghĩa là tôi thậm chí có thể tìm kiếm món đồ mà không có hậu quả cho bất kỳ ai khác.

Chỉ khi mục trở nên hiện tại trong AVPlayer, điều phối viên mới bắt đầu thực hiện công việc của mình và cố gắng áp dụng đúng trạng thái.

Quy tắc là điều phối viên luôn bắt đầu với trạng thái nhóm, nếu có.

Và vì Hayden đã chơi trong GroupSession, điều phối viên thích trạng thái của anh ấy hơn cấu hình của riêng tôi từ trước khi sử dụng vật phẩm.

Điều này có nghĩa là điều phối viên của tôi sẽ ghi đè lên bất kỳ cấu hình nào trong AVPlayer và AVPlayerItem để phù hợp với thiết bị của Hayden.

Và với điều đó, cả hai chúng ta đều ở trong cùng một trạng thái và có thể chơi cùng nhau.

Hãy lặp lại điều này với một sự chuyển đổi mục.

Khi cả hai chúng tôi sắp kết thúc mục A, AVQueuePlayer của tôi đã sẵn sàng để chơi mục tiếp theo.

Thông thường, chúng tôi cũng mong đợi Hayden sẵn sàng, nhưng đối với ví dụ này, hãy giả sử iPad của Hayden đang ở trong một mạng xấu và chưa thể tải mục tiếp theo.

Vì vậy, bây giờ tôi đang ở cuối mục A, tôi đã có mục B được xếp hàng và nó đã sẵn sàng để chơi.

Nhưng vì mục này không phải là hiện tại, điều phối viên vẫn chưa làm gì cả.

Chỉ khi người chơi của tôi chuyển sang vật phẩm mới, điều phối viên mới làm lại công việc của mình.

Và lần này, nó không tìm thấy trạng thái hiện có cho mục B, vì vậy nó chỉ tiếp tục với trạng thái mà người chơi của tôi đang đề xuất.

Mặc dù điều phối viên chia sẻ trạng thái mới này với Hayden, anh ta không bị ảnh hưởng vì anh ta vẫn đang hiển thị mục A.

Nhưng cuối cùng khi anh ấy chuyển đổi để phù hợp với vật phẩm của tôi, điều phối viên của anh ấy sẽ lại áp dụng trạng thái hiện có cho người chơi của anh ấy.

Và với điều đó, mọi người đang chơi đồng bộ một lần nữa.

Sau tất cả những điều này, đây là lời kêu gọi hành động đầu tiên của tôi.

Hãy cẩn thận về thứ tự thay đổi mặt hàng của bạn và các lệnh kiểm soát vận chuyển.

Giả sử chúng ta có một chức năng beginPlayback xếp hàng một mục và tự động bắt đầu chơi.

Mã này sẽ được gọi bất cứ khi nào người dùng chọn thứ gì đó để chơi hoặc khi GroupSession của chúng tôi thông báo cho chúng tôi về một hoạt động mới.

Điều quan trọng là chúng ta phải tìm kiếm thời gian bắt đầu trước, và tương tự, chúng ta nên thay đổi tỷ lệ người chơi trước khi vật phẩm được xếp hàng để cấu hình ban đầu của chúng ta không ảnh hưởng đến bất kỳ ai khác.

Nếu chúng tôi làm theo thứ tự này, điều phối viên phát lại có thể quyết định xem chúng tôi là người đầu tiên và trạng thái của chúng tôi nên được chia sẻ với mọi người khác hay nếu một trạng thái khác đã tồn tại, và thay vào đó sẽ ghi đè lên trạng thái của chúng tôi.

Ngoài ra, hãy kiểm tra các lệnh kiểm soát vận chuyển của bạn và xem xét liệu chúng có ảnh hưởng đến mọi người trong nhóm hay không.

Thông thường, một cuộc gọi API sẽ ảnh hưởng đến nhóm nếu nó bắt nguồn từ giao diện người dùng phát lại.

Vì vậy, nếu người dùng tạm dừng, những người khác cũng nên tạm dừng.

Trong trường hợp đó, chỉ cần gọi AVPlayer API như bình thường.

Vậy, chúng ta nên làm gì với các lệnh gọi API khác không đến từ giao diện người dùng phát lại?

Thông thường, đây là những lần tạm dừng tự động vì ứng dụng của bạn đã gặp phải một số sự kiện hệ thống.

Việc tạm dừng tự động như thế này thường không ảnh hưởng đến những người tham gia khác.

Trong tình huống như vậy, khi người dùng của bạn đang chơi cùng với những người khác, trước tiên bạn nên cân nhắc không dừng lại.

Vì mọi người khác tiếp tục chơi, người dùng thường sẽ thích gắn bó với nhóm hơn, ngay cả khi nó có một số nhược điểm, chẳng hạn như không thể xem nội dung tạm thời.

Nếu bạn không có lựa chọn nào khác ngoài việc tạm dừng, bạn có hai lựa chọn: xóa mục trước hoặc bắt đầu tạm dừng phát lại phối hợp, mà tôi sẽ đề cập sau trong bài nói chuyện này.

Bây giờ bạn đã có ý tưởng về cách hoạt động của điều phối viên phát lại, hãy nói về nội dung để phát lại phối hợp.

Như tôi đã nói trước đây, chúng tôi coi hai vật phẩm của người chơi trên các thiết bị khác nhau là giống nhau khi tài sản của họ được tạo từ cùng một URL.

Mặc dù mặc định này có thể hoạt động tốt, nhưng có những tình huống bạn muốn thay đổi hành vi này.

Ví dụ, ứng dụng của bạn có thể cung cấp cho người dùng lựa chọn tải xuống và lưu trữ nội dung trên thiết bị.

Vì vậy, nếu tôi đã tải nội dung xuống bộ nhớ cache cục bộ của mình và Hayden vẫn đang phát trực tuyến nội dung từ đám mây, chúng tôi không còn sử dụng cùng một URL nữa, có nghĩa là điều phối viên phát lại sẽ không đồng bộ hóa trạng thái phát lại của chúng tôi.

Tương tự, một số bạn có thể có các trường hợp sử dụng thú vị để điều phối trạng thái của AVMutableMovies hoặc AVCompositions, hoàn toàn không có biểu diễn URL.

Một lần nữa, điều phối viên phát lại không biết phải làm gì ở đây.

Để giải quyết vấn đề này, bạn có thể cung cấp một chuỗi tùy chỉnh làm mã định danh cho AVPlayerItem.

Nếu chuỗi này có mặt, điều phối viên sẽ sử dụng nó để quyết định xem hai mục có đại diện cho cùng một nội dung hay không và nó sẽ bỏ qua URL.

Bạn làm điều này bằng cách triển khai giao thức AVPlayerPlaybackCoordinator Delegate và chức năng playbackCoordinator identifierFor playerItem.

Điều phối viên sẽ yêu cầu đại diện của mình cung cấp số nhận dạng bất cứ khi nào bạn xếp hàng một vật phẩm trong người chơi.

Bất cứ khi nào điều phối viên phát lại xem xét hai mục bằng nhau, điều quan trọng là thời gian trên một thiết bị phải khớp với cùng thời gian trên các thiết bị khác.

Điều này có nghĩa là bạn cần cẩn thận với nội dung được máy chủ tự động đưa vào luồng phát lại.

Vì vậy, nếu Hayden và tôi yêu cầu cùng một URL, nhưng máy chủ quyết định chỉ đưa quảng cáo vào luồng của tôi, các thiết bị hiện không đồng bộ, khi tôi phát vào quảng cáo và Hayden tiếp tục với nội dung chính.

Cách đúng đắn để tiếp cận vấn đề này là di chuyển quảng cáo và các quảng cáo xen kẽ khác vào một trình phát riêng biệt.

Điều đó khiến tài sản chính không bị ảnh hưởng.

Bây giờ, khi tôi chơi vào quảng cáo, điện thoại của tôi chuyển sang một trình phát khác trong suốt thời gian quảng cáo.

Và khi quảng cáo kết thúc, điều phối viên có thể dễ dàng tham gia lại thời gian của những người khác và chúng tôi đã đồng bộ trở lại.

Nếu bạn đang chơi nội dung HLS, AVPlayer sẽ có thể giúp bạn điều này thông qua API AVPlayerInterstitialEvent mới.

Kiểm tra các cuộn trước và giữa cuộn động trong HLS nói chuyện để tìm hiểu thêm.

Tóm lại, sử dụng số nhận dạng tùy chỉnh để khớp với nội dung nếu URL không bao gồm đúng thông tin.

Đảm bảo thời gian giống nhau cho tất cả mọi người.

Và nếu bạn muốn chơi quảng cáo xen kẽ được cá nhân hóa, hãy chơi chúng thông qua một trình phát khác, để nội dung chính của bạn không bị ảnh hưởng.

Và cuối cùng, sử dụng thẻ ngày tháng khi điều phối nội dung trực tiếp để điều phối viên có thể chia sẻ thời gian chính xác với mọi người khác.

Cho đến nay, chúng tôi chỉ xử lý các trường hợp phát lại hoàn hảo, nơi mọi người có thể đồng bộ hóa toàn bộ thời gian.

Thật không may, điều đó không phải lúc nào cũng có thể.

Giả sử Hayden và tôi đang chơi cùng nhau, nhưng chuông báo thức kêu bảo tôi cho mèo ăn, Zorro.

Theo các quy tắc của AVAudioSession, ứng dụng của tôi bây giờ phải tạm dừng và các quy tắc đó vẫn được áp dụng, ngay cả khi chơi trong một nhóm.

Tuy nhiên, chúng tôi không muốn sự tạm dừng của tôi ảnh hưởng đến những người khác.

Chuyển tiếp những khoảng dừng nhỏ của mọi người cho cả nhóm sẽ chỉ gây ra quá nhiều phiền toái.

Vì vậy, thay vào đó, chúng tôi muốn iPad của Hayden tiếp tục chơi.

Và khi tôi bỏ qua báo thức của mình, việc phát lại sẽ bắt kịp và mọi người nên phát lại đồng bộ.

Vậy, làm thế nào chúng ta có thể thực hiện hành vi như thế này?

Bạn sử dụng một đối tượng mới được gọi là AVCoordinatedPlaybackSuspension.

Việc đình chỉ như vậy thể hiện sự tách biệt giữa điều phối viên của một người tham gia và điều phối viên của những người tham gia khác.

Người tham gia tách biệt với nhóm và tỷ lệ người chơi thay đổi hoặc tìm kiếm không còn ảnh hưởng đến bất kỳ ai khác.

Tương tự, bất kỳ thay đổi tỷ lệ nào đến từ nhóm sẽ không thay đổi tỷ lệ hoặc thời gian của AVPlayer.

Trong ví dụ, điều này có nghĩa là Hayden không thể khởi động trình phát của tôi trong khi báo thức vẫn đang phát.

Có hai loại hệ thống treo khác nhau: hệ thống treo tự động và hệ thống treo mà bạn tự thêm vào.

Hệ thống treo tự động được thêm vào bởi AVPlayerPlaybackCoordinator khi người chơi tự động tạm dừng.

Chúng tôi đã thấy ví dụ về sự gián đoạn phiên âm thanh, nhưng điều này cũng áp dụng cho các gian hàng mạng hoặc phát quảng cáo xen kẽ thông qua API xen kẽ AVPlayer mới.

Việc tạm dừng được thêm bởi điều phối viên phát lại kết thúc khi người chơi tiếp tục phát lại và nó khiến người chơi khớp thời gian với trạng thái nhóm hiện tại.

Ví dụ của chúng tôi, điều này có nghĩa là tôi sẽ tự động tham gia lại nhóm khi tỷ lệ người chơi của tôi thay đổi trở lại sau khi ứng dụng của tôi xử lý thông báo ngắt kết thúc từ việc loại bỏ báo thức.

Hãy để tôi chỉ cho bạn hai ví dụ về cách hệ thống sử dụng hệ thống treo phát lại phối hợp.

Đây là ứng dụng mẫu của chúng tôi phát cảnh quay bằng máy bay không người lái của những chiếc nhẫn.

Hãy xem ví dụ gián đoạn mà chúng ta đã thảo luận trước đây.

Tôi đã đặt hẹn giờ để tắt trong vài giây, vì vậy hãy đợi điều đó.

À, bắt đầu thôi.

Điều này đã tạm dừng iPad bên trái của tôi, nhưng như bạn có thể thấy, thiết bị khác vẫn đang chơi vui vẻ.

Và khi tôi bỏ qua bộ hẹn giờ, phát lại trên thiết bị bên trái nhảy về phía trước để nối lại thiết bị khác và hoàn toàn đồng bộ.

Đây không phải là cách duy nhất mà hệ thống sử dụng hệ thống treo.

AVKit sử dụng chúng để giữ cho các khung hình video ngẫu nhiên không nhấp nháy trước mặt mọi người trong quá trình cọ rửa.

Bạn có thể đã nhận thấy rằng việc cọ rửa sẽ chỉ hiển thị các khung trung gian trên thiết bị mà tôi đang tương tác.

Vì vậy, khi tôi chạm vào máy chà sàn, thiết bị bên phải tiếp tục phát, trong khi thiết bị bên trái hiển thị khung chà.

Chỉ khi tôi buông máy chà sàn thì thời gian mới mới được chia sẻ với thiết bị khác và việc phát lại tiếp tục cho mọi người.

Đây là những ví dụ về cách hệ thống sử dụng hệ thống treo.

Bây giờ, hãy xem bạn sẽ tự mình nhận nuôi một cái như thế nào.

Vì vậy, hãy nhảy vào Xcode và thực sự làm điều đó.

Giả sử bạn muốn triển khai một tính năng cho phép một người tham gia xem lại thứ mà họ vừa bỏ lỡ.

Có lẽ có một khoảnh khắc đặc biệt thú vị trong cảnh quay máy bay không người lái mà chúng tôi đang xem.

Với tất cả các hành vi của điều phối viên mà chúng tôi đã thảo luận cho đến nay, việc tìm kiếm lại và chơi lại sẽ ảnh hưởng đến tất cả mọi người.

Và tôi muốn nhấn mạnh rằng đây rất có thể là điều đúng đắn nên làm.

Cố gắng giữ người dùng của bạn lại với nhau càng nhiều càng tốt.

Nhưng giả sử tìm kiếm sự trở lại cho tất cả mọi người không phải là một lựa chọn.

Vì vậy, những gì chúng tôi sẽ xây dựng thay vào đó là một cách để tìm kiếm lại trong vài giây và phát nội dung với tốc độ gấp đôi cho đến khi chúng tôi tham gia sao lưu với mọi người.

Tôi đã thêm một nút trong giao diện người dùng của mình mà người dùng có thể sử dụng để chỉ ra rằng họ đã bỏ lỡ điều gì đó.

Nó được kết nối với chức năng này trong MoviePlayerViewController của chúng tôi.

Hãy điền vào đó.

Đây chỉ là logic của người chơi.

Chúng tôi tìm ra thời gian để tìm kiếm, tìm kiếm lại và đặt tỷ lệ người chơi thành 2.

Khi chúng tôi đã bắt kịp, chúng tôi chỉ cần tiếp tục phát lại ở tốc độ 1.

Cho đến nay, tất cả điều này sẽ xảy ra với tất cả mọi người vì điều phối viên phát lại sẽ chặn các lệnh gọi API đó.

Đây là nơi đình chỉ xuất hiện.

Ngay trước khi chúng tôi tìm kiếm lại, tôi muốn tách người chơi của chúng tôi khỏi những người khác.

Và chúng tôi làm điều đó với chức năng beginSuspension của điều phối viên.

Nó đòi hỏi một lý do, và để cung cấp lý do đó, chúng tôi chỉ cần mở rộng cấu trúc Lý do với một hằng số chuỗi mới.

Trong trường hợp này, điều gì đã xảy ra.

Bây giờ, chúng ta có thể sử dụng nó trong cuộc gọi startSuspension của mình.

Vì điều phối viên hiện đã bị đình chỉ, chúng tôi có thể tìm kiếm và đặt tỷ lệ một cách an toàn, chỉ dành cho người chơi của chúng tôi.

Khi chúng tôi đã sẵn sàng gặp gỡ những người khác, chúng tôi cần ra hiệu cho điều phối viên nghe lại nhóm, vì vậy chúng tôi gọi suspension.end().

Lưu ý rằng chúng tôi không thực sự cần thay đổi tỷ lệ người chơi nữa.

Vì việc kết thúc việc đình chỉ sẽ luôn tham gia lại với những người khác, sự thay đổi tỷ lệ người chơi của chúng tôi cũng sẽ thay đổi trở lại bất kỳ tỷ lệ nhóm hiện tại là gì.

Bây giờ, hãy thử cái này.

Mọi người chơi cùng nhau.

Tôi bỏ lỡ một sự kiện thú vị, như cách tiếp cận chiếc nhẫn, và tôi nhấn vào nút mới đã xảy ra của chúng tôi.

Vì vậy, bạn có thể thấy, thiết bị tôi đang tương tác sẽ quay lại để lặp lại nội dung.

Nó phát nhanh hơn để bắt kịp, trong khi thiết bị khác không bị ảnh hưởng.

Và bây giờ, chúng tôi đã hoàn toàn đồng bộ một lần nữa.

Vì vậy, khi bạn bắt đầu đình chỉ trên AVPlaybackCoordinator, bạn tách người chơi của nó khỏi nhóm và giờ đây có thể an toàn để phát hành bất kỳ thay đổi hoặc tìm kiếm tỷ lệ nào mà không ảnh hưởng đến bất kỳ ai khác.

Kết thúc việc đình chỉ sẽ tham gia lại thời gian và tỷ lệ hiện tại của nhóm.

Và, mới trên trang chiếu này, bạn có thể tùy ý đề xuất thời gian mới cho nhóm khi kết thúc việc đình chỉ.

Đây là cách bạn có thể thực hiện hệ thống treo chà để thay đổi thời gian cho mọi người chỉ khi buông bỏ điều khiển phát lại.

Đây là bản tóm tắt về thời điểm các lệnh điều khiển vận chuyển AVPlayer thực sự được chia sẻ với những người tham gia khác.

Đầu tiên, bạn phải kết nối AVPlayerPlaybackCoordinator với những người tham gia khác thông qua một phiên nhóm, như Hayden đã chỉ cho bạn khi bắt đầu buổi nói chuyện.

Thứ hai, AVPlayerItem hiện tại của AVPlayer phải có cùng URL với các vật phẩm của người chơi của những người tham gia khác.

Hoặc nếu bạn đang cung cấp số nhận dạng của riêng mình, chúng phải có cùng số nhận dạng tùy chỉnh.

Khi một mục được xếp hàng, tất cả các tìm kiếm và thay đổi tỷ lệ sẽ ảnh hưởng đến tất cả mọi người trong nhóm, ngoại trừ khi bạn bắt đầu tạm dừng phát lại phối hợp.

Và để kết thúc cuộc thảo luận của AVPlayerPlaybackCoordinator, đây là một chuyến tham quan nhanh về API khác liên quan đến phát lại phối hợp.

Nếu bạn muốn những người tham gia khác chờ đợi trong thời gian đình chỉ của một người dùng, bạn có thể định cấu hình điều này bằng cách sử dụng thuộc tính suspensionReasons ThatTriggerWaiting của điều phối viên.

Đây là cách bạn có thể yêu cầu không ai bỏ lỡ bất kỳ nội dung nào nếu người tham gia có quảng cáo có độ dài khác nhau.

Để tìm hiểu thêm về tình trạng của những người tham gia khác, hãy xem tài sản của những Người tham gia khác của điều phối viên và thông báo tương ứng của nó.

AVCoordinatedPlaybackParticipant đáng chú ý nhất cung cấp cho bạn danh sách suspensionReasons, có thể hữu ích để thông báo cho UI, đặc biệt nếu bạn sử dụng suspension ReasonsThatTriggerWaiting ở trên.

Bất cứ khi nào điều phối viên yêu cầu AVPlayer của mình chờ đợi, điều đó được phản ánh trong lý do của người chơi ForWaitingToPlay, với lý do chờ đợi mới ForCoordinatedPlayback.

Để ghi đè thời gian chờ và ngay lập tức bắt đầu phát lại, bất kể trạng thái của những người tham gia khác, hãy sử dụng chức năng playImmediately atRate của người chơi.

Lưu ý rằng điều này có thể khiến những người tham gia khác bỏ lỡ nội dung, vì vậy hãy lưu ý điều đó khi sử dụng API này.

AVPlayer cũng có một rateDidChangeNotification mới, cung cấp thêm thông tin về sự thay đổi tỷ lệ, bao gồm cả khi một người tham gia khác gây ra nó.

Và tương tự, TimeJumpedNotification của AVPlayerItem cũng sẽ cho bạn biết nếu một bước nhảy thời gian bắt nguồn từ một người tham gia khác.

Có một số API AVPlayer mà bạn không thể sử dụng với AVPlayerPlaybackCoordinator.

Thuật toán cao độ thời gian mặc định trên iOS từng là độ trễ bằng không chất lượng thấp.

Giá trị này hiện không được dùng nữa trong iOS 15.

LowQualityZeroLatency không được hỗ trợ để phát lại phối hợp và bạn nên đề phòng việc đặt lại mã về giá trị hiện đã bị phản đối này.

Thay vào đó hãy sử dụng một trong những thuật toán khác.

Ngoài ra, không sử dụng chức năng setRate(time:atHostTime:) của AVPlayer với AVPlayerPlaybackCoordinator vì điều quan trọng là bộ điều phối phát lại phải chịu trách nhiệm về thời gian của trình phát, điều này không tương thích với đồng bộ hóa khởi động bên ngoài.

Sau tất cả những cuộc nói chuyện này về AVPlayer, hãy nhanh chóng đi sâu vào lớp con thứ hai của AVPlaybackCoordinator, AVDelegatingPlaybackCoordinator.

Rất nhiều khái niệm mà chúng ta đã thảo luận vẫn áp dụng cho việc ủy quyền điều phối viên phát lại, nhưng thay vì quan sát trình phát cho bạn, điều phối viên ủy quyền yêu cầu bạn cung cấp thông tin về trạng thái phát lại và tự áp dụng trạng thái cho các đối tượng phát lại của bạn.

Một thiết lập đối tượng phát lại tùy chỉnh sẽ trông giống như thế này.

Giao diện người dùng của bạn điều khiển trình phát, sử dụng một trong các API kết xuất hệ thống khác bên dưới.

Điều phối viên phát lại ủy quyền phù hợp giữa giao diện người dùng và việc triển khai trình phát của bạn.

Đúng như tên gọi, AVDelegatingPlaybackCoordinator yêu cầu bạn triển khai giao thức đại diện nhận các lệnh phát lại để phát, tạm dừng, tìm kiếm và đệm.

Thay vì gửi lệnh chơi trực tiếp cho người chơi của bạn, giao diện người dùng của bạn sẽ thông báo cho điều phối viên trước.

Điều phối viên sau đó sẽ quyết định xem trước tiên có cần thương lượng với những người chơi được kết nối khác hay không, trước khi thay đổi thời gian hoặc tốc độ của đối tượng phát lại của bạn.

Bạn cũng phải nói với điều phối viên bất cứ khi nào người chơi của bạn chuyển sang một mục hiện tại mới, để điều phối viên biết lệnh nào sẽ gửi cho bạn.

Như trước đây, các mục được xác định bằng các chuỗi tùy ý.

Khi điều phối viên gửi một lệnh, nó sẽ ảnh hưởng đến giao diện người dùng gốc, cũng như giao diện người dùng người nhận.

Và khi đến lúc chơi, nó sẽ ảnh hưởng đến tất cả người chơi theo cùng một cách.

Trách nhiệm của bạn là làm cho đối tượng phát lại của bạn theo sau và cập nhật giao diện người dùng của bạn cho các lệnh một cách thích hợp.

Tôi muốn đặc biệt gọi rằng điều phối viên ủy quyền sẽ thường bảo bạn bắt đầu bộ đệm, ngay cả khi thiết bị của bạn đã sẵn sàng hoạt động.

Điều này có nghĩa là điều phối viên vẫn đang chờ đợi những người tham gia được kết nối khác và giao diện người dùng của bạn sẽ phản ánh điều đó, ngay cả khi bạn không có gì để làm.

Những lời cảnh báo cuối cùng.

Hãy cẩn thận với các sự kiện như thay đổi tuyến đường tạm dừng một thời gian ngắn và tiếp tục trình phát của bạn.

Bạn có trách nhiệm tuân thủ thời gian được yêu cầu và áp dụng lại thời gian nhóm khi cần thiết.

Nếu bạn không thể theo kịp vì bất kỳ lý do gì, bạn nên thông báo điều đó cho điều phối viên bằng cách sử dụng đình chỉ.

Điều phối viên phát lại ủy quyền cũng không thêm bất kỳ hệ thống treo tự động nào.

Điều này có nghĩa là bạn nên tự mình bắt đầu và kết thúc việc đình chỉ các sự kiện hệ thống có liên quan.

Sử dụng các lý do được cung cấp bởi AVFoundation khi thích hợp.

Và có thể kết nối điều phối viên phát lại ủy quyền trên một thiết bị với điều phối viên phát lại trình phát trên một thiết bị khác, nhưng bạn phải sử dụng số nhận dạng tùy chỉnh ở đầu điều phối viên phát lại trình phát.

Hãy kết thúc.

Để xây dựng một ứng dụng phát lại phương tiện phối hợp, hãy sử dụng GroupActivity để xác định nội dung bạn đang phát và đề xuất nó cho nhóm.

Bắt đầu theo dõi GroupSessions ngay khi ứng dụng của bạn khởi chạy để tìm hiểu khi nào người dùng của bạn đang trong cuộc gọi FaceTime và muốn chơi cùng nhau.

Và cuối cùng, kết nối điều phối viên phát lại với GroupSession của bạn để giữ cho nội dung của bạn đồng bộ cho mọi người.

Cảm ơn bạn, và tận hưởng phần còn lại của WWDC.

[Âm nhạc].