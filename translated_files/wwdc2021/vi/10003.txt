10003

- Xin chào! Chào mừng đến với WWDC.

Tên tôi là Anne Hitchcock, và tôi là một kỹ sư trong nhóm Watch Frameworks.

Tôi rất vui khi có mặt ở đây hôm nay để nói về các chiến lược truyền dữ liệu trên Apple Watch.

Kể từ khi được giới thiệu, Apple Watch ngày càng trở nên độc lập.

Series 3 là Apple Watch đầu tiên có sẵn với khả năng di động.

Ứng dụng Đồng hồ Độc lập trong watchOS 6 đã cung cấp cho bạn khả năng viết các ứng dụng không yêu cầu bạn đồng hành iOS và có thể được mua từ App Store trên Đồng hồ của khách hàng của bạn.

Với sự ra đời của Thiết lập Gia đình trong watchOS 7, khách hàng của bạn có sự độc lập hơn bao giờ hết, mà không cần có iPhone đồng hành.

Nhưng những khả năng mới này mang đến cho chúng tôi, với tư cách là nhà phát triển, những thách thức mới trong cách chúng tôi nghĩ về việc giao tiếp với các ứng dụng Đồng hồ của mình.

May mắn thay, chúng tôi có rất nhiều lựa chọn tuyệt vời.

Hôm nay chúng ta sẽ nói về những lựa chọn đó và cách chúng ta chọn đúng lựa chọn cho công việc.

Tôi sẽ cung cấp cho bạn cái nhìn tổng quan về các công cụ chúng tôi có để giao tiếp dữ liệu trong các ứng dụng Watch và thảo luận về cách đánh giá cái nào sẽ là lựa chọn phù hợp cho nhiệm vụ của bạn.

Chúng ta có thể nhóm rộng rãi các công cụ thành một vài danh mục.

iCloud cho phép chúng tôi chia sẻ với tất cả các thiết bị của mình và cung cấp cho chúng tôi dung lượng lưu trữ máy chủ.

Chúng ta có thể sử dụng cái này trong các ứng dụng của mình bằng cách sử dụng Keychain với Đồng bộ hóa iCloud và CoreData với CloudKit.

Nếu chúng ta cần truyền dữ liệu giữa các thiết bị được ghép nối, chúng ta có thể sử dụng Watch Connectivity.

Để giao tiếp trực tiếp với máy chủ, chúng ta có thể sử dụng các phiên hoặc ổ cắm URL.

Nhưng trước tiên, chúng ta sẽ nói về những câu hỏi bạn có thể hỏi để chọn đúng câu hỏi.

Khi tôi nghĩ về cách tôi sẽ giao tiếp từ ứng dụng Watch của mình, tôi nghĩ về một vài điều.

Đó là loại dữ liệu gì?

Và dữ liệu bây giờ ở đâu, và tôi cần nó ở đâu?

Sự tương tác có phụ thuộc vào một ứng dụng iOS đồng hành không?

Tôi có muốn hỗ trợ Thiết lập Gia đình không?

Và khi nào dữ liệu cần phải đến đích?

Nó có thể đợi để hệ thống tối ưu hóa hiệu suất và mức sử dụng pin cho khách hàng của tôi không?

Dữ liệu sẽ thay đổi thường xuyên như thế nào?

Dựa trên câu trả lời của tôi cho những câu hỏi này, tôi có thể bắt đầu xem qua hộp công cụ của mình để đánh giá cách tạo ra giải pháp phù hợp cho nhiệm vụ truyền dữ liệu của mình.

Hãy xem chúng ta nhận được những khả năng gì từ Chuỗi khóa với Đồng bộ hóa iCloud.

Keychain cung cấp lưu trữ an toàn cho mật khẩu, khóa và các thông tin đăng nhập nhạy cảm khác.

Và với Đồng bộ hóa Chuỗi khóa iCloud, được giới thiệu trong watchOS 6.2, các mục móc khóa này có thể được đồng bộ hóa với tất cả các thiết bị của một người.

Có hai cách bạn có thể hưởng lợi từ Đồng bộ hóa iCloud trong ứng dụng của mình: bằng cách sử dụng Tự động điền Mật khẩu với các mục Tên miền được liên kết và Chuỗi khóa được chia sẻ.

Tự động điền mật khẩu cho phép bạn sử dụng đồng bộ hóa Keychain với rất ít mã.

Đầu tiên, thêm khả năng Tên miền liên kết vào mục tiêu của bạn.

Đối với ứng dụng Đồng hồ của bạn, hãy thêm khả năng vào Mục tiêu Mở rộng WatchKit.

Thêm một mục nhập thông tin xác thực web với tên miền của bạn.

Thêm tệp apple-app-site-association vào máy chủ web của bạn.

Tệp phải có thể truy cập thông qua HTTPS mà không cần chuyển hướng.

Tệp có định dạng JSON không có phần mở rộng tệp và nó nên được đặt trong thư mục ./nổi tiếng trên máy chủ của bạn.

Kiểm tra tài liệu trực tuyến cho "Hỗ trợ tên miền liên kết" để biết chi tiết đầy đủ.

Thêm các loại nội dung văn bản vào các trường văn bản của bạn và các trường bảo mật.

Các tùy chọn của bạn để tự động điền là tên người dùng, địa chỉ email, mật khẩu và mật khẩu mới.

Đối với mật khẩu mới, hệ thống sẽ nhắc người đó lưu và một bản ghi sẽ được thêm hoặc cập nhật trong Chuỗi khóa cho trang web của bạn.

Các đề xuất Tự động điền đã có sẵn kể từ watchOS 6.2 và thậm chí còn tốt hơn với trải nghiệm chỉnh sửa văn bản mới trong watchOS 8.

Để biết thêm thông tin về việc sử dụng tự động điền mật khẩu, hãy xem phiên "Tự động điền ở mọi nơi" trong ứng dụng Nhà phát triển hoặc trực tuyến.

Một cách khác để bạn có thể chia sẻ dữ liệu bằng cách sử dụng đồng bộ hóa Chuỗi khóa là chia sẻ các mục Chuỗi khóa giữa các ứng dụng của bạn.

Như chúng ta đã thảo luận, Keychain là nơi lưu trữ an toàn cho dữ liệu nhạy cảm, như mật khẩu, khóa và thông tin đăng nhập.

Bạn cũng có thể lưu trữ các bit dữ liệu được chia sẻ nhỏ khác trong Chuỗi khóa, chẳng hạn như sở thích của một người đối với màn hình khởi động, miễn là thông tin không thay đổi thường xuyên.

Dữ liệu được lưu trữ trong Chuỗi khóa sẽ được đồng bộ hóa với tất cả các thiết bị của người đó.

Hãy xem cách chúng ta có thể lưu trữ và truy xuất mã thông báo OAuth 2 trong Chuỗi khóa và chia sẻ mã thông báo đó với một nhóm ứng dụng của chúng tôi.

Đầu tiên, chúng ta cần thêm khả năng Chia sẻ Chuỗi khóa hoặc Nhóm Ứng dụng, tất cả các ứng dụng chúng ta muốn chia sẻ các mục chuỗi khóa này.

Điều này được yêu cầu để chia sẻ các mục và giúp đảm bảo tính bảo mật và quyền riêng tư của thông tin khách hàng của bạn bằng cách ngăn chặn quyền truy cập của các ứng dụng khác.

Đối với ứng dụng Đồng hồ của bạn, hãy thêm khả năng vào mục tiêu Tiện ích mở rộng Đồng hồ của bạn.

Trong ví dụ này, tôi sẽ thêm khả năng Chia sẻ Chuỗi khóa và thêm ứng dụng của mình vào Nhóm Chuỗi khóa.

Tất cả các ứng dụng của tôi sẽ chia sẻ các mục Keychain cũng cần chia sẻ nhóm này.

Bây giờ, hãy xem mã để lưu trữ mã thông báo OAuth 2 trong Chuỗi khóa.

Để lưu trữ mã thông báo, chúng tôi sẽ cập nhật mặt hàng nếu nó tồn tại và thêm nó nếu nó không tồn tại.

Tôi đã tạo một cấu trúc mã thông báo OAuth 2 để chứa dữ liệu mã thông báo, như chuỗi mã thông báo, hết hạn và làm mới mã thông báo.

Tôi đã làm cho cấu trúc mã thông báo phù hợp với mã hóa để dễ dàng lưu trữ và truy xuất.

Chúng tôi tạo ra một từ điển truy vấn.

Đây là tập hợp các thuộc tính khớp với một mục hiện có nếu chúng tôi đã lưu một thuộc tính cho máy chủ và tài khoản này.

Lưu ý thuộc tính có thể đồng bộ hóa ở đây được đặt thành "đúng".

Điều quan trọng là chúng tôi bao gồm thuộc tính này trong truy vấn của mình để chỉ ra rằng chúng tôi muốn mặt hàng của mình đồng bộ hóa với tất cả các thiết bị của khách hàng.

Chúng tôi sẽ mã hóa mã thông báo dưới dạng dữ liệu và đặt Dữ liệu đó làm giá trị cho mục Keychain của chúng tôi trong từ điển thuộc tính.

Sau đó, cập nhật mục trong Chuỗi khóa với truy vấn và thuộc tính.

Chúng tôi luôn cần kiểm tra mã kết quả được trả về từ Keychain API.

Trước tiên chúng ta sẽ kiểm tra xem Keychain có nói rằng mặt hàng đó không được tìm thấy hay không.

Nếu vậy, chúng tôi sẽ gọi một hàm khác mà chúng tôi đã viết để thêm nó vào Chuỗi khóa.

Chúng ta sẽ xem xét điều đó trong giây lát.

Nếu không, chúng tôi sẽ đảm bảo rằng không có lỗi.

Để làm điều đó, chúng tôi kiểm tra kết quả thành công.

Nếu chức năng cập nhật trả về thành công, thì mã thông báo của chúng tôi đã được cập nhật trong Chuỗi khóa.

Bây giờ, hãy nhìn vào chức năng thêm.

Để thêm mã thông báo vào Chuỗi khóa, chúng tôi sẽ thiết lập một từ điển với tất cả các thuộc tính.

Điều này bao gồm các thuộc tính mà chúng tôi đã sử dụng để tìm một mặt hàng hiện có, cộng với dữ liệu mã thông báo.

Sau đó, chúng ta sẽ gọi hàm thêm của Keychain API với các thuộc tính.

Và kiểm tra mã trả lại để đảm bảo nó thành công.

Để truy xuất thông tin mã thông báo từ Chuỗi khóa, chúng tôi sẽ thiết lập một từ điển truy vấn để tìm mục chúng tôi muốn.

Chúng tôi sẽ bao gồm cùng một bộ khóa và giá trị mà chúng tôi đã bao gồm để tìm mục trước đó trong chức năng cập nhật.

Thêm vào đó, chúng tôi bao gồm một số thuộc tính để cho API Keychain biết liệu chúng tôi có muốn các thuộc tính mục được trả về hay không (chúng tôi không) và liệu chúng tôi có muốn dữ liệu mục được trả về hay không (chúng tôi muốn).

Chức năng Keychain "sao chép phù hợp" tìm kiếm bằng cách sử dụng truy vấn của chúng tôi và điền tham chiếu mà chúng tôi đã cung cấp dưới dạng "mục".

Trước khi chúng tôi cố gắng truy cập vào mặt hàng đã truy xuất, chúng tôi sẽ kiểm tra mã trả lại để đảm bảo rằng nó đã được tìm thấy.

Sau đó, như mọi khi, chúng tôi kiểm tra mã trả lại để thành công.

Lấy từ điển đã được sao chép cho mục, lấy dữ liệu mã thông báo mà chúng tôi yêu cầu từ từ điển và giải mã dữ liệu dưới dạng loại mã thông báo OAuth 2 của chúng tôi.

Và bây giờ, chúng tôi đã lưu, cập nhật và truy xuất thành công mã thông báo OAuth 2 vào Chuỗi khóa và nó được chia sẻ với tất cả các ứng dụng trong Nhóm Chia sẻ Chuỗi khóa của chúng tôi.

Có một chức năng lưu trữ Keychain nữa mà tôi muốn chia sẻ với bạn.

Cũng giống như bất cứ nơi nào bạn lưu trữ thứ gì đó trên thiết bị của khách hàng, bạn nên loại bỏ nó khi bạn hoàn thành nó.

Chúng tôi sẽ thiết lập truy vấn của mình với các thuộc tính quen thuộc hiện nay để tìm kiếm.

Gọi hàm xóa của Keychain API với truy vấn của chúng tôi.

Và, như mọi khi, hãy kiểm tra thành công.

Trong trường hợp xóa, không tìm thấy là thành công.

Bây giờ, chúng tôi hoàn thành việc dọn dẹp sau khi hoàn thành dữ liệu.

Dịch vụ móc khóa với đồng bộ hóa chuỗi khóa iCloud là một cách tuyệt vời để ứng dụng của bạn chia sẻ các phần dữ liệu nhỏ không thay đổi thường xuyên và dữ liệu đó sẽ được đồng bộ hóa với tất cả các thiết bị của một người.

Sử dụng Associated Domains để dễ dàng thêm chức năng tự động điền mật khẩu vào ứng dụng của bạn.

Bạn cũng có thể lưu trữ và truy xuất các giá trị trực tiếp vào Chuỗi khóa và chia sẻ chúng với các ứng dụng khác của mình bằng cách sử dụng Chia sẻ Chuỗi khóa hoặc Nhóm ứng dụng.

Đồng bộ hóa Chuỗi khóa iCloud không dựa vào việc có ứng dụng đồng hành iOS và nó hỗ trợ Thiết lập Gia đình.

Các mục được đồng bộ hóa khi có thể dựa trên tính khả dụng của mạng, pin và các điều kiện hệ thống khác.

Lưu ý rằng khách hàng có thể vô hiệu hóa đồng bộ hóa Chuỗi khóa iCloud và nó không khả dụng ở tất cả các khu vực.

CoreData với CloudKit đồng bộ hóa cơ sở dữ liệu cục bộ của bạn với tất cả các thiết bị khác của khách hàng chia sẻ vùng chứa CloudKit của ứng dụng của bạn.

Tích hợp CoreData với SwiftUI đơn giản hóa việc truy cập và hiển thị dữ liệu từ cơ sở dữ liệu của bạn trong ứng dụng Watch của bạn.

Bạn có thể nhanh chóng nhận được quá nhiều dữ liệu trên Đồng hồ theo cách này nếu bạn đang phát triển một ứng dụng đa nền tảng.

Hãy suy nghĩ cẩn thận về những thông tin mà khách hàng của bạn thực sự cần trên Đồng hồ của họ.

Cân nhắc sử dụng nhiều cấu hình trong mô hình Dữ liệu cốt lõi của bạn để phân đoạn dữ liệu có ý nghĩa trong ứng dụng Đồng hồ của bạn từ dữ liệu phù hợp với ứng dụng của bạn chạy trên thiết bị có dung lượng lưu trữ và dung lượng pin cao hơn.

CloudKit và Core Data là những công cụ mạnh mẽ.

Việc tích hợp Core Data với SwiftUI giúp việc sử dụng các tính năng Core Data trong các ứng dụng của bạn dễ dàng hơn.

Bạn có thể cung cấp ngữ cảnh đối tượng được quản lý" cho Lượt xem của mình với giá trị môi trường và sử dụng trình bao bọc thuộc tính yêu cầu tìm nạp để nhận kết quả từ cơ sở dữ liệu của bạn.

Những kết quả đó có thể được sử dụng trong Danh sách SwiftUI và các chế độ xem khác.

Dữ liệu cốt lõi với CloudKit cung cấp cho chúng tôi cách chia sẻ dữ liệu có cấu trúc có thể được đồng bộ hóa với tất cả các thiết bị của một người và được sao lưu trên iCloud.

Nó không dựa vào việc có một ứng dụng iPhone đồng hành và hỗ trợ Thiết lập Gia đình.

Đồng bộ hóa các thay đổi Dữ liệu Cốt lõi xảy ra dựa trên tính khả dụng của mạng và điều kiện hệ thống.

Đừng mong đợi nó diễn ra tức thời, nhưng CloudKit sẽ xử lý việc tối ưu hóa hiệu suất của đồng bộ hóa này cho ứng dụng của bạn.

Để tìm hiểu thêm về cách sử dụng Dữ liệu cốt lõi với CloudKit trong ứng dụng của bạn, hãy xem "Xây dựng các ứng dụng chia sẻ dữ liệu thông qua CloudKit và Dữ liệu cốt lõi" và "Mang dữ liệu cốt lõi đồng thời đến Swift và SwiftUI" trong ứng dụng dành cho nhà phát triển hoặc trực tuyến.

Bạn có thể đã quen thuộc với Watch Connectivity, và bạn có thể đã sử dụng nó trước đây.

Nhưng tôi muốn cung cấp cho bạn thêm chi tiết và một số phương pháp hay nhất để giúp bạn thành công.

Watch Connectivity cho phép bạn gửi dữ liệu giữa ứng dụng Watch của mình và ứng dụng iPhone đồng hành của nó khi cả hai thiết bị đều nằm trong phạm vi Bluetooth hoặc trên cùng một mạng Wi-Fi.

Nó được sử dụng tốt nhất để tối ưu hóa trải nghiệm của khách hàng khi họ đã cài đặt cả ứng dụng Điện thoại và Đồng hồ của bạn và để chia sẻ dữ liệu chỉ khả dụng trên một thiết bị.

Ví dụ: nếu ai đó đã khởi chạy ứng dụng iPhone của bạn và đã tải xuống dữ liệu mới nhất, bạn có thể chia sẻ dữ liệu đó với ứng dụng Đồng hồ của mình để cập nhật các biến chứng của mình và cho phép ứng dụng Đồng hồ của bạn bắt đầu với cùng dữ liệu đó vào lần khởi chạy tiếp theo.

Điều này sẽ cảm thấy phản hồi nhanh hơn cho khách hàng của bạn và giảm thiểu các bản tải xuống dữ liệu trùng lặp mà ứng dụng của bạn cần thực hiện.

Watch Connectivity có một bộ tính năng đa dạng, vì vậy thật hữu ích khi biết những gì có sẵn và khi nào nên sử dụng từng tính năng.

Nhưng trước tiên, tôi muốn chia sẻ một vài mẹo để giúp bạn thành công nếu bạn quyết định rằng Watch Connectivity là công cụ phù hợp cho nhiệm vụ của bạn.

Vì Watch Connectivity là một công cụ để giao tiếp giữa hai thiết bị, nó sẽ yêu cầu chúng ta biết về một vài điều kiện tiên quyết và xử lý một số lỗi.

Đây là một số điều bạn có thể làm để đảm bảo giao tiếp Kết nối Đồng hồ của bạn hoạt động trơn tru.

Kích hoạt phiên kết nối đồng hồ của bạn càng sớm càng tốt trong vòng đời ứng dụng của bạn, tốt nhất là khi ứng dụng của bạn kết thúc khởi chạy trong ứng dụng hoặc đại diện tiện ích mở rộng của bạn.

Điều này làm cho ứng dụng của bạn có sẵn để nhận thông tin từ ứng dụng đối tác của nó càng sớm càng tốt.

Hiểu khả năng tiếp cận.

Không có giao tiếp nền nào yêu cầu ứng dụng đối tác của bạn có thể truy cập được khi bạn gửi dữ liệu.

Nhưng tin nhắn tương tác có các yêu cầu về khả năng tiếp cận và chúng ta sẽ thảo luận về chúng sau đó.

Nó sẽ giúp bạn tiết kiệm thời gian để hiểu chúng.

Tất cả các chức năng đại diện phiên kết nối đồng hồ được gọi trên một hàng đợi nối tiếp không chính.

Nếu bạn cần thực hiện bất kỳ công việc nào từ các chức năng này để cập nhật giao diện người dùng của mình, hãy đảm bảo rằng bạn thực hiện điều đó trên hàng đợi chính.

Bây giờ, hãy nói về các tính năng Kết nối Đồng hồ khác nhau và khi nào nên sử dụng từng tính năng.

Ngữ cảnh ứng dụng là một từ điển danh sách thuộc tính duy nhất được gửi đến ứng dụng đối tác trong nền, với mục tiêu có sẵn khi ứng dụng thức dậy.

Nếu bạn cập nhật ngữ cảnh ứng dụng trước khi từ điển trước đó được gửi đi, nó sẽ được thay thế bằng giá trị mới.

Bối cảnh ứng dụng rất hữu ích để cập nhật nội dung trên ứng dụng đối tác khi bạn có dữ liệu mới và dữ liệu có thể cập nhật thường xuyên.

Chuyển thông tin người dùng cũng gửi từ điển danh sách tài sản đến ứng dụng đối tác trong nền, nhưng nó hơi khác so với ngữ cảnh ứng dụng.

Thay vì là một từ điển duy nhất được thay thế mỗi khi bạn cập nhật nó, mỗi lần chuyển từ điển thông tin người dùng được xếp hàng đợi và phân phối theo thứ tự mà bạn đã xếp hàng.

Bạn cũng có thể truy cập hàng đợi để hủy chuyển khoản.

Truyền tệp tương tự như truyền thông tin người dùng và một khi bạn đã hoàn thành một cái, cái còn lại sẽ cảm thấy quen thuộc.

Các tệp được xếp hàng đợi để được gửi đến ứng dụng đối tác và được gửi khi nguồn điện và các điều kiện khác cho phép.

Bạn có thể truy cập hàng đợi để hủy chuyển khoản.

Các tệp được đặt trong hộp thư đến tài liệu cho ứng dụng nhận khi chúng được chuyển.

Mỗi tệp sẽ bị xóa khỏi hộp thư đến khi bạn quay lại từ cuộc gọi lại tệp đã nhận được trong đại diện phiên của bạn.

Đảm bảo rằng bạn di chuyển tệp hoặc nhanh chóng xử lý nó trước khi bạn quay lại từ phương pháp này.

Một điều hữu ích cần nhớ về điều này: vì cuộc gọi lại này được gọi trên hàng đợi nối tiếp không chính, nếu bạn gọi một phương thức không đồng bộ để xử lý tệp từ hộp thư đến, rất có thể bạn sẽ gặp sự cố vì tệp sẽ biến mất.

Thời gian truyền tệp dựa trên điều kiện hệ thống và tất nhiên, các tệp lớn hơn có thể mất nhiều thời gian hơn để truyền.

transferCurrentComplicationUserInfo(_:) là một trường hợp đặc biệt của chức năng truyền thông tin người dùng để gửi dữ liệu liên quan đến biến chứng đến Đồng hồ.

Nó được chuyển càng sớm càng tốt, trước khi chuyển thông tin người dùng khác, miễn là bạn có chuyển khoản phức tạp còn lại trong ngân sách của mình.

Việc chuyển khoản ngay lập tức này cho phép bạn cập nhật các biến chứng đang hoạt động cho khách hàng khi bạn cập nhật dữ liệu từ điện thoại của mình.

Bạn có thể kiểm tra ngân sách còn lại của mình và nếu bạn chuyển thông tin phức tạp hiện tại mà không có ngân sách còn lại, nó vẫn sẽ được gửi đi.

Nó sẽ chỉ sử dụng hàng đợi chuyển thông tin người dùng thông thường.

Bạn có thể sử dụng sendMessage để gửi dữ liệu đến ứng dụng đối tác của mình và nhận được phản hồi.

Cái này dành cho nhắn tin tương tác khi có thể truy cập ứng dụng đối tác của bạn.

Cho dù bạn đang gửi từ điển hay dữ liệu, hãy giữ cho tin nhắn của bạn nhỏ.

Chúng tôi cũng khuyên bạn nên chọn bao gồm trình xử lý trả lời cho các cuộc gọi sendMessage của mình.

Một câu trả lời ngắn cho phép bạn xác minh rằng ứng dụng đối tác đã nhận được tin nhắn và dữ liệu đó là chính xác.

Khi bạn bao gồm trình xử lý trả lời đó trên sendMessage của mình, hãy đảm bảo rằng bạn triển khai phiên bản của chức năng gọi lại đại diện đã nhận tin nhắn hoặc đã nhận dữ liệu trong ứng dụng đối tác bao gồm trình xử lý trả lời.

Nếu không, bạn sẽ gặp lỗi khi gửi tin nhắn.

Bây giờ chúng ta đã nghe nói về sendMessage, hãy xem lại khái niệm về khả năng tiếp cận.

Cả hai ứng dụng của bạn cần phải có thể truy cập được để gửi tin nhắn.

Bạn có thể kiểm tra thuộc tính isReachable trên phiên Kết nối Đồng hồ để xác định xem ứng dụng đối tác của bạn có thể truy cập được cho tin nhắn trực tiếp, không phải nền hay không.

Nhưng có nghĩa là có thể tiếp cận được là gì?

Cả hai thiết bị cần nằm trong phạm vi của nhau thông qua Bluetooth hoặc trên cùng một mạng Wi-Fi.

Để Tiện ích mở rộng WatchKit có thể truy cập được, nó phải chạy ở phía trước hoặc chạy ở chế độ nền với mức độ ưu tiên cao, như khi thực hiện các phiên nền dài.

Ứng dụng iOS không có yêu cầu tiền cảnh này.

Nếu bạn gửi tin nhắn từ ứng dụng Watch của mình đến ứng dụng iOS và ứng dụng iOS của bạn không ở phía trước, ứng dụng iOS của bạn sẽ được kích hoạt ở chế độ nền để nhận tin nhắn.

Điều này có nghĩa là ứng dụng iOS của bạn có thể truy cập được từ Tiện ích mở rộng đồng hồ của bạn nhiều hơn so với ngược lại.

Kết nối đồng hồ là một cách hay để cung cấp cho khách hàng của bạn trải nghiệm cảm thấy kịp thời, nhạy bén và trực quan khi họ đã cài đặt cả ứng dụng iPhone và Watch của bạn.

Vì Watch Connectivity đặc biệt giao tiếp giữa điện thoại và Đồng hồ được ghép nối, đừng sử dụng nó để hỗ trợ các ứng dụng cho Thiết lập Gia đình.

Truyền dữ liệu phụ thuộc vào tính khả dụng của thiết bị đồng hành qua Bluetooth hoặc Wi-Fi.

Giao tiếp theo thời gian thực bằng cách sử dụng sendMessage yêu cầu đối tác phải có thể truy cập được.

Hãy nhớ rằng ứng dụng đối tác của bạn sẽ không thể truy cập được nhiều lần, đặc biệt là khi bạn đang cố gắng giao tiếp với ứng dụng Đồng hồ của mình.

Chuyển nền không được giao ngay lập tức.

Hãy nghĩ về họ giống như đăng một lá thư: bạn bỏ nó vào hộp, nhưng bạn không chắc chắn chính xác khi nào nó sẽ ở đó.

Để biết thêm thông tin về Kết nối Đồng hồ, hãy xem "Giới thiệu Kết nối Đồng hồ" trong ứng dụng Nhà phát triển hoặc trực tuyến.

Bây giờ, chúng ta sẽ nói về một vài cách để giao tiếp trực tiếp với máy chủ.

Đối với hầu hết các trường hợp sử dụng, lựa chọn tốt nhất là các phiên URL.

Tùy thuộc vào sự tương tác và loại dữ liệu, bạn có thể trì hoãn giao tiếp hoặc có thể cần thực hiện ngay lập tức.

Vì vậy, chúng tôi có các cấu hình khác nhau cho các phiên URL để cho phép chúng được chạy ở chế độ nền hoặc tiền cảnh.

Hãy xem khi nào bạn nên sử dụng từng tùy chọn này.

Bạn nên sử dụng các phiên nền bất cứ khi nào có thể.

Đây có thể không phải là bản năng đầu tiên của chúng tôi với tư cách là nhà phát triển, nơi chúng tôi có thể muốn tiếp tục và lấy hoặc gửi dữ liệu ngay lập tức.

Nhưng hãy thực sự nghĩ về nó.

Các phiên tiền cảnh cần phải hoàn thành trong khi ứng dụng của bạn ở phía trước hoặc phía trước, và đối với tất cả trừ các tác vụ ngắn nhất, điều này không đủ thời gian.

Hãy suy nghĩ về trải nghiệm của khách hàng nếu nhiệm vụ giao tiếp của họ thất bại.

Vì vậy, hãy quan tâm đến khách hàng của bạn và đánh giá cẩn thận từng nhiệm vụ giao tiếp và hỏi, "Tôi có thể làm điều này trong nền không?"

Các phiên URL nền là lựa chọn đúng đắn cho bất kỳ thời điểm giao tiếp nào có thể bị trì hoãn và để truyền dữ liệu lớn.

Bạn cũng có thể gửi thông báo đẩy đến ứng dụng của mình để cho biết rằng dữ liệu mới có sẵn và bắt đầu cập nhật nền.

Thời gian chính xác của việc chuyển nền của bạn sẽ phụ thuộc vào điều kiện hệ thống.

Hãy xem qua một ví dụ về việc gửi một số dữ liệu đến máy chủ trong nền.

Ví dụ: nếu tôi có một số cài đặt cho ứng dụng của mình mà tôi muốn lưu trữ thông qua máy chủ web của mình, khi khách hàng của tôi lưu chúng, tôi có thể lưu chúng trên Đồng hồ và sau đó gửi chúng đến máy chủ ở chế độ nền.

Để làm điều đó, tôi đã tạo một lớp phiên URL nền để xử lý công việc của giao tiếp máy chủ.

Phiên URL của chúng tôi sẽ có cấu hình nền với một mã định danh duy nhất mà chúng tôi có thể sử dụng để tìm nó sau.

Đặt thuộc tính sự kiện khởi chạy gửi thành đúng để chỉ ra rằng phiên sẽ khởi chạy ứng dụng của bạn trong nền khi các tác vụ trong phiên của bạn cần được xử lý.

Lưu ý rằng nếu bạn đang chuyển một lượng lớn dữ liệu, bạn nên đặt thuộc tính isDiscretionary của cấu hình phiên URL thành true để cho phép hệ thống lên lịch chuyển vào thời điểm tối ưu cho thiết bị để có hiệu suất tốt nhất.

Trong trường hợp này, bạn cũng nên cho khách hàng của mình biết rằng việc tải xuống của họ có thể không xảy ra cho đến khi họ được kết nối với Wi-Fi và nguồn điện.

Khi chúng tôi sẵn sàng gửi dữ liệu, chúng tôi cần xếp hàng chuyển để lên lịch cho phiên nền.

Chúng tôi sẽ tạo và định cấu hình một yêu cầu URL với nội dung để cập nhật Cài đặt cho máy chủ của chúng tôi.

Sau đó, chúng tôi sẽ tạo một nhiệm vụ cho yêu cầu của chúng tôi trong phiên.

Trong ví dụ đơn giản này, tôi chỉ thêm một nhiệm vụ vào phiên của mình, nhưng bạn có thể thêm nhiều yêu cầu vào phiên của mình để đạt hiệu quả.

Đặt Ngày bắt đầu sớm nhất để bắt đầu tải xuống sau.

Lưu ý rằng hệ thống sẽ xác định thời gian thực tế mà nhiệm vụ của chúng tôi bắt đầu dựa trên ngân sách nền, mạng và điều kiện hệ thống.

Ứng dụng của bạn có thể nhận được tối đa bốn tác vụ làm mới nền mỗi giờ, nếu bạn có biến chứng trên mặt đồng hồ đang hoạt động, vì vậy hãy lên lịch các tác vụ của bạn cách nhau ít nhất 15 phút để tránh chúng bị hệ thống trì hoãn.

Tôi đang giữ phiên này trong danh sách các phiên đang tiến hành.

Điều này sẽ trở nên quan trọng sau này, khi hệ thống cho tôi biết rằng yêu cầu URL của tôi đã hoàn tất.

Gọi "tiếp tục" về nhiệm vụ thực sự bắt đầu nó, vì vậy điều quan trọng là bạn phải gọi nó là.

Cuối cùng, tôi đặt trạng thái của mình thành xếp hàng trong trường hợp có người quan sát cho phiên.

Hệ thống sẽ thông báo cho ứng dụng của chúng tôi khi yêu cầu nền của chúng tôi đã được xử lý bằng cách sử dụng tác vụ nền được gửi đến Đại diện Mở rộng của chúng tôi.

Để chúng tôi xử lý nhiệm vụ đó, chúng tôi cần tạo một lớp phù hợp với đại diện mở rộng WK và triển khai hàm xử lý (_ backgroundTasks:).

Đối với các tác vụ Làm mới Phiên URL Nền, chúng tôi sẽ cố gắng tìm phiên của mình trong danh sách các yêu cầu đang tiến hành của chúng tôi.

Nếu chúng tôi có nó, chúng tôi sẽ gọi một hàm trên phiên để thêm nhiệm vụ làm mới nền vào danh sách cho phiên, vì vậy chúng tôi có thể cho hệ thống biết rằng chúng tôi đã hoàn thành nó ngay sau khi chúng tôi xử lý xong dữ liệu.

Tôi sẽ cho bạn xem cái này trong giây lát.

Nếu chúng tôi không tìm thấy phiên trong danh sách của mình, chúng tôi cần đánh dấu nhiệm vụ là đã hoàn thành.

Điều rất quan trọng là bạn luôn đặt hoàn thành nhiệm vụ làm mới nền của mình ngay sau khi bạn hoàn thành.

Có một điều nữa chúng ta cần làm để nhận được các cuộc gọi nhiệm vụ nền của mình: chúng ta cần kết nối đại diện tiện ích mở rộng với Ứng dụng của mình.

Để làm điều này, chúng tôi sẽ sử dụng trình bao bọc thuộc tính bộ điều hợp đại diện mở rộng WK với lớp Đại diện mở rộng của chúng tôi và thêm một thuộc tính vào ứng dụng của chúng tôi.

Bây giờ, hệ thống sẽ gọi đại diện mở rộng của chúng tôi để xử lý các nhiệm vụ nền tảng của chúng tôi.

Trong đại diện mở rộng của chúng tôi, chúng tôi đã gọi hàm này để thêm nhiệm vụ nền của chúng tôi vào phiên hiện tại của chúng tôi.

Thêm nhiệm vụ này vào danh sách các nhiệm vụ nền của chúng tôi để chúng tôi có thể đánh dấu nó đã hoàn thành ngay sau khi chúng tôi xử lý xong dữ liệu URL.

Bây giờ, chúng tôi đã kết nối toàn bộ chuyến đi khứ hồi và tất cả những gì chúng tôi còn phải làm là lấy dữ liệu của mình và cho hệ thống biết rằng chúng tôi đã hoàn tất.

Đại diện tải xuống phiên URL của chúng tôi sẽ được gọi khi yêu cầu của chúng tôi hoàn tất.

Xử lý dữ liệu nhận được trong tệp từ tác vụ tải xuống.

Điều quan trọng là bạn phải di chuyển mục này vào một thư mục có thể truy cập vào ứng dụng của mình hoặc nhanh chóng xử lý dữ liệu từ tệp.

Khi nhiệm vụ này hoàn thành, tệp đã tải xuống sẽ bị xóa.

Chúng tôi đang xóa phiên này khỏi danh sách các phiên đang trong quá trình, vì chúng tôi sẽ không nhận được thêm bất kỳ tác vụ nền nào cho nó từ đại diện tiện ích mở rộng và chúng tôi đang đặt trạng thái để hoàn thành trong trường hợp có bất kỳ người quan sát nào.

Cuối cùng, chúng tôi đang hoàn thành nhiệm vụ nền tảng của mình.

Điều này cho hệ thống biết rằng chúng tôi đã hoàn thành quá trình xử lý nền của mình.

Đảm bảo rằng bạn làm điều này không chỉ là một công dân ứng dụng Watch tốt.

Nó ngăn hệ thống chấm dứt ứng dụng của bạn vì vượt quá giới hạn nền của nó.

Và thế là xong!

Tất cả chúng ta đã hoàn thành việc gửi cài đặt của mình trong nền và nhận được bất kỳ cập nhật nào.

Lưu ý rằng trong quá trình triển khai đầy đủ, bạn sẽ muốn xử lý các lỗi và thách thức xác thực, nhưng điều này cung cấp cho bạn các bước cơ bản.

Sử dụng các phiên URL tiền cảnh để liên lạc nhanh với máy chủ trong khi một người đang tương tác với ứng dụng của bạn.

Một ví dụ điển hình về điều này là nhận được danh sách tập luyện mới nhất hoặc thiền định trong ngày.

Các phiên URL tiền cảnh là một cách ít tiết kiệm năng lượng hơn để lấy và gửi dữ liệu và thời gian chờ hai phút rưỡi được thực thi.

Nhưng trong thực tế, bạn nên cố gắng nhắm mục tiêu các phiên tiền cảnh đến các tương tác nhanh hơn nhiều so với giới hạn đó.

Các phiên URL là phương pháp tốt nhất để giao tiếp với mục đích chung trực tiếp với máy chủ.

Họ không dựa vào ứng dụng iPhone đồng hành và bạn có thể sử dụng chúng với các ứng dụng hỗ trợ Thiết lập gia đình.

Sử dụng các phiên nền cho bất cứ nơi nào bạn có thể trì hoãn việc truyền dữ liệu và luôn để chuyển lượng dữ liệu lớn hơn.

Để tìm hiểu thêm về các phiên URL, hãy xem "Cập nhật các biến chứng của bạn" và "Thực thi nền được làm sáng tỏ" trong ứng dụng Nhà phát triển hoặc trực tuyến.

Ngoài các phiên URL, nếu bạn đang xây dựng một ứng dụng âm thanh phát trực tuyến, ổ cắm là một lựa chọn khác để giao tiếp trực tiếp với máy chủ.

Bạn có thể sử dụng HTTP Live Streaming hoặc Web Sockets trong các ứng dụng Watch trong bối cảnh phiên âm thanh phát trực tuyến đang hoạt động của bạn.

Để biết thêm thông tin về việc sử dụng Sockets, hãy xem phiên "Phát trực tuyến âm thanh trên watchOS 6" trong ứng dụng dành cho nhà phát triển hoặc trực tuyến.

Chúng tôi đã đề cập rất nhiều, vì vậy hãy tóm tắt cách chúng tôi có thể chọn trong số tất cả các tùy chọn mà chúng tôi đã thấy.

Đối với các phần nhỏ dữ liệu nhạy cảm có thể được đồng bộ hóa với tất cả các thiết bị của một người, hãy chọn Chuỗi khóa có Đồng bộ hóa iCloud.

Để lưu trữ cơ sở dữ liệu trong iCloud và chia sẻ với tất cả các thiết bị của một người, hãy chọn Dữ liệu cốt lõi với CloudKit.

Để tối ưu hóa trải nghiệm cho các ứng dụng iPhone và Watch đồng hành hoặc để chia sẻ dữ liệu chỉ khả dụng trên một thiết bị trong các ứng dụng đồng hành, hãy chọn Kết nối đồng hồ.

Để giao tiếp trực tiếp với máy chủ, hãy chọn phiên URL.

Để phát trực tuyến các ứng dụng âm thanh, bạn cũng có thể sử dụng ổ cắm.

Để hỗ trợ những khách hàng đang sử dụng Thiết lập Gia đình hoặc sử dụng truyền dữ liệu di động, hãy đảm bảo bạn chọn Chuỗi khóa có Đồng bộ hóa iCloud, Dữ liệu cốt lõi với CloudKit, phiên URL hoặc ổ cắm.

Hãy suy nghĩ về loại dữ liệu, nguồn và điểm đến của nó, và đối tượng khách hàng của bạn trước khi chọn giải pháp để giúp bạn chọn công cụ phù hợp cho công việc.

Và luôn kiểm tra ứng dụng của bạn trên các thiết bị, không được kết nối với trình gỡ lỗi, trước khi bạn triển khai nó để xác minh hành vi của nó trong điều kiện thực tế.

Cảm ơn bạn đã đến để tìm hiểu về tất cả các công cụ tuyệt vời mà chúng tôi có để truyền dữ liệu trong ứng dụng Đồng hồ của bạn.

Chúng tôi nóng lòng muốn xem bạn xây dựng gì tiếp theo.

[Âm nhạc].