10176

♪ ♪

Xin chào, tôi là Harry, một kỹ sư trong nhóm SwiftUI.

Chào mừng đến với "Trải nghiệm tìm kiếm thủ công trong SwiftUI."

Tìm kiếm hoàn toàn mới trong SwiftUI năm nay và tôi rất vui được chỉ cho bạn cách bắt đầu sử dụng các tính năng này.

Đôi khi, bạn muốn tìm thứ gì đó cụ thể trong một ứng dụng, nhưng nhiều ứng dụng chứa bộ sưu tập dữ liệu lớn, điều này có thể gây khó khăn cho việc tìm thấy chính xác những gì bạn đang tìm kiếm.

Cho dù đó là tìm kiếm xu hướng ứng dụng mới nhất, bài hát yêu thích tiếp theo của bạn hay podcast phù hợp cho chuyến đi làm buổi sáng của bạn, việc triển khai tìm kiếm sẽ giúp thực hiện điều đó.

Trải nghiệm tìm kiếm tốt nhất sẽ thay đổi dựa trên cấu trúc và nội dung của ứng dụng.

Nhưng, nói chung, tất cả các trải nghiệm sẽ bao gồm một trường tìm kiếm xác định truy vấn tìm kiếm.

Bây giờ, bạn có thể thực hiện tìm kiếm trực tiếp trong SwiftUI.

Hãy cùng xem nào.

Trong buổi nói chuyện này, tôi sẽ giới thiệu công cụ sửa đổi có thể tìm kiếm mới tạo thành nền tảng của tất cả các tính năng tìm kiếm trong SwiftUI.

Tôi sẽ giới thiệu cách chế độ xem điều hướng tích hợp với công cụ sửa đổi có thể tìm kiếm.

Cuối cùng, tôi sẽ đề cập đến việc mở rộng chức năng của các công cụ sửa đổi có thể tìm kiếm bằng cách thêm các đề xuất tìm kiếm.

Searchable là một công cụ sửa đổi chế độ xem mới trong SwiftUI có sẵn trên tất cả các nền tảng.

Nó cho phép bạn đánh dấu nội dung xem là có thể tìm kiếm được.

Nội dung sẽ xác định chính xác điều đó có nghĩa là gì.

Trong suốt buổi nói chuyện này, tôi sẽ khám phá các ví dụ về công cụ sửa đổi này trên mỗi nền tảng.

Bây giờ, để hiểu rõ hơn về công cụ sửa đổi này, hãy nói về thời tiết!

Một ví dụ tuyệt vời về tìm kiếm trên iOS có thể được tìm thấy trong ứng dụng Thời tiết mới.

Khi xem danh sách các thành phố của bạn, bạn có thể bắt đầu nhập vào thanh tìm kiếm, thanh này sẽ tìm kiếm một thành phố mới để thêm vào danh sách của bạn.

Để minh họa cách Weather sử dụng công cụ sửa đổi có thể tìm kiếm để cung cấp năng lượng cho tính năng này, hãy chia nhỏ cấu trúc giao diện người dùng của họ.

Thời tiết bắt đầu với chế độ xem điều hướng, cung cấp thanh điều hướng.

Thời tiết thêm một danh sách tùy chỉnh làm nội dung của chế độ xem điều hướng.

Và bên trong danh sách đó, nó thêm một ForEach trên các ô của nó.

Cuối cùng, Weather thêm công cụ sửa đổi có thể tìm kiếm vào chế độ xem điều hướng của nó.

Cốt lõi của tất cả các công cụ sửa đổi có thể tìm kiếm là cấu hình của trường tìm kiếm.

Công cụ sửa đổi có thể tìm kiếm lấy trường tìm kiếm được định cấu hình và chuyển nó xuống, thông qua môi trường, để các chế độ xem khác sử dụng theo cách tốt nhất cho từng nền tảng.

Ở đây, chế độ xem điều hướng hiểu trường tìm kiếm đó và sẽ hiển thị nó dưới dạng thanh tìm kiếm.

Nếu không có chế độ xem nào sử dụng trường tìm kiếm được định cấu hình, công cụ sửa đổi có thể tìm kiếm sẽ cung cấp triển khai mặc định để hiển thị trường tìm kiếm trên thanh công cụ.

Bây giờ, một trường tìm kiếm thường không phải là phần duy nhất của giao diện người dùng liên quan đến tìm kiếm.

Hiển thị một số dạng kết quả tìm kiếm là một mẫu thiết kế phổ biến.

Thời tiết tuân theo mô hình này và bất cứ khi nào nó nhìn thấy một truy vấn tìm kiếm không trống, nó sẽ chuyển danh sách tùy chỉnh của mình để hiển thị một danh sách khác chứa kết quả của truy vấn hiện tại.

Hãy xem cách Weather có thể sử dụng thông tin được thay đổi bởi công cụ sửa đổi có thể tìm kiếm để đạt được giao diện người dùng này.

Đây là danh sách tùy chỉnh của Weather.

Các công cụ sửa đổi có thể tìm kiếm đã thiết lập một thuộc tính môi trường mới, được gọi là Tìm kiếm, mà Weather sử dụng để tự động thay đổi chế độ xem đang được hiển thị, dựa trên việc người dùng có đang tích cực tìm kiếm hay không.

Truy vấn thời tiết thuộc tính môi trường isSearching và văn bản của tìm kiếm để hiển thị có điều kiện chế độ xem kết quả của nó.

Khi hiển thị kết quả của riêng bạn, hãy cân nhắc sử dụng lớp phủ để trạng thái giao diện người dùng chính của bạn không thay đổi sau khi người dùng quay lại từ tương tác tìm kiếm của họ.

Hãy nói thêm một chút về cách chế độ xem điều hướng tích hợp với công cụ sửa đổi có thể tìm kiếm mới.

Để làm điều đó, tôi muốn giới thiệu một ứng dụng mà tôi đã làm việc không mệt mỏi.

Tôi gọi nó là Màu sắc.

Ứng dụng này cho phép người dùng quản lý thư viện các bộ màu yêu thích của họ, được gọi là Bảng màu.

Có thể bạn muốn chơi với các loại sơn khác nhau cho căn phòng của mình, chủ đề cho ứng dụng của bạn hoặc chỉ cần nhận trợ giúp chọn màu của iMac M1 mới của bạn.

Bất kể mong muốn của bạn là gì, Colors là ứng dụng dành cho bạn.

Cấu trúc cơ bản của Màu sắc là chế độ xem điều hướng hai cột, trong đó cột đầu tiên, chế độ xem gốc, là thanh bên trên iPadOS và macOS hoặc thư mục gốc của ngăn xếp điều hướng trên các nền tảng khác.

Trong thanh bên, bạn có thể thấy thư viện bảng màu của tôi.

Trong chế độ xem chi tiết, bạn có thể thấy bảng màu hiện được chọn, cũng như cách những màu đó có thể xuất hiện với người dùng với sự khác biệt về hình ảnh.

Khi mọi người bắt đầu sử dụng ứng dụng, tôi bắt đầu nhận thấy điều gì đó.

Mọi người yêu thích màu sắc.

Họ liên tục thêm màu sắc vào thư viện của mình, nhưng khi thư viện trở nên lớn, việc tìm một bảng màu cụ thể trở nên khó khăn, vì mọi người phải cuộn qua toàn bộ thư viện của họ để tìm nó.

Tại thời điểm này, tôi đã quyết định đã đến lúc thêm chức năng tìm kiếm.

Tôi muốn tính năng này tuân theo các quy ước nền tảng để mọi người sử dụng ứng dụng của tôi hiểu ngay lập tức.

Hãy xem cách tôi có thể sử dụng công cụ sửa đổi có thể tìm kiếm để triển khai tính năng này.

Ở đây tôi có chế độ xem điều hướng mà tôi đã xây dựng như một phần của ứng dụng Màu sắc.

Để thực hiện tìm kiếm, tôi sẽ thêm công cụ sửa đổi có thể tìm kiếm vào chế độ xem điều hướng của mình.

Giống như trước đây, tôi sẽ cung cấp cho nó một ràng buộc với trạng thái hỗ trợ truy vấn tìm kiếm.

Một lần nữa, điều này sẽ được hiển thị dưới dạng thanh tìm kiếm trên iOS và iPadOS.

Khi chế độ xem điều hướng là nội dung của công cụ sửa đổi có thể tìm kiếm, nó sẽ liên kết trường tìm kiếm với một trong các cột của nó.

Nó sử dụng cột nào phụ thuộc vào số lượng cột được cung cấp cho chế độ xem điều hướng.

Vì tôi có chế độ xem điều hướng hai cột, thanh tìm kiếm được liên kết với cột thanh bên trên cả iOS và iPadOS.

Nếu bạn muốn trường tìm kiếm được liên kết với một cột khác với cột mặc định, bạn có thể đặt công cụ sửa đổi có thể tìm kiếm trên cột mong muốn của mình, giống như bạn làm với công cụ sửa đổi thanh công cụ hiện có.

Đối với ứng dụng này, tôi sẽ tiếp tục tìm kiếm trên chế độ xem điều hướng.

Cũng giống như với Thời tiết, tôi sẽ sử dụng thuộc tính môi trường isSearching để tự động hiển thị kết quả tìm kiếm của mình trên thanh bên.

Vị trí tương tự của công cụ sửa đổi có thể tìm kiếm trên macOS sẽ hiển thị trường tìm kiếm được đặt ở vị trí cuối cùng nhất của thanh công cụ, với các hành vi được mong đợi trên nền tảng đó, như tự động thu gọn khi cửa sổ co lại.

Tại đây, tôi sẽ hiển thị kết quả tìm kiếm của mình trong ngăn chi tiết của ứng dụng để có trải nghiệm điển hình hơn trên macOS.

watchOS hoạt động tương tự như iOS ở chỗ nó cũng đặt một trường tìm kiếm ở đầu chế độ xem trên thanh công cụ.

Tại đây, SwiftUI chọn cột đầu tiên để liên kết trường tìm kiếm.

Lưu ý rằng tôi đã không thay đổi nơi tôi đặt công cụ sửa đổi có thể tìm kiếm để tạo ra những hành vi khác nhau này trên các nền tảng.

Cấu trúc ứng dụng của tôi không thay đổi trên các nền tảng này và vẫn là chế độ xem điều hướng hai cột.

SwiftUI hiểu cấu trúc này và các quy ước nền tảng khác nhau, vì vậy nó đã thay mặt tôi xử lý việc triển khai chúng.

Khi tôi nhìn vào tvOS, tôi nhận ra rằng cấu trúc ứng dụng của tôi trên các nền tảng khác có thể được thực hiện phù hợp hơn.

tvOS thường hiển thị tìm kiếm dưới dạng tab trong chế độ xem tab, nhưng ứng dụng của tôi không có chế độ xem tab.

Chỉ với một vài chỉnh sửa cho ứng dụng của tôi, tôi có thể khắc phục điều đó.

Thay vì hiển thị chế độ xem điều hướng hai cột, tôi có thể tạo trải nghiệm tvOS điển hình hơn bằng cách hiển thị chế độ xem điều hướng một cột với chế độ xem tab làm nội dung của chế độ xem điều hướng.

Trong chế độ xem tab của tôi, tôi sẽ đặt chế độ xem thanh bên hiện có và thêm tab tìm kiếm mới.

Tab tìm kiếm đại diện cho chế độ xem trình giữ chỗ sẽ hiển thị khi ai đó lần đầu tiên điều hướng đến tab đó.

Cuối cùng, thay vì gói chế độ xem điều hướng, tôi sẽ di chuyển công cụ sửa đổi có thể tìm kiếm để gói tab tìm kiếm của mình.

Khi truy vấn tìm kiếm không trống đã được nhập, tôi sẽ chuyển đổi chế độ xem của mình để hiển thị kết quả tìm kiếm của mình.

Bây giờ tôi đã thêm chức năng tìm kiếm vào từng nền tảng.

Nhờ tính chất khai báo của SwiftUI, nơi cấu trúc điều hướng của ứng dụng của tôi vẫn nhất quán, tôi có thể dựa vào SwiftUI và để việc triển khai công cụ sửa đổi có thể tìm kiếm chọn giao diện thích hợp cho cấu trúc điều hướng cụ thể đó.

Trên tvOS, nơi cấu trúc ứng dụng của tôi thay đổi, tôi đã lấy những gì tôi đã học được về công cụ sửa đổi có thể tìm kiếm và áp dụng nó cho cấu trúc khác.

Chỉ những gì tôi định nghĩa là "có thể tìm kiếm" mới thay đổi với cấu trúc đó.

Bây giờ bạn đã hiểu về công cụ sửa đổi có thể tìm kiếm, hãy chuyển sang chủ đề cuối cùng của chúng tôi: đề xuất tìm kiếm.

Sau khi sử dụng tìm kiếm trong ứng dụng của tôi, một vài người dùng đã báo cáo rằng mặc dù họ thực sự thích chức năng tìm kiếm mới cung cấp, nhưng đôi khi họ không biết những gì họ có thể tìm kiếm.

Nhiều ứng dụng sử dụng các đề xuất tìm kiếm để giúp hướng dẫn mọi người đến loại truy vấn tìm kiếm mà họ có thể cung cấp.

Những đề xuất này đại diện cho các truy vấn tìm kiếm đã hoàn thành có thể được trình bày trong menu, như trên macOS, trong danh sách, như trên iOS hoặc dưới dạng nút trình bày danh sách, như trên watchOS.

Các đề xuất cung cấp cho mọi người ý tưởng về các loại thứ họ có thể tìm kiếm.

SwiftUI cung cấp một cách dễ dàng để thêm các đề xuất tìm kiếm vào ứng dụng của bạn.

Hãy cùng xem nào.

Nhìn vào ứng dụng của tôi, bạn có thể thấy rằng tôi đã định cấu hình một công cụ sửa đổi có thể tìm kiếm bằng văn bản.

Các công cụ sửa đổi có thể tìm kiếm cung cấp một tham số tùy chọn, được gọi là đề xuất, mà tôi có thể bắt đầu bao gồm.

Đối với tham số đề xuất, tôi sẽ cung cấp một cái nhìn.

Đây có thể chỉ là một vài nút tĩnh hoặc, nhiều khả năng, nó sẽ là một ForEach trên một tập hợp các đề xuất động đến từ cơ sở dữ liệu ứng dụng của tôi hoặc từ một máy chủ.

SwiftUI xem xét chế độ xem này và sẽ trình bày nó dựa trên việc có bất kỳ đề xuất nào để hiển thị hay không.

Ví dụ, watchOS sẽ hiển thị một biểu tượng trong trường tìm kiếm của nó khi bạn cung cấp các đề xuất không trống.

Một mẫu phổ biến ở đây có thể là cung cấp ForEach các nút, khi được tương tác, cập nhật ràng buộc văn bản được cung cấp cho công cụ sửa đổi có thể tìm kiếm với giá trị văn bản của đề xuất tìm kiếm.

Trên thực tế, chúng tôi hy vọng mô hình này phổ biến đến mức chúng tôi đã thêm một công cụ sửa đổi searchCompletion thực hiện điều này.

Bạn có thể sử dụng công cụ sửa đổi searchCompletion với các chế độ xem không tương tác.

Nó sẽ chuyển đổi chế độ xem đó thành một nút cập nhật văn bản tìm kiếm và loại bỏ đề xuất hiện được trình bày.

Nếu bạn đang tạo một ứng dụng mà trước tiên người dùng tương tác với các đề xuất để sau đó tìm nạp một bộ kết quả tìm kiếm hoàn chỉnh dựa trên đề xuất đó, hãy cân nhắc sử dụng công cụ sửa đổi onSubmit mới để biết khi nào cần tìm nạp kết quả tìm kiếm của bạn.

Chuyển giá trị tìm kiếm cho công cụ sửa đổi onSubmit và việc đóng cửa bạn cung cấp sẽ được gọi bất cứ khi nào người dùng gửi truy vấn tìm kiếm của họ.

Điều này thường xảy ra khi họ chọn một gợi ý tìm kiếm hoặc nhấn Enter trên bàn phím phần cứng.

Bạn cũng có thể sử dụng công cụ sửa đổi onSubmit mới kết hợp với các trường văn bản hoặc các trường bảo mật cho các bài gửi không liên quan đến tìm kiếm.

Sử dụng tham số đề xuất cùng với công cụ sửa đổi hoàn thành tìm kiếm cung cấp một cách dễ dàng để thêm chức năng đề xuất tìm kiếm mạnh mẽ vào ứng dụng của bạn.

Tôi hy vọng bạn thích một chuyến tham quan ngắn gọn về một số chức năng tìm kiếm mà SwiftUI hiện đang cung cấp.

Tóm lại, một công cụ sửa đổi có thể tìm kiếm cho phép bạn mô tả nội dung chế độ xem là có thể tìm kiếm được.

Chế độ xem điều hướng tích hợp với công cụ sửa đổi có thể tìm kiếm để cung cấp trải nghiệm phù hợp với nền tảng dựa trên nội dung của chế độ xem điều hướng.

Sử dụng thuộc tính isSearching của môi trường để tự động điều chỉnh giao diện người dùng của ứng dụng của bạn khi người dùng đang tìm kiếm.

Sử dụng công cụ sửa đổi hoàn thành tìm kiếm và tham số đề xuất của công cụ sửa đổi có thể tìm kiếm để thêm đề xuất tìm kiếm vào ứng dụng của bạn.

Bây giờ, hãy ra ngoài đó và bắt đầu thêm tìm kiếm vào tất cả các ứng dụng SwiftUI của bạn và có một WW tuyệt vời.

[Nhạc lạc quan].