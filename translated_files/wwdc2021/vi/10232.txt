10232

Xin chào mọi người! Tên tôi là Ayaka, và tôi rất vui khi được ở đây để giới thiệu cho bạn các phím tắt cho Mac.

Trước tiên, tôi muốn bắt đầu với tổng quan nhanh về Phím tắt cho Mac và một số bản cập nhật mới thú vị khác mà chúng tôi sẽ đưa trong năm nay cho Phím tắt.

Phím tắt cho phép mọi người tự động hóa các tác vụ lặp đi lặp lại và kết nối chức năng với nhau từ các ứng dụng khác nhau để giải quyết vấn đề.

Nó cho phép bạn sáng tạo với cách bạn sử dụng công nghệ của mình.

Và Phím tắt cho Mac sẽ làm cho tự động hóa trở nên thú vị và dễ tiếp cận hơn bao giờ hết.

Khi bạn mở ứng dụng lần đầu tiên, bạn sẽ thấy tất cả các phím tắt đã được đồng bộ hóa từ iPhone của mình.

Ứng dụng cũng bao gồm Thư viện Phím tắt, nơi bạn có thể khám phá các phím tắt mới đã sẵn sàng để sử dụng, bao gồm các phím tắt dành riêng cho Mac hoàn toàn mới.

Và nếu bạn muốn tạo các phím tắt của riêng mình, bạn cũng có thể sử dụng Trình chỉnh sửa phím tắt, được thiết kế lại từ đầu để cảm thấy như ở nhà trên Mac.

Nhân tiện, chúng tôi đã viết gần như toàn bộ ứng dụng Mac trong SwiftUI, cho phép chúng tôi duy trì cơ sở mã thống nhất giữa các ứng dụng iOS và Mac trong khi cho phép chúng tôi điều chỉnh chi tiết cho từng nền tảng.

Giống như trên iOS, bất kỳ ứng dụng nào trên Mac đều có thể cung cấp các hành động cho Phím tắt.

Trong phiên này, chúng tôi sẽ đề cập đến cách các Phím tắt hỗ trợ trong ứng dụng của bạn có thể kích hoạt quy trình làm việc mạnh mẽ trên macOS, cho dù bạn đang phát triển ứng dụng iOS, ứng dụng Mac gốc hay ứng dụng được xây dựng bằng Mac Catalyst.

Chúng tôi cũng sẽ đề cập đến cách Phím tắt phù hợp với bức tranh lớn hơn về tự động hóa Mac, bao gồm các công cụ hiện có mà chúng tôi biết và yêu thích như AppleScript và Automator.

Năm nay, chúng tôi cũng đã thêm hai loại tự động hóa mới cho Tiêu điểm và Nhận dạng âm thanh, cùng với một bộ hành động hoàn toàn mới cho phép bạn quản lý các cửa sổ và tệp của mình, cộng với nhiều loại khác, mà chúng tôi sẽ nêu bật sau.

Chúng tôi cũng sẽ đề cập đến cách ứng dụng của bạn có thể cung cấp các hành động tùy chỉnh cho mọi người để tạo các phím tắt mạnh mẽ.

Nhân tiện, nếu ứng dụng của bạn tích hợp với các nhà cung cấp tệp, các hành động Tệp mới này sẽ tự động hoạt động với các tệp mà ứng dụng của bạn cung cấp.

Và, nếu bạn có một ứng dụng áp dụng ý định tin nhắn SiriKit hiện có, bây giờ chúng tôi sẽ tự động hiển thị khả năng này thông qua hành động Gửi tin nhắn tùy chỉnh từ ứng dụng của bạn.

Chúng tôi cũng có một số cập nhật mới thú vị cho Chia sẻ và chúng tôi biết các nhà phát triển thích xây dựng và chia sẻ các phím tắt.

Năm nay, chúng tôi đang làm cho Shortcuts dễ phân phối hơn nhiều.

Chúng tôi cũng có một định dạng tệp mới cho phép bạn phân phối Phím tắt dưới dạng tệp.

Và chúng tôi đã bật tính năng chia sẻ riêng tư, điều này rất hữu ích cho việc chia sẻ Phím tắt với đồng nghiệp của bạn.

Hãy cùng xem nào.

Giờ đây, bất kỳ ai cũng có thể tải xuống Phím tắt mà không cần phải bật bất kỳ cài đặt đặc biệt nào.

Điều này có nghĩa là bạn có thể phân phối các Phím tắt của riêng mình trên trang web hoặc trong ứng dụng của mình.

Ví dụ, giả sử, bạn muốn cung cấp cho mọi người một Phím tắt tuyệt vời sử dụng các hành động từ ứng dụng của bạn.

Bây giờ, nếu bạn xây dựng Phím tắt đó và chia sẻ nó lên iCloud, Apple sẽ công chứng Phím tắt và biến nó thành một liên kết mà bạn có thể giới thiệu trong ứng dụng hoặc trang web của mình và giúp mọi người dễ dàng tải xuống.

Chúng tôi cũng đang giữ cho mọi người kiểm soát dữ liệu của họ bằng cách trình bày các lời nhắc cấp phép cụ thể hơn khi họ tải xuống Phím tắt chuyển dữ liệu vào ứng dụng của bạn như một bức ảnh từ thư viện của họ.

Và còn nữa.

Các phím tắt bây giờ cũng có thể được chia sẻ dưới dạng tệp, điều này rất hữu ích nếu bạn cần phân phối Phím tắt bên ngoài iCloud.

Và cũng giống như các liên kết iCloud, các tệp Phím tắt được Apple công chứng để đảm bảo chúng an toàn.

Cuối cùng nhưng không kém phần quan trọng, có một chế độ mới để chia sẻ Phím tắt một cách riêng tư, mà không cần tải lên iCloud, mà bạn có thể sử dụng để chia sẻ với danh bạ hoặc để lưu các bản sao lưu cá nhân.

Các tệp phím tắt được ký với danh tính của người đã gửi chúng.

Nếu bạn cần ký lại Phím tắt, bạn có thể sử dụng công cụ dòng lệnh Phím tắt mới.

Vì vậy, đó là tất cả những cập nhật mới thú vị cho Phím tắt trong năm nay.

Bây giờ chúng ta hãy xem các Phím tắt phù hợp với các công nghệ tự động hóa Mac hiện có của chúng ta như thế nào.

Mac có một lịch sử lâu dài về hỗ trợ sâu sắc cho Tự động hóa, bao gồm AppleScript, Shell Scripting và Automator.

Chúng tôi rất vui mừng được chia sẻ rằng Shortcuts có hỗ trợ đầy đủ cho AppleScripts và Shell Scripting.

Chúng tôi có các hành động mới, được tích hợp ngay trong Phím tắt, cho phép bạn viết và chạy các tập lệnh trực tiếp bên trong trình chỉnh sửa Phím tắt.

Tiếp theo, chúng ta hãy xem xét Automator.

Automator là một công cụ tự động hóa hiện có trên Mac cho phép bạn tạo quy trình làm việc để tự động hóa các tác vụ lặp đi lặp lại.

Phím tắt là tương lai của tự động hóa Mac.

Nhưng chúng tôi vẫn quan tâm sâu sắc đến Automator và tất cả những ai dựa vào nó.

Để làm cho quá trình chuyển đổi từ Automator sang Shortcuts suôn sẻ nhất có thể, chúng tôi đã xây dựng một công cụ di chuyển có thể chuyển đổi hầu hết các quy trình làm việc của Automator thành Shortcuts.

Ví dụ: nếu bạn có một quy trình làm việc tuyệt vời tạo hình ảnh từ các tài liệu PDF được chọn trong Finder, Phím tắt có thể nhập nó và biến mỗi hành động Automator thành một hoặc nhiều hành động Phím tắt.

Tất cả những gì bạn phải làm là mở tệp quy trình làm việc trong ứng dụng Phím tắt bằng cách kéo nó vào ứng dụng hoặc bằng cách sử dụng menu nhấp chuột phải, và thế là xong!

Quy trình làm việc của bạn được chuyển thành một Phím tắt.

Để kích hoạt trình di chuyển, chúng tôi đã thêm tất cả các hành động Tự động phổ biến nhất vào Phím tắt, các hành động chạy Tập lệnh Shell và AppleScripts, quản lý tệp của bạn và hơn thế nữa.

Và, tất nhiên, tất cả những hành động này đều được hỗ trợ bởi người di chuyển của chúng tôi.

Bây giờ, hãy nói về cách ứng dụng của bạn phù hợp với Phím tắt và giá trị mà nó có thể tạo ra cho khách hàng.

Cách chính mà ứng dụng của bạn có thể tích hợp với Phím tắt là hiển thị khả năng của nó thông qua "hành động".

Bằng cách hiển thị các hành động cho Phím tắt, mọi người có thể sử dụng chức năng ứng dụng của bạn nhanh hơn, tạo quy trình làm việc mạnh mẽ bằng ứng dụng của bạn và cuối cùng nhưng không kém phần quan trọng, sử dụng ứng dụng của bạn kết hợp với các ứng dụng khác.

Chúng ta hãy xem xét kỹ hơn những thứ này.

Có rất nhiều nơi trong macOS mà mọi người có thể chạy các phím tắt của họ.

Nếu bạn hiển thị một hành động từ ứng dụng của mình, đột nhiên, mọi người sẽ có thể sử dụng nó từ chính ứng dụng Phím tắt, thanh menu Phím tắt, bằng cách nhập phím tắt, bằng cách tìm kiếm trong Spotlight và hơn thế nữa.

Vì vậy, bạn đang mở cửa cho mọi người sử dụng các tính năng của mình nhanh hơn và ở nhiều nơi hơn bao giờ hết.

Và trên hết, các hành động của ứng dụng của bạn có thể được sử dụng như một phần của các Phím tắt mạnh mẽ, nhiều bước.

Giả sử bạn tạo một ứng dụng việc cần làm cho phép mọi người quản lý nhiệm vụ của họ.

Nếu bạn hiển thị khả năng của ứng dụng dưới dạng hành động, đột nhiên, mọi người có thể sử dụng những hành động đó để tạo quy trình làm việc mạnh mẽ.

Ví dụ: tôi có thể tạo một Phím tắt tìm tất cả những việc cần làm của tôi đến hạn vào ngày mai, đặt mức độ ưu tiên thành cao và hiển thị chúng cho tôi trong một danh sách, tất cả chỉ bằng một cú nhấp chuột.

Bởi vì tất cả các cách khác nhau mà bạn có thể kết nối các hành động lại với nhau, chỉ bằng cách hiển thị một vài hành động, bạn có thể kích hoạt hàng nghìn trường hợp sử dụng mới cho chức năng của ứng dụng của mình.

Bằng cách hiển thị các hành động từ ứng dụng của bạn, bạn cũng có thể cho phép mọi người sử dụng chức năng của ứng dụng kết hợp với các ứng dụng khác.

Ví dụ: nếu bạn tạo một ứng dụng chỉnh sửa hình ảnh và hiển thị một hành động để áp dụng các bộ lọc hình ảnh tùy chỉnh của ứng dụng của mình, đột nhiên, mọi người có thể sử dụng hành động đó để tạo quy trình làm việc như thế này cho phép tôi chọn ảnh, áp dụng bộ lọc hình ảnh và đăng nó lên phương tiện truyền thông xã hội, tất

Vì vậy, đó chỉ là một vài ví dụ về cách các hành động phơi bày có thể tăng cường những gì mọi người có thể làm với ứng dụng của bạn.

Hãy chắc chắn kiểm tra phiên bao gồm thiết kế các hành động tuyệt vời để tìm hiểu thêm về loại hành động bạn có thể cung cấp để trao quyền cho mọi người bằng ứng dụng của mình.

Tôi sẽ giao nó cho Ian ngay bây giờ, người sẽ chỉ cho bạn cách thực sự xây dựng những hành động này.

Xin chào, tôi là Ian, và hôm nay tôi sẽ chỉ cho bạn cách xây dựng các hành động Phím tắt cho các ứng dụng Mac của bạn.

Sau đó, tôi sẽ đề cập đến một số cân nhắc đặc biệt mà bạn nên ghi nhớ cho sự tích hợp của mình.

Hãy bắt đầu với việc xây dựng các hành động.

Cũng giống như trên iOS, các hành động cho Phím tắt được xây dựng bằng cách sử dụng khung Ý định, còn được gọi là SiriKit.

Đối với phiên này, tôi sẽ giả vờ rằng tôi đang phát triển một ứng dụng quản lý nhiệm vụ hợp tác cho phép mọi người theo dõi danh sách các nhiệm vụ mà họ cần làm, mỗi nhiệm vụ có ngày đáo hạn riêng và chia sẻ những nhiệm vụ đó với những người khác.

Điều thực sự quan trọng đối với mọi người là có thể sử dụng chức năng ứng dụng của tôi từ mọi nơi trên máy Mac.

Bằng cách tích hợp với Phím tắt, tôi có thể cho phép người dùng của mình xây dựng Phím tắt nhiều bước liên quan đến các tác vụ trong ứng dụng của tôi.

Nhìn vào ứng dụng, loại nội dung chính mà người dùng tương tác là một nhiệm vụ.

Mỗi nhiệm vụ có một vài thuộc tính quan trọng.

Đầu tiên, có tiêu đề, đó là một số văn bản mô tả những gì cần phải làm.

Nhiệm vụ cũng có ngày đáo hạn và liên kết để chia sẻ nhiệm vụ với những người khác.

Có một loạt các thao tác bạn có thể thực hiện liên quan đến các tác vụ trong ứng dụng, mà chúng ta có thể coi là động từ.

Bạn có thể thêm các nhiệm vụ mới, chỉnh sửa hoặc xóa các nhiệm vụ hiện có, nhận các nhiệm vụ phù hợp với một tiêu chí nhất định và tất nhiên, ứng dụng có thể hiển thị một nhiệm vụ cụ thể cho bạn.

Vì vậy, đối với mỗi động từ đó, tôi sẽ tạo ra các hành động.

Những điều này sẽ tạo thành các hoạt động nguyên thủy mà người dùng có thể gọi và những hành động này được thiết kế để mọi người có thể sử dụng chúng cùng nhau.

Ví dụ, bạn có thể nhận được một nhiệm vụ, và sau đó xóa nó, bằng cách ghép hai nhiệm vụ đó lại với nhau.

Chỉ với Create Task, ai đó có thể tạo một quy trình làm việc tự động lấy văn bản đã chọn từ Ghi chú, viết hoa văn bản nếu cần và yêu cầu người dùng nhập ngày đáo hạn.

Sau đó, phím tắt có thể chuyển văn bản và ngày đến hạn đó vào hành động Tạo Nhiệm vụ, điều này sẽ cung cấp ý định tạo tác vụ cho ứng dụng của tôi.

Khi nhiệm vụ đã được tạo trong ứng dụng của tôi, ý định của tôi sẽ trả lại nhiệm vụ, bao gồm URL chia sẻ và Phím tắt có thể gửi liên kết đó cho ai đó trong tin nhắn.

Bây giờ, đó chỉ là một ví dụ.

Bởi vì có rất nhiều hành động khác nhau trong Phím tắt, mọi người có thể sử dụng hành động Tạo Nhiệm vụ theo những cách gần như vô hạn.

Bây giờ tôi đã biết ứng dụng sẽ phơi bày những hành động nào, tôi sẽ bắt đầu triển khai chúng.

Bước đầu tiên của việc triển khai là tạo một tệp định nghĩa ý định cho ứng dụng của bạn.

Thêm tệp này vào dự án Xcode của bạn và nó sẽ biên dịch cùng với mã nguồn của bạn.

Đối với bài thuyết trình này, tôi có một ứng dụng SwiftUI khá cơ bản cho Mac.

Tuy nhiên, bất kể bạn sử dụng khung giao diện người dùng nào, quá trình thêm ý định sẽ rất giống nhau.

Đầu tiên, tôi sẽ tạo một tệp định nghĩa ý định.

Trong ngăn mẫu, tôi sẽ tìm kiếm định nghĩa ý định.

Tên mặc định là ổn.

Đảm bảo thêm nó vào mục tiêu ứng dụng để nó biên dịch.

Đây là tệp định nghĩa ý định mới, trống rỗng.

Bên trong tệp, tôi sẽ cần xác định từng ý định mà ứng dụng thực hiện, cũng như các loại khác được sử dụng, như nhiệm vụ, trong trường hợp này.

Ứng dụng này sẽ có một số ý định, mỗi ý định tham chiếu đến loại nhiệm vụ này, vì vậy tôi sẽ bắt đầu bằng cách xác định loại nhiệm vụ của chúng tôi.

Để làm điều đó, hãy nhấp vào nút + ở phía dưới bên trái và chọn "Loại mới".

Mỗi loại sẽ tự động có các thuộc tính định danh và displayString.

Thuộc tính displayString sẽ hoạt động cho tiêu đề của nhiệm vụ, nhưng chúng tôi sẽ cần thêm nhiều thuộc tính hơn vào loại cho ngày đáo hạn và liên kết chia sẻ.

Đầu tiên, tôi sẽ thêm thuộc tính ngày đáo hạn, xác định khi nào nhiệm vụ phải được hoàn thành.

Tôi sẽ chọn loại Thành phần Ngày vì loại này sẽ đại diện cho ngày và giờ.

Tôi cũng sẽ thêm URL, đó là một liên kết đến nhiệm vụ có thể được chia sẻ với những người khác.

Bây giờ nhiệm vụ đầu tiên đã hoàn thành, không có ý định chơi chữ, tôi sẽ tiếp tục và xác định một ý định.

Đây sẽ là mục đích cho phép bạn tạo ra một nhiệm vụ.

Tôi sẽ đặt tên cho nó, "Tạo nhiệm vụ" và thay đổi danh mục thành Tạo.

Tôi cũng sẽ viết một mô tả ngắn, mô tả ý định làm gì.

Người dùng sẽ thấy điều này khi họ xem qua danh sách các hành động mà ứng dụng thực hiện.

Tiếp theo, tôi sẽ xác định các thông số cho ý định.

Hãy nghĩ về ý định giống như một hàm và các tham số là các đối số phải được truyền vào để hàm thực hiện công việc của nó.

Để tạo một nhiệm vụ mới, ứng dụng của tôi sẽ cần biết tiêu đề và ngày đến hạn, vì vậy tôi sẽ tạo một tham số cho từng tác vụ đó.

Liên kết chia sẻ sẽ không cần phải được thu thập trước, vì ứng dụng sẽ tạo ra một liên kết khi nhiệm vụ được thực hiện.

Hãy bắt đầu bằng cách thêm một tham số cho tiêu đề.

Chúng tôi sẽ chọn Chuỗi làm loại.

Mỗi loại tham số có một số tùy chọn cấu hình được liên kết với nó.

Bạn có thể chỉ định một giá trị mặc định, nếu điều đó có ý nghĩa.

Nhưng đối với trường hợp này, tôi sẽ chỉ để nó như một chuỗi trống.

Tiếp theo, tôi sẽ thêm tham số ngày đến hạn, với loại Thành phần Ngày.

Và tôi sẽ thêm lời nhắc ở đây, vì vậy nếu người dùng không nhập ngày trước thời hạn, ứng dụng có thể yêu cầu họ cho một ngày trong thời gian chạy.

Bây giờ cả hai tham số đã được xác định, chúng ta gần như đã hoàn thành.

Cuối cùng, tôi cần cuộn xuống phần ứng dụng Phím tắt và điền thêm một vài thứ nữa.

Đầu tiên, tôi sẽ chỉ định một tham số đầu vào.

Vì người dùng thường sẽ lấy văn bản từ một nơi khác và chuyển nó vào hành động của chúng tôi, tôi sẽ chọn tham số tiêu đề làm đầu vào.

Điều này sẽ cải thiện trải nghiệm khi xây dựng phím tắt, vì vậy nếu người dùng đã có văn bản từ hành động trước đó trong phím tắt của họ, nó sẽ được điền tự động cho họ khi họ thêm hành động của chúng tôi.

Điều cuối cùng tôi cần làm là xác định một bản tóm tắt.

Chuỗi này được hiển thị cho người dùng khi họ xem hành động này trong một phím tắt.

Tôi sẽ gọi nó là "Tạo nhiệm vụ với ngày đáo hạn."

Cả hai thông số của chúng tôi đều được yêu cầu để tạo ra một nhiệm vụ, vì vậy tôi sẽ đưa cả hai thông số đó vào bản tóm tắt, vì vậy chúng luôn hiển thị khi bạn nhìn vào hành động.

Nếu bạn có nhiều thông số hơn mà bạn không muốn đưa vào bản tóm tắt, vui lòng bỏ chúng ra ngoài.

Nếu bạn làm điều này, người dùng sẽ có thể mở rộng hành động và chỉnh sửa chúng.

Khi bạn đã xác định được ý định, Xcode sẽ tạo ra các lớp và giao thức để bạn sử dụng trong quá trình triển khai của mình.

Bây giờ, tôi sẽ xây dựng ứng dụng.

Điều này sẽ đảm bảo không có vấn đề gì với định nghĩa ý định trước khi chúng tôi tiếp tục.

Trong nhật ký xây dựng, bây giờ tôi thấy một số mã mới đang được xây dựng.

Các tệp nguồn này được tạo bởi Xcode dựa trên những gì đã được đưa vào định nghĩa ý định.

Mã nguồn được tạo Xcode cho loại Nhiệm vụ, cũng như CreateTaskIntent.

Những loại mới này hiện có thể được sử dụng trong cơ sở mã của ứng dụng của chúng tôi.

Ngoài ra, bây giờ ý định đã được xác định, tôi có thể khởi chạy ứng dụng Phím tắt và tạo một phím tắt mới và tìm kiếm hành động Tạo Tác vụ mới.

Nó sẽ không hoạt động, vì tôi chưa viết bất kỳ mã nào.

Tiếp theo, ứng dụng sẽ cần gửi và xử lý các ý định đến.

Mã này sẽ chạy khi ai đó chạy hành động thông qua Phím tắt hoặc Siri.

Các ứng dụng cần quyết định quy trình nào sẽ xử lý ý định của họ và có hai lựa chọn.

Đầu tiên, xử lý chúng trong ứng dụng, hoặc thứ hai, xây dựng một phần mở rộng ý định riêng biệt.

Xử lý ý định trong ứng dụng cho phép một ứng dụng thao tác trạng thái của nó để đáp ứng với các ý định đến được gửi đến đại diện ứng dụng.

Hầu hết các ứng dụng nên bắt đầu với điều này và chuyển sang phần mở rộng ý định, nếu cần thiết.

Phần mở rộng ý định là một quy trình nhẹ, độc lập có thể xử lý ý định thay mặt cho một ứng dụng.

Vì mỗi khi một ý định được chạy, một quy trình cần được khởi chạy, việc xây dựng một tiện ích mở rộng ý định có thể giúp hiệu quả nhất có thể, vì bản thân ứng dụng sẽ không phải khởi chạy.

Các ứng dụng và tiện ích mở rộng ý định sẽ được yêu cầu khởi tạo và trả về một đối tượng xử lý ý định cho mỗi ý định đến.

Hãy xem xét các API bạn nên triển khai để làm điều này.

Để xử lý ý định trong ứng dụng, có các phương thức AppDelegate cho phép bạn trả lại trình xử lý ý định của mình.

Trong macOS Monterey, API này hiện cũng có sẵn cho NSApplicationDelegate.

Đối với các phần mở rộng ý định, các lớp con của INExtension có thể ghi đè lên phương thức handlerForIntent.

Để biết thêm thông tin về sự khác biệt giữa xử lý ý định trong ứng dụng và phần mở rộng ý định, hãy xem phiên "Trao quyền cho ý định của bạn" từ WWDC 2020.

Bây giờ, tôi sẽ vào ứng dụng và thực hiện xử lý ý định trong ứng dụng.

Điều đầu tiên tôi cần làm là thêm CreateTaskIntent làm ý định được hỗ trợ cho ứng dụng.

Điều này cho hệ thống biết rằng ý định này nên được chuyển đến đại diện ứng dụng.

Tiếp theo, đi đến mã nguồn ứng dụng chính.

Đầu tiên, tôi sẽ tạo một đại diện ứng dụng cho ứng dụng.

Vì điều này đang sử dụng vòng đời ứng dụng SwiftUI, tôi cũng sẽ cần tạo một bộ điều hợp đại diện để kết nối đối tượng với SwiftUI.

Để nhận ý định, hãy nhập khung ý định và triển khai phương thức handlerForIntent.

Bây giờ đã có một phương thức điều phối, bước tiếp theo là triển khai trình xử lý cho ý định.

Đối với ví dụ này, tôi sẽ tạo một lớp mới để xử lý ý định và đây có thể là bất kỳ đối tượng nào trong ứng dụng của bạn.

Trình xử lý ý định phải tuân thủ giao thức được tạo cho ý định này kết thúc bằng từ "Xử lý".

Đối với mục đích Tạo Nhiệm vụ, nó được đặt tên là CreateTaskIntentHandling.

Sau đó, tôi sẽ cập nhật phương thức handlerForIntent để trả về một đối tượng IntentHandler mới khi ý định là CreateTaskIntent.

Xcode sẽ cho bạn biết phương pháp nào bạn cần triển khai.

Các giao thức xử lý ý định có thể chứa bốn loại phương pháp khác nhau: giải quyết, cung cấp các tùy chọn, xác nhận và xử lý.

Một phương pháp giải quyết sẽ được tạo ra cho mỗi tham số của bạn.

Đây sẽ là cơ hội để bạn kiểm tra xem tham số có hợp lệ hay không và cho hệ thống biết phải làm gì nếu không.

Đối với mục đích này, có hai phương pháp giải quyết, một cho tiêu đề và một cho ngày đáo hạn.

Đối với tham số tiêu đề, ứng dụng cần đảm bảo giá trị không bằng không và không trống.

Nếu tiêu đề trống, nó sẽ trả về needsValue, yêu cầu hệ thống nhắc người dùng nhập giá trị.

Đối với tham số ngày đến hạn, một cái gì đó tương tự được triển khai trong đó ngày đến hạn được xác thực để đảm bảo rằng nó không phải là số không.

Nhìn vào các yêu cầu của ứng dụng về ngày đến hạn, phương pháp giải quyết cũng cần đảm bảo rằng tất cả các ngày đến hạn đều trong tương lai và hiển thị lỗi cho người dùng nếu ngày đó là trong quá khứ.

Để làm điều này, tôi sẽ quay lại tệp định nghĩa ý định của chúng tôi và thêm lỗi xác thực tùy chỉnh.

Tôi sẽ cung cấp cho nó một mã, invalidDate và một thông báo lỗi nói rằng ngày đáo hạn phải trong tương lai.

Bây giờ, ứng dụng có thể trả về kết quả không được hỗ trợ với lỗi xác thực tùy chỉnh mà tôi vừa thêm, điều này sẽ hiển thị thông báo lỗi về ngày không hợp lệ.

Một loại phương pháp khác là cung cấp các tùy chọn.

Bạn sẽ thấy điều này cho bất kỳ tham số nào với cài đặt Tùy chọn Động được bật.

Nếu bất kỳ tham số nào của bạn chỉ có một tập hợp hữu hạn các giá trị có thể có và bạn không muốn người dùng có thể nhập các giá trị tùy ý của riêng họ, bạn có thể bật các tùy chọn động cho tham số đó.

Điều này sẽ tạo ra một phương thức được gọi là cung cấp các tùy chọn cho phép bạn chỉ định những giá trị có thể có đó là gì khi ý định chạy và Phím tắt sẽ yêu cầu người dùng chọn từ một trong các giá trị.

Sau khi các tham số được giải quyết riêng lẻ, bạn cũng có thể tùy ý triển khai phương pháp xác nhận, đó là nơi bạn nên đảm bảo mọi thứ có vẻ tốt và bạn sẽ có thể xử lý ý định và ném lỗi nếu có vấn đề.

Ví dụ, nếu cần kết nối mạng, đây là nơi bạn nên kiểm tra để đảm bảo rằng bạn thực sự có thể truy cập mạng.

Cuối cùng, phương pháp xử lý là nơi bạn thực sự làm những gì mục đích bảo bạn làm.

Phương pháp xử lý sẽ tạo ra nhiệm vụ trong ứng dụng và trả lại thành công.

Sau khi hành động tạo ra nhiệm vụ, nó sẽ cung cấp nhiệm vụ dưới dạng đầu ra để các hành động sau này có thể sử dụng các thuộc tính như URL chia sẻ.

Quay lại trình chỉnh sửa ý định, tôi sẽ đi đến phần phản hồi cho ý định.

Ở đây, tôi sẽ thêm một thuộc tính cho nhiệm vụ đã được tạo.

Tôi sẽ chọn loại nhiệm vụ mà tôi đã thực hiện trước đây.

Tôi sẽ chọn thuộc tính đó làm đầu ra của ý định, để làm cho nó có sẵn cho Phím tắt.

Và bây giờ, trở lại mã, phản hồi sẽ có một thuộc tính nhiệm vụ nơi tôi có thể chỉ định đối tượng nhiệm vụ.

Khi điều này được thực hiện, ý định của bạn sẽ xuất hiện dưới dạng một hành động trong ứng dụng Phím tắt.

Vì vậy, hãy chắc chắn dành chút thời gian để thử nghiệm nó và thử tất cả các cách mọi người có thể sử dụng nó.

Để bắt đầu thử nghiệm, tôi sẽ mở lại ứng dụng Phím tắt và xem xét hành động Tạo Nhiệm vụ.

Tôi sẽ điền tên cho nhiệm vụ và ngày-- "Ngày mai lúc 3:00 chiều."

Khi tôi nhấn nút chạy, nhiệm vụ sẽ được tạo thành công.

Tuy nhiên, nếu tôi thay đổi ngày thành "Hôm qua lúc 3:00 chiều."...

Nó sẽ hiển thị thông báo lỗi, đúng như chúng tôi mong đợi.

Vì vậy, đó là nó để xây dựng một hành động trong Phím tắt.

Cuối cùng, hôm nay tôi sẽ xem xét một số cân nhắc mà bạn nên ghi nhớ khi phát triển cho Phím tắt trên Mac.

Tôi sẽ đề cập đến bốn loại ứng dụng khác nhau bao gồm các ứng dụng được xây dựng bằng Mac Catalyst, hoạt động với các tệp, triển khai cho cả iOS và Mac, và các ứng dụng và công cụ cần chạy Phím tắt.

Đầu tiên, nếu bạn đang sử dụng Mac Catalyst để đưa ứng dụng iOS của mình lên Mac, đây là một vài điều bạn cần biết.

Trong macOS Monterey, các ứng dụng của bạn hiện có thể sử dụng cùng một Intents APIs nếu nó được xây dựng bằng Mac Catalyst.

Nếu bạn đang xây dựng một ứng dụng mới, mọi thứ sẽ hoạt động giống như trên iOS.

Tuy nhiên, nếu ứng dụng của bạn đã có sẵn trên Mac và bạn đã tích hợp với khung Intents trên iOS, có khả năng bạn đã biên soạn tích hợp Intents của mình trong quá trình đến với Mac.

Vì vậy, hãy đảm bảo kiểm tra mã của bạn để bật lại chức năng này khi chạy trên macOS Monterey.

Một loại ứng dụng khác mà tôi muốn làm nổi bật là ứng dụng dựa trên tài liệu.

Trong bản demo trước đó, ứng dụng quản lý tác vụ của chúng tôi hoạt động trên các tác vụ tồn tại hoàn toàn trong ứng dụng.

Tuy nhiên, nhiều ứng dụng khác hoạt động trên các tài liệu tồn tại dưới dạng tệp trên đĩa.

Trong iOS 15 và macOS Monterey, các tham số tệp cho ý định cho phép người dùng chọn các tệp cụ thể và chuyển chúng vào hành động của ứng dụng của bạn.

Nếu ứng dụng của bạn chủ yếu xử lý các tài liệu dựa trên tệp thay vì cơ sở dữ liệu, hãy cân nhắc xây dựng một bộ hành động hoạt động trên các tệp.

Ví dụ, một ứng dụng bảng tính có thể tạo một hành động để mở một tài liệu hoặc thêm dữ liệu vào một hàng của một tệp cụ thể.

Một ví dụ thực sự thú vị khác về cách Phím tắt của bên thứ ba có thể hoạt động với các tệp được hiển thị trong phiên này từ Phân tích âm thanh.

Nếu bạn đang phát triển một ứng dụng tồn tại trên cả iOS và Mac, để hành động của bạn hoạt động trên cả hai nền tảng, bạn nên triển khai cùng một ý định trong cả hai bản sao ứng dụng của mình.

Điều này sẽ cho phép mọi người xây dựng một phím tắt trên một nền tảng và để nó hoạt động theo cùng một cách trên nền tảng khác.

Để làm điều này, bạn nên biên soạn cùng một định nghĩa ý định chính xác cho cả hai ứng dụng và đảm bảo rằng các ý định chia sẻ cùng một tên và tham số.

Đôi khi, các ứng dụng của bạn có thể có các số nhận dạng gói khác nhau trên các nền tảng và điều này không sao cả.

Các phím tắt sẽ xử lý việc này cho bạn, nhưng hãy nhớ rằng ý định có cùng tên sẽ chỉ được chia sẻ giữa các ứng dụng được triển khai thông qua cùng một nhóm Nhà phát triển Apple.

Ngoài ra, nếu bạn cần nâng cấp người dùng từ phiên bản ứng dụng này sang phiên bản ứng dụng khác, trên iOS 15, miễn là hai ứng dụng từ cùng một nhà phát triển và sử dụng cùng một tên mục đích, Phím tắt của ứng dụng của bạn sẽ tự động chuyển từ phiên bản này sang phiên bản khác.

Cuối cùng, nếu bạn muốn chạy Phím tắt từ ứng dụng hoặc công cụ dòng lệnh của mình, có hai phương pháp cần xem xét.

Đầu tiên, Phím tắt hiển thị giao diện kịch bản cho phép các ứng dụng Mac và AppleScripts liệt kê và chạy Phím tắt.

Ngoài ra, còn có một công cụ dòng lệnh Phím tắt cho phép bạn liệt kê và chạy Phím tắt trong Tập lệnh Shell hoặc các công cụ dòng lệnh của mình.

Nếu bạn phát triển một ứng dụng hoặc một tập lệnh sẽ được hưởng lợi từ khả năng chạy Phím tắt, bạn nên sử dụng giao diện Kịch bản.

Bằng cách giao tiếp với quy trình "Sự kiện cắt ngắn", ứng dụng của bạn có thể nhận được danh sách các phím tắt mà người dùng đã thiết lập, cũng như bắt đầu chạy một phím tắt.

Trong AppleScript, bạn có thể thực hiện điều này bằng cách yêu cầu quy trình "Sự kiện phím tắt" chạy một phím tắt theo tên.

Sử dụng khung Scripting Bridge, bạn có thể yêu cầu quy trình Sự kiện Phím tắt chạy lối tắt trực tiếp từ các ứng dụng Swift hoặc Objective-C của bạn.

Đối với các ứng dụng hộp cát, bạn sẽ cần thêm một quyền gọi là "com.apple.security.scripting targets."

Để truy cập danh sách các phím tắt và chạy chúng, bạn sẽ cần thêm mục tiêu "com.apple.shortcuts.run".

Cuối cùng, macOS Monterey cũng bao gồm một công cụ dòng lệnh có thể liệt kê các phím tắt và chạy chúng theo tên.

Nếu bạn có các công cụ dòng lệnh hoặc tập lệnh, chúng có thể tích hợp với Phím tắt thông qua giao diện này.

Vì vậy, để kết thúc, Phím tắt hiện có sẵn trên Mac và bất kể bạn có loại ứng dụng nào, bạn nên tham gia vào hệ sinh thái Phím tắt.

Bằng cách thêm các hành động cho ứng dụng của bạn, bạn có thể nhân lên những gì mọi người có thể làm với nó.

Các phím tắt cho phép mọi người sáng tạo với các ứng dụng của bạn.

Bạn có thể rất vui khi tìm hiểu những loại Phím tắt mà mọi người xây dựng bằng hành động của bạn.

[Nhạc gõ].