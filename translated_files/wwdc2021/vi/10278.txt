10278

Xin chào. Tôi là Camille Moussette, nhà thiết kế trong nhóm Thiết kế Apple.

Trong phần này, tôi sẽ hướng dẫn bạn các bước thực tế và cân nhắc thiết kế để thêm âm thanh và phản hồi xúc giác vào một ứng dụng.

Trong lịch sử, nó khá khó khăn cả từ góc độ thiết kế và kỹ thuật để cung cấp trải nghiệm ứng dụng phong phú bao gồm hoạt hình, âm thanh và xúc giác.

Với Core Haptics trên iPhone, giờ đây việc tạo ra những khoảnh khắc kỳ diệu trông, âm thanh và cảm giác chân thực trở nên dễ dàng hơn.

Để giải thích và thực hành những kỹ năng đó, tôi sẽ sử dụng một ứng dụng iOS có nguồn gốc từ một dự án mẫu mã trước đó có tên là HapticBounce.

Một vài bổ sung đã được thực hiện để làm cho nó giống như một trò chơi nhỏ và cung cấp một khung vẽ để thiết kế hình ảnh, âm thanh và xúc giác hoạt động tốt với nhau.

Bản demo mới được gọi là HapticRicochet.

HapticRicochet là câu chuyện về một quả bóng trở nên sống động trong iPhone và di chuyển xung quanh dựa trên định hướng của iPhone.

Quả bóng lăn xung quanh và bật ra khỏi tường của điện thoại với âm thanh và phản hồi xúc giác, giống như bạn mong đợi trong thế giới vật chất.

Nếu bạn chạm bóng...

Nó phát triển thành một quả bóng lớn hơn.

Nếu bạn chạm một lần nữa, một lá chắn sẽ được thêm vào quả bóng.

Tấm chắn đó bị hư hỏng và cạn kiệt với mỗi lần va chạm với các bức tường, và cuối cùng quả bóng nổ tung và chết.

Chúng tôi cũng đã thêm một kết cấu vào nền mà bạn bật hoặc tắt bằng cách nhấn vào bất kỳ đâu trên nền.

Đối với phiên này, tôi sẽ chỉ tập trung vào hai cơ chế: thêm tấm chắn và cho phép kết cấu lăn.

Trước khi tôi tiếp tục, hãy xem lại chương trình nghị sự.

Trước tiên tôi sẽ xem xét các nguyên tắc thiết kế âm thanh và xúc giác chính mà chúng tôi thường sử dụng trong Apple.

Tôi sẽ tiếp tục với phần giới thiệu ngắn gọn về Core Haptics, khuôn khổ cho phép phản hồi đa phương thức phong phú.

Cốt lõi của phiên sẽ kiểm tra dự án HapticRicochet trong Xcode và xem cách người ta thêm, thiết kế và tinh chỉnh phản hồi cho các khoảnh khắc kết cấu khiên và lăn.

Thiết kế trải nghiệm đa phương thức có thể là một thách thức, nhưng khi được thực hiện tốt, nó thực sự nâng cao trải nghiệm người dùng.

Nó cảm thấy kỳ diệu, thú vị và vừa phải.

Một ví dụ là nút Đèn pin trong iOS.

Nó kết hợp hoạt hình trực quan, âm thanh và phản hồi xúc giác trong một trải nghiệm thống nhất rõ ràng, chính xác và ngắn gọn.

Đó là một quá trình lặp đi lặp lại và sáng tạo liên quan đến nỗ lực thiết kế và kỹ thuật.

Thông thường bạn sẽ cảm nhận được xúc giác hơn là nghe thấy chúng, nhưng với mục đích trình diễn, chúng tôi đã chuyển đổi những xúc giác này thành âm thanh để bạn có thể nghe thấy nó trong video này.

Để giúp đạt được điều kỳ diệu và thích thú trong trải nghiệm ứng dụng của bạn, đây là ba nguyên tắc để hướng dẫn công việc.

Chúng rất hữu ích cho chúng tôi trong nội bộ, và tôi hy vọng chúng cũng có thể giúp bạn.

Chúng là quan hệ nhân quả, hài hòa và tiện ích.

Để phản hồi hữu ích, phải rõ ràng nguyên nhân gây ra nó.

Đó là về việc làm cho nguồn hoặc nguyên nhân của phản hồi rõ ràng và rõ ràng.

Hình thức đơn giản nhất là nhận phản hồi khi quả bóng chạm vào tường và ranh giới của điện thoại.

Đó là một sự va chạm với âm thanh và xúc giác liên quan.

Tương tự, kết cấu lăn xúc giác chỉ được trình bày khi hình nền được hiển thị.

Bạn hiểu rằng lưới là thứ đã tạo ra cảm giác đó.

Nguyên tắc thứ hai của chúng tôi, sự hài hòa, nhấn mạnh rằng các giác quan của chúng tôi hoạt động tốt nhất khi chúng mạch lạc, nhất quán và làm việc cùng nhau để tạo ra một trải nghiệm nhất định.

Nó nên cảm nhận được vẻ ngoài của nó, và âm thanh của nó.

Một quả bóng nhỏ nên cảm thấy nhỏ và âm thanh nhỏ.

Một quả bóng lớn phải phát ra âm thanh và cảm thấy nặng hơn, giống như nó có khối lượng thực sự tăng thêm.

Nguyên tắc thứ ba của chúng tôi, tiện ích, là cung cấp giá trị rõ ràng cho trải nghiệm ứng dụng của bạn.

Đừng thêm phản hồi chỉ vì bạn có thể.

Nó có thể nhanh chóng trở nên quá sức và khó chịu.

Dự trữ xúc giác và âm thanh cho những khoảnh khắc quan trọng trong ứng dụng của bạn, như sự phát triển của quả bóng.

Tiếp theo, hãy xem lại Core Haptics.

Core Haptics là công nghệ trên iPhone và iOS cho phép bạn thiết kế xúc giác tùy chỉnh và phản hồi âm thanh cho ứng dụng của mình.

Đó là một API mạnh mẽ tập trung vào bốn yếu tố cơ bản: công cụ, trình phát, mô hình và sự kiện.

Hãy xem lại chúng một cách ngắn gọn.

Yếu tố cấp cao nhất là động cơ.

Đó là liên kết của chúng tôi với bộ truyền động vật lý trên điện thoại.

Tiếp theo chúng ta có một người chơi.

Nó được sử dụng để điều khiển phát lại, như bắt đầu, dừng và tạm dừng.

Sau đó chúng ta có các mô hình và sự kiện.

Các mẫu là một tập hợp các sự kiện theo thời gian.

Sự kiện là các khối xây dựng được sử dụng để xác định trải nghiệm.

Có rất nhiều loại sự kiện.

Những cái phổ biến nhất là thoáng qua và liên tục.

Trên thực tế, đây là một ví dụ cụ thể về một mô hình được tạo thành từ các sự kiện.

Tôi đang sử dụng QuickLook Visualizer có sẵn trong MacOS 12 để xem mẫu xúc giác được chỉ định trong tệp .ahap.

AHAP là viết tắt của Apple Haptic Audio Pattern.

Hãy xem lại nó một lần nữa.

Chọn một tệp .ahap trong Finder, sau đó nhấn phím cách trên bàn phím của bạn.

Bây giờ chúng ta hãy xem xét chi tiết các mục trong mẫu.

Sự kiện đầu tiên màu xanh lam là một sự kiện thoáng qua.

Sự kiện thứ hai trong màu cam là một sự kiện liên tục.

Mẫu đang sử dụng cú pháp JSON.

Sự kiện tạm thời được tạo ra từ mã này.

Điều này tổng hợp tổng quan của chúng tôi về Core Haptics.

Để biết thêm thông tin chuyên sâu, hãy xem tài liệu trực tuyến.

Đối với việc thực hành trong phiên này, chúng tôi sẽ tập trung vào việc tải, thay đổi và chơi các mẫu.

Đã đến lúc cho Xcode và HapticRicochet.

Mở dự án từ thư mục HapticRicochet-Start.

Đảm bảo rằng bạn có thể biên dịch và chạy dự án trên iPhone của mình.

Trình mô phỏng không hoạt động cho xúc giác.

Bạn cần một chiếc iPhone 8 vật lý hoặc mới hơn để cảm nhận xúc giác.

Xác minh rằng điện thoại không bị tắt tiếng và mức âm lượng cao.

Kế hoạch là làm việc với các tệp ViewController và các tệp nội dung .ahap, .wav và .png.

Đảm bảo rằng bạn làm quen với trò chơi và tất cả các tương tác của nó.

Hãy nhớ rằng, bạn có thể chạm vào quả bóng, chạm vào nền và nghiêng điện thoại xung quanh.

Khi bạn đã sẵn sàng, hãy đi sâu vào quá trình biến đổi lá chắn.

Tôi sẽ sử dụng nguyên tắc hài hòa để phân tích khoảnh khắc khiên và xem xét các chi tiết thiết kế.

Đối với hình ảnh, chúng tôi có một hình ảnh động có thời lượng 500 mili giây và trông như thế này ở phía trên bên phải.

Đối với xúc giác, chúng tôi sẽ muốn làm nổi bật sự chuyển đổi sang một trạng thái mới.

Đối với âm thanh, chúng tôi muốn truyền tải mức tăng năng lượng và trạng thái kết thúc mạnh mẽ và được bảo vệ.

Đối với thực tiễn này, chúng tôi đã tạo ra hai tài sản khác nhau truyền đạt những phẩm chất khác nhau.

Chúng tôi sẽ xem xét chúng và xem điều gì phù hợp nhất với trải nghiệm khiên.

Nhưng trước tiên, hãy xem cách chúng ta tải và chơi phản hồi cho lá chắn.

Về mặt chức năng, mã được chia thành hai phần.

Đầu tiên chúng tôi khởi tạo các khối xây dựng của mình và thứ hai, một chức năng để chơi và hiển thị sự biến đổi lá chắn đó.

Trong hàm initializeShieldHaptics, trước tiên tôi tạo một mẫu từ tệp ShieldTransient.

Sau đó tạo một shieldPlayer với mẫu đó.

Phản hồi đã sẵn sàng để chơi vào thời điểm này.

Lá chắn hàm được gọi khi phép biến đổi đã sẵn sàng để được hiển thị.

Phản hồi xúc giác và âm thanh được phát thông qua gọi startPlayer trên shieldPlayer của chúng tôi.

Đó là một chức năng tiện lợi mà chúng tôi sử dụng lại thường xuyên trong dự án.

Hình ảnh động trực quan sau đó được phát.

Bây giờ hãy nhìn vào tài sản ShieldTransient của chúng tôi.

Nó xác định trải nghiệm mà chúng ta có cho phản hồi xúc giác và âm thanh.

Cảm giác nên có cảm giác như thế này: Và âm thanh sẽ phát ra như thế này: Tôi thích âm thanh.

Cảm giác như một sự mạnh mẽ và bảo vệ cho quả bóng.

Hãy nghe lại lần nữa.

Vấn đề là xúc giác và âm thanh không thực sự phù hợp.

Haptic được tạo thành từ ba chuyển tiếp...

Trong khi âm thanh liên tục và liên tục.

Không có sự hài hòa giữa hai giác quan.

Hãy xem xét tài sản thay thế được gọi là ShieldContinuous.

Nó có một sự tiến triển xúc giác liên tục...

Và một âm thanh lung lay phân rã.

Một lần nữa, tôi có thể cảm nhận và nghe thấy rằng xúc giác và âm thanh không thực sự phù hợp.

Nhưng tôi thích xúc giác.

Cảm giác như một sự biến đổi tốt để có được một lá chắn.

Hãy nghe lại xúc giác.

Kế hoạch của tôi là sử dụng mô hình xúc giác liên tục đó nhưng sử dụng âm thanh từ tài sản đầu tiên.

Tôi sẽ sử dụng hai nội dung và lấy âm thanh tôi thích từ mẫu đầu tiên và sử dụng nó trong mẫu xúc giác liên tục thứ hai.

Hãy xem tôi làm điều đó như thế nào trong thực tế.

Đầu tiên tôi mở tệp ShieldContinuous.ahap trong trình soạn thảo văn bản và cuộn đến cuối tệp.

Bạn sẽ thấy sự kiện này, nơi chúng tôi chỉ định tệp âm thanh để phát với xúc giác.

Nó đang sử dụng EventType AudioCustom với tên tệp cho tệp âm thanh.

Bạn có thể chỉ định và điều chỉnh âm lượng bằng ParameterValue.

Để sử dụng âm thanh ưa thích, tôi thay đổi tham chiếu tệp từ ShieldB.wav thành ShieldA.wav.

Tài sản sửa đổi và cuối cùng trông như thế này.

Sự xúc giác...

Và âm thanh mạch lạc.

Họ hỗ trợ và củng cố lẫn nhau.

Hãy cùng nhau nghe âm thanh và xúc giác kết hợp.

Thay đổi cuối cùng cần thiết là sử dụng tài sản cuối cùng mà tôi vừa tạo.

Tôi quay lại chức năng InitializeShieldHaptics và thay vì sử dụng ShieldTransient, tôi chỉ định và tải tệp ShieldContinuous.

Voilà! Ở đây chúng tôi có nó.

Bây giờ tôi biên dịch và chạy trên thiết bị.

Tôi kết thúc với một sự biến đổi lá chắn hài hòa mà cảm thấy vừa phải.

Xúc giác, âm thanh và hình ảnh đang hoạt động tốt với nhau để truyền tải việc bổ sung bảo vệ lá chắn cho quả bóng.

Tiếp theo, tôi sẽ xem xét cách thêm kết cấu cuộn vào ứng dụng.

HapticRicochet bắt đầu không có kết cấu lăn, chỉ va chạm với các bức tường.

Nếu tôi chạm vào nền, kết cấu chấm bi sẽ xuất hiện và tôi nhận được phản hồi xúc giác bổ sung khi quả bóng lăn xung quanh.

Chúng tôi sẽ gặp phải và giải quyết hai vấn đề trong tương lai, một vấn đề có tính chất kỹ thuật.

Cái còn lại liên quan đến thiết kế của trải nghiệm.

Trong hàm initializeTextureHaptics, trước tiên tôi tạo một mẫu từ tệp ahap kết cấu.

Sau đó tôi tạo một ShieldPlayer với mẫu đó.

Chức năng updateTexturePlayer được gọi trên mọi khung hình mà kết cấu đang hoạt động.

Chúng tôi sử dụng nó để cập nhật cường độ xúc giác dựa trên tốc độ của quả bóng.

Hãy xem kết quả.

Vấn đề tôi nhận thấy là kết cấu biến mất sau vài giây.

Tôi biết tại sao nó lại xảy ra như thế này.

Có một cách dễ dàng để khắc phục hành vi đó.

Vấn đề chúng tôi gặp phải là kết cấu của các tệp .ahap chỉ có 2 giây nội dung xúc giác.

Có một cách để thay đổi hành vi đó và làm cho nó chơi không ngừng.

Biến thể nâng cao của trình phát mẫu cung cấp các chức năng bổ sung như tạm dừng, tiếp tục và các cuộc gọi lại khác.

Trong HapticRicochet, tôi sẽ chỉ sử dụng trình phát mẫu nâng cao cho khả năng lặp lại của nó.

Hãy cùng trải qua sự thay đổi này.

Đầu tiên tôi sửa đổi khai báo của texturePlayer thành loại CHHapticAdvancedPatternPlayer.

Sau đó, tôi sẽ sử dụng cùng một tệp kết cấu, nhưng lần này, tạo một AdvancedPlayer.

Bây giờ tôi có thể kích hoạt hành vi lặp lại trên AdvancedPlayer đó.

Điều tuyệt vời là phần còn lại của mã vẫn giữ nguyên.

Hãy xem kết quả.

Kết cấu lăn diễn ra trong một vòng lặp lần này mà không có sự tạm dừng hoặc đường may rõ ràng.

Vấn đề thứ hai tôi muốn giải quyết liên quan đến giao diện của kết cấu.

Chúng tôi thấy rằng tài sản mô hình xúc giác của chúng tôi khá dày đặc, với gần 100 mục nhập trong 2 giây.

Kết cấu nền trực quan của chúng tôi rất thô, chỉ với một vài chấm ngang.

Tôi nghĩ trải nghiệm sẽ được cải thiện và thực tế hơn nếu mô hình chấm dày đặc hơn.

Tôi sẽ thay đổi tệp tài nguyên mà chúng tôi đã sử dụng cho backgroundImage để sử dụng phiên bản Fine của tệp này.

Nếu tôi chạy ứng dụng, kết cấu dày đặc hơn mới sẽ được sử dụng.

Hãy cùng xem nào.

Nếu bạn gặp sự cố hoặc sự cố, chúng tôi đã đưa phiên bản cuối cùng của dự án vào thư mục HapticRicochet-Final.

Nó có tất cả những thay đổi mà chúng tôi đã thực hiện trong phiên này, sẵn sàng để biên dịch và cảm nhận trên iPhone của bạn.

Vẫn còn chỗ để bạn khám phá và thiết kế những trải nghiệm xúc giác của riêng mình.

Tôi mời bạn xem xét sự biến đổi khác trong trò chơi và cố gắng thiết kế phản hồi xúc giác và âm thanh mới của riêng bạn cho họ.

Tóm lại, tôi đã giới thiệu các nguyên tắc thiết kế âm thanh và xúc giác có thể hướng dẫn bạn thiết kế những trải nghiệm đa phương thức tuyệt vời trong ứng dụng của mình.

Tôi đã xem xét các nguyên tắc cơ bản của Core Haptics, API để thêm phản hồi tùy chỉnh trong iOS.

Tôi đã đưa chúng vào thực tế bằng cách sử dụng dự án HapticRicochet, tập trung vào cơ chế kết cấu lá chắn và lăn.

Để biết thêm thông tin và tài nguyên, vui lòng tham khảo Hướng dẫn Giao diện Con người và tài liệu dành cho Nhà phát triển.

Cuối cùng, bạn có thể xem lại phiên WWDC 2019 bao gồm sự ra mắt của Core Haptics.

Cảm ơn bạn đã xem.

[Nhạc gõ].