10052

Chào mừng đến với Có gì mới trong Mac Catalyst.

Tên tôi là Jason Beaver, và tôi sẽ được tham gia sau bởi đồng nghiệp Nick Teissler của tôi.

Mac Catalyst là công nghệ cho phép bạn đưa các ứng dụng iOS hiện có của mình lên macOS, cho phép chúng tận dụng tối đa màn hình lớn hơn, bàn phím tích hợp và chuột hoặc bàn di chuột lớn hơn của Mac.

Hàng nghìn nhà phát triển đã sử dụng Mac Catalyst để đưa các ứng dụng iOS của họ lên macOS và kết quả thật đáng kinh ngạc.

Hãy để tôi kể cho bạn nghe về một vài ứng dụng Mac Catalyst từng đoạt giải thưởng gần đây của Apple.

Shapr3D là một công cụ CAD công nghiệp, được hỗ trợ trên cả Mac và iPad.

Trong khi phiên bản iPad được thiết kế như một trải nghiệm cảm ứng đa điểm và Bút chì, phiên bản Mac mới, được xây dựng với Mac Catalyst, tận dụng sự hỗ trợ của chuột và bàn phím, giống như người dùng máy tính để bàn mong đợi.

Instapaper là một ứng dụng rất phổ biến để đọc các bài báo ngoại tuyến và vì Mac Catalyst, nó đã ra mắt trên Mac.

Notability là một ứng dụng ghi chú nổi bật.

Thay thế phiên bản Mac hiện có, phiên bản mới của ứng dụng cung cấp cho người dùng tất cả các tính năng thú vị của iPad, nhưng được tối ưu hóa để tận dụng kích thước màn hình, bàn phím và tốc độ nhanh hơn của Mac.

Nó thậm chí còn hỗ trợ Sidecar với Apple Pencil.

Chúng ta sẽ bắt đầu với tổng quan về các API mới, và sau đó đề cập đến các API mà chúng ta đã nâng cao trong macOS Monterey.

Cuối cùng, chúng tôi sẽ hiển thị các API mới này đang hoạt động khi Nick áp dụng chúng trong ứng dụng demo của chúng tôi.

Hãy bắt đầu với tổng quan về các API mới trong macOS Monterey.

Trước đây, trong macOS Big Sur, chúng tôi đã thêm hỗ trợ đính kèm menu vào một nút có thuộc tính showsMenuAsPrimaryAction.

Điều này cho phép bạn tạo một menu kéo xuống.

Bây giờ, trong macOS Monterey, chúng tôi đã thêm hỗ trợ cho các nút bật lên, với một thuộc tính mới được gọi là changesSelectionAsPrimaryAction, khiến tiêu đề của nút theo dõi lựa chọn trong menu.

Với hai thuộc tính này, hiện có bốn cách mà chúng ta có thể định cấu hình nút của mình.

Với cả hai thuộc tính được đặt thành sai, chúng tôi nhận được một nút nhấn tiêu chuẩn.

Lưu ý rằng điều này vẫn có thể hiển thị một menu nếu một menu được đặt khi bạn nhấp và giữ nút.

Mã để tạo nút đó được hiển thị bên dưới.

Nếu chỉ thay đổiSelectionAsPrimaryAction được đặt thành true, bạn sẽ nhận được một nút chuyển đổi có thể nhấp để bật và tắt.

Điều này có thể được sử dụng để chỉ ra trạng thái trong ứng dụng của bạn.

Nếu chỉ hiển thịMenuAsPrimaryAction được đặt thành true, bạn sẽ nhận được một menu kéo xuống.

Và nếu cả hai thuộc tính được đặt thành true, bạn sẽ nhận được nút bật lên mới.

Bây giờ, đối với các nút được cấu hình để hiển thị menu làm hành động chính, các nút sẽ hiển thị menu ngay lập tức với tương tác chính, đó là một cú nhấp chuột trái trong macOS.

Tuy nhiên, đối với các nút không được cấu hình để hiển thị menu làm hành động chính, hành vi phụ thuộc vào thành ngữ của ứng dụng.

Trong thành ngữ iPad, các menu được kích hoạt với tương tác phụ, đó là một cú nhấp chuột phải trong macOS.

Nhưng nếu ứng dụng áp dụng thành ngữ Mac, menu sẽ được kích hoạt bằng cách nhấn và giữ nút.

Bạn có thể tìm hiểu thêm về những gì mới với các nút trong video "Gặp gỡ hệ thống nút UIKit".

Chúng tôi hiện đã cung cấp ToolTips cho các ứng dụng Mac Catalyst.

ToolTip là một cửa sổ nhỏ, nổi sẽ xuất hiện khi con trỏ di chuột qua chế độ xem trong ứng dụng của bạn.

Và nó có thể được sử dụng để cung cấp ngữ cảnh hoặc chi tiết bổ sung về nội dung của bạn.

Để thêm ToolTip vào bất kỳ UIView nào, hãy sử dụng UIToolTipInteraction.

Tất cả những gì bạn cần làm là tạo một UIToolTipInteraction với một chuỗi văn bản, và sau đó thêm tương tác đó vào chế độ xem của bạn.

Tuy nhiên, một cách sử dụng phổ biến của ToolTips là làm rõ hành vi của các điều khiển trong giao diện người dùng của bạn.

Đây là một mẫu đủ phổ biến mà chúng tôi đã thêm một thuộc tính tiện lợi vào UIControl để cho phép bạn nhanh chóng thiết lập Mẹo công cụ.

Nhãn được sử dụng trong các ứng dụng iOS để hiển thị các chuỗi không thể chỉnh sửa.

Khi nội dung của nhãn quá dài để vừa, nhãn phải cắt ngắn văn bản.

Bây giờ, trong macOS Monterey, chúng tôi đã thêm hỗ trợ mở rộng ToolTips để toàn bộ nội dung của nhãn có sẵn.

Trong giao diện người dùng mẫu này, nội dung của nhãn tiêu đề quá dài để phù hợp.

Bằng cách bật ToolTips mở rộng, khi chúng tôi di chuột qua nhãn, nó sẽ hiển thị tiêu đề đầy đủ.

Bạn có thể kích hoạt điều này với một thuộc tính mới trên UILabel được gọi là showsExpansionTextWhenTruncated.

Chúng tôi đã giới thiệu một khóa info.plist mới được gọi là UIApplicationSupports PrintCommand mà bạn có thể thêm vào info.plist của mình.

Nếu được đặt thành true, chúng tôi sẽ tự động thêm các mục menu "In" và "Xuất dưới dạng PDF" vào ứng dụng Mac Catalyst của bạn khi khởi chạy.

Khóa plist này cũng có thể được thêm vào các ứng dụng iOS của bạn và sẽ chỉ dẫn đến tùy chọn "In" trên lớp phủ phím tắt iPadOS và cũng sẽ hiển thị các mục menu "In" và "Xuất dưới dạng PDF" khi ứng dụng iOS của bạn chạy trên máy Mac M1.

Mặc dù khóa plist này cho hệ điều hành biết rằng bạn muốn các mục menu "In" và "Xuất dưới dạng PDF", nhưng nó chỉ là một nửa của câu chuyện.

Bạn vẫn cần triển khai rõ ràng hỗ trợ in ấn trong mã của mình.

Để làm điều đó, có một hành động UIResponder mới được gọi là printContent.

Bạn có thể triển khai điều này trên bất kỳ UIResponder nào và tìm kiếm chuỗi phản hồi được sử dụng để tìm mục tiêu in thích hợp.

Khi việc triển khai printContent của bạn được gọi, chỉ cần thiết lập và sử dụng UIPrintInteractionController như bình thường.

Bây giờ chúng tôi có hỗ trợ thêm phụ đề vào cửa sổ của bạn.

Điều này có thể được sử dụng để cung cấp thông tin phụ trợ về trạng thái đơn đăng ký của bạn.

Điều này có thể được thiết lập với một thuộc tính mới trên UIScene được gọi là phụ đề.

Trong macOS Monterey, ứng dụng Phím tắt hiện có sẵn trên Mac.

Nếu ứng dụng của bạn áp dụng ý định tùy chỉnh trên iOS, giờ đây chúng sẽ có sẵn với Siri và Phím tắt trên Mac.

Cả việc xử lý ý định trong ứng dụng và tiện ích mở rộng Ý định đều có sẵn.

Vì vậy, nếu trước đây bạn đã vô hiệu hóa việc xây dựng tiện ích mở rộng Intents trong ứng dụng Mac Catalyst của mình, bây giờ bạn có thể bật lại nó.

Bạn có thể tìm hiểu thêm trong video "Gặp tắt cho macOS".

Điều đó kết thúc tổng quan về các API mới của chúng tôi trong macOS Monterey.

Hãy chuyển sang tổng quan về các API mà chúng tôi đã nâng cao trong macOS Monterey.

Nếu bạn có các nút hoặc thanh trượt tùy chỉnh mà bạn đã viết để phù hợp với chủ đề ứng dụng của mình, bạn có thể giữ chúng trong Mac Catalyst khi bạn áp dụng thành ngữ Mac bằng cách chọn không tham gia các điều khiển gốc, nhưng bạn sẽ cần phải tự mình giảm tỷ lệ xuống còn 77%.

Bây giờ, chúng tôi không khuyên bạn nên thực hiện toàn bộ ứng dụng này, mà chỉ dành cho một số điều khiển nhất định là chìa khóa cho trải nghiệm ứng dụng của bạn.

Hệ thống nút mới cũng có thể được sử dụng để tạo các nút phù hợp với chủ đề ứng dụng của bạn theo cách đa nền tảng hơn.

Và bạn có thể tìm hiểu thêm về điều này trong video "Gặp gỡ hệ thống nút UIKit".

UIBehavioralStyle là enum mới giúp điều này trở nên khả thi.

UIButton và UISlider có hai thuộc tính mới mỗi thuộc tính: preferredBehavioralStyle là readwrite và behavioralStyle là giá trị được phân giải chỉ đọc cho thuộc tính này.

Trên iOS, giá trị được giải quyết cho behavioralStyle sẽ không thay đổi, vì vậy thật dễ dàng để đặt dòng mã này thành .pad hoặc ,mac một cách rõ ràng để xử lý trường hợp Mac Catalyst mà không ảnh hưởng đến ứng dụng iOS của bạn.

Đối với các ứng dụng dựa trên tài liệu, có một thuộc tính plist mới được gọi là UIApplicationSupports TabbedSceneCollection để chọn không tham gia tab cửa sổ.

Khi được đặt thành sai, việc tab cửa sổ sẽ bị vô hiệu hóa và các mục menu liên quan đến tab mặc định sẽ không được thêm vào.

Bây giờ chúng tôi hỗ trợ UIPointerLockState để ẩn con trỏ và khóa nó để nó không di chuyển ra ngoài cửa sổ Mac.

Điều này thực sự hữu ích cho các trò chơi, để người dùng không vô tình nhấp vào bên ngoài trò chơi và đưa một ứng dụng khác ra phía trước.

Nó tạm thời mở khóa cửa sổ khi bạn chuyển đổi ứng dụng hoặc cửa sổ và khóa lại khi bạn nhấp vào cửa sổ.

Chúng tôi cũng hỗ trợ UIPointerShape, có thể được sử dụng để lấy con trỏ iBeam theo trục ngang hoặc dọc.

Khi bạn sử dụng API này trên macOS, bạn sẽ nhận được một trong những hình dạng NSCursor chuẩn.

Cuối cùng, chúng tôi hỗ trợ kiểu con trỏ ẩn để cho phép bạn ẩn con trỏ khi cần thiết trong ứng dụng của mình.

Chúng tôi đã xem qua một số API UIKit mới và nâng cao.

Bây giờ, tôi sẽ giao nó cho Nick để đưa chúng ta cách chúng ta sẽ sử dụng các API mới và nâng cao này để làm cho ứng dụng Mac Catalyst của chúng ta cảm thấy như ở nhà hơn trên Mac.

Cảm ơn, Jason!

Những tính năng mới đó rất hấp dẫn.

Tôi đã có cơ hội dùng thử chúng rồi.

Tôi sẽ hướng dẫn bạn bản demo của một ứng dụng mà nhóm Catalyst đã phát triển.

Hóa ra nhóm Catalyst chiếu sáng mặt trăng với tư cách là nhà văn du lịch.

Và vì vậy, chúng tôi đã phát triển Trip Planner cho iPhone và iPad.

Đây là Trip Planner đang chạy trên MacBook Pro 13 inch với M1.

Chúng tôi đã chọn ứng dụng của mình để chạy trên máy Mac M1 để chúng tôi có thể cung cấp ứng dụng cho càng nhiều người dùng càng tốt.

Hãy để tôi cung cấp cho bạn một chuyến tham quan các tính năng của ứng dụng.

Trip Planner là một ứng dụng liệt kê một số địa điểm tuyệt vời để ghé thăm trên toàn cầu và cho phép bạn đổi điểm thưởng cho các chương trình du lịch thường xuyên khác nhau.

Giao diện người dùng của nó dựa trên bộ điều khiển chia nhỏ chế độ xem ba cột.

Sử dụng thanh bên, tôi có thể điều hướng giữa các chỗ ở, nhà hàng và các trang web ở các quốc gia yêu thích của mình hoặc chọn một chương trình phần thưởng để xem xét và sử dụng điểm của mình.

Khi tôi chọn một cái gì đó trong thanh bên, nếu đó là một danh mục, Trip Planner sẽ hiển thị nội dung của nó trong cột bổ sung của bộ điều khiển chế độ xem phân chia.

Bộ điều khiển chế độ xem bổ sung chứa các điểm tham quan, nhà hàng và chỗ ở ở tại Nhật Bản, Tây Ban Nha, Brazil và Tanzania.

Thay vào đó, nếu tôi chọn một mục lá trong thanh bên hoặc một mục trong bộ điều khiển chế độ xem bổ sung, bộ điều khiển chế độ xem phụ sẽ hiển thị chi tiết cho mục đó.

Tôi sẽ chọn một trong những quán cà phê yêu thích của tôi ở Nhật Bản, Extreme Matcha.

Bộ điều khiển xem chi tiết bao gồm một số văn bản về quán cà phê, các nút để giúp tôi lên kế hoạch cho chuyến đi của mình và chế độ xem bản đồ hiển thị vị trí của Extreme Matcha.

Trong trường hợp của Trip Planner, mọi thứ chỉ hoạt động ngay lập tức trên máy Mac M1.

Tuy nhiên, là một ứng dụng iOS, chỉ có rất nhiều điều chúng tôi có thể làm để làm cho nó cảm thấy như ở nhà trên Mac.

Để đi xa hơn, chúng tôi cần kiểm tra hộp kiểm đó và biến nó thành một ứng dụng Mac Catalyst.

Cụ thể là hộp kiểm này. Chúng ta có thể phóng to không?

Và nâng cao ứng dụng của bạn bằng cách chọn hộp kiểm.

Đây là Trip Planner được tối ưu hóa cho Mac Catalyst.

Chúng tôi đã thêm chức năng dành riêng cho Mac, như nhận dạng cử chỉ nhấn đúp để mở cửa sổ mới, xuất hiện trên thanh tiêu đề tùy chỉnh và chúng tôi đã nỗ lực hết mình bằng cách tối ưu hóa cho Mac, cung cấp cho chúng tôi các điều khiển gốc và văn bản sắc nét.

Xem "Chất lượng của một ứng dụng Mac Catalyst tuyệt vời" và "Tối ưu hóa giao diện của ứng dụng Mac Catalyst của bạn" để biết toàn bộ câu chuyện về quy trình đó.

Trong phiên bản cuối cùng của Trip Planner, tôi đã áp dụng các API mới mà Jason vừa nói với bạn.

Tôi sẽ bao gồm việc nhận con nuôi của từng người.

Tôi thực sự khuyên bạn nên tải xuống dự án mẫu.

Tất cả các đoạn mã tôi sẽ hiển thị ở đây được lấy trực tiếp từ mã đó.

Đây là ứng dụng được cập nhật hoàn toàn cho macOS Monterey.

Tôi đã chọn Extreme Matcha một lần nữa.

Bạn có thể nhận thấy một số màu sắc trong giao diện người dùng dưới dạng các nút kiểu macOS với màu nền.

Nhưng tôi sẽ quay lại với những thứ đó.

Tôi muốn nói về phụ đề cảnh trước.

Tôi đang sử dụng thuộc tính phụ đề UIScene mới để làm hai việc.

Đầu tiên, tôi đang sử dụng phụ đề để hiển thị tiêu đề của bộ điều khiển chế độ xem chi tiết theo cách cảm thấy như ở nhà hơn trên Mac.

Phụ đề cửa sổ giống Mac hơn tiêu đề của mục điều hướng.

Thứ hai, tôi đang thay đổi phụ đề để cung cấp một số ngữ cảnh hữu ích khi người dùng điều hướng ứng dụng.

Trong Công cụ lập kế hoạch chuyến đi, tôi sẽ chọn Nhật Bản và Tanzania.

Vì vậy, phụ đề của cửa sổ có nội dung "Các quốc gia".

Nếu tôi chọn địa điểm cắm trại nhỏ này, ở đây trong bộ điều khiển chế độ xem bổ sung, phụ đề sẽ thay đổi để cho tôi biết tôi đã chọn Glamp Kilimanjaro.

Và nếu tôi chọn toàn bộ phần Chương trình Phần thưởng...

Phụ đề thay đổi một lần nữa thành Chương trình Quốc gia & Phần thưởng, thêm ngữ cảnh cho người dùng.

Hãy suy nghĩ về cách phụ đề có thể giúp thêm ngữ cảnh vào các ứng dụng Catalyst của bạn.

Cũng lưu ý rằng phụ đề được hiển thị khác nhau cho mỗi thanh công cụ UITitlebarStyle.

Thử nghiệm với cái này để tìm giao diện tốt nhất cho ứng dụng của bạn.

Để đặt phụ đề, hãy bắt đầu với một giá trị chuỗi, lấy tham chiếu đến cảnh và sau đó đặt thuộc tính phụ đề.

Bạn có thể đặt điều này vào thời điểm kết nối cảnh hoặc sau đó bằng cách truy cập cảnh của cửa sổ chế độ xem.

Tiếp theo, tôi sẽ chỉ cho bạn cách tôi áp dụng ToolTips trong Trip Planner.

Một mô hình tương tác rất phổ biến trên macOS là trong giây lát di chuột qua thứ gì đó để biết thêm chi tiết về thứ đó.

Kỹ thuật này là một cách lâu đời để giáo dục người dùng mà không làm lộn xộn giao diện người dùng ứng dụng của bạn.

ToolTips cũng có thể hiển thị toàn bộ văn bản của nhãn bị cắt ngắn.

Ở đây, tôi đã chọn thác Iguaçu ở Brazil.

Di chuột qua hình ảnh trong giây lát sẽ hiển thị Mẹo công cụ!

"Một khu rừng xanh tươi tốt bao quanh thác Iguaçu ầm ầm vào một ngày u ám."

Thật là một mô tả hay.

Chúng tôi đã sử dụng UIToolTipInteraction API mới để thêm chức năng này vào tất cả các hình ảnh của chúng tôi và nó thực sự làm cho ứng dụng cảm thấy như ở nhà hơn trên Mac.

Tôi cũng đã sử dụng UILabel API để cho phép mở rộng các nhãn này bị cắt ngắn do định dạng tiền tệ quốc tế hóa, làm cho chúng dài hơn một chút so với dự kiến.

Như Jason đã đi qua trước đó, có nhiều hình thức khác nhau của ToolTip API.

Trong trường hợp hình ảnh anh hùng, sử dụng UIToolTipInteraction API mà không có UITooltipInteractionDelegate phù hợp với nhu cầu của tôi vì tôi muốn đính kèm văn bản không đổi dưới dạng ToolTip vào chế độ xem tùy ý.

Đối với văn bản tiền tệ, tôi đã sử dụng thuộc tính showsExpansionTextWhenTruncated trên UILabel.

Và nếu tôi muốn đính kèm ToolTip vào một điều khiển tùy ý, thuộc tính ToolTip trên UIControl là API phù hợp để sử dụng.

Tôi sẽ chuyển sang nhiều nút mới có sẵn trong Catalyst trên macOS Monterey.

Tôi khuyên bạn nên xem video "Gặp gỡ hệ thống nút UIKit" để được giới thiệu về API Cấu hình UIButton iOS 15 mới.

Nhiều thuộc tính UIButtonConfiguration mới đó có biểu hiện riêng trong các ứng dụng Catalyst được tối ưu hóa cho Mac.

Và thậm chí tốt hơn, giống như trên iOS, các thuộc tính được xác định trên UIButton có thể được trộn lẫn và kết hợp với các thuộc tính trên UIButtonConfiguration.

Tôi sẽ chỉ cho bạn một loạt các nút, và sau đó, tôi sẽ chỉ ra cách mỗi nút được cấu hình trong mã.

Tôi sẽ chọn một điểm đến mới để thể hiện màu nền nút mới.

Copacabana thì sao?

Các nút ở đây đang sử dụng cấu hình đã điền, và vì vậy chúng chọn màu sắc của môi trường của chúng, tự động nhận được màu phù hợp với hình ảnh và nền mờ tốt.

Bây giờ, tôi sẽ điều hướng đến bộ điều khiển xem chi tiết phần thưởng.

Tôi sẽ đưa các chương trình của mình lên từ thanh bên...

Và chọn Chương trình Phần thưởng Diamond Dubloons.

Mục đích của quan điểm này là cho phép tôi đổi điểm mà tôi kiếm được khi đi du lịch và chọn những gì để đổi chúng.

Tôi có thể sử dụng thanh trượt để chọn số điểm tôi đang chi tiêu.

Tôi có thể sử dụng nút chuyển đổi này để kích hoạt hệ số nhân điểm và thậm chí chọn hệ số nhân của tôi với menu đính kèm.

Tôi cảm thấy muốn chọn con số lớn nhất làm hệ số nhân điểm của tôi chỉ có ý nghĩa.

Vì vậy, tôi sẽ chọn sáu.

Tôi tự hỏi cái bẫy là gì.

Tôi có thể chuyển đổi các nút lớn hơn này để chọn các danh mục để đổi.

Tôi có thể chọn giữa đổi, rút tiền mặt hoặc quyên góp điểm của mình.

Và cuối cùng khi tôi đã sẵn sàng gửi, tôi có thể nhấp vào nút gửi ở dưới cùng bên phải hoặc nhấp vào nút đặt lại này để bắt đầu lại.

Có khá nhiều nút mới ở đây.

Tôi sẽ chỉ cho bạn cách cấu hình từng cái.

Đầu tiên tôi sẽ đề cập đến cái mà tất cả chúng ta đều quen thuộc: nút ấn.

Trong bộ điều khiển xem chi tiết, đây là nút gửi.

Đây chỉ là một UIButton của loại hệ thống, được giới thiệu trong Big Sur, với vai trò của nó được đặt thành chính.

Tiếp theo, tôi có nút menu hệ số nhân điểm.

Nút này chuyển đổi trạng thái của nó khi nhấp chuột chính và hiển thị menu khi nhấn và giữ.

Tôi biết cuối cùng tôi sẽ muốn có một màu nền tùy chỉnh, vì vậy tôi sẽ sử dụng cấu hình đã điền và đặt tiêu đề thành "Hệ số điểm".

Để có được hành vi chuyển đổi, tôi sẽ sử dụng thuộc tính boolean mới mà Jason đã nói với chúng tôi, changesSelectionAsPrimaryAction.

Đặt điều đó thành sự thật.

Bây giờ, màu nền của nút của chúng tôi sẽ chuyển đổi giữa màu sắc của ứng dụng và giao diện không màu tiêu chuẩn.

Tôi cũng sẽ đính kèm một menu, được cấu hình với các giá trị hệ số nhân của chúng tôi và một số UIActions.

Và cuối cùng, trong trình xử lý hành động của menu của chúng tôi, nếu người dùng chọn hệ số nhân điểm lớn nhất, chúng tôi sẽ thay đổi có điều kiện màu nền của nút chuyển đổi thành màu đỏ hệ thống.

Bây giờ để cấu hình nút Đặt lại.

Tôi có thể sử dụng cấu hình đơn giản để có được vẻ ngoài không viền.

Cấu hình này trông rất giống với giao diện iPadOS.

Tôi sẽ đặt vai trò của nút thành phá hoại, điều này yêu cầu hệ thống thực hiện một số xử lý sự kiện ngăn chặn việc vô tình kích hoạt hành động của nó.

Và đặt màu sắc của nó thành một hệ thống màu đỏ.

Đó là nó cho cái nút đó.

Đối với nút bật lên ở phía dưới bên trái của chế độ xem cho phép tôi chọn giữa Đổi, Rút tiền và Đóng góp, không cần sử dụng API cấu hình nút.

Tôi sẽ chỉ tạo một nút hệ thống và đặt changesSelectionAsPrimaryAction thành true.

Về mặt ngữ nghĩa, đó là những gì nút bật lên làm.

Tiếp theo, tôi muốn đặt showsMenuAsPrimaryAction thành true vì đó cũng là những gì về mặt ngữ nghĩa mà nút bật lên làm.

Nhưng cái gì cho? Nút bấm không thay đổi.

Thực ra, nó có.

Chúng tôi đã đạt được một nút chuyển đổi khác.

Nhưng trạng thái mặc định, tất nhiên, là tắt.

Chúng tôi đang thiếu một thuộc tính menu không phải null.

Điều đó rất quan trọng để có được giao diện cửa sổ bật lên mới trong Mac Catalyst.

Bây giờ chúng tôi đã đặt menu thành một cái gì đó, nút bật lên của chúng tôi đã hoạt động đầy đủ.

Cuối cùng, tập trung vào các nút chuyển đổi lớn, giống như bảng điều khiển này.

Bố cục này tận dụng cách các nút kiểu iPad kéo dài để lấp đầy không gian mà chúng được bố trí.

Các nút sử dụng kiểu Mac không hoạt động theo cách này.

Tôi đã có thể giữ hành vi của iPad, ngay cả khi Trip Planner được thiết lập để Tối ưu hóa cho Mac, và đây là cách thực hiện.

Tôi đã bắt đầu với một cấu hình nút đầy khác.

Sau đó tôi đã sử dụng cấu hình để đặt một hình ảnh, mà không cần chỉ định trạng thái nút cho hình ảnh.

Bằng cách chỉ định kiểu hành vi .pad, tôi nhận được hành vi bố cục mà tôi sẽ làm trên iPad.

Cụ thể, nền của nút kéo dài để lấp đầy khung hình của nó.

Biểu tượng cần phải lớn hơn một chút, vì vậy tôi đặt cấu hình biểu tượng ưa thích trên nút có kích thước điểm lớn hơn.

Như trước đây, tôi đặt changesSelectionAsPrimaryAction thành true và cung cấp colorUpdateHandler để chỉ định màu đã chọn và không được chọn, dựa trên thuộc tính isSelected của nút.

Tôi biết bạn cũng hào hứng như tôi với tất cả những lựa chọn mới này.

Các thành viên lâu năm của API của UIButton và các thuộc tính sáng bóng, hoàn toàn mới có thể được trộn lẫn và kết hợp theo nhiều cách để tạo ra rất nhiều nút ngay tại nhà trên Mac.

Tính năng cuối cùng của Trip Planner mà tôi muốn cho bạn xem là in ấn.

In ấn dễ dàng hơn bao giờ hết trên Catalyst với hỗ trợ lệnh khóa tích hợp mới.

Tôi đã có thể nâng cao trải nghiệm in ấn trong Trip Planner bằng cách sử dụng chuỗi phản hồi để chọn đối tượng thích hợp nhất để xử lý việc in ấn.

Hãy để tôi chứng minh ý tôi là gì khi nói điều đó.

Trở lại phiên bản mới nhất của Trip Planner, tôi đã chọn một trong những nhà hàng yêu thích nhất của mình ở Tây Ban Nha, Charcuterie Bored.

Tôi sẽ tương tác với chế độ xem bản đồ bằng cách nhấp vào các điều khiển thu phóng dành riêng cho Catalyst.

Bây giờ, trọng tâm ứng dụng và trạng thái phản hồi đầu tiên đã chuyển sang bộ điều khiển xem chi tiết này.

Khi tôi chọn File Print từ menu, một hộp thoại Print sẽ xuất hiện...

Đề nghị chỉ in một mặt hàng này.

Bây giờ, tôi cũng sẽ chọn Parque Guell và Hotel Barcelona để hoàn thành kế hoạch trong ngày.

Tôi sẽ sử dụng phím tắt tích hợp command+P để in.

Hộp thoại In xuất hiện hiện đề nghị in cả ba mục đã chọn của tôi...

Không chỉ bộ điều khiển xem chi tiết hiện tại.

Cuối cùng, nếu tôi Shift+Tab tập trung vào các quốc gia trong thanh bên và không có gì được chọn trong bộ điều khiển bổ sung hoặc xem chi tiết...

Và sau đó cố gắng in, Trip Planner biết phải làm gì và in mọi mục tôi đã chọn trong thanh bên.

Vậy, làm thế nào để tôi đạt được điều này?

Đầu tiên và quan trọng nhất, khóa info.plist mới mà Jason giới thiệu phải được đặt để cho hệ thống biết Trip Planner hỗ trợ in và muốn mục menu được thêm vào.

Trong bộ điều khiển xem chi tiết, tôi đã ghi đè hai phương thức từ UIResponder.

Nội dung in thực hiện in thực tế và UIKit tìm kiếm các đối tượng có thể thực hiện hành động này trong chuỗi phản hồi.

Trong một số trường hợp, được quyết định bởi logic kinh doanh ứng dụng, bộ điều khiển xem chi tiết có thể không muốn in.

Vì vậy, tôi đã sử dụng phương pháp canPerformAction để thông báo cho chuỗi phản hồi xem bộ điều khiển xem chi tiết có thể in được hay không.

Phương pháp này được gọi trước printContent và nếu nó trả về sai, bộ điều khiển xem chi tiết sẽ bị bỏ qua, khi UIKit leo lên chuỗi phản hồi để tìm kiếm một đối tượng có thể thực hiện hành động đó.

Trong BrowserSplitViewController, là bộ điều khiển chế độ xem gốc của ứng dụng và do đó hầu như luôn ở gần đầu chuỗi phản hồi, tôi đã triển khai một phương thức UIResponder khác, targetForAction:withSender.

Điều này cho phép bộ điều khiển chế độ xem phân chia chọn đối tượng nào sẽ xử lý việc in.

Điều này rất hữu ích khi lựa chọn và logic kinh doanh của người dùng ra lệnh cho chúng ta nên in một số bộ trang, nhưng đối tượng thực hiện việc in cụ thể đó không phải là một phần của chuỗi phản hồi.

Điều này được ưu tiên hơn nhiều so với việc buộc đối tượng đó vào chuỗi phản hồi bằng cách gửi becomeFirstResponder đến đối tượng đó, đây sẽ là phản mẫu nếu được sử dụng trong trường hợp này.

Và đó là nó để in.

Có vẻ như tôi đã sẵn sàng để đi du lịch ngoài lưới điện.

Trong video này, Jason đã giới thiệu cho chúng tôi các API Mac Catalyst mới và các API Mac Catalyst nâng cao giúp đưa ứng dụng của bạn lên Mac tốt hơn bao giờ hết.

Sau đó, tôi đã chỉ ra cách áp dụng chúng trong Trip Planner.

Trong hầu hết các trường hợp, chúng chỉ là các thuộc tính mới, một dòng duy nhất để thiết lập, mang lại các tính năng Mac tinh túy cho ứng dụng Catalyst của bạn.

Hãy tự mình thử những thứ này.

Thực hiện một số thay đổi mã nhỏ và xem cách ứng dụng Mac Catalyst của bạn nhận được một số cải tiến lớn.

Cảm ơn vì đã xem.

[Nhạc gõ].