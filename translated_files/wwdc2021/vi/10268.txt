10268

Xin chào, và chào mừng đến với phiên này trên quy trình làm việc của Xcode Cloud.

Tên tôi là Justin, và tôi là một kỹ sư của nhóm TestFlight, và cùng với các đồng nghiệp của tôi, Wesley và Kevin, chúng tôi ở đây để giới thiệu thông tin chi tiết về việc tạo quy trình làm việc của bạn trong Xcode Cloud.

Quy trình làm việc là trung tâm của Xcode Cloud và thúc đẩy sự tích hợp liên tục cho phép bạn và nhóm của bạn tự động hóa việc xây dựng, phân tích, kiểm tra, lưu trữ và phân phối các ứng dụng và khuôn khổ của bạn.

Chúng linh hoạt và có thể mở rộng, vì vậy bạn có thể tùy chỉnh quy trình làm việc xung quanh các quy trình phát triển và phân phối hiện có của nhóm mình.

Và với Xcode Cloud, quản lý quy trình làm việc được tích hợp vào các công cụ dành cho nhà phát triển của Apple mà bạn đã sử dụng: Xcode và App Store Connect.

Trong phiên này, hãy chia nhỏ quy trình làm việc thành các thành phần cụ thể của chúng.

Đầu tiên, chúng ta sẽ hướng dẫn cách định cấu hình các điều kiện tự động chạy quy trình làm việc của bạn.

Sau đó, chúng ta sẽ nói về các tùy chọn để thiết lập môi trường của bạn.

Chúng tôi cũng sẽ chỉ cho bạn cách tạo nhiều hành động cho các tác vụ bạn muốn tự động hóa, cùng với các hành động để chạy sau đó, như gửi thông báo về các bản dựng của bạn hoặc tự động triển khai các bản dựng đó cho TestFlight.

Cuối cùng, chúng tôi có một số chiến lược cho các quy trình làm việc khác nhau mà bạn có thể thấy hữu ích và siêu thuận tiện để tăng cường sự hợp tác và năng suất của nhóm bạn.

Chúng ta có rất nhiều thứ để giải quyết, vì vậy hãy bắt đầu.

Hãy để tôi giao nó cho Wesley.

Cảm ơn, Justin!

Tôi đang cộng tác trên một ứng dụng có tên Fruta với các thành viên trong nhóm phát triển của tôi.

Nó đã được thiết lập và chạy trên Xcode Cloud.

Nếu bạn chưa xem phiên "Gặp gỡ đám mây Xcode", hãy nhớ kiểm tra nó để tìm hiểu về cách thiết lập quy trình làm việc đầu tiên của bạn.

Ngay tại đây, được tích hợp trong Điều hướng Báo cáo của Xcode, là một tab Đám mây mới, nơi tôi thấy quy trình làm việc và các bản dựng từ nhóm của mình.

Khi tôi giới thiệu ứng dụng Fruta, nó đã tạo ra một quy trình làm việc mặc định cho tôi để xây dựng nhánh chính.

Quy trình làm việc này đã hoạt động rất tốt cho chúng tôi, nhưng vì chúng tôi là một nhóm cũng sử dụng các yêu cầu kéo, tôi muốn tạo một quy trình làm việc cụ thể theo yêu cầu kéo mà nhóm của tôi có thể tận dụng.

Tôi muốn nó chạy mỗi khi bất kỳ ai trong nhóm của tôi tạo yêu cầu kéo, phân tích, kiểm tra và lưu trữ ứng dụng của tôi, thông báo cho nhóm của tôi khi bản dựng yêu cầu kéo kết thúc và cung cấp phiên bản ứng dụng của tôi cho các thành viên trong nhóm của tôi để họ có thể kiểm tra các tính năng trước khi chúng được hợp nhất vào nhánh tích

Tạo một quy trình làm việc rất dễ thực hiện.

Trong menu Sản phẩm, tôi có thể vào Quản lý quy trình làm việc, nhấp vào Plus và chọn ứng dụng của mình.

Điều này sẽ mang lại sự theo dõi một trình chỉnh sửa quy trình làm việc mới.

Một quy trình làm việc được tạo thành từ một số thành phần có thể cấu hình.

Đây là phần chung, nơi tôi có thể đặt tên cho quy trình làm việc của mình.

Tôi sẽ đặt tên cho cái này là "Yêu cầu kéo."

Nếu tôi ở trong một nhóm mà chỉ một số ít cá nhân chịu trách nhiệm thực hiện các thay đổi đối với quy trình làm việc của chúng tôi, tôi có thể chọn hạn chế chỉnh sửa để ngăn chặn các bản cập nhật ngoài ý muốn có thể ảnh hưởng đến nhóm của chúng tôi.

Theo mặc định, Xcode Cloud đặt kho lưu trữ chính và thông tin dự án với kiến thức về cài đặt cục bộ của tôi, nhưng nếu tôi quyết định di chuyển kho lưu trữ chính của mình hoặc di chuyển từ dự án Xcode sang không gian làm việc, tôi có thể thay đổi các cài đặt đó tại đây.

Tiếp theo, chúng ta hãy xem phần Điều kiện bắt đầu.

Đây là nơi tôi có thể xác định khi nào tôi muốn quy trình làm việc của mình chạy.

Xcode Cloud có một số loại điều kiện.

Đối với quy trình làm việc này, tôi muốn đặt điều kiện bắt đầu của nó để chạy cho tất cả các yêu cầu kéo có ý định hợp nhất vào nhánh chính.

Để làm điều đó, tôi có thể chọn từ menu Loại và chọn Mọi thay đổi thành Yêu cầu kéo.

Loại điều kiện này cho phép tôi chỉ định nhánh nguồn và nhánh đích.

Tôi sẽ đặt nhánh nguồn thành Bất kỳ Chi nhánh nào và nhánh mục tiêu thành Chính.

Bây giờ mỗi khi một thành viên trong nhóm tạo một yêu cầu kéo chống lại Main và thực hiện các thay đổi đối với nó, Xcode Cloud sẽ tự động chạy quy trình làm việc này.

Khi xây dựng các yêu cầu kéo, Xcode Cloud bây giờ sẽ xây dựng và kiểm tra sự hợp nhất của nhánh nguồn và mục tiêu với nhau, vì vậy các thành viên trong nhóm của tôi có thể tự tin và biết tác động thực sự của những thay đổi của họ với phần còn lại của nhóm.

Tôi cũng có thể thu hẹp các điều kiện đó thành các tệp hoặc thư mục cụ thể và chọn đặt xem tôi có muốn tự động hủy bất kỳ bản dựng nào đang chạy trước đó khi quy trình làm việc chạy hay không.

Điều này rất hữu ích nếu tôi đẩy một cam kết lên trên một cam kết khác liên tiếp nhanh chóng.

Mỗi thay đổi đối với yêu cầu kéo chỉ là một trong những điều kiện bắt đầu mà bạn có thể đặt cho quy trình làm việc và tùy thuộc vào nhu cầu của nhóm bạn, chúng tôi có các loại điều kiện khác mà bạn có thể định cấu hình để đáp ứng những nhu cầu đó.

Mọi Thay đổi đối với một Chi nhánh sẽ luôn xây dựng nhánh nguồn và sẽ bỏ qua bất kỳ trạng thái yêu cầu kéo nào.

Mọi Thay đổi đối với Thẻ sẽ được xây dựng bất cứ khi nào các thẻ mới được tạo.

Trên một Lịch trình sẽ xây dựng một nhánh mà bạn chọn trên một lịch trình định kỳ mà bạn có thể chọn.

Điều này thật tuyệt nếu bạn có các bài kiểm tra dài hạn mà thỉnh thoảng bạn muốn chạy.

Bây giờ tôi đã định cấu hình điều kiện bắt đầu, quy định khi nào quy trình làm việc này sẽ chạy, hãy định cấu hình phần Môi trường, phần này quyết định cách quy trình làm việc sẽ chạy.

Xcode Cloud chạy trên Cơ sở hạ tầng đám mây của Apple và cung cấp nhiều phiên bản macOS và Xcode khác nhau.

Để chọn phiên bản Xcode và macOS của bạn, bạn chỉ cần chọn nó từ một menu.

Bạn cũng có thể đặt quy trình làm việc của mình để trỏ đến phiên bản phát hành mới nhất hoặc phiên bản Beta, vì vậy bạn luôn có thể xây dựng hoặc thử nghiệm trên phần mềm mới nhất.

Là nhà phát triển, tất cả chúng ta đều quan tâm sâu sắc đến năng suất của mình và một phần lớn trong số đó là hiệu suất của các công cụ chúng ta sử dụng.

Nhiều người trong số các bạn sẽ làm việc trên các dự án lớn với nhiều tệp và xử lý thời gian xây dựng có khả năng kéo dài.

Cũng giống như cục bộ trong Xcode, bạn có tùy chọn xây dựng các thay đổi của mình từng bước bằng cách chỉ xây dựng các tệp đã thay đổi.

Bạn cũng có tùy chọn này trong Xcode Cloud.

Điều này thường dẫn đến việc xây dựng nhanh hơn.

Tuy nhiên, có những lúc bạn có thể muốn thực hiện một công trình sạch sẽ thay thế.

Điều này rất quan trọng để đảm bảo mọi thứ đang hoạt động trong bản dựng cuối cùng của bạn và cũng được yêu cầu tạo ra các bản dựng có thể được triển khai cho External Beta Testers với TestFlight hoặc để gửi đến App Store.

Trong phần môi trường, tôi có tùy chọn để chọn Làm sạch.

Vì đây là quy trình làm việc yêu cầu kéo, tôi sẽ bỏ chọn nó để tôi có thể tận dụng các lợi ích về hiệu suất.

Mỗi nhóm làm việc theo cách riêng của mình và các nhóm cần các công cụ của họ để có sự linh hoạt để có thể làm việc theo cách họ muốn.

Xcode Cloud cung cấp các tùy chọn để thực hiện những gì chúng tôi tin là các nhiệm vụ phát triển phổ biến nhất.

Tuy nhiên, nó cũng cung cấp một loạt các tùy chọn để mở rộng.

Khả năng mở rộng này cho phép bạn kết nối Xcode Cloud với các công cụ và hệ thống khác mà nhóm của bạn sử dụng để hoàn thành công việc của mình.

Xcode Cloud cung cấp một API toàn diện để truy cập dữ liệu của bạn, định cấu hình quy trình làm việc và bắt đầu xây dựng.

Ngoài các tùy chọn kịch bản hiện có mà Xcode cung cấp, Xcode bổ sung khả năng tạo các tập lệnh tùy chỉnh chạy trên các thiết bị đang thực hiện các bản dựng và kiểm tra của bạn.

Trong phần Môi trường, tôi có thể chỉ định các biến môi trường mà Xcode Cloud cung cấp cho các tập lệnh tùy chỉnh.

Điều này hữu ích cho cấu hình và bí mật mà tôi không muốn kiểm tra vào kho lưu trữ mã nguồn.

Tôi cũng có khả năng đánh dấu một biến môi trường là bí mật để cung cấp thêm mức độ bảo vệ.

Bạn có thể tìm thêm thông tin về điều này trong phiên "Tùy chỉnh quy trình làm việc đám mây Xcode nâng cao của bạn" hoặc trong tài liệu của chúng tôi.

Cho đến nay, chúng tôi đã chỉ cho bạn cách định cấu hình khi quy trình làm việc của bạn chạy và khi chúng chạy.

Họ nên chạy trong môi trường nào?

Tiếp theo, hãy nói về những hành động.

Các hành động xác định công việc mà bạn muốn quy trình làm việc cho bạn và nhóm của bạn mỗi khi quy trình làm việc chạy.

Các hành động chính mà bạn có thể yêu cầu Xcode thực hiện cục bộ hiện đều có sẵn cho bạn trong Xcode Cloud: xây dựng, chạy phân tích tĩnh, thử nghiệm và lưu trữ.

Các hành động tôi muốn thiết lập là các hành động Lưu trữ, Kiểm tra và Phân tích.

Hãy bắt đầu bằng cách thêm hành động Lưu trữ bằng cách nhấp vào biểu tượng dấu cộng theo Hành động và chọn Lưu trữ.

Tôi cần chọn nền tảng và sơ đồ mà tôi muốn tạo một kho lưu trữ.

Nó đã chọn trước nền tảng iOS và sơ đồ iOS, đó chính xác là những gì tôi muốn.

Tôi cũng có tùy chọn đăng ký TestFlight hoặc chuẩn bị sẵn sàng để phân phối App Store, nhưng nhiều hơn về điều này sau.

Bạn có thể nhận thấy rằng tôi không phải quản lý hồ sơ cung cấp hoặc danh tính ký mã.

Xcode Cloud tự động xử lý việc này cho bạn.

Để tìm hiểu thêm về điều này, hãy xem phiên "Phân phối ứng dụng trong Xcode với Cloud Signing."

Bây giờ hành động Lưu trữ đã được thiết lập, hãy tập trung sự chú ý của chúng ta vào hành động Kiểm tra.

Kiểm tra ứng dụng của bạn là một phần cực kỳ quan trọng trong quá trình phát triển.

Nó không chỉ giúp đảm bảo người dùng của bạn gặp ít lỗi hơn mà còn có thể đẩy nhanh quá trình phát triển của bạn bằng cách giúp bạn tự tin vào những thay đổi bạn đang thực hiện.

Tuy nhiên, đôi khi có thể rườm rà và chậm để chạy các bài kiểm tra của bạn tại địa phương, và đôi khi, bạn có thể quên.

Bằng cách thiết lập quy trình làm việc với thử nghiệm trong Xcode Cloud, các thử nghiệm chạy trong một môi trường ổn định, đáng tin cậy và có thể tái tạo.

Chúng chạy trong nền trong khi bạn đang làm công việc khác, giải phóng môi trường cục bộ của bạn và chúng chạy tự động, giải phóng bạn khỏi việc phải nhớ chạy chúng theo cách thủ công.

Để thêm một hành động Kiểm tra, tôi chỉ cần nhấp vào nút Dấu cộng và chọn Kiểm tra.

Đối với các hành động Kiểm tra, tôi có thể chọn làm cho chúng được yêu cầu để vượt qua hoặc không.

Đánh dấu hành động theo yêu cầu có nghĩa là bản dựng tổng thể sẽ thất bại nếu hành động Kiểm tra này thất bại.

Nếu tôi đang xây dựng bộ kiểm tra của mình, tôi có thể chọn đặt nó là Không bắt buộc phải vượt qua để nó không ảnh hưởng đến trạng thái xây dựng tổng thể.

Khi nói đến việc chọn bài kiểm tra nào để chạy, tôi có một vài lựa chọn.

Tôi có thể chọn Sử dụng Cài đặt Sơ đồ để tham chiếu các cài đặt trong sơ đồ Fruta iOS của mình hoặc tôi có thể chọn một sơ đồ thử nghiệm cụ thể nếu tôi muốn trau dồi một bộ kiểm tra nhất định.

Khi tôi đã có bộ đó, tất cả những gì còn lại cần làm là chọn các trình mô phỏng mà tôi muốn chạy các bài kiểm tra của mình.

Xcode Cloud cung cấp một tùy chọn được đề xuất, đó là một bộ sưu tập các trình mô phỏng với các kích thước màn hình khác nhau.

Tùy chọn được đề xuất luôn kiểm tra dựa trên Xcode được chọn trong phần Môi trường, nhưng nếu tôi chọn các trình mô phỏng cụ thể, tôi cũng có thể chọn từ danh sách các phiên bản hệ điều hành cũ hơn.

Hành động cuối cùng tôi muốn chạy là hành động Phân tích.

Trình biên dịch có khả năng tự động tìm thấy nhiều loại lỗi và cảnh báo chúng tôi về chúng.

Chú ý và sửa chữa những thứ này có thể giúp chúng tôi tiết kiệm rất nhiều thời gian phát triển so với việc theo dõi những vấn đề này trong thời gian chạy và sẽ mang lại cho người dùng trải nghiệm ổn định và không có lỗi hơn nhiều với ứng dụng của chúng tôi.

Tuy nhiên, vì chạy phân tích tĩnh không phải là một phần của quy trình phát triển lặp lại cục bộ điển hình của chúng tôi, nhiều người trong chúng ta quên chạy nó, chỉ để thấy các vấn đề gia tăng trong nhóm theo thời gian.

Với Xcode Cloud, bạn có thể đảm bảo rằng phân tích tĩnh chạy mỗi khi bạn thực hiện thay đổi mã.

Để thêm một hành động Phân tích, tôi sẽ nhấp vào nút Dấu cộng và chọn Phân tích.

Giống như các bài kiểm tra, tôi có tùy chọn để đánh dấu các vấn đề phân tích tĩnh là Bắt buộc để Vượt qua hay không.

Ngay bây giờ, tôi chỉ muốn theo dõi kết quả phân tích tĩnh, vì vậy tôi sẽ không đánh dấu nó là Bắt buộc phải vượt qua.

Hành động cuối cùng là hành động Xây dựng.

Đôi khi, bạn có thể cần chạy một hành động Xcode Build đơn giản.

Điều này có thể hữu ích để đảm bảo một cấu hình hoặc sơ đồ xây dựng thứ cấp cụ thể vẫn được biên dịch hoặc có thể để đảm bảo rằng một khuôn khổ là một phần của ứng dụng của bạn có thể được xây dựng riêng.

Bây giờ tôi đã thiết lập các hành động Lưu trữ, Kiểm tra và Phân tích cho quy trình làm việc yêu cầu kéo của mình, tôi sẽ giao nó cho Kevin để thêm các hành động sau vào quy trình làm việc này.

Cảm ơn, Wesley.

Với quy trình làm việc của Xcode Cloud, bạn có khả năng định cấu hình các hành động sau.

Các hành động sau chạy sau khi tất cả các hành động Xây dựng, Phân tích, Kiểm tra và Lưu trữ đã hoàn thành.

Các hành động sau bạn có thể định cấu hình với Xcode Cloud đang gửi thông báo và triển khai với TestFlight.

Trước tiên hãy nói về các thông báo.

Có hai loại sự kiện thông báo bạn có thể gửi.

Đầu tiên là khi một bản dựng thành công.

Bạn có tùy chọn gửi thông báo cho tất cả các thành công của bản dựng; chỉ sửa lỗi, đó là khi một nhánh hoặc yêu cầu kéo xây dựng chuyển từ không thành công sang vượt qua; hoặc không thông báo.

Sự kiện thông báo khác dành cho khi bản dựng không thành công.

Bạn có thể gửi thông báo cho tất cả các lỗi xây dựng; chỉ ngắt, đó là khi một nhánh hoặc yêu cầu xây dựng kéo chuyển từ chuyển sang thất bại; hoặc không thông báo.

Đối với quy trình làm việc này, tôi muốn thông báo cho nhóm của mình khi các bản dựng yêu cầu kéo kết thúc.

Bên dưới phần Hành động là các hành động sau.

Để thêm hành động Thông báo, tôi sẽ nhấp vào nút Dấu cộng và chọn Thông báo.

Tôi sẽ để lại tất cả để xây dựng thành công và xây dựng thất bại.

Bên dưới Sự kiện Thông báo, tôi có một vài lựa chọn về nơi gửi thông báo.

Xcode Cloud tích hợp với công cụ cộng tác phổ biến Slack.

Khi tài khoản Slack đã được ủy quyền, tôi có thể nhấp vào nút Dấu cộng để hiển thị danh sách các kênh.

Tôi sẽ chọn kênh "ci-builds" và nhấn OK.

Tôi cũng có tùy chọn để thêm địa chỉ email.

Theo mặc định, tất cả người dùng sẽ tự động nhận được thông báo về các bản dựng mà họ bắt đầu, vì vậy bạn không cần phải thêm chúng vào danh sách này.

Tuy nhiên, nếu bạn có một email nhóm hoặc nếu bạn có những người dùng muốn nhận các bản dựng mà họ không khởi động, bạn có thể thêm email của họ vào đây.

Cuối cùng, tôi muốn chia sẻ với bạn một trong những tính năng yêu thích của tôi về Xcode Cloud Workflows: khả năng tự động triển khai với TestFlight.

Và bây giờ, với TestFlight trên Mac, bạn có thể triển khai cho mọi nền tảng mà Apple cung cấp.

Có hai tùy chọn triển khai TestFlight với Xcode Cloud.

Việc triển khai cho những người kiểm tra nội bộ đã được nâng cao để nhanh chóng gửi các bản dựng đến các thành viên trong nhóm phát triển của bạn.

Bởi vì họ là thành viên trong nhóm của bạn, họ có thể nhận được các bản dựng được tạo ra từ các yêu cầu kéo và các bản dựng mà không cần Clean được chọn.

Nếu bạn sử dụng TestFlight ngày hôm nay, External Testing và App Store tương đương với những gì bạn đã biết.

Nó được khuyến nghị cho các chi nhánh ứng cử viên và phát hành và có thể được phân phối cho những người thử nghiệm bên ngoài và App Store, tùy thuộc vào đánh giá ứng dụng beta.

TestFlight là một cách tuyệt vời để xây dựng ứng dụng của bạn trên các thiết bị của đồng đội và người thử nghiệm beta bên ngoài tổ chức của bạn.

Bạn có thể định cấu hình quy trình làm việc để tự động triển khai bản dựng cho bất kỳ nhóm TestFlight nào bạn có.

Bạn quản lý các nhóm TestFlight của mình giống như cách bạn làm hôm nay, trong App Store Connect trong tab TestFlight.

Ở đây, tôi có nhiều nhóm nội bộ và bên ngoài, và mỗi nhóm đều có sẵn cho tôi trong quy trình làm việc của tôi.

Để tự động triển khai với một nhóm TestFlight nội bộ, bạn sẽ cần phải làm ba việc.

Đầu tiên, bạn sẽ cần thêm một hành động Lưu trữ.

Tiếp theo, bạn sẽ cần đặt tùy chọn Triển khai trên kho lưu trữ thành Kiểm tra nội bộ.

Cuối cùng, bạn sẽ cần thêm một bài kiểm tra nội bộ TestFlight sau hành động.

Hãy cấu hình quy trình làm việc của chúng ta để làm điều đó.

Tôi muốn quy trình làm việc này tự động triển khai cho nhóm QA của tôi.

Để làm điều đó, trước tiên, tôi sẽ nhấp vào hành động Lưu trữ iOS và chọn Chỉ kiểm tra nội bộ TestFlight.

Làm điều này có nghĩa là các bản dựng của tôi sẽ có sẵn trong TestFlight.

Điều này thật tuyệt nếu tôi không muốn tự động gửi bản dựng cho bất kỳ ai, nhưng hãy giữ tùy chọn để thực hiện sau từ phần TestFlight trên App Store Connect.

Đối với ứng dụng này, tôi cũng muốn tự động triển khai cho các đồng nghiệp của mình bất cứ khi nào bản dựng được tạo ra.

Để làm điều đó, tôi cần thêm một bài đăng TestFlight.

Tôi sẽ nhấp vào nút Dấu cộng bên cạnh Post-Actions và thêm TestFlight Internal Testing.

Tạo tác Lưu trữ iOS đã được chọn trước, đó là những gì tôi muốn.

Tôi sẽ nhấn nút Dấu cộng để thêm một nhóm nội bộ.

Cuối cùng, tôi sẽ chọn nhóm QA.

Bây giờ các thành viên trong nhóm QA của tôi có thể xác minh và kiểm tra tất cả các tính năng trước khi chúng được hợp nhất vào nhánh Chính.

Gửi bản dựng cho những người thử nghiệm bên ngoài tổ chức của bạn với TestFlight External Testing là một cách tuyệt vời để nhận phản hồi về ứng dụng của bạn và các tính năng của nó trước khi gửi đến App Store.

Bằng cách này, bạn có thể tự tin vào những thay đổi của mình từ nhiều người dùng hơn và có khả năng thực hiện các thay đổi và khắc phục sự cố trước khi nó được phát hành lên App Store.

Để triển khai với TestFlight External Testing, một vài điều kiện nữa cần được thiết lập.

Chọn một nhánh duy nhất trong điều kiện bắt đầu.

Điều này đảm bảo tính nhất quán trong các bản dựng mà bạn định gửi cho những người thử nghiệm beta bên ngoài của mình.

Tiếp theo, chọn Làm sạch trong phần Môi trường.

Điều này đảm bảo mã của bạn sẽ được xây dựng từ đầu, mà không cần sử dụng dữ liệu dẫn xuất.

Cuối cùng, đặt cài đặt Triển khai trong hành động Lưu trữ của bạn thành TestFlight và App Store.

Sau tất cả những gì đã được thiết lập, cấu hình TestFlight External Testing post-action tương tự như cấu hình TestFlight Internal Testing.

Bạn chỉ cần thêm các nhóm bên ngoài đã được tạo trong TestFlight.

TestFlight External Testing cũng có thêm khả năng triển khai cho từng người thử nghiệm.

Chúng tôi vừa tạo quy trình làm việc yêu cầu kéo trong Xcode, nhưng bạn cũng có thể tạo, chỉnh sửa và quản lý quy trình làm việc trong App Store Connect.

Đó là một lựa chọn tuyệt vời nếu bạn không sử dụng Xcode và cần thay đổi quy trình làm việc của mình.

Bây giờ hãy quay lại với Justin để đưa ra một vài đề xuất về các loại quy trình làm việc mà bạn có thể tạo cho nhóm của mình.

Justin?

Cảm ơn, Kevin.

Tôi nghĩ nhóm Fruta QA sẽ thích truy cập các bản dựng nhanh hơn với quy trình yêu cầu kéo của chúng tôi.

Vì vậy, như bạn đã thấy, quy trình làm việc có rất nhiều sức mạnh và tính linh hoạt để mô hình hóa cách làm việc của nhóm bạn.

Bạn có thể tạo bao nhiêu quy trình làm việc tùy thích để hoàn thành công việc của mình.

Tôi biết nhóm của chúng tôi sẽ tạo ra một số.

Kevin vừa chỉ cho bạn một quy trình làm việc cho các yêu cầu kéo, nhưng đây là một vài ý tưởng cho nhiều quy trình làm việc hơn mà bạn và nhóm của bạn có thể thử.

Để hiển thị ứng dụng của bạn cho người dùng bên ngoài nhóm phát triển của bạn, bạn có thể phân phối cho nhóm TestFlight bên ngoài hoặc gửi ứng dụng của bạn đến App Store.

Ý tưởng ở đây là tôi muốn thực thi chất lượng cao để người dùng ứng dụng của tôi có trải nghiệm tuyệt vời.

Tôi cần chạy một quy trình làm việc trên các chi nhánh được chỉ định cho các bản phát hành.

Nó sẽ thực hiện một loạt các bài kiểm tra toàn diện, lưu trữ bản dựng và cuối cùng, triển khai cho một nhóm TestFlight bên ngoài và vào tay người dùng.

Để minh họa rõ hơn, hãy để tôi cho bạn thấy Quy trình phát hành của tôi.

Để đảm bảo quy trình làm việc của tôi cũng sẽ xây dựng tất cả các bản phát hành trong tương lai của chúng tôi, tôi đã đặt điều kiện bắt đầu thành Mọi thay đổi thành một Chi nhánh trên nhánh Phát hành của mình.

Để kỹ lưỡng, tôi muốn mọi bản dựng từ quy trình làm việc này được tạo từ đầu, vì vậy tôi đã kiểm tra phần Dọn dẹp trong Môi trường.

Làm như vậy thường làm tăng thời gian xây dựng vì mọi thứ được biên dịch lại, nhưng nó mang lại cho chúng tôi sự tự tin rằng không có vấn đề nào do bộ nhớ đệm gây ra.

Lưu ý rằng tôi cũng đã chọn các phiên bản cụ thể của Xcode và macOS cho quy trình làm việc này.

Ghim các công cụ xuống là một phần quan trọng của việc hội tụ và hoàn thiện bản phát hành.

Để đảm bảo rằng ứng dụng của chúng tôi sẽ hoạt động trên phạm vi iPhone và iPad của người dùng, tôi chạy các thử nghiệm của chúng tôi trên nhiều trình mô phỏng khác nhau trong phần Thử nghiệm.

Để phân phối bản dựng ứng dụng của chúng tôi thông qua TestFlight, tôi đã bao gồm một hành động Lưu trữ và đặt chuẩn bị triển khai cho TestFlight và App Store.

Để đảm bảo những người thử nghiệm beta của chúng tôi luôn có được bản dựng cập nhật nhất, tôi đã thiết lập một hành động sau để triển khai cho nhóm TestFlight bên ngoài của chúng tôi.

Khi mã mới được hợp nhất vào nhánh phát hành của chúng tôi, nó sẽ tự động được xây dựng, kiểm tra và triển khai cho những người thử nghiệm beta của chúng tôi.

Bây giờ chúng tôi có thể nhận được phản hồi nhanh chóng về những thay đổi của mình trong khi vẫn duy trì sự tự tin rằng chất lượng vẫn cao.

Đây là một quy trình làm việc khác mà bạn có thể muốn tạo để thực hiện một bộ thử nghiệm sâu hơn mỗi đêm.

Quy trình làm việc Kiểm tra qua đêm của tôi chạy định kỳ, kiểm tra dựa trên nhiều trình mô phỏng để bao gồm nhiều nền tảng như tôi cần.

Bất kỳ lỗi kiểm tra nào cũng được báo cáo cho nhóm QA và vì trọng tâm hoàn toàn là thử nghiệm, không cần phải triển khai bản dựng ở bất cứ đâu.

Tôi đặt điều kiện bắt đầu của mình để chạy quy trình làm việc này mỗi tối trong tuần bằng cách chọn On a Schedule for a Branch làm điều kiện bắt đầu của tôi với tần suất hàng tuần.

Sau đó, tôi đã chọn ngày của mình là từ thứ Hai đến thứ Sáu lúc 1:00 sáng.

Trong phần Môi trường, tôi đã chọn phiên bản Xcode mới nhất để đảm bảo ứng dụng của chúng tôi được xây dựng thành công khi các công cụ mới được phát hành.

Tôi muốn kiểm tra kỹ lưỡng ứng dụng của chúng tôi, vì vậy tôi đã chọn một vài kế hoạch kiểm tra và trình mô phỏng được yêu cầu để vượt qua.

Tôi cũng muốn chạy phân tích tĩnh, vì vậy tôi đã thêm một hành động Phân tích và cũng yêu cầu điều đó vượt qua.

Nếu bất kỳ bài kiểm tra nào trước đó thất bại, nhóm QA sẽ tìm hiểu với Thông báo sau hành động.

Tôi đặt Build Success thành Don't Not Notify, và Build Failure cho tất cả mọi người.

Nhóm QA của tôi có kênh Slack của riêng họ, nhưng tôi cũng có thể chỉ định một địa chỉ email.

Dù bằng cách nào, nhóm QA sẽ tìm hiểu về bất kỳ lỗi xây dựng nào vào sáng hôm sau.

Chạy một quy trình làm việc như thế này là một cách tuyệt vời để tiết kiệm thời gian vì bạn và nhóm của bạn có thể tiếp tục phát triển vào ban ngày và rời khỏi Xcode Cloud để kiểm tra kỹ lưỡng ứng dụng của bạn vào ban đêm.

Và cuối cùng, dưới menu Sản phẩm trong Xcode là Quản lý quy trình làm việc, nơi tôi có thể xem tất cả các quy trình làm việc mà nhóm của chúng tôi sử dụng.

Tôi thấy quy trình kiểm tra qua đêm mà tôi vừa tạo cùng với quy trình làm việc mà Wesley và Kevin đã tạo trước đó.

Khi dự án của chúng tôi phát triển, tôi có thể thêm nhiều hơn, chỉnh sửa hoặc xóa quy trình làm việc cho phù hợp với nhu cầu của nhóm.

Và đó là nó cho quy trình làm việc của nhóm chúng tôi.

Chúng tôi đã chỉ cho bạn cách tạo quy trình làm việc cho các yêu cầu kéo, cách định cấu hình hành động cho các nền tảng khác nhau, cách phân phối bản phát hành cho người dùng TestFlight và cách thiết lập thử nghiệm qua đêm.

Nhưng có rất nhiều thứ bạn có thể làm với quy trình làm việc.

Trên hết, bạn thậm chí có thể tạo và quản lý các quy trình làm việc đó từ App Store Connect.

Để tìm hiểu thêm về quy trình làm việc, hãy xem "Tùy chỉnh quy trình làm việc đám mây Xcode nâng cao của bạn".

Nếu bạn chưa có cơ hội, hãy xem "Gặp gỡ đám mây Xcode" để tìm hiểu cách tích hợp dự án của bạn.

Ngoài ra còn có các phiên tuyệt vời khác đi sâu hơn vào việc ký kết đám mây và hỗ trợ mới của Xcode cho các yêu cầu kéo.

Xcode Cloud cung cấp cho nhóm của bạn khả năng tạo ra các quy trình làm việc linh hoạt, có thể mở rộng có thể thích ứng với cách bạn làm việc và giúp đảm bảo nhóm luôn tuân thủ các thực tiễn phát triển của họ.

Tôi hy vọng phiên này sẽ giúp bạn tạo quy trình làm việc để tận dụng khi bạn và nhóm của bạn lặp lại sự phát triển và cung cấp một ứng dụng chất lượng cao.

Cảm ơn bạn đã xem, và tận hưởng phần còn lại của WWDC.

[Âm nhạc].