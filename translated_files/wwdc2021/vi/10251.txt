10251

Xin chào, tôi là Tom, và tôi muốn chào đón bạn đến với "Biểu tượng SF trong UIKit và AppKit."

Hôm nay tôi sẽ đưa bạn đi tham quan về cách triển khai các tính năng mới của Biểu tượng SF trong ứng dụng của bạn.

Đầu tiên, chúng ta sẽ xem xét các chế độ màu khác nhau và cách sử dụng chúng.

Sau đó, chúng ta sẽ nói về cách kết hợp các cấu hình để có được các hiệu ứng mà bạn muốn.

Và cuối cùng, chúng ta sẽ khám phá việc sử dụng các ký hiệu màu này trong các chuỗi được quy cho.

Bạn sẽ thấy các ví dụ áp dụng cho cả AppKit và UIKit.

Các API mới giống hệt nhau cho cả hai khuôn khổ, vì vậy những gì áp dụng cho cái này, cũng áp dụng cho cái kia, ngoại trừ một số sắc thái cụ thể của khuôn khổ.

Các tính năng mới xoay quanh việc thêm màu sắc vào Biểu tượng SF.

Trong khi AppKit thêm các biểu tượng nhiều màu trong macOS 11, UIKit đang thêm chúng trong iOS 15.

Đối với các bản phát hành năm nay, các chế độ kết xuất màu bổ sung cho Biểu tượng SF đang được thêm vào.

Và để rõ ràng, các chế độ kết xuất này hoạt động trên tất cả các nền tảng.

Để hỗ trợ các chế độ kết xuất mới, các biểu tượng hiện có các lớp khác nhau, mỗi lớp có một màu khác nhau.

Các lớp này được định nghĩa trong một hệ thống phân cấp, có nghĩa là một lớp nổi bật hơn một lớp khác.

Điều này có nghĩa là chúng ta có ba lớp: tiểu học, trung học và đại học.

Trên iOS, các biểu tượng yêu cầu chế độ mẫu để các chế độ kết xuất mới có hiệu lực.

Trên macOS, việc áp dụng các cấu hình mới sẽ tự động thiết lập chế độ mẫu chính xác.

Và nếu bạn chưa quen với Biểu tượng SF, hãy xem "Giới thiệu Biểu tượng SF" từ WWDC19.

Chế độ kết xuất đầu tiên chúng ta sẽ xem xét là các biểu tượng đơn sắc.

Đây là một ứng dụng Thư thoại.

Trong giao diện người dùng này, một vài biểu tượng đang được sử dụng.

Có một biểu tượng đơn sắc và một vài biểu tượng khác sử dụng chế độ màu khác.

Nhưng trước tiên hãy tập trung vào biểu tượng đơn sắc, và chúng ta sẽ quay lại với những biểu tượng khác sau.

Đúng như tên gọi, một biểu tượng đơn sắc chỉ có một màu: thường là tông màu hoặc màu nhấn của chế độ xem.

Và để đạt được kết quả này, chúng tôi tạo một hình ảnh biểu tượng mới, gán nó cho chế độ xem hình ảnh và đặt màu hoặc màu nhấn để định cấu hình màu của biểu tượng.

Và không có gì thay đổi ở đây: chúng tôi không cần bất kỳ cấu hình bổ sung nào để hiển thị biểu tượng đơn sắc, vì đó là hành vi mặc định.

Vì vậy, đơn sắc là chế độ kết xuất duy nhất trước iOS 15 và macOS 11.

Để chỉ định một màu, tất cả những gì chúng ta phải làm là đặt màu hoặc màu nhấn trên chế độ xem hình ảnh, và thế là xong.

Bây giờ chúng ta đã có chế độ đơn sắc trước đây, chúng ta có thể nói về một chế độ mới: các biểu tượng màu phân cấp.

Một ví dụ điển hình về các biểu tượng phân cấp trên máy Mac là các biểu tượng được sử dụng trong Trung tâm điều khiển.

Có một vài nơi mà các biểu tượng đang được sử dụng trong Trung tâm điều khiển, nhưng hãy phóng to phần Hiển thị.

Có một vài biểu tượng đang được sử dụng ở đây: hàng nút chuyển đổi ở giữa và các biểu tượng trong danh sách các thiết bị.

Các biểu tượng thiết bị được nhuộm màu khác với các nút chuyển đổi phía trên chúng và đây là các biểu tượng có màu phân cấp.

Chế độ màu phân cấp sử dụng hệ thống phân cấp lớp của một biểu tượng để tô màu cho từng lớp và màu được cung cấp được sử dụng làm màu lớp chính.

Các lớp thứ cấp và thứ ba có được các biến thể của màu cơ bản với độ mờ giảm dần.

Bạn chỉ định chế độ màu thông qua một loại cấu hình biểu tượng mới, hoạt động giống hệt như các loại cấu hình biểu tượng hiện có.

Và bằng cách đặt cấu hình biểu tượng của imageView thành loại cấu hình này, biểu tượng sẽ được hiển thị dưới dạng biểu tượng màu phân cấp.

Bảng màu của biểu tượng màu phân cấp dựa trên một màu, với các màu khác bắt nguồn từ một màu đó bằng cách giảm độ mờ đục.

Hệ thống phân cấp lớp rất quan trọng ở đây.

Nếu thiếu một lớp, màu dẫn xuất liên quan sẽ không được sử dụng.

Ngoài ra còn có chế độ kết xuất màu thứ ba: bảng màu.

Như chúng ta sẽ khám phá, nó giống như chế độ kết xuất màu phân cấp, nhưng cũng khác nhau.

Hãy quay lại ví dụ Thư thoại của chúng ta.

Ba nút bên phải mỗi nút có nhiều màu và mỗi nút có các màu khác nhau.

Chúng tôi sẽ xây dựng các nút này từng bước một.

Đầu tiên, chúng ta sẽ khởi tạo các nút của mình với những hình ảnh mong muốn.

Chúng tôi đang sử dụng một cấu hình nút mới cho việc này.

Nhưng những hình ảnh đơn giản này hoàn toàn không phải là thứ chúng ta muốn.

Các hình ảnh nên có hình tròn và được điền vào.

Chúng tôi đã từng có thể làm điều này bằng cách thêm các công cụ sửa đổi mong muốn vào tên biểu tượng, nhưng bây giờ có một cách tốt hơn: các biến thể hình ảnh.

Đúng như tên gọi, khi sử dụng các biến thể hình ảnh, bạn có thể yêu cầu một biến thể khác của hình ảnh mà không cần thay đổi tên theo cách thủ công.

Đầu tiên, hãy biến hình ảnh của chúng ta thành hình tròn.

Sau đó, chúng ta sẽ thêm một màu tô đẹp vào những vòng tròn đó.

Vì chúng tôi đang chỉ định các biến thể trên chế độ xem vùng chứa nút, các biến thể đó được áp dụng cho tất cả các hình ảnh trong tất cả các nút.

Nếu một hình ảnh không có biến thể đó, hình ảnh được chỉ định ban đầu sẽ được sử dụng.

Đặc tả biến thể sẽ lan truyền xuống hệ thống phân cấp chế độ xem và chế độ xem hình ảnh trong hệ thống phân cấp đó sẽ chọn chúng để thực hiện phép thuật của chúng.

Bây giờ chúng ta đã có hình dạng, làm thế nào để chúng ta chỉ định màu sắc cho mỗi biểu tượng này?

Chà, chúng ta có thể tạo ra một loại cấu hình biểu tượng mới, một loại cấu hình chỉ định bảng màu.

Những màu này được áp dụng cho hệ thống phân cấp lớp tương tự như cấu hình màu phân cấp.

Nhưng chúng tôi đang sử dụng các màu ở đây được chỉ định rõ ràng so với việc sử dụng các màu có nguồn gốc.

Và chúng tôi cũng đang sử dụng một loại màu mới trong danh sách các màu bảng màu: màu sắc thái.

Điều này có nghĩa là chế độ xem sẽ tự động áp dụng màu sắc của nó cho lớp thích hợp.

Và đối với nút tiếp theo, chúng tôi làm chính xác như trước đây.

Tải hình ảnh cơ sở, xây dựng cấu hình màu phù hợp và áp dụng chúng vào cấu hình nút.

Và trong trường hợp này, nó trông giống hệt như trước đây, nhưng có một nhược điểm ở đây, và tôi sẽ giải thích điều đó sau.

Và kịch bản tương tự cũng hoạt động cho nút cuối cùng, nhưng chỉ với các màu khác nhau.

Và giống như trước đây, bạn có thể tự hỏi tại sao chúng ta phải chỉ định rõ ràng màu trắng ở đây.

Chúng ta không thể chỉ sử dụng một biểu tượng đơn sắc và tô màu chúng một cách chính xác sao?

Câu trả lời là không, chúng ta không thể, và đây là cái bẫy mà tôi đã đề cập trước đây.

Nhà thiết kế của chúng tôi đã chỉ định rằng các phần bên trong của các biểu tượng này phải luôn có màu trắng.

Và cho đến bây giờ, chúng tôi sẽ vô tình nhận được kết quả chính xác, ngay cả khi sử dụng các biểu tượng đơn sắc.

Tại sao? Chúng tôi đã ở chế độ ánh sáng.

Nhưng khi chúng ta chuyển sang chế độ tối, các biểu tượng đơn sắc không cho chúng ta kết quả mong muốn.

Điều này là do các phiên bản đơn sắc sử dụng loại trực tiếp cho các phần bên trong, và do đó nền chảy qua các khoảng trống.

Bây giờ, bằng cách sử dụng chế độ kết xuất bảng màu, chúng tôi đảm bảo các nút này xuất hiện chính xác cho các kiểu giao diện người dùng khác nhau.

Tôi đã đề cập đến một màu mới trước đây: tintColor.

Đây là một màu động mới trong UIKit sẽ phân giải thành màu sắc thái của chế độ xem mà nó được sử dụng.

Điều này đặc biệt tiện dụng khi chỉ định màu lớp biểu tượng, nhưng bạn cũng có thể sử dụng màu này ở mọi nơi bạn có thể sử dụng bất kỳ màu nào khác.

Tuy nhiên, hãy nhớ rằng các quy tắc xung quanh màu sắc động vẫn được áp dụng.

Xem phiên "Thực hiện chế độ tối trên iOS" của WWDC19 để tìm hiểu thêm về cách hoạt động của màu động.

Một số biểu tượng chỉ có hai lớp.

Ví dụ, có một loạt các biểu tượng thiếu một lớp phụ.

Làm thế nào để chúng ta xử lý chế độ bảng màu cho các loại biểu tượng này?

Một ví dụ điển hình về những biểu tượng này là các biểu tượng thiết bị, chỉ có một lớp chính và một lớp ba.

Làm thế nào để chúng ta tô màu biểu tượng iPad này bằng hai lớp màu?

Vì các biểu tượng có thể có tối đa ba lớp, bạn chỉ có thể chỉ định ba màu, một cho mỗi lớp.

Trong trường hợp này, màu phụ không được sử dụng vì lớp không có ở đó.

Tuy nhiên, có một cách khác để làm điều này cho các biểu tượng chỉ có hai lớp.

Đối với những biểu tượng đó, chúng tôi chỉ có thể chỉ định hai màu trong cấu hình của bạn và màu sắc sẽ được áp dụng cho các lớp có sẵn theo trình tự.

Phương pháp trước đây cho phép tính nhất quán về cách chỉ định màu bảng màu cho các biểu tượng liên quan với số lớp hỗn hợp, bởi vì các màu trực tiếp ánh xạ đến đúng lớp.

Phương pháp thứ hai là một sự tiện lợi khi bạn biết chắc chắn rằng biểu tượng chỉ có hai lớp.

Cấu hình bảng màu chỉ định một tập hợp màu rõ ràng được áp dụng cho hệ thống phân cấp lớp của biểu tượng.

Không giống như chế độ kết xuất phân cấp, chế độ kết xuất bảng màu không tạo ra các màu có nguồn gốc.

Và tương tự như chế độ kết xuất phân cấp, cấp độ phân cấp của mỗi lớp biểu tượng rất quan trọng.

Ngoài ra còn có một giải pháp thuận tiện cho các biểu tượng có ít hơn ba lớp.

Điều này đưa chúng ta đến chế độ kết xuất màu cuối cùng: nhiều màu.

Như tôi đã đề cập trước đây, chế độ màu này đã được thêm vào AppKit và SwiftUI vào năm ngoái nhưng được giới thiệu cho UIKit năm nay.

Một số danh mục này có hình ảnh với nhiều màu sắc.

Đây là những biểu tượng nhiều màu.

Hãy xem chúng ta sẽ thực hiện điều này như thế nào.

Trước hết, chúng ta cần tải hình ảnh cho mỗi ô.

Hiện tại, đây là những biểu tượng thông thường và chúng tôi có chế độ đơn sắc theo mặc định.

Sau đó, chúng tôi cần chỉ ra rằng chúng tôi muốn các biểu tượng nhiều màu.

Chúng tôi làm điều này bằng cách tạo một cấu hình yêu cầu biến thể nhiều màu của một biểu tượng và gán cấu hình đó cho chế độ xem hình ảnh.

Nhưng một biểu tượng không thay đổi: biểu tượng của nó không hỗ trợ nhiều màu.

Vậy, làm thế nào để bạn tìm ra biểu tượng nào hỗ trợ nhiều màu hay không?

Một cách dễ dàng để tìm hiểu là sử dụng ứng dụng Biểu tượng SF.

Tìm kiếm biểu tượng, sau đó sử dụng trình kiểm tra để xem biểu tượng hỗ trợ chế độ kết xuất màu nào.

Ví dụ, biểu tượng ngọn lửa của chúng tôi chỉ hỗ trợ đơn sắc.

Nhưng biểu tượng phổi hỗ trợ cả bốn chế độ kết xuất màu.

Ngoài ra, bạn cũng có thể chơi với ánh xạ màu cho từng lớp ở đây, để cảm nhận tốt hơn về cách biểu tượng sẽ xuất hiện mà không cần phải viết một dòng mã.

Hãy quay lại ví dụ của chúng ta.

Vì vậy, vì không phải tất cả các biểu tượng này đều hỗ trợ nhiều màu, chúng ta cần đặt thủ công màu sắc đến đúng giá trị để biểu tượng hiển thị chính xác.

Một số biểu tượng nhiều màu có lớp màu và chúng sẽ bị ảnh hưởng bởi tông màu hoặc màu nhấn của chế độ xem.

Các biểu tượng không có lớp như vậy sẽ không bị ảnh hưởng.

Trong ví dụ của chúng tôi, không ai trong số họ làm vậy, vì vậy mọi thứ vẫn như cũ.

Như bạn có thể đoán từ tên của cấu hình, cấu hình nhiều màu chỉ ra sự ưu tiên cho kết xuất nhiều màu của một biểu tượng.

Như tôi đã đề cập trước đây, không phải tất cả các biểu tượng đều có biến thể nhiều màu.

Bạn có thể kết hợp cấu hình nhiều màu với một trong các cấu hình màu khác, nhưng nhiều hơn về điều đó sau.

Và kết quả là một cấu hình hỗ trợ hai chế độ màu: nhiều màu khi có sẵn và chế độ màu khác nếu không.

Lưu ý rằng việc kết hợp chế độ phân cấp và chế độ bảng màu sẽ dẫn đến chế độ được chỉ định cuối cùng, vì chúng loại trừ lẫn nhau.

Đổi lại, nếu chế độ màu đó không được hỗ trợ, hệ thống sẽ sử dụng chế độ đơn sắc.

Vì vậy, các biểu tượng nhiều màu có một bộ màu cố định không thể sửa đổi trong mã.

Ngoài ra, một số biểu tượng có một lớp sẽ được hiển thị bằng cách sử dụng tông màu hoặc màu nhấn.

Và bạn không có gì để làm để điều này hoạt động.

Biểu tượng chọn đúng tông màu hoặc màu nhấn từ chế độ xem hình ảnh của nó khi nó được hiển thị.

Bây giờ, chúng tôi đã đề cập đến cả bốn chế độ và cách sử dụng chúng trong mã của bạn.

Nhưng chúng ta có thể làm điều tương tự trong Trình tạo Giao diện không?

May mắn thay, câu trả lời là có.

Xcode đã thêm chức năng tương tự để định cấu hình các chế độ kết xuất màu ngay từ IDE.

Ở đây chúng tôi có Xcode Open hiển thị bảng phân cảnh cho ứng dụng Planets.

Giao diện người dùng ImageView đã được mở rộng để cho phép chỉ định chế độ kết xuất màu.

Và cấu hình màu kết quả cũng có thể kết hợp với các cấu hình đã có trước đó.

Nếu bạn muốn tìm hiểu thêm về tất cả các tính năng mới này trong Trình tạo giao diện, hãy xem "Xây dựng giao diện theo phong cách" năm nay.

Bây giờ chúng ta đã nói về tất cả các chế độ màu khác nhau này, làm thế nào chúng ta có thể kết hợp chúng với các cấu hình khác để có được các hiệu ứng phức tạp hơn?

May mắn thay, nó không quá khó.

Hãy xem một ví dụ khác, lần này là từ ứng dụng Phím tắt.

Các biểu tượng của mỗi hành động khá lớn, nhưng chúng dường như cũng có chế độ kết xuất màu phân cấp.

Vì vậy, chúng ta cần hai cấu hình: một để chỉ định kích thước điểm và một để chỉ định cấu hình màu sắc.

Nhưng chúng ta chỉ có thể áp dụng một.

Làm thế nào để chúng ta kết hợp chúng?

Hóa ra có một cách dễ dàng để làm điều này.

Có một phương pháp để kết hợp hai cấu hình, dẫn đến một cấu hình có các yếu tố của cả hai cấu hình.

Trong ví dụ ở đây, chúng tôi tạo hai cấu hình: một để chỉ định kích thước điểm và một để chỉ định màu phân cấp.

Sau đó chúng tôi kết hợp chúng bằng cách sử dụng các phương pháp áp dụng để tạo ra một cấu hình cuối cùng.

Và cấu hình đó được áp dụng trên chế độ xem hình ảnh hiển thị hình ảnh, cho chúng ta kết quả mong muốn.

Lưu ý rằng cơ chế này không chỉ giới hạn ở cấu hình màu sắc.

Bạn cũng có thể sử dụng cái này với các loại cấu hình khác.

Ví dụ, kết hợp văn bản, kiểu dáng và trọng lượng.

Bây giờ chúng ta đã biết cách kết hợp các cấu hình khác nhau.

Chúng ta còn lại một chủ đề: sử dụng các ký hiệu màu trong các chuỗi được gán.

Lấy ví dụ cuối cùng này.

Đây là một ứng dụng tưởng tượng liệt kê các khách sạn khác nhau và thông tin về các phòng trống của họ.

Có một vài nơi mà các biểu tượng được kết hợp với văn bản.

Nhưng hãy tập trung vào các tiện nghi trong phòng và cách chúng tôi sẽ thực hiện văn bản này.

Nó khá đơn giản, nhưng hơi phức tạp.

Chúng ta phải xây dựng một chuỗi được quy kết với tệp đính kèm hình ảnh.

Đầu tiên, chúng tôi tải hình ảnh, sử dụng cấu hình màu chính xác.

Trong trường hợp này, chúng tôi đang sử dụng cấu hình màu phân cấp.

Chúng tôi sử dụng hình ảnh này để tạo tệp đính kèm văn bản và sau đó chúng tôi sử dụng tệp đính kèm đó để hoàn thành chuỗi được gán của mình.

Và điều này sau đó được lặp lại cho tất cả các tiện nghi có sẵn.

Trên nhãn hiển thị văn bản, chúng tôi cũng chỉ định phông chữ chính xác và cùng màu văn bản như chúng tôi đã sử dụng cho các cấu hình màu phân cấp.

Các ký hiệu đơn sắc tự động chọn màu văn bản, nhưng đối với các biểu tượng có cấu hình màu, chúng ta phải chỉ định màu một cách rõ ràng.

Và các ký hiệu màu sắc chọn kích thước phông chữ được chỉ định trong chuỗi, giống như các ký hiệu đơn sắc.

Sau các bước này, chúng tôi có kết quả mà chúng tôi muốn: một nhãn có nội dung, màu sắc và kích thước phù hợp, nhờ vào việc tích hợp các ký hiệu trong các chuỗi được gán.

Chúng tôi đã giới thiệu ba chế độ màu mới cho Biểu tượng SF ngoài chế độ hiện có và chúng tôi đã giải thích cách sử dụng chúng trong ứng dụng của bạn.

Biểu tượng là một cách tuyệt vời để thêm hình ảnh chất lượng cao vào ứng dụng của bạn.

Các biểu tượng màu mở rộng trên đó, cho phép nhiều khả năng hơn nữa.

Nếu bạn thích phiên này, hãy chắc chắn kiểm tra một vài phiên liên quan.

Xem "Có gì mới trong Biểu tượng SF" để biết thông tin cơ bản về các khả năng mới.

Hoặc hãy xem "Biểu tượng SF trong SwiftUI" để xem cách bạn có thể sử dụng các biểu tượng mới trong SwiftUI.

Cảm ơn vì đã xem, và bây giờ hãy xây dựng những ứng dụng tuyệt vời!

[Nhạc lạc quan].