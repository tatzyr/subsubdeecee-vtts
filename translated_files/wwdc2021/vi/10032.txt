10032

♪ Nhạc bass đang phát ♪

♪

Megan Gardner: Xin chào! Tên tôi là Megan Gardner, một kỹ sư trong nhóm WebKit, và hôm nay chúng ta sẽ cùng nhau khám phá các bổ sung WKWebView.

Trước khi chúng ta bắt đầu hành trình của mình, hãy chắc chắn rằng chúng ta biết những gì chúng ta đang khám phá.

Hãy để tôi nói cho bạn biết WKWebView là gì và tại sao bạn có thể muốn sử dụng nó trong ứng dụng của mình.

Khi người dùng nhấp vào URL, họ đang mong đợi một trang web tải và có thể tương tác với nội dung đó.

Tải URL, hiển thị nội dung và chạy bất kỳ JavaScript nào trên nội dung đó là một nhiệm vụ rất phức tạp!

Vì vậy, chúng tôi đã gói gọn hầu hết công việc đó cho bạn bên trong WKWebView.

Và không chỉ cho bạn!

WKWebView là chế độ xem được sử dụng để hiển thị tất cả nội dung web trên iOS và phần lớn MacOS.

Điều này bao gồm Safari.

Vì vậy, nếu bạn cần hiển thị một trang web trong ứng dụng của mình, thì bạn có thể cho rằng bạn cần thêm WKWebView.

Nhưng chờ đã!

Bạn đang làm gì với nội dung đó vậy?

Nếu bạn cần một cách để xem một trang web, nhưng bạn không cần nhiều tương tác tùy chỉnh với nội dung đó, có lẽ bạn chỉ cần một SFSafariViewController.

Điều này giống như một Safari nhỏ bên trong ứng dụng của bạn.

Sử dụng một trong những quan điểm này cực kỳ đơn giản, nhưng có một sự đánh đổi.

Bạn có thể làm rất ít để tương tác với nội dung web.

Nhưng năm nay, chúng tôi đã làm cho nó dễ dàng hơn một chút với bộ điều khiển chế độ xem Safari.

Người dùng của bạn luôn có thể chạy các tiện ích mở rộng ứng dụng thông qua bảng chia sẻ trên nội dung của bộ điều khiển chế độ xem Safari của bạn, nhưng đối với các chức năng đặc biệt chỉ được xây dựng cho ứng dụng của bạn, điều đó hơi cồng kềnh và khó phát hiện đối với người dùng.

Vì vậy, trong iOS 15, chúng tôi đã thêm một API mới để đưa một trong những tiện ích mở rộng ứng dụng của bạn đến một nút tùy chỉnh trên bộ điều khiển chế độ xem Safari.

Bạn có thể ánh xạ nút này đến một trong những tiện ích mở rộng chia sẻ của ứng dụng và thậm chí bạn có thể đặt hình ảnh cho nút đó thể hiện tốt nhất tiện ích mở rộng sẽ chạy, cho phép người dùng chạy tiện ích mở rộng ứng dụng của bạn trực tiếp từ thanh công cụ, bao gồm cả việc chạy JavaScript trên trang.

Nhưng đây vẫn là một lượng tương tác rất hạn chế.

Và đó là nơi WKWebView xuất hiện.

WKWebView cho phép bạn làm nhiều thứ với nội dung mà nó đang hiển thị.

Chúng tôi có nhiều API để tải, thao tác và tương tác với nội dung.

Vì vậy, nếu bạn cần hiển thị nội dung web và bạn cần có các tương tác phức tạp với nó, thì WKWebView là dành cho bạn.

Và vì WKWebView là về việc tương tác với nội dung web, chúng tôi luôn cố gắng làm điều đó dễ dàng hơn cho bạn.

Chúng tôi đảm nhận nhiều khối lượng công việc hơn bằng cách tạo các API dễ dàng để bạn áp dụng sẽ giúp bạn truy cập và thao tác nội dung của chế độ xem web của mình.

Năm nay chúng tôi đã làm việc chăm chỉ, thêm các tính năng mới và hữu ích vào WKWebView, và hôm nay, tôi muốn nói với bạn về một số trong số chúng.

Đầu tiên, chúng tôi sẽ đề cập đến một số API cho phép bạn tương tác và thao tác nội dung web của mình mà không cần phải tiêm JavaScript.

Sau đó, chúng tôi sẽ đề cập đến một số API sẽ cung cấp cho bạn quyền truy cập vào chức năng mà trước đây chỉ có sẵn trong Safari, cho phép trải nghiệm giống như trình duyệt sâu hơn trong ứng dụng của bạn.

Trước khi chúng tôi xem xét các API này cho phép bạn chọn không sử dụng JavaScript, hãy xem lại lý do tại sao bạn có thể muốn tránh JavaScript.

Chúng tôi yêu JavaScript!

Đó là ngôn ngữ của trang web!

Nhưng việc tiêm JavaScript rất phức tạp.

Giao diện giữa bản địa và web mà bạn cần vượt qua tiêm có thể khó điều hướng và cồng kềnh.

Nó cũng có thể dễ dàng có tác dụng phụ ngoài ý muốn hoặc khó quản lý khi xử lý nội dung từ nhiều nguồn web.

Tốt nhất là tránh cơn đau đầu đó nếu bạn có thể.

Ngoài ra còn có một số tính năng không tương thích với JavaScript được tiêm.

Năm ngoái, chúng tôi đã giới thiệu một tính năng mới được gọi là tên miền ràng buộc ứng dụng.

Điều này cho phép bạn chỉ định miền nào bạn muốn cho phép tương tác sâu trong ứng dụng của mình.

Tên miền ràng buộc ứng dụng giúp tăng tính bảo mật và quyền riêng tư của ứng dụng cho người dùng của bạn.

Nhưng để có được lợi ích này, bạn không thể đưa JavaScript vào chế độ xem web của mình.

Làm như vậy sẽ vô hiệu hóa tính năng.

Ngoài ra còn có các tính năng có giá trị cao khác, như Apple Pay, mà bạn không có quyền truy cập trong chế độ xem web của mình nếu bạn chọn tiêm JavaScript.

Do đó, chúng tôi đã thêm một số API mới để cho phép bạn dễ dàng tương tác với nội dung trong chế độ xem web của mình mà không cần phải xử lý việc tiêm JavaScript.

Các API mới này được chia thành ba loại.

Đầu tiên, chúng tôi có những cách đơn giản để bạn truy cập màu chủ đề của các trang và các màu liên quan cho một trang web.

Tiếp theo, một cách để vô hiệu hóa tương tác văn bản, cũng như có thể kiểm soát phát lại phương tiện trong chế độ xem web của bạn.

Đầu tiên, hãy khám phá màu sắc chủ đề.

Bạn có thể nhớ năm ngoái chúng tôi đã nói với bạn về một trong những ứng dụng nội bộ quan trọng của chúng tôi, Browser Pets, được viết bởi Brady Eidson để kết hợp các nguồn cấp dữ liệu từ WebKittens và Pups của chúng tôi trên các trang web Safari.

Chà, với tất cả các API mới có sẵn, Brady và tôi quyết định chúng ta nên cập nhật công cụ quan trọng này, để tận dụng tối đa nhiều con chó và mèo nuôi dưỡng tinh thần của chúng ta.

Một trong những kỹ sư trên trang web WebKittens đã quyết định thêm một màu chủ đề năng động thay đổi theo mùa, thêm một chút tinh tế vào những bức ảnh thú cưng quan trọng của chúng tôi.

Tôi cũng muốn điều này được phản ánh trong ứng dụng, nhưng tôi không muốn sao chép mã.

May mắn thay, chúng tôi có một API mới giúp việc này trở nên rất dễ dàng.

Như bạn có thể thấy ở đây, tôi có thể đặt màu của chế độ xem tiêu đề thành màu chủ đề của trang web bằng API mới này, do đó tận dụng công việc mà kỹ sư đồng nghiệp của tôi đưa vào trang web WebKittens.

Kỹ sư trang web thậm chí có thể thêm các chủ đề mới trong tương lai và chúng sẽ được phản ánh trong ứng dụng mà không cần bất kỳ công việc bổ sung nào từ phía tôi.

Nếu themeColor không được đặt, trong một hạt giống trong tương lai, chúng tôi có một màu nền được tính toán thay thế được hiển thị dưới PageBackgroundColor, mà bạn có thể sử dụng tương tự.

Bạn có thể nhận thấy Safari đang sử dụng cái này như thế nào để tạo ra một giao diện kết hợp ứng dụng với trang web.

Bạn thậm chí có thể viết theo giá trị này để tùy chỉnh màu sắc được sử dụng để lấp đầy nền khi cuộn qua cuối nội dung web.

Tiếp theo, hãy nói về tương tác văn bản.

Gần đây chúng tôi đã thêm video vào WebKittens và Pups trên các trang web Safari và người dùng Browser Pets đã phàn nàn về việc vô tình kích hoạt các điều khiển lựa chọn văn bản khi cố gắng phát các video đó.

Chà, chúng tôi không muốn điều đó!

May mắn thay, có một API mới để nhanh chóng và dễ dàng vô hiệu hóa tương tác văn bản trên chế độ xem web.

Nó đơn giản!

Khi thiết lập chế độ xem web của bạn, chỉ cần đảm bảo đặt textInteractionEnabled thành sai trong các tùy chọn được sử dụng để tạo chế độ xem web.

Điều này sẽ tắt tất cả các tương tác văn bản trong chế độ xem web đó.

Bây giờ các điều khiển lựa chọn văn bản sẽ không cản trở các điều khiển phương tiện và chúng ta có thể phát những video mèo con đó mà không bị cản trở.

Nói về điều khiển phương tiện, chúng tôi có một số cập nhật tuyệt vời cho điều khiển phát lại phương tiện!

Trước đây, nếu bạn muốn tạm dừng hoặc tạm dừng phương tiện đang phát trong chế độ xem web của mình, bạn cần tiêm JavaScript.

Bạn cũng cần tìm phần tử cụ thể trong DOM để có thể kiểm soát nó.

Nhưng bây giờ, chúng tôi có một API đơn giản giúp dễ dàng kiểm soát trạng thái phương tiện trong chế độ xem web của mình.

Bây giờ bạn có thể dễ dàng tạm dừng tất cả phương tiện, đóng tất cả các cửa sổ phương tiện, lấy trạng thái của phương tiện trên trang hoặc đặt phương tiện bị đình chỉ, điều này sẽ tạm dừng phương tiện và vô hiệu hóa điều khiển của người dùng cho đến khi setAllMediaPlaybackSuspended được đặt thành sai.

Để giúp bạn làm quen hơn với các API mới này và chúng dễ sử dụng như thế nào, tôi sẽ chuyển nó cho Brady, người sẽ chỉ cho bạn cách chúng tôi sử dụng các API kiểm soát phương tiện mới này trong Browser Pets!

Brady Eidson: Cảm ơn, Megan.

Xin chào, tôi là Brady Eidson, một kỹ sư trong nhóm WebKit.

Như Megan đã ám chỉ, cả WebKittens và Pups trên các trang web Safari gần đây đã thêm khả năng đăng video thay vì chỉ hình ảnh tĩnh, điều đó có nghĩa là ứng dụng Browser Pets của chúng tôi hiện cũng có video.

Đây là cách ứng dụng trông như thế nào ngay bây giờ.

Các nút này là các nút giao diện người dùng gốc cho các tính năng khác nhau mà tôi đang thêm vào.

Biểu ngữ đó ở đầu trang là nội dung web và trang web đã đặt màu chủ đề, mà tôi đã áp dụng bằng cách sử dụng thuộc tính themeColor xem web mà Megan đã đề cập.

Sau khi video được thêm vào, một số người bày tỏ sở thích của họ là không có video tự động phát.

Nút Tạm dừng này là để phù hợp với chúng.

Hãy xem nó làm gì.

Chỉ là video về mèo con bị tạm dừng, không phải những con chó.

Và nhấn Play, không có gì xảy ra.

Hãy cùng xem mã.

JavaScript này là lựa chọn duy nhất của tôi để cố gắng tạm dừng các video này trước đây và nó có vấn đề.

Tôi phải hiểu cấu trúc của các trang web từ hai trang web khác nhau và cấu trúc đó liên tục thay đổi.

Ví dụ, JavaScript này từ trang web Pups đã từng hoạt động nhưng không còn nữa.

May mắn thay bây giờ có một cách tốt hơn.

Đầu tiên, tôi đã thông qua cuộc gọi pauseAllMediaPlayback trên chế độ xem web.

Điều đó tương đương với việc gọi hàm JavaScript tạm dừng trên mọi phần tử phương tiện trên một trang.

Và nó hoạt động tốt.

Nhưng hãy chú ý điều gì sẽ xảy ra khi tôi làm mới trang.

Các video phát lại.

Tải trang mới.

Những video này chưa bao giờ bị tạm dừng.

Nếu tôi muốn thứ gì đó dính hơn, tôi sẽ sử dụng setAllMediaPlaybackSuspended.

Hãy thử điều đó ngay bây giờ.

Chú ý cách nó tạm dừng các video và chúng vẫn bị tạm dừng, ngay cả sau khi làm mới trang.

Đó là bởi vì cài đặt này là một thuộc tính của chính chế độ xem web chứ không phải của bất kỳ nội dung nào bên trong nó.

Nó cũng cho phép tôi tiếp tục.

Nhờ những API mới này, giờ đây bạn có thể linh hoạt thêm trải nghiệm truyền thông tốt hơn vào ứng dụng của mình.

Trở lại với bạn, Megan.

Megan: Cảm ơn, Brady!

Những con vật cưng đó trông rất tuyệt, và thậm chí còn tốt hơn với các điều khiển phương tiện mới.

Vì vậy, đó là những API mới của chúng tôi cho WKWebView cho phép bạn tránh sử dụng JavaScript.

Chúng tôi hy vọng họ làm cho việc viết ứng dụng của bạn và tương tác với nội dung web của bạn thậm chí còn dễ dàng hơn trước.

Tiếp theo, chúng tôi sẽ xem xét một số API cấp trình duyệt sẽ cung cấp cho bạn quyền truy cập vào chức năng mà trước đây chỉ có sẵn trong Safari.

Chúng tôi có ba lĩnh vực API để đề cập.

Đầu tiên là một cờ ghi đè HTTPS đơn giản.

Tiếp theo là chụp phương tiện hoặc - như đã biết trên web - getUserMedia, hiện có sẵn trong chế độ xem web của bạn.

Và cuối cùng, một API mới để quản lý tải xuống sẽ hoạt động liên quan đến WKWebView để cho phép và quản lý tải xuống trong ứng dụng của bạn.

Vậy hãy bắt đầu với HTTPS.

Bảo mật và quyền riêng tư trên web luôn quan trọng và chúng tôi luôn tìm kiếm những cách mới để giúp bảo mật và quyền riêng tư dễ dàng hơn cho bạn và người dùng của bạn.

Đã có một sự thúc đẩy rộng rãi trong ngành để chuyển lưu lượng truy cập sang HTTPS, vì đây là một cách an toàn hơn và bảo mật hơn để duyệt web.

Nhiều trang web hàng đầu hỗ trợ HTTPS và một số thậm chí còn tự động nâng cấp kết nối từ HTTP lên HTTPS.

Bắt đầu từ iOS 15 và macOS Monterey, chúng tôi đang nhận các yêu cầu HTTP đến các trang web mà chúng tôi biết hỗ trợ HTTPS và nâng cấp chúng cho bạn.

Để tăng cường bảo mật này, bạn không cần phải làm gì cả!

Nhưng, nếu bạn cần tắt nó để gỡ lỗi cục bộ, có một cờ dễ dàng để đặt cấu hình.

Hy vọng rằng bạn sẽ không cần cái này, nhưng nó ở đây nếu bạn làm vậy, và nó có lẽ không nên được thực hiện trong mã sản xuất.

Tiếp theo, hãy xem lại những gì đang xảy ra với phương tiện truyền thông.

Nhìn chằm chằm vào iOS 14.3, chúng tôi đã bật getUserMedia cho WKWebView, cho phép các chức năng WebRTC hoạt động bên trong ứng dụng của bạn.

Bây giờ, chúng tôi đã làm cho nó thậm chí còn tốt hơn!

Khi bạn tải nội dung web của mình từ trình xử lý sơ đồ tùy chỉnh, lời nhắc yêu cầu của người dùng sẽ hiển thị ứng dụng của bạn là nguồn gốc của yêu cầu, thay vì hiển thị yêu cầu từ URL trang web.

Điều này sẽ làm cho trải nghiệm trực quan và liền mạch hơn cho người dùng của bạn.

Nếu bạn muốn lời nhắc vẫn là một yêu cầu từ URL, chỉ cần tải mà không có trình xử lý sơ đồ tùy chỉnh và lời nhắc sẽ được hiển thị như ngày hôm nay.

Chúng tôi cũng có một API mới để cho phép bạn quyết định khi nào và làm thế nào để nhắc người dùng cho quyền máy ảnh và micrô khi làm việc với nội dung web.

Khi bạn đã có được quyền của người dùng đối với máy ảnh và micrô thông qua các quyền và lời nhắc thông thường, bạn có thể quyết định xem lời nhắc cho phép có nên được hiển thị hay không.

Bạn có thể sử dụng điều này để thực hiện lời nhắc của riêng mình hoặc ghi nhớ phản hồi trước đó của người dùng đối với nội dung web mà bạn kiểm soát và tin tưởng.

Bằng cách tạo và cài đặt đại diện giao diện người dùng trên WKWebView của bạn, giờ đây bạn có thể quyết định khi nào người dùng nên được nhắc cho phép sử dụng máy ảnh hoặc micrô của họ.

Nếu bạn không triển khai đại diện này, người dùng sẽ tiếp tục nhận được lời nhắc như họ làm hôm nay.

Nhưng nếu bạn muốn bỏ qua lời nhắc vì bạn đã lưu tùy chọn của người dùng từ các tương tác trước đó với một trang web, đại diện này sẽ cho phép bạn làm điều đó.

Chúng tôi đã tận dụng các API mới này cho Browser Pets như thế nào?

Chà, do hoàn cảnh ngoài tầm kiểm soát của chúng tôi, nhóm đã phải hủy cuộc gặp gỡ Chó con hàng tháng của chúng tôi trong Công viên.

Để đáp ứng nhu cầu chia sẻ những chú chó con thân yêu của chúng tôi với nhau, Brady và tôi quyết định thêm một công viên chó ảo vào Browser Pets, vì vậy chúng tôi vẫn có thể có được sự tốt đẹp dành cho chó xã hội của mình.

Điều này liên quan đến việc sử dụng getUserMedia để thiết lập chức năng WebRTC để chúng ta có thể xem và trò chuyện với nhau và những người bạn chó của chúng ta theo thời gian thực!

Khi thiết lập đại diện giao diện người dùng, chúng tôi biết rằng các yêu cầu từ máy chủ của chúng tôi là những yêu cầu mà người dùng của chúng tôi sẽ cho phép nếu họ đã cho phép ứng dụng sử dụng máy ảnh và micrô.

Vì vậy, tôi có thể bỏ qua lời nhắc đó bằng cách đặt đại diện này trên WKWebView của mình.

Nhưng đó không phải là tất cả những gì tôi có thể làm!

Thay vì phải thực thi JavaScript để khởi động và dừng phương tiện của người dùng này, chúng ta có thể lấy và đặt trạng thái, tương tự như cách chúng ta có thể tương tác với các điều khiển phương tiện mà không cần JavaScript.

Điều này hoạt động cho máy ảnh cũng như cho micrô.

Để giúp bạn làm quen hơn với các API mới này và chúng dễ sử dụng như thế nào, tôi sẽ chuyển nó lại cho Brady, người sẽ chỉ cho bạn cách chúng tôi thêm công viên chó ảo đó vào Browser Pets!

Brady: Cảm ơn, Megan.

Như Megan đã đề cập, chúng tôi phải có một công viên chó ảo hoạt động vì thời gian chúng tôi đang sống.

Hãy cùng xem lại ứng dụng Browser Pets.

Một số bạn có thể đã nhận thấy nút Gọi.

Hãy nhấn vào đó ngay bây giờ.

Chúng tôi ngay lập tức được kết nối với công viên chó ảo của chúng tôi được tổ chức tại nhà của bạn chúng tôi.

Hãy tham gia cuộc vui bằng cách nhấn vào Kết nối.

Bây giờ, vì đây là lần đầu tiên chúng tôi sử dụng máy ảnh trong ứng dụng này, chúng tôi nhận được lời nhắc trên toàn hệ thống về Browser Pets.

Hãy chắc chắn chọn Cho phép.

Và lời nhắc thứ hai - cụ thể cho trang web chúng tôi hiện đang xem - là hành vi mặc định ngày nay trong hệ thống.

Hãy cũng cho phép điều đó.

Và chúng ta đây rồi. getUserMedia đang hoạt động.

Nhưng hãy xem liệu chúng ta có thể thay đổi WKUIDelegate của mình, như Megan đã đề cập, để làm cho trải nghiệm trở nên tốt hơn hay không.

Trong đại diện của chúng tôi, chúng tôi sẽ chỉ kiểm tra người dẫn chương trình cung cấp nội dung công viên chó ảo của chúng tôi và cho phép truy cập chụp phương tiện.

Hãy xem điều đó thay đổi Browser Pets như thế nào.

Tuyệt vời. Không có lời nhắc.

Và cách chúng tôi sử dụng đại diện, chúng tôi cũng giữ cho người dùng của mình an toàn và riêng tư nếu nội dung trong tương lai đến từ bất kỳ máy chủ nào khác và cố gắng truy cập máy ảnh.

Bây giờ chúng ta đang trò chuyện video, hãy thử nút Tắt tiếng.

Như bạn có thể thấy, nguồn cấp dữ liệu máy ảnh của tôi bị rớt.

Bạn cũng sẽ nhận thấy rằng chỉ báo ghi âm trên thanh trạng thái đã biến mất và không tắt tiếng, tôi có thể mang lại nguồn cấp dữ liệu máy ảnh của mình và chỉ báo ghi âm sẽ trả về.

Điều này thật dễ dàng; không cần JavaScript.

Tất cả những gì tôi phải làm là kết nối nó với webView.setCameraCaptureState như Megan đã đề cập.

Đây chỉ là một hương vị về cách các API này cho phép bạn dễ dàng tùy chỉnh trải nghiệm chụp phương tiện trong ứng dụng WKWebView của mình.

Trở lại với bạn, Megan.

Megan: Cảm ơn, Brady!

Tôi rất vui vì chúng ta có thể tiếp tục gặp gỡ tất cả những thú cưng tuyệt vời của chúng ta.

Cuối cùng, hãy nói về việc tải xuống.

Người dùng Browser Pets đã nói với tôi rằng họ muốn có thể chia sẻ những bức ảnh động vật dễ thương này với bạn bè và gia đình của họ, nhưng chỉ nhân viên Apple mới được phép sử dụng ứng dụng Browser Pets.

May mắn thay, chúng tôi đã thêm một API cho phép bạn cho phép và quản lý tải xuống từ chế độ xem web của mình, giúp việc chia sẻ tệp dễ dàng hơn bao giờ hết!

Có ba cách để bắt đầu tải xuống từ web.

Nội dung web có thể bắt đầu tải xuống, máy chủ có thể bắt đầu tải xuống và ứng dụng có thể bắt đầu tải xuống.

Nội dung web bắt đầu tải xuống bằng JavaScript tương tự như thế này.

Khi JavaScript này được thực thi, nó sẽ bắt đầu một hành động điều hướng tải xuống, gọi đại diện điều hướng với shouldPerformDownload được đặt thành true.

Bạn nên sử dụng giá trị này để xác định - cùng với logic khác - nếu việc tải xuống được cho phép.

Máy chủ có thể bắt đầu tải xuống HTTP như thế này sau khi gọi loadRequest trên chế độ xem web của bạn.

Khi điều đó xảy ra, WKNavigationResponse của bạn sẽ có trường tiêu đề Content-Disposition với giá trị chứa "attachment", và khi có, bạn nên trả về WKNavigationActionPolicyDownload từ trình xử lý quyết định của mình để bắt đầu tải xuống.

Cuối cùng, ứng dụng của bạn có thể quyết định nó muốn tải xuống thứ gì đó trong ngữ cảnh của trang hiện tại bằng cách sử dụng NSURLRequest như thế này.

Dù bạn sử dụng phương pháp nào, khi bạn nhận được đối tượng WKDownload, bạn cần đặt thuộc tính đại diện trên đối tượng đó để có thể cho nó biết nơi ghi các byte vào đĩa.

Nếu bạn không làm vậy, việc tải xuống sẽ tự động bị hủy.

Nếu quá trình tải xuống không thành công, dữ liệu để tiếp tục tải xuống sẽ được trao cho bạn nếu bạn thực hiện phương pháp trên đại diện.

Sau đó, bạn có thể sử dụng dữ liệu đó để khởi động lại quá trình tải xuống từ chế độ xem web.

Với API mới này, bây giờ tôi có thể cung cấp một cách dễ dàng để tải mèo con xuống Tệp và không lưu chúng vào Ảnh.

Vậy đó là những API cấp trình duyệt của chúng tôi.

Chúng tôi nghĩ rằng họ sẽ cung cấp cho bạn và người dùng của bạn nhiều lựa chọn hơn để có trải nghiệm web phong phú trong ứng dụng của bạn.

Chà, thật là một cuộc hành trình!

Hôm nay chúng ta đã khám phá rất nhiều thứ cùng nhau.

Chúng tôi đã nói về một số API mà bạn có thể sử dụng thay vì tiêm JavaScript và chúng tôi đã đề cập đến một số tính năng cấp trình duyệt mạnh mẽ hơn.

Việc sử dụng màu chủ đề mới, tương tác văn bản và API phát lại phương tiện dễ dàng hơn rất nhiều.

Và chúng tôi đã làm cho nó dễ dàng và an toàn hơn để có trải nghiệm phong phú hơn trong ứng dụng của bạn với các kết nối HTTPS tự động, kiểm soát dễ dàng và an toàn các lời nhắc getUserMedia và bổ sung WKDownload, vì vậy bạn có thể dễ dàng quản lý tải xuống trong ứng dụng của mình.

Bạn có thể tìm hiểu thêm về một số API web mới mà chúng tôi đang hỗ trợ trong năm nay, trong phiên "Phát triển nội dung web nâng cao".

Bạn cũng có thể khám phá những cách mới để gỡ lỗi và cải thiện nội dung web của mình trong "Khám phá các cải tiến của Trình kiểm tra web"; hai phiên tuyệt vời sẽ giúp bạn tạo nội dung web tuyệt vời cho ứng dụng của mình hoặc cho web.

Trang web vẫn đang phát triển, và như nó đã phát triển, chúng ta cũng vậy.

Nhiều API mà chúng tôi đã triển khai trong năm nay dựa trên phản hồi của nhà phát triển.

Vì vậy, nếu bạn có một API mà bạn muốn xem, chúng tôi muốn nghe ý kiến của bạn!

Ngoài phản hồi với Apple, webkit.org có nhiều cách để tiếp cận, từ không gian làm việc Slack đến danh sách gửi thư của chúng tôi.

WebKit là mã nguồn mở, vì vậy đây cũng là nơi bạn có thể học cách tự kiểm tra và xây dựng WebKit, cũng như các lỗi tệp.

Cảm ơn bạn đã tham gia cùng tôi trong việc khám phá các API mới của chúng tôi!

Tôi hy vọng bạn có một phần còn lại tuyệt vời của WWDC21!

♪