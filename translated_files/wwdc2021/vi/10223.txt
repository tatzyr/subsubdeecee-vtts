10223

♪ Nhạc bass đang phát ♪

♪

Daniel Sykes-Turner: Xin chào, tên tôi là Daniel Sykes-Turner và tôi là một kỹ sư tiếp cận.

Trong buổi nói chuyện này, đồng nghiệp Virata của tôi và tôi sẽ xem xét một số tính năng trợ năng trên watchOS và cách bạn với tư cách là nhà phát triển có thể xây dựng ứng dụng đồng hồ của mình để hỗ trợ những người sử dụng các tính năng này.

Trong buổi nói chuyện hôm nay, trước tiên bạn sẽ được giới thiệu về khả năng truy cập trên watchOS.

Sau đó, tôi sẽ đi sâu vào các API khả năng truy cập và chỉ cho bạn những gì bạn có thể làm để hỗ trợ các loại khả năng truy cập trực quan khác nhau.

Và cuối cùng, Virata sẽ hướng dẫn bạn cách hoạt động của khả năng tiếp cận động cơ trên đồng hồ và bạn có thể làm gì để hỗ trợ nó.

Hãy bắt đầu với khả năng truy cập trên watchOS.

Khả năng tiếp cận là về việc mọi người sử dụng thiết bị của họ theo cách tốt nhất cho họ.

Và điều đó có nghĩa là, để cung cấp cho ứng dụng của bạn trải nghiệm người dùng tốt nhất, khả năng truy cập phải được xem xét.

Trên Apple Watch, chúng tôi có một bộ lớn các tính năng trợ năng có thể giúp việc sử dụng ứng dụng của bạn dễ dàng hơn.

Ví dụ, các công nghệ hỗ trợ như VoiceOver cho phép những người khiếm thị sử dụng đầy đủ Apple Watch của họ bằng cách điều hướng màn hình bằng một loạt các cử chỉ và thao tác trong khi nội dung được đọc lại cho họ.

Và thương hiệu mới trên watchOS năm nay là AssistiveTouch, đã được mô phỏng lại đặc biệt cho Apple Watch.

AssistiveTouch cho phép những người bị suy giảm vận động sử dụng Apple Watch của họ mà không cần chạm vào màn hình.

Virata sẽ chỉ cho bạn cách hoạt động của nó sau này và bạn có thể làm gì để hỗ trợ nó.

watchOS cũng cung cấp một số chỗ ở hiển thị như Giảm chuyển động, Văn bản in đậm và cũng mới trong năm nay, kích thước văn bản có khả năng truy cập lớn.

Hãy nói về khả năng truy cập trực quan trên watchOS.

Hỗ trợ khả năng truy cập với các API phù hợp sẽ đảm bảo rằng VoiceOver hoạt động chính xác cho người dùng của bạn, bất kể ứng dụng của bạn được viết bằng WatchKit hay SwiftUI.

Buổi nói chuyện này sẽ tập trung vào khả năng tiếp cận cho SwiftUI.

Tuy nhiên, hãy biết rằng tất cả các nguyên tắc bạn học ở đây cũng sẽ áp dụng cho WatchKit.

Và khi làm cho ứng dụng của bạn có thể truy cập được, đừng quên các biến chứng và thông báo.

Các biến chứng và thông báo động cũng cần hỗ trợ các công nghệ hỗ trợ của chúng tôi, vì chúng hoạt động như một đường dẫn khác cung cấp nội dung từ ứng dụng của bạn.

Bây giờ, không phải là cách tốt nhất để học một cái gì đó mới để xây dựng một ứng dụng sao?

May mắn thay, tôi đã khá đầu tư vào việc trồng cây tại nhà nên tôi quyết định tiếp tục và xây dựng một ứng dụng để giúp chăm sóc chúng.

Bây giờ, nó vẫn chưa hoàn thành, nhưng trên màn hình chính ở đây tôi có tất cả thông tin về cây của mình, bao gồm lịch trình sắp tới của các nhiệm vụ chăm sóc cây trồng: tưới nước trong năm ngày, bón phân trong bảy ngày và giữ trong một lượng ánh sáng mặt trời trung bình.

Tôi cũng có một vài loại cây khác trong danh sách ở đây.

Sau đó, đối với mỗi cây, tôi có hai nút mà tôi có thể sử dụng để ghi lại một nhiệm vụ như khi tôi tưới nước hoặc bón phân.

Và bằng cách chạm vào ô, tôi có thể điều chỉnh số ngày giữa tưới nước và bón phân.

Vì đây là một ứng dụng cung cấp thông tin, mỗi ô chứa một lượng văn bản hợp lý.

Ở đây tôi đang cho bạn thấy ứng dụng trông như thế nào khi kích thước văn bản hệ thống ở kích thước mặc định; nó trông khá tốt.

Nhưng nếu tôi thay đổi kích thước văn bản hệ thống thành cực nhỏ, như được hiển thị ở bên trái, bạn sẽ nhận thấy rằng trong khi các nút và văn bản danh sách nhiệm vụ thay đổi kích thước, tiêu đề tên nhà máy vẫn giữ nguyên kích thước.

Sau đó, khi tôi chuyển lên khả năng truy cập cực lớn ở bên phải, kích thước văn bản danh sách nhiệm vụ đã phát triển lớn đến mức nó đã bị cắt ngắn và không còn phù hợp với tất cả thông tin trên màn hình nữa.

Hãy cùng xem ứng dụng của chúng tôi có thể hỗ trợ Dynamic Type tốt hơn như thế nào.

Nếu tôi kiểm tra mã cho PlantView của mình, tôi có một VStack với tiêu đề và nội dung khác bên trong.

Lưu ý rằng phông chữ tôi đã sử dụng cho tiêu đề của mình đang sử dụng kích thước phông chữ cố định.

Điều đó chắc chắn sẽ ngăn tiêu đề của tôi thay đổi kích thước.

Thay vì sử dụng kích thước phông chữ cố định, tôi nên sử dụng một trong 11 kiểu văn bản được cung cấp.

Các kiểu văn bản ở bên trái được hiển thị ở kích thước văn bản hệ thống mặc định.

Và khi được chia tỷ lệ lên đến kích thước văn bản lớn nhất, chúng sẽ phát triển thành kích thước của các kiểu văn bản ở bên phải.

Bằng cách sử dụng kiểu văn bản, hệ thống sẽ tự động điều chỉnh kích thước phông chữ với cài đặt kích thước văn bản hệ thống.

Vì vậy, nếu tôi xem lại mã PlantView của mình, tôi có thể thực hiện thay đổi đó một cách nhanh chóng và dễ dàng bằng cách thay đổi phông chữ tiêu đề của mình thành kiểu văn bản tiêu đề 3 cho tiêu đề có kích thước nhỏ hơn.

Tiếp theo hãy sửa văn bản cắt ngắn trong danh sách nhiệm vụ.

Trong mã cho PlantTaskLabel của tôi, tôi đang gán một dòng Giới hạn 1 cho mọi thứ trong HStack, điều này chỉ cho phép văn bản mở rộng trên một dòng duy nhất.

Để cung cấp cho giao diện người dùng của bạn sự linh hoạt để điều chỉnh nhiều dòng nếu cần, hãy đặt lineLimit thành số dòng tối đa bạn cần hỗ trợ.

Hoặc loại bỏ nó để cho phép số lượng dòng không giới hạn.

Bây giờ chúng tôi đang tiến bộ.

Nhưng trong khi giao diện người dùng chắc chắn lớn hơn và không còn cắt ngắn nữa, trong quá trình đó nó trở nên đông đúc hơn rất nhiều.

Và vẫn không dễ để đọc thông tin trên màn hình.

Đôi khi bố cục cho các kiểu văn bản lớn hơn chỉ cần được cấu trúc khác nhau.

Vì vậy, khi xây dựng bố cục, tôi sẽ tạo một trình bao bọc thuộc tính Môi trường trên sizeCategory để nhận thông tin cập nhật bất cứ khi nào điều này thay đổi.

Tiếp theo, tôi chỉ cần điều chỉnh giao diện người dùng của mình để phụ thuộc vào sizeCategory.

Trong trường hợp này, văn bản trong danh sách nhiệm vụ bắt đầu gói ở đâu đó xung quanh extraExtraLarge.

Vì vậy, nếu danh mục kích thước nhỏ hơn thế này, tôi sẽ sử dụng PlantView mà chúng ta đã thấy trước đây.

Nhưng nếu nó lớn hơn, tôi sẽ sử dụng chế độ xem thực vật thẳng đứng mới này để xếp chồng từng nhãn và nút của tôi, cho chúng nhiều không gian hơn để phát triển.

Điều đó có vẻ tốt hơn nhiều.

Với sự ra đời của các kiểu văn bản có khả năng truy cập lớn trên đồng hồ, chúng tôi hy vọng sẽ thấy nhiều người sử dụng Dynamic Type hơn - và bạn cũng vậy!

Đối với những người thiết lập Apple Watch của họ, bây giờ họ sẽ thấy tùy chọn tùy chỉnh kích thước văn bản khi bắt đầu.

Và nếu họ không thực hiện bất kỳ thay đổi nào, đồng hồ sẽ tự động chọn kích thước gần nhất với kích thước được sử dụng trên điện thoại.

Vì vậy, để tóm tắt lại Dynamic Type, có ba điều chính để đảm bảo các ứng dụng đồng hồ hoạt động tốt với kích thước văn bản lớn hơn.

Đầu tiên, bạn muốn đảm bảo luôn sử dụng kiểu văn bản, không phải kích thước phông chữ cố định.

Thứ hai, cho phép văn bản của bạn kết thúc để tránh bị cắt ngắn.

Và thứ ba, khi cần thiết, hãy chuyển sang bố cục xếp chồng lên nhau theo chiều dọc khi nội dung trở nên quá đông đúc.

Vì điều này chỉ làm trầy xước bề mặt trên văn bản lớn, tôi thực sự khuyên bạn nên xem bài nói chuyện, "Xây dựng ứng dụng với Loại động" để thực sự nâng tầm trò chơi của bạn.

Và để tìm hiểu thêm về việc tạo ra những trải nghiệm hình ảnh tuyệt vời, hãy nhớ xem bài nói chuyện, "Làm cho ứng dụng của bạn có thể truy cập trực quan."

Được rồi, rất trực quan, điều đó hoạt động rất tốt.

Nhưng nếu tôi không phải là người dùng trực quan thì sao?

Hãy bật VoiceOver và lắng nghe trải nghiệm như thế nào.

Lồng tiếng: WWDaisy.

Daisy, hình ảnh.

Thả, hình ảnh.

Năm ngày.

Lá, hình ảnh.

Bảy ngày.

Độ sáng cao hơn, hình ảnh.

Trung bình.

Thả, điền, nút.

Lá, tô, nút.

Daniel: OK, vì vậy chắc chắn có một số cải tiến mà chúng tôi có thể thực hiện.

Đầu tiên sẽ là giảm số lượng các yếu tố có thể được tương tác.

Hiện tại, đây là một cái nhìn khá phức tạp.

Mỗi ô có bốn nhãn, bốn hình ảnh và hai nút.

Và hiện tại, để đến nhà máy thứ hai, tôi phải điều hướng qua mọi mục trong tế bào thực vật đầu tiên.

Ngoài ra, các biểu tượng hình ảnh cho nước, phân bón và ánh sáng mặt trời được đọc là các yếu tố riêng biệt cho văn bản và nhãn của chúng thậm chí không có ý nghĩa đối với bối cảnh của chúng tôi.

Cuối cùng, hai nút ở dưới cùng đang sử dụng các nhãn mặc định được cung cấp bởi các biểu tượng đang được sử dụng.

Vì vậy, vấn đề đầu tiên chúng tôi nói đến là tôi phải điều hướng qua quá nhiều mặt hàng chỉ để chuyển từ nhà máy một sang nhà máy hai.

Khi tôi tạo NavigationLink của mình, tôi đã làm điều này bằng cách chỉ định nhóm accessibilityElement của trẻ em là .contain, chỉ để hiểu trạng thái khả năng truy cập của từng phần tử.

Nhưng vì điều này có vẻ tốt, tôi sẽ xóa dòng này và NavigationLink sẽ tự động kết hợp tất cả thông tin khả năng truy cập từ trẻ em.

Bây giờ ô được coi là một yếu tố duy nhất và nội dung được đọc ra là, "WWDaisy. Năm ngày.

Bảy ngày. Trung bình. Nút."

Danh sách nhiệm vụ đó vẫn cần một số công việc vì vậy tiếp theo, hãy cung cấp một số bối cảnh cho các nhiệm vụ chăm sóc cây trồng sắp tới bằng cách cung cấp cho mỗi nhiệm vụ một nhãn hiệu tốt hơn.

Nhãn được xác định bởi PlantTask.

Vì vậy, bên trong cấu trúc PlantTaskLabel của tôi, tôi sẽ chỉ thay đổi accessibilityLabel để trả về một chuỗi khác nhau cho mỗi nhiệm vụ nhà máy.

Đây là kỹ thuật tương tự mà tôi sẽ sử dụng để dán nhãn lên các nút của mình.

Bây giờ nội dung được đọc là, "WWDaisy. Tưới nước trong năm ngày. Bón phân trong bảy ngày.

Giữ dưới ánh sáng mặt trời trung bình. Nút."

Và các nút tưới nước và bón phân sẽ được đọc là, "Log tưới nước, nút" và, "Log fertilizing, nút."

Cho đến nay, rất nhiều công việc được thực hiện cho chúng tôi một cách tự động, chỉ cần một vài công cụ sửa đổi bổ sung.

Trên thực tế, với SwiftUI, hầu hết khả năng truy cập của bạn đều miễn phí.

Có lẽ bạn sẽ chỉ viết một vài dòng mã.

Nhưng thỉnh thoảng, bạn có thể cần xây dựng một điều khiển tùy chỉnh.

Tôi đã làm bằng cách xây dựng một quầy tùy chỉnh để tôi có thể điều chỉnh tần suất tưới nước và bón phân cho cây của mình.

Hãy cùng xem nào.

VoiceOver: Tần suất tưới nước theo ngày, tiêu đề.

Xóa, nút.

Tám.

Thêm, nút. Thêm vào.

Daniel: Vì vậy, mặc dù điều này hoạt động về mặt kỹ thuật, nhưng đó không phải là trải nghiệm lý tưởng.

Mục tiêu ở đây là biến ba mục này thành một yếu tố có thể truy cập duy nhất.

Để làm điều này, tôi sẽ bắt đầu bằng cách sử dụng công cụ sửa đổi accessibilityElement của chúng tôi.

Điều này sẽ tạo ra một yếu tố cấp cao mới; nhưng lần này, tôi sẽ bỏ qua tất cả trẻ em.

Đây thực sự là hành vi mặc định cho accessibilityElement.

Vì vậy, tôi có thể để trống các tham số để có được hành vi tương tự.

Và bởi vì tôi đang phớt lờ bọn trẻ, điều này loại bỏ các nhãn nút Thêm và Xóa cùng với các hành động trợ năng được cung cấp tự động.

Thay vào đó, tôi sẽ sử dụng accessibilityAdjustableAction để cho phép người dùng tăng hoặc giảm giá trị bằng cách vuốt lên hoặc xuống trên quầy.

Và bây giờ tôi chỉ có một yếu tố, tôi sẽ cho nó một nhãn duy nhất sử dụng tên của nhiệm vụ.

Điều này sẽ kết thúc dưới dạng "Tần số tưới nước" hoặc "Tần số bón".

Cuối cùng, tôi sẽ cho nó một giá trị.

Giá trị khả năng truy cập được đọc ra mỗi khi nó thay đổi, trong khi nhãn sẽ chỉ được đọc ra khi điều hướng đến phần tử.

VoiceOver: Tần suất tưới nước theo ngày, tiêu đề.

Tần suất tưới nước. Tám ngày. Có thể điều chỉnh.

Chín ngày.

Daniel: Tuyệt vời. Điều đó hoạt động tốt hơn nhiều.

Như bạn vừa thấy, SwiftUI giúp ứng dụng đồng hồ của chúng tôi có thể truy cập VoiceOver trở nên dễ dàng.

Và điều tuyệt vời là vì đây là SwiftUI, cùng một mã cũng hoạt động trên macOS và iOS.

Để tìm hiểu thêm về việc thiết kế trải nghiệm tuyệt vời với SwiftUI, hãy nhớ xem bài nói chuyện, "Khả năng tiếp cận trong SwiftUI."

Và để tìm hiểu về các công cụ và API hoàn toàn mới khi làm việc với khả năng truy cập SwiftUI, hãy xem bài nói chuyện, "Khả năng truy cập SwiftUI: Ngoài những điều cơ bản."

Bây giờ, trước khi chúng ta chuyển từ khả năng tiếp cận trực quan, tôi muốn nêu bật thêm hai điều nữa: sự phức tạp và thông báo.

Biến chứng là một cửa sổ lưu lượng truy cập cao vào ứng dụng của bạn, vì vậy, tất nhiên, chúng cũng cần cung cấp thông tin theo cách dễ tiếp cận.

Có nhiều loại phức tạp khác nhau nhưng hầu hết chúng sẽ được tạo thành từ ba thành phần khác nhau: văn bản, hình ảnh và ký hiệu.

Văn bản sẽ được VoiceOver chọn tự động, nhưng nếu văn bản của bạn chứa chữ viết tắt, hãy đảm bảo thêm nhãn trợ năng với các phiên bản không viết tắt.

Ở đây chúng tôi mở rộng chữ viết tắt, "Thứ Tư ngày 9 tháng 3" thành dạng đầy đủ của nó, "Thứ Tư, ngày 9 tháng Ba."

Các biến chứng dựa trên hình ảnh cũng rất phổ biến.

Hãy chắc chắn cung cấp các nhãn khả năng truy cập ở đây; nếu không, tên hình ảnh sẽ được sử dụng thay thế.

"Mặt trăng" gần như không mô tả bằng, "Một cái nhìn thời gian thực về mặt trăng. Quý thứ ba."

Một số biểu tượng nhất định như Biểu tượng SF có thể đi kèm với nhãn khả năng truy cập mặc định như "Thả, điền", nhưng chỉ cần đảm bảo rằng nhãn đi kèm với biểu tượng là nhãn có ý nghĩa nhất đối với bạn.

"Nước trong ba ngày" có ý nghĩa hơn nhiều đối với tôi.

Đối với thông báo, đây là một cách khác mà ứng dụng của bạn có thể gửi nhiều thông tin cho người dùng của bạn.

Vì vậy, trong khi một số thông báo khá đơn giản, những thông báo khác như thông báo động có thể có chế độ xem phức tạp và do đó sẽ cần hỗ trợ khả năng truy cập tương tự mà bạn đã cung cấp cho ứng dụng của mình.

Và bây giờ tôi sẽ giao bạn cho Virata để cho bạn biết tất cả về khả năng tiếp cận động cơ.

Virata Yindeeyoungyeon: Vâng, cảm ơn bạn, Daniel.

Tên tôi là Virata Yindeeyoungyeon.

Tôi là một kỹ sư trong nhóm Khả năng tiếp cận.

Hôm nay, tôi rất hào hứng được nói về hỗ trợ khả năng tiếp cận động cơ trên Apple Watch.

Nhưng trước khi chúng ta đi sâu vào bài thuyết trình, hãy để tôi cung cấp cho bạn một cái nhìn nhanh về tính năng mới của chúng tôi.

Không cần chạm vào màn hình và chỉ sử dụng cử chỉ tay, tôi có thể điều hướng từ mặt đồng hồ đến Trung tâm điều khiển đến nút Không làm phiền, sau đó bật nó lên.

Nó đơn giản như vậy.

Năm nay, chúng tôi rất vui mừng được mang AssistiveTouch lên Apple Watch.

AssistiveTouch cho phép sử dụng đầy đủ Apple Watch của bạn mà không cần chạm, chỉ sử dụng bàn tay mà Apple Watch đang bật.

Mọi người có thể sử dụng cử chỉ tay hoặc chuyển động tay để điều hướng con trỏ xung quanh màn hình.

Họ có thể hiển thị một menu để truy cập chức năng bổ sung dựa trên nội dung màn hình.

Đối với một số người, đây có thể là cách duy nhất họ có thể tương tác với Apple Watch của họ.

Đối với những người bị suy giảm vận động như mất chân tay, mất chức năng của tay hoặc cánh tay, AssistiveTouch sẽ cho phép nhiều tùy chọn hơn để cho phép kiểm soát và thực hiện các hành động trên Apple Watch.

Bây giờ hãy xem một ví dụ về cách mọi người có thể sử dụng AssistiveTouch.

Cách chính để sử dụng AssistiveTouch là thông qua các cử chỉ tay.

Mọi người có thể thực hiện các cử chỉ khác nhau như siết chặt để chạm, siết chặt hai lần để hiển thị menu hành động, chụm để điều hướng đến phần tử tiếp theo, chụm kép để điều hướng trở lại phần tử trước đó.

Đối với những người không thể sử dụng cử chỉ tay, một giải pháp thay thế là sử dụng chuyển động tay.

Bằng cách nghiêng cổ tay, mọi người có thể di chuyển con trỏ trên màn hình và tương tác với các yếu tố giao diện người dùng.

Tương tự như AssistiveTouch trên iOS, với Dwell Control, bạn có thể thực hiện một hành động bằng cách đặt con trỏ lên một phần tử trong một khoảng thời gian nhất định.

Bây giờ chúng ta hãy đi vào chi tiết hơn về cách hoạt động của AssistiveTouch.

AssistiveTouch được tạo thành từ hai tính năng chính: con trỏ và menu hành động.

Khi bạn bật AssistiveTouch, bạn sẽ thấy một con trỏ xuất hiện trên màn hình.

Con trỏ sẽ tập trung vào từng phần tử trên màn hình một, theo thứ tự từ trên cùng bên trái xuống dưới cùng bên phải.

Con trỏ làm nổi bật yếu tố để tương tác thêm.

Để biết thêm các hành động trên yếu tố tập trung, bạn có thể hiển thị menu hành động để thực hiện các hành động hệ thống hoặc tùy chỉnh.

Menu hành động AssistiveTouch đi kèm với các hành động hệ thống mặc định cho phép điều khiển thiết bị như nhấn vào Digital Crown, điều hướng cuộn, tương tác cử chỉ và hơn thế nữa.

Bạn cũng có thể thêm các hành động tùy chỉnh vào menu này.

Vì vậy, bây giờ chúng tôi biết AssistiveTouch hoạt động như thế nào.

Hãy xem cách chúng tôi có thể hỗ trợ nó trong đơn đăng ký của bạn.

Chúng ta sẽ xem xét những chủ đề sau đây.

Đầu tiên, chúng ta sẽ tìm hiểu những yếu tố có thể tập trung nào trong quan điểm của bạn và cách chúng ta có thể sửa đổi chúng.

Sau đó, chúng ta sẽ xem xét khung con trỏ và cách chúng ta có thể thay đổi kích thước khung.

Cuối cùng, chúng ta sẽ nói nhiều hơn về cách tùy chỉnh menu hành động.

Hãy bắt đầu với các yếu tố có thể tập trung.

Bảng này cung cấp một cái nhìn tổng quan chung về những yếu tố nào có thể tập trung bởi AssistiveTouch.

Chỉ những yếu tố tương tác phản hồi sự tương tác của người dùng mới có thể tập trung được.

SwiftUI cung cấp các yếu tố điều khiển tích hợp để xử lý các tương tác của người dùng; các yếu tố này có tính tương tác và tập trung.

Trong chế độ xem của bạn, nếu bạn có nút, nút chuyển đổi hoặc Liên kết điều hướng, các yếu tố này có thể được lấy nét theo mặc định.

Các yếu tố có thể hành động có thể tập trung vào AssistiveTouch vì chúng có một hành động hoặc được xác định là tương tác.

Một phần tử văn bản có thể trở nên tương tác và tập trung bằng cách đính kèm một hành động cử chỉ chạm.

Bạn cũng có thể thêm một accessibilityAction vào một phần tử.

Nếu bạn xác định một phần tử có đặc điểm có thể hành động, như nút hoặc có thể điều chỉnh, thì nó sẽ được coi là tương tác và sẽ được AssistiveTouch tập trung.

Một số yếu tố không thể tập trung.

Các yếu tố tĩnh như nhãn hoặc văn bản không phản hồi với tương tác của người dùng sẽ không thể tập trung vào AssistiveTouch.

Các yếu tố bị vô hiệu hóa tương tác của người dùng cũng không thể tập trung.

Vậy hãy xem một ví dụ.

Trong chế độ xem này, chúng tôi có tiêu đề nhãn, văn bản với thông tin đồ uống, các yếu tố nút Chấp nhận và Hủy.

Chỉ có hai nút có thể tập trung, trong khi nhãn và văn bản thì không.

Hãy xem mã cho chế độ xem này.

Một cử chỉ chạm được gắn vào VStack chính, cho biết rằng bạn có thể nhấn vào chế độ xem này để hiển thị chế độ xem chi tiết đồ uống.

Tuy nhiên, các phần tử tĩnh bên trong VStack không trở nên tập trung trừ khi được khai báo rõ ràng.

Ở đây, chỉ có các nút Chấp nhận và Hủy là có thể tập trung.

Vậy làm thế nào để người dùng biết rằng họ có thể nhấn vào chế độ xem để hiển thị chế độ xem chi tiết đồ uống?

Để cung cấp trải nghiệm người dùng tốt hơn, tôi muốn làm nổi bật phần tử văn bản thông tin đồ uống để cho thấy rằng nó có thể tương tác và một cú chạm có thể được thực hiện.

Điều này có thể được thực hiện bằng cách đặt "đúng" cho công cụ sửa đổi tương tác accessibilityRespondsToUser.

Sau khi áp dụng công cụ sửa đổi, bây giờ chúng ta có ba yếu tố có thể tập trung trong chế độ xem này: văn bản thông tin đồ uống, các yếu tố nút Chấp nhận và Hủy.

Bây giờ hãy tìm hiểu thêm về khung con trỏ AssistiveTouch.

Như bạn có thể thấy, các yếu tố tập trung rất quan trọng để AssistiveTouch làm nổi bật nếu yếu tố đó khó giải quyết hoặc một hành động có thể được thực hiện.

Khung con trỏ AssistiveTouch giống như khu vực có thể chạm của phần tử; các phần tử có diện tích có thể chạm nhỏ sẽ có khung con trỏ nhỏ và nó có thể kẹp nội dung bên trong.

Chúng ta có thể làm cho cái này sạch hơn bằng cách thêm đệm và để các đường viền phù hợp với hình dạng của vật thể để tránh bị cắt.

Trong ví dụ này, một NavigationLink với hình ảnh dấu chấm lửng được tô sáng bằng một vòng tròn nhỏ từ con trỏ AssistiveTouch.

Chúng ta có thể cải thiện điều này bằng cách tăng kích thước của khu vực có thể chạm, điều này cũng thay đổi khung con trỏ AssistiveTouch.

Bằng cách cung cấp đường dẫn đến công cụ sửa đổi contentShape, bạn có thể thay đổi vùng có thể chạm và khung con trỏ của phần tử.

Đối với NavigationLink này, tôi đặt hình dạng khu vực có thể chạm là một vòng tròn gấp rưỡi kích thước của phần tử.

Kết quả là, khung con trỏ AssistiveTouch lớn hơn và phần tử dễ nhìn thấy hơn nhiều trên màn hình.

Bây giờ chúng ta hãy xem menu hành động AssistiveTouch.

Menu hành động AssistiveTouch hiển thị các hành động hệ thống mặc định và các hành động tùy chỉnh trong chế độ xem của bạn để hiển thị trong danh sách menu hành động.

Nếu yếu tố tiêu điểm có các hành động tùy chỉnh, những hành động đó sẽ được ưu tiên và hiển thị ở đầu danh sách để thuận tiện hơn cho việc tương tác.

Nếu phần tử có thể điều chỉnh, các hành động giảm và tăng sẽ được hiển thị.

Nếu một phần tử nhóm khả năng truy cập chứa các hành động tùy chỉnh, thì những hành động đó sẽ xuất hiện khi tập trung vào phần tử nhóm.

Nếu bạn đã thêm các hành động tùy chỉnh cho VoiceOver trong phần tử, điều đó thật tuyệt!

Những hành động này cũng sẽ tự động hiển thị trong menu hành động AssistiveTouch.

Các hành động tùy chỉnh sẽ được hiển thị dưới dạng biểu tượng.

Hình ảnh mặc định sẽ là chữ cái đầu tiên của tên hành động tùy chỉnh.

Nếu bạn muốn cung cấp hình ảnh cho biểu tượng hành động tùy chỉnh của mình, bạn có thể thêm nhãn có hình ảnh vào công cụ sửa đổi accessibilityAction.

Chà, đó là kết thúc phiên của chúng tôi.

Bây giờ bạn đã hiểu rõ hơn về các tính năng trợ năng trên Apple Watch.

Hãy nhớ thêm hỗ trợ Dynamic Type, VoiceOver và AssistiveTouch vào ứng dụng của bạn.

Bạn có các công cụ để sử dụng các API này và làm cho ứng dụng watchOS của bạn có thể truy cập được cho mọi người.

Chà, cảm ơn bạn đã dành thời gian và tận hưởng phần còn lại của WWDC!

♪