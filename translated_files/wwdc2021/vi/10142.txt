10142

♪ Nhạc bass đang phát ♪

♪

Simon Goldrei: Xin chào.

Phiên này là tất cả về cách chuyển đổi phương tiện truyền thông một cách vô nghĩa với HLS.

Tôi là Simon và tôi là thành viên của nhóm Truyền thông Trực tuyến tại Apple!

Bạn có sử dụng AVQueuePlayer hay muốn cung cấp cho khách hàng của mình khả năng phát lại liền mạch, theo phong cách Up Next của các mục HLS trong ứng dụng của bạn?

Bạn có muốn trình bày phương tiện truyền thông của mình sự liên tục mà nhà sản xuất dự định không?

Chúng tôi có thể hỗ trợ khách hàng của mình bằng cách cung cấp trải nghiệm để thưởng thức phương tiện truyền thông của chúng tôi lâu hơn không?

Nếu có, thì bạn đã điều chỉnh phiên tốt nhất để tìm hiểu cách bây giờ bạn có thể chuyển đổi các mục HLS một cách không có khoảng trống.

Đây là chương trình nghị sự của chúng tôi.

Chúng tôi sẽ khảo sát một số trải nghiệm truyền thông hấp dẫn mà bạn có thể cung cấp với tính năng mới này, tôi sẽ trình bày chi tiết các yêu cầu của tác giả phương tiện truyền thông, tôi sẽ xem qua một số ví dụ về danh sách phát nêu bật các phương pháp hay nhất và chúng tôi sẽ kết thúc bằng bản demo.

Lợi ích của việc chuyển đổi giữa các vật phẩm AVPlayer được hỗ trợ bởi HLS trong AVQueuePlayer rất đơn giản.

Cho đến bây giờ, điểm chuyển đổi có thể hơi chói tai; bất cứ điều gì từ trục trặc âm thanh đến trục trặc thị giác nhất thời hoặc thậm chí là dấu hiệu của bộ đệm không xác định.

Quá trình chuyển đổi mục không có khoảng trống duy trì mối liên kết mà ứng dụng của bạn cung cấp giữa khách hàng và nội dung.

Có lẽ bạn nhớ lại cụm từ "đừng chạm vào mặt số đó."

Bạn có thể xây dựng một phương pháp điều trị theo từng đợt chuyển đổi liền mạch từ cuối tập này sang đầu tập khác.

Quá trình chuyển đổi không có khoảng trống cho phép khả năng tái tạo trải nghiệm album theo dõi liền mạch mà chúng tôi đã tận hưởng từ lâu.

Khi làm điều này, chúng tôi đang cung cấp một bản sao chính xác hơn của những gì có thể đã được phát trực tiếp hoặc được cố ý tác giả.

Chúng tôi có thể mang đến trải nghiệm không bị gián đoạn và không bị gián đoạn.

Chúng ta có thể tái tạo lập trình tuyến tính.

Nhưng chúng tôi cũng có thể cung cấp trải nghiệm năng động và thậm chí có thể tương tác đưa người xem từ một nhiệm vụ hoặc cảnh và trực tiếp chuyển sang nhiệm vụ tiếp theo.

Hãy xem xét sự chuyển đổi giữa một tập hợp các bài tập hoặc các phương tiện hướng dẫn khác.

Với sự chuyển đổi không có khoảng trống, giờ đây chúng ta có thể, theo chương trình, ghép các cảnh của một chuỗi nghe nhìn trong khi vẫn duy trì tính liên tục chính xác.

Bạn có thể thêm đại diện...

...Hoặc thêm thời gian hồi chiêu, vào bài tập.

Chúng tôi có thể đạt được tất cả những điều này trong khi vẫn cung cấp phương tiện truyền thông với tất cả các lợi ích của phương tiện tốc độ bit thích ứng phát trực tuyến qua HTTP.

Tất nhiên, chúng tôi cũng sử dụng cái này!

Các tính năng mới của Apple Music cung cấp nội dung thông qua HLS và đạt được sự chuyển đổi không khoảng trống giữa mỗi bài hát.

Chúng tôi rất vui mừng được mang điều này đến cho khách hàng của mình và chúng tôi cũng muốn cung cấp điều này cho khách hàng của bạn.

Bây giờ chúng ta hãy xem xét chi tiết các yêu cầu tác giả mà bạn cần kết hợp để ảnh hưởng đến quá trình chuyển đổi cùng một mục trong nội dung HLS của bạn.

Bằng cách cung cấp - trong bản kê khai HLS của bạn - các biến thể cung cấp tính liên tục định dạng âm thanh giữa các mục tuần tự, bạn đang cho phép chuyển đổi không có khoảng trống.

Nội dung của bạn nên cung cấp các biến thể phù hợp với các đặc điểm phương tiện âm thanh sau: việc sử dụng FairPlay Streaming, codec âm thanh - được chỉ định bởi thuộc tính codec của thẻ Stream - và số lượng kênh, như được chỉ định bởi thuộc tính Kênh của thẻ Media.

Lưu ý rằng nếu bạn quyết định cung cấp kết xuất âm thanh, ở tốc độ mẫu và độ sâu bit khác nhau, bạn có thể ức chế quá trình chuyển đổi không có khe hở.

Lời khuyên tương tự để cung cấp một trận đấu và duy trì tính liên tục cũng áp dụng cho những đặc điểm này.

Có nghĩa là, để đạt được sự chuyển đổi không có khoảng trống, hãy đảm bảo cung cấp phương tiện âm thanh tương đương trong mỗi biến thể cho các mục được xếp hàng liên tiếp.

Cuối cùng, khi soạn thảo phương tiện truyền thông của bạn, vui lòng tuân thủ hướng dẫn tác giả CMAF.

CMAF là viết tắt của "định dạng ứng dụng phương tiện phổ biến."

Trong đặc tả MPEG này, có một khuyến nghị cụ thể để sử dụng danh sách chỉnh sửa để báo hiệu sự hiện diện của khung mồi và khung còn lại.

Bây giờ chúng ta hãy xem xét một ví dụ đơn giản bằng cách kiểm tra danh sách phát biến thể chính của hai mục ứng cử viên.

Trong bản kê khai HLS này, tôi đã cung cấp bốn biến thể nghe nhìn: một cặp biến thể 720p và một cặp biến thể 1080p.

Trong mỗi cặp, tôi cung cấp một biến thể được mã hóa với Bộ giải mã âm thanh nâng cao hiệu quả cao, HE_AAC và một biến thể khác với Độ phức tạp thấp AAC hoặc AAC_LC.

Trong ví dụ này, hãy xem xét rằng các điều kiện phát lại hỗ trợ lựa chọn video 720p được ghép nối với HE_AAC.

Khi phát lại gần kết thúc, AVQueuePlayer, ít nhất là ban đầu, sẽ chọn biến thể được mã hóa tương tự được cung cấp trong mục tiếp theo.

Điều này đúng ngay cả khi các điều kiện mạng hiện hỗ trợ cấp chất lượng cao hơn.

Phục vụ quá trình chuyển đổi không có khe hở là ưu tiên cao hơn so với việc chọn chất lượng cao khi chuyển đổi không có khe hở.

Khi quá trình phát lại diễn ra, các heuristic tốc độ bit thích ứng được đánh giá và, nếu các điều kiện vẫn tồn tại, người chơi sẽ liên tục chuyển sang chất lượng cao hơn đó.

Tuyệt vời!

Bây giờ giả sử chúng tôi không cung cấp HE_AAC trong mục hai.

Trong trường hợp đó, AVQueuePlayer không thể duy trì tính liên tục của âm thanh và quá trình chuyển đổi không có khe hở nhưng có thể tự do chọn biến thể ban đầu phù hợp nhất cho các điều kiện phát lại.

Giả sử rằng chúng tôi đã soạn thảo nội dung của mình để hỗ trợ quá trình chuyển đổi không có khoảng trống.

Trong trường hợp đó, chúng ta nên nhắc nhở bản thân cách sử dụng AVQueuePlayer.

Ở đây chúng tôi có một đoạn mã ngắn.

Chúng tôi tạo hai AVPlayerItems và xếp hàng chúng, theo thứ tự, trước khi phát lại.

Lưu ý rằng các mục của chúng tôi có nguồn gốc từ hai URL khác nhau.

Sau khi tạo AVQueuePlayer của chúng tôi, chúng tôi có thể sử dụng phương thức "chèn sau" để thông báo cho trình phát hàng đợi về chuỗi dự định.

Tất cả những gì còn lại là nhắn tin "chơi".

Một kỹ thuật tiên tiến mà tôi muốn chia sẻ với bạn cho phép sử dụng một tài sản duy nhất.

Từ tài sản này, bạn có thể khởi tạo nhiều AVPlayerItems.

Chúng tôi có thể xác định các điểm vào và ra khác nhau trên mỗi AVPlayerItem riêng biệt, trước khi xếp hàng trong AVQueuePlayer của chúng tôi.

Sử dụng phương pháp AVPlayerItem seekToTime, chúng ta có thể xác định điểm của mình.

Sau đó, chúng ta có thể xác định điểm ra của mình với forwardPlaybackEndTime.

Đây là một minh họa cho khái niệm này.

Mục một, hai và ba đều có nguồn gốc từ cùng một bộ AVA, bao gồm ba cảnh giống nhau.

Chúng khác biệt ở chỗ tôi đã gợi ý mỗi điểm khác nhau, sử dụng seekToTime và xác định các điểm riêng biệt, sử dụng forwardPlaybackEndTime.

Bây giờ tôi có thể xếp hàng ba vật phẩm giống hệt nhau này vào AVQueuePlayer của mình và những gì tôi đạt được là một chuỗi động, tùy chỉnh.

Bây giờ hãy xem và nghe các chuyển tiếp không có khe hở trong hành động với một bản demo.

Trong bản demo này, chúng tôi sẽ tương tác ghép ba luồng video tập luyện lại với nhau.

Tôi đã để các điều khiển AVKit hiển thị trong mỗi điều khiển để bạn thực sự có thể thấy đây là những tài nguyên luồng riêng biệt.

Tôi sẽ bắt đầu bằng cách hiển thị phát lại liền mạch của cả ba và sau đó chúng tôi sẽ chỉnh sửa chuỗi tương tác.

Trong phần mềm của bạn, bạn có thể tưởng tượng việc cung cấp tương tự - hoặc có thể thực hiện sắp xếp lại - theo chương trình.

Đúng rồi! Hãy khởi động nào.

♪ Nhạc điện tử tràn đầy năng lượng ♪

♪

Sẵn sàng hay chưa? Hãy chạy trên những ngọn đồi.

♪ Nhạc hip-hop sống động ♪

♪

Thế là xong! Chúng ta đã xong. Đã đến lúc hồi chiêu.

♪ Nhạc điện tử bình tĩnh ♪

♪

Tôi có thể đổ mồ hôi chỉ bằng cách xem nó.

Tôi bị cám dỗ để bỏ qua thẳng "Đó là nó, chúng ta đã hoàn thành" và bỏ qua những ngọn đồi chạy.

Có rất nhiều thứ ở đây tại San Francisco.

Để làm điều này, hãy chỉnh sửa thứ tự các bộ bài tập của chúng ta.

Tôi sẽ di chuyển bài tập trên đồi lên đỉnh.

Điều này cho phép tôi chỉ cần khởi động sau đó ngay lập tức và không có khoảng thời gian hồi chiêu.

Sau đó, tôi sẽ bắt đầu bằng cách chọn khởi động, bây giờ ở vị trí thứ hai, làm bài tập đầu tiên của tôi.

Đúng rồi! Hãy khởi động nào.

♪ Nhạc điện tử tràn đầy năng lượng ♪

♪

Thế là xong! Chúng ta đã xong. Đã đến lúc hồi chiêu.

♪ Nhạc điện tử bình tĩnh ♪

♪

Hãy tóm tắt những điểm chính mà chúng ta đã học được trong phiên này.

Chúng tôi đã học được rằng để đạt được sự chuyển đổi không có khoảng trống bằng cách sử dụng HLS, chúng tôi phải cung cấp các biến thể trong mỗi mục có định dạng âm thanh phù hợp.

Sau đó, chúng tôi đã thấy việc hướng dẫn AVQueuePlayer thực hiện quá trình chuyển đổi không có khoảng trống dễ dàng như thế nào chỉ bằng cách xếp hàng các mục theo trình tự.

Chúng tôi có một phiên liên quan, nơi chúng tôi giới thiệu các API mới để khám phá biến thể.

Bạn có thể thấy phiên đó hữu ích nếu phần mềm hoặc dịch vụ của bạn không thể đảm bảo các mục có định dạng âm thanh phù hợp.

Tôi hy vọng bạn thích buổi học này và tận hưởng phần còn lại của WWDC 2021 này.

Cảm ơn bạn.

♪