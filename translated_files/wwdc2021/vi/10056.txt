10056

Xin chào, tên tôi là Nils Beck, và tôi chào mừng bạn đến với "Những phẩm chất của các ứng dụng iPad và iPhone tuyệt vời trên Macs với M1."

Hơn một triệu ứng dụng iPad và iPhone đã có sẵn trên Mac App Store.

Trải nghiệm tuyệt vời trên macOS Big Sur, và chúng tôi đã cải thiện nó hơn nữa trong macOS Monterey.

Trong video này, chúng tôi sẽ thảo luận về cách chúng tôi ánh xạ một số API iOS cho các tính năng Mac tương ứng, một số phương pháp hay nhất chung cần lưu ý cũng sẽ giúp ứng dụng của bạn tỏa sáng trên Mac với M1, những cải tiến mà chúng tôi đã thực hiện trong các bản cập nhật phần mềm macOS Big Sur, cũng như trong macOS Monterey, và sau

Các ứng dụng iPad và iPhone trên Macs với M1 là cách dễ nhất để mở rộng phạm vi tiếp cận ứng dụng hiện tại của bạn với Mac.

Đây là ứng dụng iPad hoặc iPhone chưa được sửa đổi của bạn, như đã được gửi và phê duyệt cho iOS App Store, được cung cấp thông qua Mac App Store cho bất kỳ ai có máy Mac M1.

Để biến điều này thành có thể, chúng tôi tập trung rất nhiều vào khả năng tương thích.

Các API hệ thống được ánh xạ đến các tương đương Mac tự nhiên của chúng bất cứ khi nào có thể.

Mục đích của chúng tôi là đảm bảo trải nghiệm ứng dụng mượt mà trên Mac mà không cần bạn thực hiện bất kỳ thay đổi nào.

Và hầu hết các ứng dụng hiện có đều hoạt động rất tốt!

Điều này bao gồm mọi thứ từ các tiện ích iPhone nhỏ đến các trò chơi iPad tiên tiến và Ứng dụng Chuyên nghiệp.

Một loạt các tiện ích mở rộng cũng được hỗ trợ.

Ví dụ: chia sẻ tiện ích mở rộng, tiện ích WidgetKit, tiện ích mở rộng chỉnh sửa ảnh, tiện ích mở rộng mạng VPN, đơn vị âm thanh và hơn thế nữa.

Vì vậy, rất có thể ứng dụng iPad hoặc iPhone hiện tại của bạn đã hoạt động tốt trên Mac, ngay lập tức.

Tất nhiên, chúng tôi hỗ trợ tất cả các chức năng cơ bản, chẳng hạn như tương tác văn bản, sao chép và dán, thanh menu Mac, v.v., nhưng cũng có rất nhiều chức năng nâng cao, như làm mới ứng dụng nền, thông báo người dùng, truy cập máy ảnh, ý định Siri, v.v.

Nhiều chủ đề trong số này được thảo luận trong video, "ứng dụng iPad và iPhone trên Apple silicon Macs", vì vậy hãy kiểm tra để biết thêm chi tiết.

Và khi bạn muốn ứng dụng của mình tận dụng nhiều hơn những gì Mac cung cấp, hãy cân nhắc xây dựng phiên bản Mac Catalyst của ứng dụng của bạn.

Bạn có thể tìm hiểu thêm về điều đó trong các video, "Chất lượng của một ứng dụng Mac Catalyst tuyệt vời" và "Có gì mới trong Mac Catalyst."

Bây giờ, hãy đi sâu vào chi tiết hơn cho một số API mà tôi vừa đề cập.

Bạn có thể đã sử dụng những thứ này để làm cho ứng dụng của mình trở nên tuyệt vời trên iPad và iPhone và chúng tôi đã kết nối chúng để cung cấp liền mạch cho bạn các tính năng tuyệt vời tương tự trên Mac.

Đương nhiên, bạn có thể sử dụng bàn phím Mac để nhập văn bản vào các trường văn bản, cũng như cho các phím tắt UIKeyCommand.

Nhưng nếu bạn cần kiểm soát nhiều hơn và muốn viết xử lý nhấn phím của riêng mình, bạn có thể làm điều đó với UIPress API trên UIResponder.

Tất cả các máy Mac đều có bàn phím vật lý, vì vậy các ứng dụng đã dành thời gian để thêm hỗ trợ cho bàn phím vật lý trên iPad và iPhone được cải thiện đáng kể trên Mac cùng một lúc.

Tiếp theo, hãy nói về thanh menu.

Xin nhắc lại, thanh menu Mac nhằm giúp khám phá các tính năng của ứng dụng và phím tắt.

Cấu trúc thanh menu được xác định khi khởi chạy và sẽ ít nhiều không đổi sau đó.

Các mục không được thêm hoặc xóa, mà đúng hơn, chúng được bật hoặc tắt, tùy thuộc vào việc chúng hiện đang áp dụng.

Chúng tôi tự động điền vào thanh menu của ứng dụng của bạn, có tính đến các tính năng của ứng dụng của bạn.

Ví dụ, chúng ta có thể thêm các mục menu để tạo một cửa sổ mới, để làm việc với các văn bản phong phú hoặc để thay đổi hướng thiết bị.

Lưu ý rằng UIKeyCommands được đính kèm trực tiếp vào UIResponders thông qua thuộc tính keyCommands không xuất hiện trong thanh menu, nhưng các phím tắt của chúng sẽ được ưu tiên hơn các phím tắt của các mục menu, bất cứ khi nào chúng áp dụng.

Bạn có thể đã sử dụng UIMenuBuilder API gần đây hơn mà chúng tôi đã giới thiệu trong iOS 13.

Điều này bổ sung cấu trúc ngữ nghĩa cho UIKeyCommands của bạn.

Cấu trúc này hiển thị trong menu Phím tắt xuất hiện khi bạn giữ phím Command trên iPad có bàn phím.

Trên Mac, cấu trúc mặc định được chuyển vào trình tạo sẽ khác, nhưng các tùy chỉnh của bạn đối với cấu trúc sẽ được phản ánh trong menu chính.

UIKeyCommands dựa vào chuỗi phản hồi để tìm mục tiêu áp dụng cho hành động của họ và điều này xác định xem một mục menu có được bật hay không.

Để biết thêm về điều này, hãy xem các video, "Đưa ứng dụng iPad của bạn lên một tầm cao mới", "Tập trung vào điều hướng bàn phím iPad" và "Chất lượng của một ứng dụng Mac Catalyst tuyệt vời."

Đối với các ứng dụng sử dụng kéo và thả trên iPad và iPhone, sử dụng UIDragInteraction và UIDropInteraction, điều này cũng tự động chuyển sang Mac.

Điều này cho phép mọi người kéo nội dung liền mạch giữa ứng dụng của bạn và những người khác, như trong ví dụ này, nơi tôi đang kéo mã QR từ Qrafter vào máy tính để bàn của mình.

Và đối với các ứng dụng in bằng UIPrintInteractionController, điều này sẽ tự động được kết nối với hộp thoại in Mac khi quá trình in được bắt đầu trong mã của bạn.

Thậm chí tốt hơn, khi bạn áp dụng khóa Info.plist mới "UIApplicationSupports PrintCommand" và thực hiện hành động in tiêu chuẩn tương ứng, các mục menu In và Xuất dưới dạng PDF sẽ được tự động thêm vào thanh menu của ứng dụng của bạn.

Để biết thêm chi tiết về API mới này, hãy xem "Có gì mới trong Mac Catalyst."

Nhiều ứng dụng sử dụng gói cài đặt và chúng tôi sẽ tự động tạo bảng tùy chọn kiểu Mac từ đây.

Việc đặt tín dụng vào gói cài đặt cũng phổ biến và chúng tôi xác định các trường hợp như vậy và chuyển văn bản đó vào hộp Giới thiệu cho bạn.

Nhưng nếu bạn muốn kiểm soát nhiều hơn những gì được hiển thị trong hộp Giới thiệu trên Mac, bây giờ bạn cũng có tùy chọn thêm tệp tín dụng vào gói của mình.

Bạn có thể sử dụng các tệp RTF, RTFD hoặc HTML, giống như cách các ứng dụng Mac làm điều này.

Có một số API lấy iPad làm trung tâm sẽ giúp ứng dụng của bạn trở thành một ứng dụng iPad tuyệt vời.

Tất cả những thứ này đều xuất hiện một cách tuyệt vời trên Mac.

Vì vậy, bằng cách tạo ra một ứng dụng iPad tuyệt vời, bạn cũng đang làm cho ứng dụng của mình tốt hơn trên Mac với M1.

Nếu ứng dụng của bạn hỗ trợ nhiều cảnh theo khóa UIApplicationSupports MultipleScenes Info.plist, mỗi cảnh được dịch thành một cửa sổ riêng biệt và chúng tôi sẽ tự động thêm một mục menu để tạo một cảnh mới.

Trên Mac, cài đặt toàn hệ thống xác định xem tất cả các cửa sổ có bị đóng khi ứng dụng thoát hay không hoặc liệu các cửa sổ hiện có có được khôi phục trong lần khởi chạy tiếp theo hay không.

Chúng tôi tôn trọng cài đặt này nếu ứng dụng của bạn hỗ trợ nhiều cảnh, vì vậy đừng ngạc nhiên nếu tất cả các cảnh bị ngắt kết nối hoặc nếu khôi phục trạng thái không xảy ra trong một số trường hợp.

Mặt khác, hỗ trợ đa nhiệm iPad tự động chuyển sang các cửa sổ có thể thay đổi kích thước trên macOS.

Vì ứng dụng của bạn đã hỗ trợ thay đổi bố cục động trên iPad, bạn sẽ nhận được các cửa sổ thay đổi kích thước trực tiếp trên Mac.

Bạn có thể giới hạn phạm vi kích thước cảnh cho phép bằng cách sử dụng minimumSize và maximumSize API trên UIWindowScene.

Lưu ý rằng chỉ có kích thước cảnh cửa sổ sẽ thay đổi khi cửa sổ được thay đổi kích thước.

Mặt khác, kích thước màn hình giao diện người dùng sẽ tiếp tục báo cáo kích thước thiết bị, điều này không thay đổi trong trường hợp này.

Vì vậy, hãy đảm bảo rằng bạn không sử dụng kích thước màn hình để tính toán bố cục của mình, ngay cả trên iPad, nếu không các yếu tố giao diện người dùng của bạn sẽ kết thúc không đúng chỗ.

Nếu ứng dụng của bạn mong muốn kiểm soát toàn bộ màn hình của thiết bị, chúng tôi sẽ sử dụng kích thước cảnh và tỷ lệ khung hình cố định.

Nhưng nội dung cửa sổ có thể được thu nhỏ lên hoặc giảm khi cần thiết, theo cách minh bạch cho ứng dụng của bạn.

Và nếu ứng dụng của bạn hỗ trợ nhiều hướng giao diện người dùng, hướng cửa sổ có thể được thay đổi bằng cách sử dụng các mục thanh menu được thêm tự động hoặc bằng cách kéo các cạnh của cửa sổ.

Ở đây, tôi đang sử dụng các mục trên thanh menu để thay đổi hướng của ứng dụng Chess.com và giao diện người dùng thích ứng để sử dụng tối ưu từng hướng thiết bị.

Những ánh xạ này và các ánh xạ khác có thể loại bỏ hầu hết ma sát khi đưa ứng dụng iPad hoặc iPhone của bạn lên Mac, nhưng hãy chạm vào một số phương pháp mã hóa mà bạn nên tuân theo để đảm bảo rằng ứng dụng của bạn hoạt động tốt trên tất cả các nền tảng, bao gồm cả Mac.

Khi sử dụng các khuôn khổ của Apple, điều quan trọng là bạn chỉ sử dụng các API được hỗ trợ chính thức, vì các phương thức không có tài liệu trong các khuôn khổ của chúng tôi có thể không tồn tại trên Mac hoặc có thể thay đổi bất cứ lúc nào.

Tránh các đường dẫn mã hóa cứng đến các vị trí hệ thống tệp, vì chúng có thể khác nhau trên Mac.

Ví dụ: không thêm tiền tố đường dẫn của bạn bằng "/private" hoặc "var mobile".

Thay vào đó, hãy sử dụng các API thích hợp để xác định từng đường dẫn trong thời gian chạy.

Tương tự, đối với giao diện người dùng không nằm dưới sự kiểm soát trực tiếp của bạn, tốt nhất là không nên đưa ra giả định trong mã của mình về vị trí trên màn hình của các chế độ xem và cảnh báo hoặc thiết lập chính xác các hệ thống phân cấp chế độ xem đó, vì chúng có thể khác biệt đáng kể trên Mac.

Cũng xin lưu ý rằng độ phân giải và hướng máy ảnh có sẵn có thể khá khác nhau trên Mac.

Ví dụ: nếu ứng dụng iPhone của bạn ở hướng dọc khi chụp ảnh, bạn có thể mong đợi ảnh máy ảnh kết quả cũng ở hướng dọc.

Nhưng đây không nhất thiết phải là trường hợp khi ứng dụng ở hướng dọc trên Mac.

Thay vào đó, bạn có thể nhận được hình ảnh theo hướng ngang, bởi vì đó là cách máy ảnh được định vị.

Chúng tôi đã bao gồm một số heuristics để cải thiện khả năng tương thích với nhiều ứng dụng.

Ví dụ, chúng tôi sẽ cung cấp cho bạn hình ảnh của máy ảnh mặt trước của Mac, ngay cả khi bạn yêu cầu máy ảnh mặt trước.

Nhưng sẽ tốt hơn nhiều nếu bạn sử dụng AVCaptureDeviceDiscoverySession và các API AVFoundation liên quan để thu thập thông tin về các máy ảnh có sẵn và các thuộc tính thực của chúng, chẳng hạn như kích thước xem trước.

Và bạn nên đặt mục tiêu xử lý tốt tất cả các cấu hình có thể có trong giao diện người dùng của mình.

Cũng nên nhớ rằng một số tính năng phần cứng không khả dụng trên Mac.

Mã của bạn sẽ có thể xử lý các tình huống như vậy một cách duyên dáng và đưa ra các lựa chọn thay thế.

Ví dụ, thực tế tăng cường với ARKit không được hỗ trợ trên Mac.

Nếu ARKit là chức năng cốt lõi của ứng dụng của bạn, bạn có thể đã biến nó thành một khả năng thiết bị bắt buộc, vì vậy ứng dụng của bạn sẽ không xuất hiện trên Mac App Store.

Nhưng nếu ARKit là một tính năng tùy chọn, bạn nên kiểm tra thuộc tính isSupported của lớp con ARConfiguration thích hợp.

Và để có trải nghiệm tốt nhất trên Mac và các nơi khác, hãy đảm bảo rằng bạn chỉ hiển thị các tính năng thực tế tăng cường trong giao diện người dùng của mình trên các thiết bị có khả năng này.

Nếu ứng dụng của bạn dựa vào Multi-Touch trực tiếp hoặc CoreMotion, hãy cân nhắc bổ sung việc cung cấp các lựa chọn thay thế phù hợp hơn với bàn phím và bàn di chuột Mac.

Điều đó nói rằng, Touch Alternatives có thể giúp ích trong trường hợp này.

Tôi sẽ nói nhiều hơn về điều đó trong giây lát.

Và nếu bạn sử dụng CoreLocation, ứng dụng của bạn sẽ vẫn có thể sử dụng được ngay cả khi không có dữ liệu vị trí chính xác.

Ví dụ, bạn có thể cung cấp mục nhập vị trí thủ công như một giải pháp thay thế, giống như ứng dụng Lowe's làm ở đây.

Tiếp theo, hãy xem qua một số cải tiến mà chúng tôi đã thực hiện kể từ lần đầu tiên chúng tôi bắt đầu vận chuyển máy Mac với M1.

Trong macOS Big Sur 11.3, chúng tôi đã thực hiện một số cải tiến đối với cách các cửa sổ của ứng dụng iPad và iPhone hoạt động trên Mac.

Nếu ứng dụng của bạn có kích thước nội dung cố định vì nó không hỗ trợ đa nhiệm nhưng nó hỗ trợ kích thước thiết bị lớn, khi khởi chạy, bây giờ chúng tôi sẽ chọn kích thước thiết bị được hỗ trợ lớn nhất phù hợp với màn hình nơi ứng dụng đang khởi chạy.

Liên quan đến ứng dụng của bạn, kích thước thiết bị vẫn cố định trong toàn bộ phiên, nhưng cửa sổ sử dụng tốt hơn nhiều dung lượng có sẵn.

Cũng có một ưu tiên để sử dụng kích thước thiết bị được hỗ trợ nhỏ nhất để thay thế.

Và như tôi đã đề cập trước đó, nội dung cửa sổ sẽ được thu nhỏ lên hoặc giảm khi cần thiết.

Ví dụ, khi tôi làm cho cửa sổ toàn màn hình, nội dung cửa sổ sẽ tự động được thu nhỏ để phù hợp với không gian có sẵn trong khi vẫn duy trì tỷ lệ khung hình cảnh ban đầu.

Hoặc, nếu cửa sổ được chuyển sang màn hình nhỏ hơn sau khi khởi chạy, chúng tôi sẽ tự động giảm tỷ lệ khi cần thiết để đảm bảo rằng cửa sổ vẫn vừa vặn.

Bây giờ cũng có thể sử dụng tính năng Thu phóng Cửa sổ để chuyển đổi giữa hai yếu tố thu phóng, một yếu tố ưu tiên kích thước tự nhiên của các yếu tố giao diện người dùng, yếu tố còn lại ưu tiên độ chính xác hoàn hảo của pixel.

Ở đây, tôi đang sử dụng tính năng này để chuyển đổi giữa hai yếu tố thu phóng trong ứng dụng Chess.com.

Bộ điều khiển trò chơi đã được hỗ trợ từ ngày đầu tiên thông qua GameController.framework, có sẵn trên tất cả các nền tảng có khả năng chơi game của chúng tôi.

Bắt đầu với macOS Big Sur 11.3, chúng tôi đã có thể sử dụng bàn phím và bàn di chuột của Mac làm bộ điều khiển trò chơi ảo.

Vì vậy, ngay cả khi bạn không có sẵn bộ điều khiển thực tế, thật dễ dàng để sử dụng bàn phím để truy cập tất cả các chức năng mà trò chơi của bạn ánh xạ đến các nút điều khiển.

Và trong macOS Monterey, chúng tôi đã tinh chỉnh thêm điều này với việc bổ sung thanh trượt độ nhạy và ẩn con trỏ, như được hiển thị trên hình ảnh này của bảng tùy chọn tương ứng.

Để biết thêm về khuôn khổ này, hãy xem "Những tiến bộ trong bộ điều khiển trò chơi."

Hơn nữa, kể từ ngày đầu tiên, Touch Alternatives đã ánh xạ bàn phím và bàn di chuột đến một số kiểu tương tác mà nếu không sẽ không dễ sử dụng trên Mac, chẳng hạn như Multi-Touch, kéo, chạm và vuốt.

Và với MacOS 11.3, chúng tôi đã thực hiện một số cải tiến.

Ví dụ, bây giờ bạn có khả năng hầu như nghiêng thiết bị của mình.

Điều này mở ra cánh cửa cho một số trò chơi bổ sung.

Ngoài ra, bảng tùy chọn hiện bao gồm một biểu diễn đồ họa hữu ích minh họa cách truy cập từng kiểu trong số năm kiểu tương tác thông qua bàn phím và bàn di chuột.

Ngoài ra, chúng tôi đã giúp các ứng dụng có thể tự động chọn tham gia Touch Alternatives.

Khi bạn chọn tham gia, một hộp thoại giới thiệu sẽ được hiển thị trong lần khởi chạy đầu tiên, để giúp khám phá tính năng này.

Đồ họa tương tự như đồ họa từ bảng tùy chọn, nhưng chúng tôi chỉ làm nổi bật các kiểu tương tác mà bạn đã chọn.

Trong ví dụ này, chỉ có Tilt và Multi-Touch được hiển thị.

Nếu bạn xác định rằng ứng dụng của bạn sẽ được hưởng lợi từ bất kỳ Lựa chọn thay thế cảm ứng nào trong số này, đây là cách bạn có thể bật các lựa chọn thay thế cảm ứng cho ứng dụng của mình, ngay từ đầu.

Tất cả những gì bạn cần làm là thêm một tệp .plist mới vào gói của mình, có tên là "com.apple.uikit.inputalternativ es.plist."

Sau đó, thêm các khóa và giá trị được hiển thị trong đoạn mã.

Và đối với mảng Onboarding được yêu cầu, chỉ bao gồm các tính năng hữu ích cho ứng dụng của bạn.

Bằng cách đó, chỉ những tính năng đó mới được tô sáng trong hộp thoại giới thiệu.

Hãy để tôi chứng minh điều này cho bạn.

Lấy ví dụ, trò chơi iPad này có tên là "Assoluto Racing", chạy không sửa đổi trên máy Mac với M1.

Ứng dụng cho phép Touch Alternatives tự động, ngay từ đầu, vì vậy trong lần khởi chạy đầu tiên, hộp thoại giới thiệu này hiển thị cho chúng ta các điều khiển bàn phím.

Nhưng trước tiên, hãy hiển thị bàn phím phần mềm và lấy toàn màn hình cửa sổ.

Nội dung hiện đã được thu nhỏ để phù hợp với màn hình và chúng tôi duy trì tỷ lệ khung hình iPad.

Hãy đi đến cấp độ "Sân bay" để trôi dạt tự do.

Ứng dụng này sử dụng CoreMotion, để trên iPad, tôi có thể nghiêng thiết bị để điều khiển.

Với các lựa chọn thay thế cảm ứng được bật trên máy Mac với M1, các phím W, A, S và D mô phỏng độ nghiêng.

Và ở đây tôi điều khiển chiếc xe theo cách đó, trong khi sử dụng bàn di chuột của mình để nhấp vào nút chân ga trên màn hình.

Và tất cả những điều này hoàn toàn minh bạch đối với ứng dụng.

Hãy xem tôi làm như thế nào.

Điều đó đã hoạt động rất tốt!

Tuy nhiên, tôi cần phải rèn luyện kỹ năng trôi dạt của mình một chút.

Với macOS Monterey, chúng tôi đã thực hiện nhiều cải tiến hơn nữa.

Apple Pay hiện có sẵn cho các ứng dụng iPad và iPhone trên máy Mac M1 sử dụng cùng một API đa nền tảng nâng cao mà chúng tôi đã giới thiệu cho các ứng dụng Mac Catalyst trong macOS Big Sur.

Điều này có nghĩa là bây giờ bạn có thể chấp nhận thanh toán trên mọi nền tảng có sẵn Apple Pay, sử dụng một triển khai duy nhất.

Chỉ cần đảm bảo rằng bạn đã triển khai cuộc gọi đại diện "paymentAuthorizationController, didRequestMerchantSessionUpdate" trên PKPaymentAuthorizationController Delegate của bạn.

Để biết thêm chi tiết, hãy xem video, "Có gì mới trong Wallet và Apple Pay."

Chúng tôi cũng đã làm video toàn màn hình với AVKit thậm chí còn tốt hơn.

AVPlayerView và AVPlayerViewController giờ đây có thể tự động quay video toàn màn hình bằng cách sử dụng một cửa sổ riêng biệt.

Điều này có nghĩa là ngay cả các ứng dụng có cửa sổ bị giới hạn ở độ phân giải thời gian khởi chạy và tỷ lệ khung hình cũng sẽ tận dụng tối đa màn hình Mac, phù hợp với nội dung video.

Và trong trường hợp bạn cần kiểm soát nhiều hơn trải nghiệm toàn màn hình, chúng tôi đã thêm API mới vào AVPlayerViewDelegate và AVPlayerViewControllerDelegate.

Trên hết, AVFoundation hỗ trợ phát lại HDR và phát trực tuyến trên máy Mac với M1.

Không cần công việc áp dụng dành riêng cho Mac trong ứng dụng của bạn.

Cuối cùng, các điều khiển AVKit trong các ứng dụng iPad và iPhone giờ đây trông giống như trong các ứng dụng Mac khác.

Chúng tôi thậm chí còn tận dụng tối đa bàn di chuột Mac với sự hỗ trợ cho các cử chỉ mới.

Để biết thêm chi tiết, bạn có thể chuyển qua video, "Có gì mới trong AVKit."

Và nếu ứng dụng của bạn sử dụng khung ý định để cung cấp Phím tắt SiriKit tùy chỉnh, trên macOS Monterey, chúng hiện được hỗ trợ cho các ứng dụng iPad và iPhone trên M1 Macs.

Để biết thêm về Phím tắt, hãy xem các cuộc nói chuyện, "Gặp gỡ Phím tắt cho macOS" và "Thiết kế các hành động tuyệt vời cho Phím tắt, Siri và Đề xuất."

Tin tốt!

Thật dễ dàng để có mặt trên Mac App Store.

Trên thực tế, hầu hết các ứng dụng đều ở đó một cách tự động.

Như tôi đã đề cập trước đó, trong hầu hết các trường hợp, việc sử dụng Mac là hợp lý.

Rốt cuộc, ngay cả một ứng dụng khóa cửa Bluetooth, được thiết kế để di động, có thể hữu ích nếu bạn tự khóa mình ra khỏi nhà mà không có điện thoại, nhưng bạn có máy Mac với M1 trong tay.

Vì vậy, nếu trước đây bạn đã chọn ứng dụng của mình khỏi Mac App Store, bây giờ có thể là lúc để xem xét lại.

Với những cải tiến như Touch Alternatives và phát lại video toàn màn hình nâng cao, ứng dụng của bạn rất có thể rất phù hợp với Mac.

Trong trường hợp đó, chỉ cần kiểm tra lại hộp kiểm "Làm cho ứng dụng này khả dụng" trong App Store Connect để làm cho ứng dụng có sẵn trên Mac App Store.

Bất kể trước đây bạn có chọn không tham gia hay không, bạn sẽ muốn xác nhận rằng ứng dụng của bạn thực sự hoạt động tốt trên máy Mac với M1.

Khi bạn tự tin rằng trải nghiệm người dùng đạt tiêu chuẩn của mình, hãy nhấp vào liên kết Xác minh khả năng tương thích trong App Store Connect, được hiển thị ở đây.

Điều này loại bỏ văn bản "Chưa được xác minh cho macOS", được hiển thị bên cạnh ứng dụng của bạn trên Mac App Store và thay thế nó bằng "Được thiết kế cho iPad".

Những người mua sắm ứng dụng sẽ coi đây là dấu hiệu cho thấy bạn đã dành thời gian để đảm bảo rằng họ sẽ có trải nghiệm tốt với ứng dụng của bạn trên Mac.

Bạn chỉ phải làm điều này một lần cho mỗi ứng dụng.

Ồ, và chúng tôi cũng đã làm cho các ứng dụng iPad và iPhone dễ khám phá hơn nhiều trên Mac App Store.

Khi khách hàng tìm kiếm chúng theo tên, họ không còn phải chuyển sang tab Ứng dụng iPhone và iPad nữa.

Apple sẽ tự động chọn phiên bản macOS tối thiểu được đề xuất cần thiết để tương thích và đối với hầu hết các tình huống, điều này đều ổn.

Nhưng trong một số trường hợp hiếm hoi nhất định, bạn có thể muốn ghi đè điều này với tính khả dụng của macOS tùy chỉnh.

Ví dụ: ứng dụng video của bạn có thể hoạt động tốt trên Big Sur, nhưng nếu bạn muốn đảm bảo rằng bạn có quyền truy cập vào các cải tiến toàn màn hình AVKit, bạn có thể quyết định rằng nó chỉ có sẵn trên Monterey và hơn thế nữa.

Trong trường hợp này, bạn có hai lựa chọn.

Bắt đầu trong thời gian ngắn, bạn sẽ có thể chọn một phiên bản macOS tối thiểu khác trên trang Giá cả và Tính khả dụng của App Store Connect.

Điều này rất tốt cho các ứng dụng đã có trên cửa hàng vì bạn không phải gửi lại phiên bản mới.

Hoặc, bạn có thể chỉ định LSMinimumSystemVersion trong Info.plist và gửi thay đổi này như một phần của bản cập nhật tiếp theo của bạn.

Đây là cách tiếp cận được đề xuất cho các ứng dụng đang được phát triển tích cực.

Lưu ý rằng điều này không thay thế khóa MinimumOSVersion, khóa này chỉ định phiên bản hệ thống tối thiểu của iOS.

Nhưng thực sự, cả hai lựa chọn hiếm khi cần thiết.

Cuối cùng, hãy nói chuyện một chút về việc kiểm tra.

Thử nghiệm trên macOS rất giống với thử nghiệm trên iPad.

Bạn có thể sử dụng cùng một quy trình làm việc mà bạn đã quen thuộc.

Đối với thử nghiệm cục bộ trong Xcode, chỉ cần chọn My Mac (Được thiết kế cho iPad) làm đích chạy và gỡ lỗi, kiểm tra đơn vị, v.v., tất cả đều hoạt động giống như đối với các thiết bị khác.

Để thử nghiệm beta, chúng tôi đã thêm hỗ trợ TestFlight cho tất cả các ứng dụng trong macOS Monterey, bao gồm các ứng dụng iPhone và iPad, vì vậy bây giờ bạn có thể phân phối ứng dụng của mình cho những người thử nghiệm beta đang sử dụng Mac với M1.

Để biết thêm thông tin về điều này, hãy truy cập video, "Gặp gỡ TestFlight trên Mac."

Vì vậy, chào mừng đến với Mac!

Đi xác minh ứng dụng của bạn và chọn tham gia.

Thật dễ dàng.

Và chỉ cần nhớ, khi bạn tiếp tục cải thiện các ứng dụng iPad và iPhone của mình, bạn cũng đang làm cho các ứng dụng đó tốt hơn trên Mac với M1.

Cảm ơn bạn rất nhiều.

[Nhạc lạc quan].