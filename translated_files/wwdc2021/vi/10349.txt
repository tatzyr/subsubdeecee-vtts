10349

♪ ♪

Này, tôi là Jacob.

Chào mừng đến với "Biểu tượng SF trong SwiftUI."

Chúng ta sẽ xem xét một vài chủ đề trong phiên này.

Đầu tiên, một số nguyên tắc cơ bản của việc sử dụng Biểu tượng SF từ SwiftUI.

Sau đó, cách sử dụng các biến thể của biểu tượng của bạn.

Và cuối cùng, làm việc với các Chế độ Kết xuất mới.

Một lưu ý về tính khả dụng của các API này: mọi thứ chúng ta sẽ thấy trong phiên này đều có sẵn trên tất cả các nền tảng của Apple và hãy tìm huy hiệu mới để biết khi nào có điều gì đó mới trong các bản phát hành năm nay.

Hãy đi sâu vào các nguyên tắc cơ bản.

Nếu bạn đã sử dụng Biểu tượng từ SwiftUI, phần này sẽ rất dễ dàng.

Để bắt đầu, hãy chỉ hiển thị một Biểu tượng.

Cách đơn giản nhất là sử dụng một trong những biểu tượng do hệ thống cung cấp, như "trái tim", trong một Hình ảnh.

Chế độ xem Nhãn là cách chính khác để hiển thị các biểu tượng.

Nhãn là sự kết hợp của tiêu đề với biểu tượng, thường là biểu tượng.

Điều tuyệt vời về nhãn là nó là mô tả chung về sự ghép nối này và sẽ điều chỉnh hành vi của nó theo ngữ cảnh mà nó được hiển thị.

Ví dụ, trong nhiều thành phần, nhãn sẽ được hiển thị với biểu tượng, và sau đó là tiêu đề.

Đôi khi, chúng sẽ được hiển thị trong một bố cục khác, hoặc đôi khi, một thành phần sẽ chỉ hiển thị biểu tượng hoặc chỉ tiêu đề.

SwiftUI tự động thực hiện những thay đổi này cho bạn trong chế độ xem tích hợp và bạn cũng có thể sử dụng kiểu nhãn trong chế độ xem của riêng mình để thực hiện điều đó.

Bạn có thể hiển thị các biểu tượng tùy chỉnh trong cả Hình ảnh và Nhãn bằng cách chỉ cần thay đổi trình khởi tạo bạn sử dụng.

Đây là mỗi cấu hình này trông như thế nào, nhưng biểu diễn trực quan của chúng không phải là cấu hình duy nhất quan trọng.

Đây là cách mỗi chế độ xem này sẽ xuất hiện trên VoiceOver theo mặc định.

Bạn có thể thấy rằng việc sử dụng Nhãn tự động cung cấp cho chúng tôi hỗ trợ Khả năng truy cập tuyệt vời, vì tiêu đề cung cấp mô tả văn bản về nội dung.

Hãy xem xét kỹ hơn các trường hợp chỉ có hình ảnh.

Khi có thể, SwiftUI sẽ cung cấp nhãn dựa trên nội dung của biểu tượng hệ thống.

Đây có thể là tất cả những gì bạn cần, giống như nếu bạn đang sử dụng một trái tim cho nút "tình yêu".

Tuy nhiên, một số biểu tượng không có ý nghĩa tiêu chuẩn và trong những trường hợp đó, mô tả Khả năng truy cập mặc định sẽ không hữu ích bằng.

Bạn cũng có thể thêm thông tin cụ thể hơn về cách ứng dụng của bạn đang sử dụng biểu tượng.

Bạn luôn có thể sử dụng Nhãn trợ năng để cung cấp thông tin đó.

Biểu tượng tùy chỉnh của chúng tôi là một trường hợp khác mà chúng tôi không nhận được mô tả khả năng tiếp cận lý tưởng.

Một cách tuyệt vời để cải thiện điều đó là cung cấp bản địa hóa cho tên của hình ảnh trong tệp Localizable.strings.

SwiftUI sẽ tự động sử dụng chuỗi có thể định vị này cho nhãn khả năng truy cập của hình ảnh này ở bất cứ đâu nó được sử dụng.

Một cách cuối cùng để sử dụng các biểu tượng là như một phần của Văn bản.

Bạn có thể nhúng một biểu tượng vào bên trong một chuỗi văn bản bằng cách sử dụng phép nội suy chuỗi.

Đây là một kỹ thuật tốt để sử dụng khi bạn muốn một biểu tượng chảy lại cùng với văn bản của mình, như chevron này.

Được rồi, chúng ta hãy quay lại Nhãn của chúng ta với trái tim và xem xét một số công cụ sửa đổi mà chúng ta có thể áp dụng cho các biểu tượng để tùy chỉnh chúng.

Hãy bắt đầu bằng cách thay đổi màu sắc biểu tượng của chúng tôi với công cụ sửa đổi foregroundStyle.

Văn bản và biểu tượng mặc định là đen hoặc trắng ở chế độ sáng hoặc tối.

Bạn có thể đặt foregroundStyle thành một màu cụ thể, như màu đỏ hoặc các giá trị ngữ nghĩa hơn, như màu hiện tại hoặc kiểu phụ.

Chúng ta sẽ quay lại foregroundStyle một lần nữa sau để xem một số hiệu ứng nâng cao hơn mà chúng ta có thể làm với nó.

Bạn có thể sử dụng công cụ sửa đổi phông chữ để thay đổi cả kích thước văn bản, cũng như kích thước biểu tượng của bạn.

Nếu bạn sử dụng kiểu văn bản, như nội dung hoặc chú thích, thì văn bản và biểu tượng sẽ chia tỷ lệ với loại động và nếu bạn chọn kích thước cố định, thì chúng sẽ không đổi.

Trục khác mà bạn có thể thay đổi kích thước của các biểu tượng là tỷ lệ của chúng, sử dụng công cụ sửa đổi imageScale.

Điều này không thay đổi kích thước phông chữ được sử dụng, nhưng kích thước của một biểu tượng xuất hiện so với văn bản.

Tiếp theo, chúng ta hãy xem xét các biến thể.

Bạn có thể nhận thấy rằng các thanh tab iOS nên sử dụng các biến thể biểu tượng đã điền.

Trước đây, đây là điều mà bạn phải tự làm bằng cách chọn cẩn thận biểu tượng phù hợp từ ứng dụng Biểu tượng và biết khi nào biểu tượng không có biến thể điền, như "lấp lánh" ở đây.

Mới trong năm nay, các thanh tab và các chế độ xem khác hiện tự động chọn tham gia các biến thể cụ thể, như điền, được áp dụng cho bất kỳ biểu tượng nào mà chúng chứa.

Điều này có nghĩa là bạn chỉ có thể sử dụng phiên bản cơ bản của biểu tượng và có được biến thể phù hợp mà không cần thêm bất kỳ công việc nào.

Và bằng cách không xác định quá mức cấu hình chính xác mà bạn muốn, bạn cũng nhận được mã có thể tái sử dụng nhiều hơn.

Ví dụ, nếu chúng ta chạy cùng một mã này trên macOS, chúng ta sẽ nhận được biến thể chính xác cho nền tảng đó: phác thảo.

Chúng tôi cũng có thể sử dụng hỗ trợ biến thể này trong các thành phần của riêng mình.

Ở đây, tôi có một danh sách các nhãn đơn giản, được hiển thị với biến thể phác thảo mặc định.

Để sử dụng các biến thể đầy ở đây, tôi có thể sử dụng công cụ sửa đổi symbolVariant mới.

Công cụ sửa đổi này đặt biến thể được chỉ định trong môi trường, vì vậy thật tuyệt khi sử dụng trên toàn bộ hệ thống phân cấp chế độ xem, giống như chúng tôi đang làm ở đây.

Có một tập hợp lớn các biến thể có sẵn: điền, dấu gạch chéo và một tập hợp các hình dạng đóng gói.

Và những thứ này cũng có thể được kết hợp với nhau, giống như cách chúng được kết hợp trong tên của chính các biểu tượng, như .circle.fill.

Bộ biến thể tương tự này cũng hoạt động trên các biểu tượng tùy chỉnh của bạn.

Tất cả những gì bạn phải làm là làm theo các mẫu đặt tên giống nhau được sử dụng bởi các biểu tượng hệ thống.

Tiếp theo, hãy xem xét các chế độ kết xuất.

Các biểu tượng hỗ trợ bốn chế độ kết xuất khác nhau để cho phép bạn tùy chỉnh cách các biểu tượng của mình được tô màu.

Đây là một số ví dụ về từng chế độ kết xuất.

Chúng ta sẽ xem xét từng cái một.

Và nếu bạn muốn tìm hiểu thêm về thiết kế của các chế độ kết xuất khác nhau, tôi thực sự khuyên bạn nên "Có gì mới trong Biểu tượng SF."

Được rồi, chúng ta hãy quay lại danh sách thẻ của chúng ta, lần này là trên macOS.

Ngay bây giờ, các biểu tượng của chúng tôi đang hiển thị chế độ kết xuất mặc định, đó là đơn sắc.

Điều này hoạt động tốt để hiển thị màu sắc nhất quán cho một tập hợp các biểu tượng.

Tuy nhiên, trong trường hợp này, tôi muốn hiển thị các biểu tượng này bằng cách sử dụng các màu được liên kết với mỗi thẻ.

Chế độ kết xuất nhiều màu là một cách tuyệt vời để hiển thị màu sắc cho những gì mỗi biểu tượng đại diện.

Và chúng ta có thể thay đổi nó bằng cách thêm công cụ sửa đổi symbolRenderingMode trên nhiều màu.

Nếu một biểu tượng không có biểu diễn nhiều màu, nó sẽ quay trở lại chế độ kết xuất đơn sắc.

Bạn có thể sử dụng ứng dụng Biểu tượng SF để tra cứu biểu tượng nào có định nghĩa nhiều màu và thêm hỗ trợ nhiều màu cho các biểu tượng tùy chỉnh của bạn.

Kiểm tra "Tổng quan về ứng dụng biểu tượng SF" để tìm hiểu thêm.

Trong một phần khác của ứng dụng này, chúng tôi có một số nút để xáo trộn thẻ đến các phần khác nhau của bộ bài.

Tôi muốn nhấn mạnh các phần chính của các biểu tượng này với các mức độ mờ đục khác nhau.

Bạn có nhớ chế độ kết xuất nào không?

Đúng rồi! Phân cấp!

Chúng ta có thể sử dụng cùng một công cụ sửa đổi symbolRenderingMode với hệ thống phân cấp.

Điều này sử dụng phong cách tiền cảnh hiện tại để áp dụng một màu duy nhất cho biểu tượng, như đơn sắc, nhưng cũng thêm nhiều mức độ mờ đục, để nhấn mạnh các yếu tố chính của biểu tượng.

Có một chế độ kết xuất cuối cùng và có một nút trong ứng dụng của tôi mà nó có thể giúp ích.

Tôi không giỏi chơi bài lắm, vì vậy tôi cần nút này để hoàn tác những sai lầm của mình.

Ở đây, tôi đang hiển thị một biểu tượng trong một nút có biến thể .circle.fill để có được nền tròn này.

Nhưng màu sắc không chính xác là những gì tôi muốn.

Tôi muốn thứ gì đó phù hợp hơn với màu sắc của thẻ của chúng tôi.

Hãy nhớ rằng chúng ta có thể sử dụng công cụ sửa đổi foregroundStyle để đặt màu trên biểu tượng.

Nhưng chúng ta có thể đi xa hơn.

Mới trong năm nay, chúng ta có thể thiết lập nhiều màu sắc để sử dụng để vẽ biểu tượng của mình.

Điều này sử dụng chế độ kết xuất bảng màu, cho phép kiểm soát tối đa màu sắc của các lớp biểu tượng.

Bạn có thể chỉ định tối đa ba kiểu để kiểm soát từng cấp độ của biểu tượng.

Biểu tượng này có nội dung chính và thứ ba, vì vậy màu đầu tiên và thứ ba sẽ được sử dụng.

Nếu chúng ta sử dụng một biểu tượng chỉ có nội dung chính và phụ, như phiên bản phác thảo của biểu tượng này, thì chỉ những màu đó mới được sử dụng.

Bởi vì hầu hết các biểu tượng riêng lẻ chỉ sử dụng hai lớp, giống như cả hai lớp này, bạn có thể chỉ định hai kiểu thay vì ba và kiểu cuối cùng được sử dụng cho mọi thứ từ thứ cấp trở đi.

Trong nhiều trường hợp, đây là tất cả những gì bạn cần.

Chúng tôi đã sử dụng màu sắc cho đến nay, nhưng đây là công cụ sửa đổi kiểu tiền cảnh và nó hoạt động với bất kỳ ShapeStyle nào.

Chúng ta có thể sử dụng một phong cách phụ để có được hiệu ứng sống động trước những vết mờ, hoặc thậm chí sử dụng một vật liệu để làm mờ hậu cảnh phía sau một biểu tượng.

Nếu bạn muốn tìm hiểu thêm về phong cách và vật liệu tiền cảnh, hãy xem "Thêm đồ họa phong phú vào ứng dụng SwiftUI của bạn."

Hãy nhìn lại toàn bộ chế độ kết xuất một lần nữa.

Cách tốt nhất để xem và chọn chế độ kết xuất nào để sử dụng là ứng dụng Biểu tượng SF và trình kiểm tra của nó.

Và các API này để thể hiện các cấu hình này trong SwiftUI hoạt động theo cùng một cách, vì vậy thật dễ dàng để đi qua lại giữa ứng dụng Biểu tượng và mã của bạn.

Bạn cũng có được hành vi tốt nhất với cấu hình tối thiểu.

Nếu bạn chỉ có một kiểu tiền cảnh và không chỉ định chế độ kết xuất, bạn sẽ tự động nhận được đơn sắc.

Và nếu bạn chỉ định nhiều hơn một kiểu tiền cảnh, nhưng không chỉ định chế độ kết xuất, bạn sẽ tự động nhận được bảng màu.

Ứng dụng Biểu tượng có một bộ màu lớn có sẵn để sử dụng với các chế độ kết xuất khác nhau này.

Và bộ màu đầy đủ đó cũng có sẵn trong SwiftUI, bao gồm một số màu sắc và kiểu dáng mới trong năm nay.

Những màu này được tối ưu hóa cho tất cả các cấu hình khác nhau mà chúng xuất hiện: chế độ sáng và tối, kết xuất đặc biệt trên các vết mờ, thậm chí cả nền tảng cụ thể mà chúng được hiển thị.

Chúng tôi vừa xem cách tạo biểu tượng, một bộ công cụ sửa đổi để thay đổi giao diện của chúng, cách thay đổi biến thể nào của biểu tượng được hiển thị, chọn các chế độ kết xuất khác nhau và cách sử dụng các kiểu tiền cảnh để tùy chỉnh màu sắc của biểu tượng của bạn.

Biểu tượng SF giúp bạn dễ dàng thêm đồ họa đẹp vào ứng dụng của mình và tùy chỉnh chúng ít hoặc nhiều tùy thích.

Xem nơi bạn có thể áp dụng chúng để làm cho ứng dụng của bạn trông đẹp hơn nữa.

Cảm ơn vì đã xem và có một WWDC tuyệt vời.

[Nhạc lạc quan].