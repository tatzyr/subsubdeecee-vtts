10210

♪ Nhạc bass đang phát ♪

♪

Jake Petroules: Xin chào, và chào mừng đến với "Khám phá cấu hình dự án nâng cao trong Xcode".

Tôi là Jake, và cùng với đồng nghiệp Prachi của tôi, tôi sẽ thảo luận về các chiến lược và kỹ thuật để tận dụng tối đa cấu hình xây dựng dự án Xcode của bạn.

Chúng tôi sẽ đề cập đến ba lĩnh vực chủ đề chính.

Đầu tiên, Prachi sẽ thảo luận về các dự án đa nền tảng và sự hỗ trợ mới của Xcode 13 cho các mục tiêu khung đa nền tảng.

Tiếp theo, tôi sẽ đề cập đến các phương pháp hay nhất để mô hình hóa và cấu hình dự án của bạn thông qua các sơ đồ, thiết lập mục tiêu và quản lý phụ thuộc, đồng thời xây dựng các giai đoạn và quy tắc.

Và cuối cùng, Prachi sẽ đưa bạn đi sâu vào cài đặt xây dựng, nơi chúng tôi sẽ đề cập đến cấu trúc và hành vi của chúng, giao diện người dùng trình chỉnh sửa dự án, tệp cài đặt cấu hình và cú pháp của chúng, và hơn thế nữa!

Trong suốt buổi nói chuyện này, chúng tôi sẽ sử dụng một dự án ứng dụng đa nền tảng có tên Fruta để chỉ ra cách các kỹ thuật này áp dụng cho một dự án thực tế.

Và bây giờ tôi sẽ giao nó cho Prachi, người sẽ nói về các khuôn khổ đa nền tảng.

Prachi Pai Asnodkar: Cảm ơn, Jake.

Một trong những tính năng mới trong Xcode 13 là hỗ trợ cho các khung đa nền tảng.

Các khung đa nền tảng cho phép chúng tôi hợp nhất nhiều khung thành một, cung cấp cho chúng tôi quản lý mục tiêu đơn giản hóa, một bộ các giai đoạn xây dựng để quản lý và một bộ cài đặt xây dựng để quản lý.

Hãy cùng xem ứng dụng Fruta và cập nhật dự án của chúng tôi để tận dụng tính năng này.

Đây là ứng dụng Fruta.

Đây là một ứng dụng đa nền tảng được xây dựng cho macOS, iOS và watchOS.

Nó cũng có ba mục tiêu khung - một cho mỗi nền tảng chứa một tập hợp mã được chia sẻ được sử dụng bởi các ứng dụng.

Duy trì ba khuôn khổ riêng biệt có thể đi kèm với những thách thức, chẳng hạn như giữ cho cài đặt xây dựng đồng bộ và đảm bảo tất cả các tệp nguồn của bạn được thêm đúng vào các giai đoạn xây dựng nguồn biên dịch của bạn.

Để giải quyết những thách thức này, chúng tôi sẽ bắt đầu bằng cách chuyển đổi một trong các khuôn khổ của mình thành khuôn khổ đa nền tảng.

Ở đây chúng tôi có ba khuôn khổ - một cho mỗi nền tảng.

Tất cả các mục tiêu này đều giống hệt nhau ngoại trừ mục tiêu có tệp chỉ được xây dựng trên macOS.

Đầu tiên, hãy điều hướng đến tab Cài đặt Xây dựng trong trình điều hướng dự án cho mục tiêu khung macOS.

Tiếp theo, chúng tôi sẽ định cấu hình khuôn khổ để xây dựng cho tất cả các nền tảng bằng cách vào cài đặt xây dựng Nền tảng được Hỗ trợ và chọn Bất kỳ Nền tảng nào.

Bạn cũng có thể thấy rằng Cho phép xây dựng đa nền tảng đã được đặt tự động thành "Có".

Điều này thông báo cho hệ thống xây dựng để xây dựng mục tiêu này một lần cho mỗi nền tảng được hỗ trợ của nó, khi cần thiết.

Bây giờ đây là mục tiêu đa nền tảng, hãy nhớ lại rằng khung macOS ban đầu có một tệp bổ sung chỉ nên xây dựng khi xây dựng cho macOS.

Để định cấu hình khuôn khổ của chúng tôi để thực hiện việc này, chúng tôi có thể thêm bộ lọc nền tảng để chỉ định rằng tệp này chỉ nên xây dựng cho macOS.

Để làm điều này, trước tiên chúng ta sẽ chuyển đến tab Giai đoạn Xây dựng.

Tiếp theo, mở rộng giai đoạn xây dựng Nguồn Biên dịch.

Cuối cùng, cấu hình Ingredient+macOS.swift để chỉ xây dựng cho macOS bằng cách nhấp vào mục Bộ lọc và bỏ chọn mọi thứ trừ macOS.

Bây giờ chúng tôi đã định cấu hình mục tiêu đa nền tảng mới, chúng tôi có thể xóa hai biến thể khác của khuôn khổ của mình, vì chúng không còn cần thiết nữa.

Ngoài ra, vì chúng tôi chỉ có một mục tiêu khung, chúng tôi sẽ phải định cấu hình tất cả các ứng dụng của mình để liên kết và nhúng mục tiêu mới đó.

Ứng dụng macOS đã được cấu hình vì chúng tôi đã thiết lập mục tiêu đa nền tảng của mình bắt đầu từ mục tiêu macOS.

Chúng ta có thể thêm khung mới vào các ứng dụng iOS và watchOS bằng cách vào tab Chung cho từng mục tiêu ứng dụng và thêm khung vào giai đoạn xây dựng Khung và Thư viện.

Tóm lại: chúng tôi đã lấy mục tiêu khung macOS của mình và cho phép nó xây dựng cho iOS và watchOS.

Chúng tôi đã tùy chỉnh khung đó với bộ lọc nền tảng cho tệp nguồn chỉ dành cho macOS của chúng tôi.

Và cuối cùng, chúng tôi đã định cấu hình các mục tiêu ứng dụng của mình để liên kết và nhúng mục tiêu khung đa nền tảng đơn lẻ mới.

Và đó là các mục tiêu đa nền tảng trong Xcode.

Bây giờ trở lại với Jake, người sẽ đi sâu hơn vào cấu hình dự án.

Jake: Cảm ơn, Prachi.

Tôi sẽ thảo luận về các phương pháp hay nhất để mô hình hóa và cấu hình dự án Xcode của bạn, đồng thời chỉ ra một vài điều bạn có thể làm để cải thiện hiệu suất và tính chính xác của các bản dựng của mình.

Đầu tiên, chúng ta hãy xem xét các tùy chọn xây dựng cho sơ đồ.

Tôi sẽ nhấp vào bộ chọn sơ đồ, Chỉnh sửa sơ đồ, sau đó chuyển đến phần Xây dựng.

Có một vài điều đơn giản tôi có thể cấu hình ở đây.

Đối với Đơn đặt hàng Xây dựng, chúng tôi khuyên bạn nên chọn Thứ tự Phụ thuộc, điều này sẽ khiến các mục tiêu trong dự án của bạn xây dựng song song theo biểu đồ phụ thuộc.

Điều này có thể cải thiện đáng kể hiệu suất xây dựng đa lõi và cũng sẽ giúp bạn có được kết quả nhanh hơn từ việc tích hợp liên tục.

Ngược lại, việc chọn Đặt hàng Thủ công bị phản đối và không được khuyến khích.

Sử dụng tùy chọn này sẽ làm chậm quá trình xây dựng của bạn và có thể gây ra lỗi chu kỳ khi thứ tự mục tiêu được liệt kê trong sơ đồ không phù hợp với sự phụ thuộc của dự án của bạn.

Một cài đặt quan trọng khác trong các tùy chọn xây dựng sơ đồ là Tìm phụ thuộc tiềm ẩn.

Kiểm tra tùy chọn này cho phép Xcode tự động thêm sự phụ thuộc giữa các mục tiêu dựa trên thông tin trong dự án của bạn, chẳng hạn như cờ liên kết trong cài đặt xây dựng và tên của các thư viện được liên kết trong các giai đoạn xây dựng.

Điều này có thể đặc biệt hữu ích khi các mục tiêu liên quan nằm trong các dự án khác nhau, nơi bạn thường không thể thêm sự phụ thuộc mục tiêu rõ ràng.

Nếu bạn đang sử dụng thứ tự phụ thuộc thủ công để xây dựng các mục tiêu theo một thứ tự cụ thể do không thể thêm các phụ thuộc mục tiêu rõ ràng trên các dự án khác nhau, việc bật Tìm phụ thuộc tiềm ẩn kết hợp với việc chọn Thứ tự phụ thuộc thường là một giải pháp tốt hơn.

Bây giờ tôi sẽ nói về các giai đoạn kịch bản và xây dựng các quy tắc.

Tôi sẽ chọn mục tiêu SmoothieKit từ danh sách mục tiêu của dự án, và sau đó chọn tab Giai đoạn Xây dựng.

Ở đây chúng tôi có một giai đoạn kịch bản Process Recipes chứa một số logic xây dựng tùy chỉnh.

Một trong những trách nhiệm của nó là tạo mã từ một số tệp công thức với một đầu ra cho mỗi đầu vào, mà chúng tôi xử lý theo trình tự.

Bây giờ, bạn có thể nhận ra rằng những tính toán này hoàn toàn độc lập với nhau.

Điều này thể hiện một cơ hội tối ưu hóa hiệu suất mà chúng ta có thể tận dụng bằng cách chạy song song chúng.

Xây dựng các quy tắc cho phép chúng tôi làm điều đó.

Chúng ta hãy xem cách chúng ta có thể trích xuất công việc này thành một quy tắc xây dựng.

Tôi sẽ chuyển đến tab Quy tắc xây dựng trong trình chỉnh sửa dự án cho khuôn khổ của chúng tôi và nhấp vào nút dấu cộng để thêm quy tắc xây dựng mới.

Sau đó nhập mẫu tệp "*.recipe", tương ứng với phần mở rộng tệp của loại tệp mà tôi muốn quy tắc này xử lý.

Tiếp theo, tôi sẽ thêm các phụ thuộc vào quy tắc này.

Tôi không cần thêm bất kỳ đầu vào bổ sung nào vào quy tắc xây dựng, bởi vì nó sẽ tự động nhận được từng tệp đầu vào mà nó xử lý dưới dạng đầu vào.

Tuy nhiên, tôi cần nói với hệ thống xây dựng đường dẫn của tệp đầu ra mà quy tắc sẽ tạo ra cho mỗi tệp mà nó xử lý.

Tôi sẽ nhấp vào nút dấu cộng để thêm tệp đầu ra mới và nhập $(DERIVED_ FILE_ DIR)/$ (INPUT_ FILE _BASE) .compiledrecipe.

Cách tốt nhất là viết các tệp được tạo dưới DERIVED_FILE_DIR vì điều này sẽ trỏ đến một vị trí thích hợp được quản lý bởi hệ thống xây dựng.

Bạn nên tránh tạo các tệp đầu ra dưới gốc nguồn.

Điều này có thể can thiệp vào việc kiểm soát nguồn và dẫn đến xung đột khi chạy nhiều bản dựng cùng một lúc.

Tất nhiên, bây giờ chúng tôi phải sao chép mã giai đoạn tập lệnh của mình sang quy tắc.

Tôi sẽ quay lại giai đoạn tập lệnh và sao chép mã nơi chúng tôi xử lý từng tệp.

Sau đó tôi sẽ quay lại quy tắc và dán nó vào.

Hãy nhớ rằng các quy tắc chạy một lần cho mỗi đầu vào mà chúng xử lý.

Vì vậy, tôi sẽ xóa vòng lặp for, thay thế $RECIPE bằng $SCRIPT_INPUT_FILE - tương ứng với đường dẫn tệp tuyệt đối của tệp đầu vào hiện tại đang được xử lý - và thay thế $DERIVED_FILE_DIR/ $RECIPE.compiledrecipe bằng $SCRIPT_OUTPUT_FILE_0,

Đừng quên trích dẫn các biến để đảm bảo khoảng trắng và các ký tự đặc biệt khác trong đường dẫn tệp được xử lý chính xác.

Tuyệt vời.

Bây giờ có một thứ nữa để cấu hình trong quy tắc.

Tôi đã đề cập rằng các quy tắc chạy một lần cho mỗi đầu vào mà chúng xử lý.

Theo mặc định, chúng cũng chạy một lần cho mỗi kiến trúc mà mục tiêu đang biên dịch.

Ví dụ, một quy tắc trong mục tiêu ứng dụng Mac có thể chạy một lần cho arm64 và một lần cho x86_64 lần mỗi đầu vào của nó.

Vì vậy, nếu có bốn đầu vào nhân với hai kiến trúc, quy tắc sẽ được gọi tám lần.

Điều này hữu ích khi đầu ra của quy tắc phụ thuộc vào kiến trúc, chẳng hạn như mã đối tượng.

Tuy nhiên, trong trường hợp này, quy tắc của tôi tạo ra đầu ra độc lập với kiến trúc CPU cơ bản, vì vậy tôi sẽ bỏ chọn "Chạy một lần cho mỗi kiến trúc".

Cuối cùng, để hệ thống xây dựng truyền các tệp đầu vào vào quy tắc xây dựng, tôi sẽ cần thêm tất cả các tệp .recipe vào giai đoạn xây dựng Nguồn biên dịch của mục tiêu khung của mình.

Tôi sẽ quay lại Giai đoạn Xây dựng, mở rộng Biên dịch Nguồn và sử dụng nút dấu cộng để thêm các tệp công thức.

Bây giờ chúng ta hãy quay lại giai đoạn kịch bản.

Phần công việc còn lại của việc này là hợp nhất nội dung của nhiều tệp văn bản thành một tệp duy nhất mà chúng ta có thể tải trong thời gian chạy trong ứng dụng của mình hiệu quả hơn.

Và để có trải nghiệm kiểm soát nguồn tốt hơn, tôi đang giữ các tập lệnh bên ngoài tệp dự án và gọi chúng từ trình chỉnh sửa tập lệnh nội tuyến tại đây.

Vì vậy, hãy làm theo tham chiếu đến package.sh để xem mã.

Một quy tắc xây dựng sẽ không phù hợp trong trường hợp này, vì chúng ta cần xử lý tất cả các đầu vào cùng một lúc để kết hợp chúng thành một.

Vì vậy, không có cách nào để chia nó thành các đơn vị biệt lập có thể chạy song song và do đó sẽ hợp lý khi giữ công việc này trong giai đoạn kịch bản.

Nhưng điều này đưa chúng ta đến một trong những điều quan trọng nhất: tập lệnh không có phụ thuộc đầu vào và đầu ra được chỉ định.

Điều này có thể khiến các tác vụ xây dựng chạy sai thứ tự và làm chậm quá trình xây dựng vì Xcode phải thận trọng hơn đối với việc chạy song song các tác vụ khác, vì nó không biết giai đoạn tập lệnh có thể đang sử dụng những tệp nào.

Vì vậy, điều quan trọng là phải thêm các phụ thuộc đầu vào và đầu ra để đảm bảo công việc được thực hiện bởi các giai đoạn tập lệnh được thực hiện theo đúng thứ tự so với các tác vụ khác trong bản dựng.

Đối với kịch bản cụ thể này, tôi có một số lượng lớn đầu vào.

Thay vì nhập từng cái này vào tệp dự án, tôi có thể sử dụng xcfilelist để quản lý danh sách đầu vào này thông qua tệp bên ngoài.

Tôi sẽ tiếp tục và thêm một cái vào dự án ngay bây giờ.

Tôi sẽ vào File > New File, và chọn Build Phase File List trong phần Khác.

Tôi sẽ dán danh sách các tệp đầu vào sẽ được xử lý theo giai đoạn tập lệnh này, mỗi dòng một tệp.

Nếu bạn muốn, bạn thậm chí có thể viết bình luận bằng cách bắt đầu một dòng với dấu pound, điều này rất tốt để thêm ngữ cảnh bổ sung.

Bây giờ tôi sẽ tham khảo xcfilelist này từ giai đoạn tập lệnh.

Tôi sẽ quay lại giai đoạn tập lệnh và chỉ định đường dẫn đến xcfilelist trong Danh sách tệp đầu vào.

Cuối cùng, tôi sẽ chỉ định một phụ thuộc đầu ra bằng cách cung cấp đường dẫn tệp mà tại đó nội dung đầu ra sẽ được ghi, giống như tôi đã làm cho quy tắc xây dựng.

Có một điều nữa cần đề cập.

Tương tự như quy tắc xây dựng, có một số biến môi trường quan trọng được cung cấp cho bạn theo giai đoạn tập lệnh.

Hãy điều hướng trở lại package.sh để xem xét kỹ hơn.

Trong nguồn, tôi tham chiếu SCRIPT_INPUT_FILE_LIST_COUNT; đề cập đến tổng số danh sách tệp đầu vào được chuyển đến giai đoạn tập lệnh của chúng tôi, SCRIPT_INPUT_FILE_LIST_n; đề cập đến đường dẫn tệp tuyệt đối đã được giải quyết của danh sách tệp đầu vào ở chỉ mục thứ n và 

Đây là tổng quan về một số biến môi trường chính được cung cấp cho các giai đoạn kịch bản.

Cài đặt xây dựng của mục tiêu cũng được cung cấp cho môi trường giai đoạn tập lệnh.

Dưới đây là tổng quan về một số biến môi trường cụ thể để xây dựng các quy tắc, cũng như một số biến số biến ít phổ biến hơn.

Giống như các giai đoạn kịch bản, cài đặt xây dựng của mục tiêu cũng được cung cấp cho môi trường quy tắc xây dựng.

OK. Bây giờ, nếu tôi cố gắng xây dựng dự án, tôi sẽ gặp phải một vấn đề.

Hãy đi đến nhật ký xây dựng để xem xét kỹ hơn.

Bởi vì SmoothieKit là một mục tiêu đa nền tảng, nó đang xây dựng hai lần: một lần cho iOS và một lần cho watchOS, và điều này có nghĩa là mỗi bản dựng này đang cố gắng tạo ra đầu ra của giai đoạn tập lệnh ở cùng một đường dẫn.

Điều này không được phép vì hệ thống xây dựng yêu cầu chỉ một tác vụ trong toàn bộ bản dựng có thể tạo ra đầu ra tại một đường dẫn nhất định.

Có một vài cách khác nhau để tôi có thể giải quyết vấn đề này.

Một giải pháp đơn giản sẽ là thay đổi đường dẫn đầu ra của giai đoạn tập lệnh sao cho nó là duy nhất mỗi khi mục tiêu được xây dựng.

Trong trường hợp này, tôi có thể cân nhắc sử dụng một cài đặt xây dựng khác như DERIVED_FILE_DIR, dành riêng cho nền tảng và sẽ làm cho đường dẫn đủ độc đáo và giải quyết xung đột.

Tuy nhiên, nếu công việc thực tế mà giai đoạn kịch bản đang thực hiện sẽ giống hệt nhau trong ngữ cảnh của mỗi mục tiêu, điều đó chỉ đơn giản là khiến cùng một công việc được thực hiện hai lần.

Trong trường hợp đó, có thể là một lựa chọn tốt hơn để chuyển giai đoạn tập lệnh sang mục tiêu tổng hợp mới mà mục tiêu khung được chia sẻ phụ thuộc vào.

Đó là những gì tôi sẽ làm cho dự án của mình.

Để bắt đầu, tôi sẽ nhấp vào nút dấu cộng ở cuối danh sách mục tiêu, chọn tab Khác và chọn Tổng hợp mục tiêu.

Tôi sẽ gọi nó là Tài nguyên.

Sau đó, tôi sẽ thêm một giai đoạn tập lệnh mới và sao chép tên, nguồn tập lệnh, đầu vào và đầu ra từ mục tiêu khung.

Cuối cùng, tôi sẽ xóa giai đoạn tập lệnh ban đầu khỏi mục tiêu khung và sau đó thêm sự phụ thuộc mục tiêu vào mục tiêu tổng hợp mới.

Bằng cách này, công việc sẽ chỉ được thực hiện một lần, sẽ không có xung đột tệp đầu ra và cả hai biến thể iOS và watchOS của khung sẽ được xây dựng theo đúng thứ tự so với giai đoạn tập lệnh đó.

Xây dựng thành công.

Và bây giờ, trở lại Prachi, người sẽ cho bạn biết tất cả về cài đặt xây dựng.

Prachi: Cảm ơn bạn, Jake!

Vậy cài đặt xây dựng là gì?

Đây là một thuộc tính mà bạn có thể áp dụng cho các mục tiêu Xcode để định cấu hình các khía cạnh về cách chúng được xây dựng.

Xcode cung cấp hai cơ chế chính để định cấu hình cài đặt xây dựng.

Đầu tiên là thông qua trình chỉnh sửa cài đặt xây dựng.

Thứ hai là thông qua tệp cài đặt cấu hình hoặc tệp .xcconfig.

Hãy bắt đầu bằng cách xem trình chỉnh sửa cài đặt xây dựng có thể được sử dụng như thế nào để quản lý các cài đặt trong dự án của chúng tôi.

Để hiển thị trình chỉnh sửa cài đặt xây dựng, trước tiên bạn cần chọn dự án của mình trong trình điều hướng Dự án.

Tiếp theo, đảm bảo chọn mục tiêu bạn muốn định cấu hình.

Và cuối cùng, nhấp vào tab Cài đặt Xây dựng trên thanh tab.

Từ đây, bạn có thể thêm cài đặt xây dựng mới hoặc sửa đổi các cài đặt hiện có.

Bạn cũng có thể tìm hiểu thêm thông tin cho cài đặt xây dựng đã chọn bằng cách mở trình kiểm tra Trợ giúp Nhanh.

Cài đặt xây dựng được xác định ở nhiều cấp độ.

Bạn có thể nghĩ về điều này như một chồng các định nghĩa.

Trên thực tế, các cấp độ này có thể được hình dung bằng cách nhấp vào bộ lọc Cấp độ.

Mỗi cột đại diện cho một cấp độ khác nhau mà cài đặt xây dựng có thể được xác định và chúng được đánh giá từ phải sang trái.

Bắt đầu từ mức thấp nhất, có giá trị mặc định, được xác định bởi SDK hiện được chọn, tệp cài đặt cấu hình cấp dự án, cài đặt cấp dự án từ tệp dự án Xcode, cài đặt mục tiêu được xác định trong tệp cài đặt cấu hình, cài đặt cấp mục tiêu được xác định trong tệp dự án Xcode của bạn và cuối cùng là giá trị đã

Lưu ý rằng nếu bạn thấy một cài đặt in đậm biểu thị rằng cấp độ có giá trị rõ ràng cho cài đặt xây dựng.

Cơ chế khác mà Xcode cung cấp để quản lý cài đặt xây dựng là các tệp cài đặt cấu hình hoặc tệp .xcconfig.

Một số lợi ích của tệp xcconfig bao gồm: quản lý kiểm soát nguồn tốt hơn, chia sẻ cài đặt trên các mục tiêu hoặc cấu hình, thành phần nâng cao của cài đặt xây dựng và khả năng bao gồm các tệp xcconfig bổ sung dựa trên môi trường phát triển hoặc thử nghiệm của bạn.

Hãy cùng xem cách bạn có thể tạo cài đặt trong tệp xcconfig.

Ở cấp độ cơ bản nhất của nó, một cài đặt xây dựng được tạo thành từ một cái tên, một toán tử gán và một giá trị.

Bạn có thể thu hẹp giá trị của cài đặt xây dựng bằng cách sử dụng cú pháp có điều kiện.

Cài đặt có điều kiện được xác định bằng cách sử dụng dấu ngoặc vuông.

Một số điều kiện được hỗ trợ bao gồm cấu hình, kiến trúc và SDK.

Như được hiển thị với điều kiện SDK, ký tự đại diện có thể được sử dụng cho các mục đích phù hợp.

Nhận xét cũng có thể được thêm vào bằng cách sử dụng cú pháp dấu gạch chéo kép quen thuộc.

Cài đặt xây dựng có thể được đặt thành giá trị của cài đặt xây dựng khác bằng cách sử dụng cú pháp đô la-parens.

Trong ví dụ ở đây, MY_OTHER_BUILD_SETTING đã được đặt thành CÓ.

Giá trị của MY_BUILD_SETTING_NAME sử dụng cú pháp dollar-parens để đánh giá MY_OTHER_BUILD_SETTING.

Nhiều giá trị cũng có thể được đánh giá ở đây, như chúng ta thấy với MORE_SETTINGS.

Và cuối cùng, các giá trị hiện có cho cài đặt xây dựng có thể được sử dụng với giá trị $(được kế thừa).

Điều này cho phép bạn thêm các giá trị bổ sung vào cài đặt xây dựng trong khi vẫn giữ lại tất cả các giá trị hiện có của nó.

Đây là một biểu mẫu tiện lợi vì bạn cũng có thể sử dụng tên cài đặt xây dựng, APPEND_TO_EXISTING_SETTINGS.

Một cách sử dụng khác của cú pháp đánh giá cài đặt xây dựng là soạn các cài đặt xây dựng cùng nhau từ một tập hợp các cài đặt xây dựng khác.

Đầu tiên, chúng ta bắt đầu với một cài đặt điều khiển: IS_BUILD_SETTING_ENABLED.

Chúng tôi sẽ sử dụng giá trị của cài đặt này làm hậu tố cho hai cài đặt xây dựng bổ sung, MY_BUILD_SETTING_NO và MY_BUILD_SETTING_YES.

Cuối cùng, chúng tôi định nghĩa MY_BUILD_SETTING có một giá trị bao gồm cả MY_BUILD_SETTING và IS_BUILD_SETTING_ENABLED.

Bởi vì đánh giá cài đặt xây dựng xảy ra từ trong ra ngoài, cài đặt trong cùng được đánh giá và trả về NO, đó là giá trị của IS_BUILD_SETTING_ENABLED.

Cuối cùng, BUILD_SETTING_NO được sáng tác được đánh giá thành giá trị -use_this_one.

Khi đánh giá cài đặt xây dựng, có một tập hợp các toán tử bạn có thể sử dụng để cung cấp một số biến đổi cơ bản về giá trị của mình.

Ba phân loại toán tử là: toán tử chuỗi, toán tử đường dẫn và toán tử thay thế.

Các toán tử chuỗi được hỗ trợ là trích dẫn, thoát khỏi các ký tự trong chuỗi; dưới và trên, chuyển đổi các trường hợp ký tự; và số nhận dạng, chuyển đổi chuỗi thành số nhận dạng hợp lệ ở nhiều định dạng khác nhau.

Chúng tôi cung cấp một tập hợp các toán tử đường dẫn để lấy thư mục, tên tệp, tên cơ sở, hậu tố và đường dẫn được tiêu chuẩn hóa.

Đối với mỗi toán tử đường dẫn, có một đối tác thay thế cho phép bạn thay thế một phần của giá trị.

Ngoài ra còn có một toán tử mặc định cung cấp giá trị thay thế nếu cài đặt xây dựng trống, nếu không nó sẽ sử dụng giá trị hiện có của cài đặt xây dựng.

Mục cuối cùng cần xem xét là khả năng bao gồm các tệp xcconfig trong các tệp xcconfig khác.

Có hai cơ chế có sẵn cho bạn.

Yêu cầu đầu tiên bao gồm, yêu cầu tệp xcconfig tồn tại trên đĩa.

Một lỗi trình biên dịch sẽ được tạo ra nếu không thể tìm thấy tệp.

Thứ hai là bao gồm tùy chọn, cho phép bao gồm tệp xconfig nếu có trên đĩa.

Điều này sẽ không thất bại nếu tệp không tồn tại.

Lưu ý rằng đường dẫn tương đối từ vị trí của tệp dự án Xcode của bạn.

Vì vậy, hãy xem cách bạn có thể kết hợp tất cả thông tin này lại với nhau trong một kịch bản thế giới thực.

Trong ví dụ này, chúng ta sẽ xem xét cách giải quyết vấn đề sau.

Trên các máy phát triển của chúng tôi, trình biên dịch nên tích cực cảnh báo các biểu thức mất quá nhiều thời gian để kiểm tra kiểu.

Tuy nhiên, các máy CI chậm hơn, vì vậy thời gian kiểm tra biểu thức nên được tăng lên.

Đối với giải pháp của chúng tôi, có ba tệp cài đặt cấu hình: gỡ lỗi, phổ biến và ci.xcconfig.

Tệp xcconfig gỡ lỗi được sử dụng cho các bản dựng gỡ lỗi của chúng tôi và chuyển một số cờ bổ sung cho trình biên dịch Swift thông qua cài đặt xây dựng OTHER_SWIFT_FLAGS.

Tệp xcconfig phổ biến tùy chọn bao gồm tệp ci.xcconfig.

Nó cũng xác định cài đặt OTHER_SWIFT_FLAGS để kiểm soát cảnh báo biểu thức kiểu.

Nó sử dụng $(được kế thừa) để đảm bảo rằng bất kỳ cài đặt cờ nào khác đều được bao gồm, chẳng hạn như từ tệp debug.xcconfig và đánh giá cài đặt xây dựng cho MAX _EXPRESSION_TIME có giá trị mặc định là 200.

Tệp ci xcconfig xác định giá trị ghi đè cho MAX_EXPRESSION _TIME.

Cuối cùng, Xcode cần được cho biết cách áp dụng các tệp xcconfig này cho một trong các cấp độ cấu hình được hỗ trợ.

Điều này được thực hiện thông qua trình chỉnh sửa dự án, đó là những gì chúng ta thấy ở đây.

Từ phần Cấu hình, bạn có thể áp dụng bất kỳ tệp cấu hình nào từ dự án của mình ở cấp độ dự án hoặc mục tiêu, cho bất kỳ cấu hình xây dựng được xác định nào.

Tại đây, bạn có thể thấy rằng tệp debug.xcconfig đang được áp dụng ở cấp dự án cho cấu hình gỡ lỗi của Fruta.

Ngoài ra, tệp common.xcconfig được đặt cho từng mục tiêu trong dự án.

Để tóm tắt lại giải pháp, toán tử mặc định đã được sử dụng để xác định giá trị mặc định cho MAX_EXPRESSION_TIME.

Tệp ci.xcconfig được bao gồm tùy chọn vì nó sẽ chỉ tồn tại trên hệ thống CI.

Và việc ghi đè giá trị mặc định cho MAX_EXPRESSION_TIME đã được sử dụng trong tệp ci xcconfig.

Điều này kết thúc ví dụ thực tế của chúng tôi.

Bây giờ chúng ta hãy quay lại với Jake để xem lại mọi thứ mà chúng ta đã đề cập.

Jake: Cảm ơn, Prachi.

Hãy tóm tắt lại.

Bạn đã tìm hiểu về các khuôn khổ đa nền tảng và cách chúng cung cấp một cách dễ dàng hơn để quản lý cài đặt xây dựng và các giai đoạn xây dựng trong các dự án đa nền tảng.

Bạn đã thấy cách bạn có thể cải thiện cấu hình dự án của mình và xây dựng hiệu suất bằng cách xây dựng các mục tiêu song song theo thứ tự phụ thuộc, cách sử dụng đúng các quy tắc xây dựng và các giai đoạn xây dựng, và tầm quan trọng của việc chỉ định các phụ thuộc.

Cuối cùng, bạn đã đi sâu vào cài đặt xây dựng, cách bạn có thể sử dụng các tệp cài đặt cấu hình để quản lý chúng dễ dàng hơn và đi sâu vào cú pháp của chúng và tất cả các cấu trúc mà nó cung cấp.

Chúng tôi hy vọng những bài học này cung cấp cho bạn một bộ công cụ hữu ích để giúp bạn tận dụng tối đa trải nghiệm phát triển của mình.

Cảm ơn bạn đã xem!

♪