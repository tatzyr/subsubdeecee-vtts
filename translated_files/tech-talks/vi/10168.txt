10168

Xin chào, tên tôi là Ari, và tôi rất hào hứng được nói về cách di chuyển ý định tùy chỉnh sang App Intents.

Trong video này, tôi sẽ đề cập đến lý do tại sao bạn nên áp dụng khung Ý định ứng dụng mới; cách di chuyển hoạt động, bao gồm khả năng tương thích ngược; và cách thực sự chuyển đổi sang Ý định ứng dụng.

Đầu tiên, hãy đề cập đến lý do tại sao bạn nên áp dụng App Intents và nó khác với các khuôn khổ trước đó như thế nào.

Chúng tôi đã giới thiệu khung SiriKit Intents vào năm 2016, đi kèm với một tập hợp các ý định hệ thống có mục đích cung cấp trải nghiệm người dùng hoàn chỉnh cho các trường hợp sử dụng phổ biến như nhắn tin, tập luyện, cuộc gọi điện thoại và hơn thế nữa.

Tiếp theo, chúng tôi đã giới thiệu ý định tùy chỉnh cho phép bạn xác định ý định của riêng mình cho bất kỳ trường hợp sử dụng nào, đưa chức năng ứng dụng của bạn lên Siri, phím tắt và đề xuất.

Và chúng tôi đã thêm WidgetKit sử dụng ý định tùy chỉnh để cấu hình và dự đoán tiện ích.

Tại WWDC22, chúng tôi đã giới thiệu App Intents, một khung Swift-native mới để cung cấp ý định từ ứng dụng của bạn cho hệ thống.

App Intents là một khuôn khổ tuyệt vời để áp dụng, bởi vì nó hiện đại, mạnh mẽ và dễ dàng cho người dùng.

Nó hiện đại vì nó được thiết kế nguyên bản cho Swift.

Nhờ các tính năng ngôn ngữ mới nhất, bạn có thể viết ít mã hơn đáng kể để hỗ trợ cùng một chức năng.

Chúng tôi cũng đã loại bỏ nhu cầu duy trì các tệp định nghĩa ý định và sử dụng việc tạo mã.

Và bây giờ bạn có thể cung cấp các đoạn trích dưới dạng chế độ xem SwiftUI nhẹ.

Nó mạnh mẽ vì các thực thể và truy vấn cho phép các trường hợp sử dụng sâu hơn.

Bạn có thể chạy App Intents trực tiếp trong quy trình ứng dụng của mình mà không cần cung cấp tiện ích mở rộng.

Và có những cơ hội mới để tùy chỉnh trải nghiệm người dùng khi mọi người thiết lập và chạy ý định của bạn.

Nó cũng dễ dàng cho mọi người sử dụng.

Ý định có thể dễ dàng hiển thị dưới dạng Phím tắt ứng dụng có thể sử dụng ngay lập tức mà không cần thiết lập.

Thêm vào đó, có những cách mới để mọi người khám phá các phím tắt của bạn vì chúng sẽ được hiển thị ở đầu Spotlight và trong các mẹo Siri mà bạn có thể đưa vào ứng dụng của mình.

Để có được tất cả các lợi ích của khuôn khổ mới, bạn sẽ cần nâng cấp bất kỳ ý định tùy chỉnh nào mà bạn đã xây dựng cho Siri và các phím tắt cho App Intents.

Ý định của SiriKit vẫn được hỗ trợ đầy đủ.

Vì vậy, nếu bạn đang xây dựng cho các miền Siri như nhắn tin hoặc phương tiện hoặc nếu bạn đang sử dụng ý định với WidgetKit, bạn nên để nguyên chúng.

Để tìm hiểu thêm về khung Ý định ứng dụng, hãy xem phiên của chúng tôi từ WWDC22, "Đi sâu vào ý định ứng dụng."

Và để tìm hiểu thêm về Phím tắt ứng dụng, giúp mọi người dễ dàng sử dụng chức năng ứng dụng của bạn từ Siri và Spotlight, hãy xem "Phím tắt ứng dụng triển khai với ý định ứng dụng".

Tiếp theo, hãy đề cập đến việc di chuyển.

Với việc di chuyển, bạn có thể chuyển đổi các định nghĩa ý định hiện có của mình thành Ý định ứng dụng chỉ bằng một cú nhấp chuột trong Xcode.

Bạn có thể hỗ trợ cả iOS 15 và iOS 16 với cùng một ứng dụng nhị phân.

Và bạn có thể kích hoạt các phím tắt hiện có của mọi người để tiếp tục làm việc với Ý định ứng dụng mới của bạn.

Để chuyển đổi định nghĩa ý định của bạn thành Ý định ứng dụng, tất cả những gì bạn phải làm là điều hướng đến tệp định nghĩa ý định của mình và nhấn nút Chuyển đổi thành Ý định ứng dụng.

Xcode sẽ tạo ra mã App Intents tương đương với định nghĩa ý định cũ của bạn.

Sau đó, bạn có thể điền mã bằng cách cấu trúc lại mã xử lý nội dung cũ của mình.

Chúng ta sẽ nói về điều này sâu hơn trong phần tiếp theo.

Để mọi người có trải nghiệm liền mạch khi ứng dụng của bạn nâng cấp lên Ý định ứng dụng, hệ thống sẽ tự động xử lý việc lập bản đồ từ ý định cũ của bạn sang ý định mới.

Hãy nói về cách nó hoạt động.

Chỉ bằng cách áp dụng giao thức CustomIntentMigratedAppIntent, hệ thống sẽ có đủ thông tin để biết cách dịch giữa ý định cũ và mới.

Khi bạn áp dụng giao thức này, bạn cung cấp thuộc tính tên lớp ý định, đó là tên lớp đã được sử dụng cho ý định tùy chỉnh cũ của bạn.

Trong hầu hết các trường hợp, bạn không cần phải tự cung cấp cái này.

Khi bạn sử dụng nút Chuyển đổi thành Ý định Ứng dụng, mã kết quả đã áp dụng giao thức này.

Do khả năng di chuyển của App Intent, bạn không cần phải đợi cho đến khi ứng dụng của mình nhắm mục tiêu iOS 16 để nâng cấp lên App Intents.

Trên thực tế, bạn có thể dễ dàng hỗ trợ cả hệ điều hành mới hơn và cũ hơn với cùng một ứng dụng nhị phân.

Để làm điều này, hãy bao gồm cả trình xử lý ý định kế thừa và Ý định ứng dụng của bạn trong ứng dụng của bạn.

Để tối đa hóa việc chia sẻ mã, hãy tính đến cả hai bộ xử lý ý định so với một tập hợp logic kinh doanh chung.

Giả sử bạn áp dụng giao thức App Intent đã di chuyển, các phím tắt sẽ tự động sao chép ý định của bạn khi bạn bao gồm cả hai bộ trong ứng dụng của mình.

Vì vậy, trên iOS 15 trở về trước, ứng dụng Phím tắt sẽ chỉ hiển thị triển khai ý định kế thừa; và trên iOS 16 trở lên, nó sẽ chỉ hiển thị triển khai của App Intent.

Khi bạn chuyển mục tiêu triển khai tối thiểu của mình sang iOS 16 hoặc mới hơn, bạn có thể xóa một cách an toàn các trình xử lý và định nghĩa ý định kế thừa cho các ý định mà bạn đã di chuyển.

Chúng không còn cần thiết nữa.

Một điều cần suy nghĩ khi di chuyển là mọi người có các phím tắt hiện có dựa trên ý định cũ của bạn, mà họ có thể đã thực hiện trong ứng dụng Phím tắt hoặc được thêm vào bằng cách sử dụng nút Thêm vào Siri trong ứng dụng của bạn.

Tin tốt là các phím tắt đó sẽ tiếp tục hoạt động với Ý định ứng dụng mới của bạn miễn là chúng áp dụng giao thức Ý định ứng dụng đã di chuyển.

Các phím tắt của mọi người không bị ghi đè để sử dụng Ý định ứng dụng mới; họ tự động sử dụng một định dạng chung hoạt động cho cả ý định mới và cũ.

Để điều này hoạt động, các lược đồ của các ý định kế thừa và Ý định ứng dụng phải tương thích.

Để tương thích, các thông số của ý định tùy chỉnh và Ý định ứng dụng phải có cùng tên và các loại tương đương.

Có một số thay đổi mà bạn có thể thực hiện mà không phá vỡ khả năng tương thích lược đồ.

Cụ thể, bạn có thể thêm hoặc xóa các tham số hoặc làm cho các tham số hiện có không tùy chọn.

Để kiểm tra khả năng tương thích của lược đồ trong Xcode, hãy kiểm tra tệp định nghĩa ý định cũ nơi có danh sách các tham số.

Mỗi tham số có một tên và một loại.

Trong ngăn thanh tra, cũng có một trường cho tên lớp của ý định.

Khi làm việc trên mã App Intents của bạn, hãy đảm bảo tên lớp ý định khớp với những gì có trong tệp định nghĩa ý định, để hệ thống có thể xem xét ý định mới tương đương với ý định cũ.

Và đảm bảo rằng các tên và loại tham số trong mã App Intents vẫn tương thích.

Một lần nữa, nút Chuyển đổi thành Ý định Ứng dụng trong Xcode sẽ tự động đảm bảo khả năng tương thích với lược đồ.

Vì vậy, nếu bạn sử dụng công cụ và không thực hiện bất kỳ thay đổi nào, bạn sẽ ở trong tình trạng tốt.

Tiếp theo, hãy nói về cách thực sự chuyển đổi ý định hiện tại của bạn thành Ý định ứng dụng.

Có hai bước để di chuyển một ý định.

Bước một là di chuyển tệp định nghĩa ý định và bước hai là di chuyển mã của bạn.

Hãy bắt đầu với định nghĩa ý định.

Tôi là một fan hâm mộ lớn của súp, và chúng tôi có một ứng dụng ví dụ gọi là Soup Chef cho phép mọi người đặt hàng súp.

Nó có mục đích đặt hàng với các thông số để đặt món súp nào và bao nhiêu, thêm lớp phủ nào và địa điểm nhận hoặc giao hàng.

Tôi đã sẵn sàng chuyển đổi cái này thành App Intents, vì vậy tôi sẽ điều hướng đến tệp định nghĩa ý định trong Xcode và nhấn nút chuyển đổi.

Tiếp theo, tôi chọn ý định chuyển đổi - chỉ là ý định trong trường hợp này.

Sau đó, tôi sẽ chọn nơi lưu mã ý định mới của mình và mục tiêu nào để đưa nó vào.

Đó có thể là mục tiêu ứng dụng của tôi hoặc mục tiêu mở rộng App Intents nếu tôi đã thêm một mục tiêu.

Trong trường hợp này, tôi sẽ kiểm tra mục tiêu ứng dụng và cả mục tiêu đồng hồ nữa.

Ý định ứng dụng không thể được thêm vào các mục tiêu khung.

Tiếp theo, tôi sẽ xem mã App Intents mà Xcode đã tạo.

Nó được chia nhỏ trên một vài tệp đại diện cho tất cả các loại ý định, liệt kê và tùy chỉnh được bao gồm trong tệp định nghĩa ý định.

Tôi muốn kêu gọi sự chú ý đến một vài lĩnh vực cụ thể trong định nghĩa ý định cũ của tôi đã được di chuyển.

Trong mã mới, có một cấu trúc orderSoup phù hợp với giao thức App Intent.

Lưu ý rằng cấu trúc này được đánh dấu là có sẵn trong iOS 16 trở lên.

Bạn sẽ cần áp dụng chú thích đó cho tất cả mã sử dụng khung App Intents nếu bạn đang triển khai ứng dụng của mình sớm hơn iOS 16.

Mỗi tham số trong tệp định nghĩa ý định của tôi, cùng với siêu dữ liệu của nó, đã được chuyển sang khai báo @Parameter trong cấu trúc Ý định ứng dụng.

Tất cả các bản tóm tắt tham số ứng dụng Phím tắt đã được chuyển sang khai báo Tóm tắt tham số này.

Những gì từng được biểu diễn dưới dạng các mối quan hệ tham số giờ đây có thể được biểu diễn bằng cách sử dụng các câu lệnh Switch, Case hoặc When trong ParameterSummary.

Các loại tùy chỉnh Soup và Toppings của tôi hiện là các thực thể ứng dụng, bao gồm một số việc cần làm mà tôi sẽ cần điền sau.

OrderDetails hiện là một thực thể ứng dụng tạm thời.

Nó được coi là thoáng qua vì nó không có mã định danh duy nhất có thể được sử dụng để tra cứu nó sau này.

Và enum tùy chỉnh OrderType của tôi bây giờ là một enum ứng dụng.

Các tên có thể đọc được của con người đã được chuyển sang các biểu diễn hiển thị trường hợp.

Cuối cùng, tất cả các hộp thoại trong phản hồi ý định đã được chuyển sang tiện ích mở rộng trên IntentDialog.

Những hộp thoại này có thể được sử dụng cho phương pháp thực hiện của tôi.

Trình di chuyển có thể tạo ra nhiều chuỗi hơn mức cần thiết, vì vậy nếu bạn thấy những chuỗi không thực sự được sử dụng trong trình xử lý ý định cũ như, "Chỉ để xác nhận, bạn muốn \ (súp)?," vui lòng xóa chúng.

Bây giờ chúng tôi đã di chuyển định nghĩa ý định của mình, hãy tiếp tục và di chuyển mã xử lý ý định của chúng tôi.

Lưu ý rằng App Intent được tạo tự động có trình giữ chỗ cho phương thức perform() với lưu ý phải làm rằng nó cần được điền vào.

Hãy xem làm thế nào để làm điều đó.

Trong khuôn khổ cũ, bạn đã cung cấp một tệp định nghĩa ý định và một bộ mã xử lý ý định.

Trong khuôn khổ mới, mọi thứ đều được thể hiện bằng mã.

Các tham số trong định nghĩa ý định cũ của bạn đã được chuyển sang mã mới.

Các phương thức giải quyết, xác nhận và xử lý trong mã cũ của bạn sẽ cần được kết hợp thành một phương thức thực hiện duy nhất được gọi khi ý định của bạn được chạy.

Và các loại tùy chỉnh và các tùy chọn động sẽ cần được cấu trúc lại thành các thực thể và truy vấn.

Vì vậy, chúng ta hãy xem cách di chuyển từng giai đoạn xử lý ý định, bắt đầu với giải quyết.

Trong giai đoạn giải quyết, trình xử lý ý định của bạn xác thực từng tham số trong ý định của bạn và nhắc người dùng nhập giá trị nếu cần.

Khi di chuyển các phương pháp giải quyết, bạn nên tận dụng hành vi giải quyết tự động mới của App Intents nếu có thể.

Nếu không, bạn nên tái cấu trúc logic phân giải của mình thành phương pháp thực hiện.

Hãy xem xét một số ví dụ.

Đây là phương pháp phân giải cũ của chúng tôi cho tham số súp.

Điều này tuân theo một mô hình phổ biến trong khuôn khổ ý định cũ.

Cố gắng mở gói thông số súp.

Nếu đó là số không, hãy trả về kết quả giải quyết yêu cầu người dùng chọn một món súp bằng cách sử dụng định hướng.

Nếu nó được thiết lập, hãy trả về kết quả giải quyết thành công và chuyển lại cùng một món súp đã được chỉ định.

Loại boilerplate này không còn cần thiết với App Intents nhờ độ phân giải tự động.

Nếu bạn có các tham số đã được giải quyết theo cách này trước đây, đây là cách tận dụng chức năng mới.

Theo mặc định, các tham số đã di chuyển của bạn sẽ là tùy chọn nhưng bạn có thể nhận được hành vi phân giải tự động bằng cách thay đổi loại thành không tùy chọn.

Khi bạn tạo một tham số không tùy chọn, App Intents sẽ tự động yêu cầu người dùng cung cấp một giá trị nếu nó trống bằng cách sử dụng các thực thể được đề xuất từ truy vấn của SoupAppEntity.

Sau đó, thêm một hộp thoại vào khai báo tham số của bạn để người dùng được hỏi một câu hỏi cụ thể khi hệ thống phân giải nhắc một giá trị như, "Bạn muốn món súp nào?"

Một khi bạn làm điều này, bạn không cần bất kỳ mã giải pháp nào cho tham số này nữa.

Đối với tất cả các loại giải pháp khác, bạn nên di chuyển việc triển khai giải quyết của mình lên đầu phương thức perform() và thay đổi cách sử dụng API của bạn để sử dụng các API mới thích hợp để yêu cầu người dùng làm rõ.

Ví dụ: giả sử phương pháp giải quyết số lượng cũ của bạn sẽ mở gói số lượng và ném needsValue nếu nó bị thiếu và sau đó kiểm tra xem số lượng có lớn hơn số lượng súp thực sự có sẵn hay không và trả về lỗi nếu có.

Khi chúng tôi chuyển mã này sang App Intents, chúng tôi hoàn toàn không cần phần đầu tiên nữa, bởi vì chúng tôi có thể riêng biệt chỉ cần làm cho tham số số lượng không tùy chọn.

Đối với phần thứ hai đó, chúng tôi sẽ muốn lấy mã khiến trình xử lý hoàn thành có kết quả phân giải không được hỗ trợ và thay thế nó bằng mã gây ra lỗi cho thấy rằng không có đủ súp trong kho.

Chúng ta sẽ cần xác định lỗi như một enum, phù hợp với lỗi và các giao thức chuyển đổi tài nguyên chuỗi được bản địa hóa tùy chỉnh.

Bằng cách đó, chúng tôi có thể cung cấp hộp thoại được nói hoặc hiển thị cho người dùng khi trường hợp này xảy ra.

Nếu bạn đã từng có mã trả về và kết quả needsValue động như trong ví dụ này, bạn có thể thay thế mã đó bằng mã ném needsValueError.

Khi bạn ném needsValueError, hệ thống sẽ nhắc người dùng nhập giá trị bằng hộp thoại bạn cung cấp và sau đó sẽ chạy lại phương thức thực hiện của bạn ngay từ đầu.

Một lựa chọn khác là sử dụng phương thức requestValue.

Khi bạn sử dụng requestValue, bạn có thể nhắc người dùng cho một giá trị và tiếp tục chạy phương thức thực hiện của mình mà không cần bắt đầu lại.

Ngoài phương thức requestValue, còn có các phương thức requestDisambiguation và requestConfirmation mà bạn có thể sử dụng để thay thế việc sử dụng API trước đây của mình.

Tiếp theo hãy nói về xác nhận.

Xác nhận là một cơ hội để thực hiện xác thực bổ sung và cung cấp thông tin cho hệ thống để yêu cầu người dùng xác nhận rằng họ muốn tiếp tục.

Để xác thực, bạn nên di chuyển tất cả logic xác thực trong phương thức xác nhận sang phương thức thực hiện của bạn.

Để yêu cầu người dùng xác nhận, chúng tôi có một API requestConfirmation() đơn giản mới.

API mới chỉ là một lệnh gọi phương thức duy nhất.

Sử dụng async/await, phương pháp này sẽ đợi cho đến khi người dùng xác nhận trước khi tiếp tục với phương pháp thực hiện của bạn.

Nếu họ hủy, một lỗi sẽ được ném ra và việc thực hiện phương thức thực hiện của bạn sẽ dừng lại.

Phương thức requestConfirmation bao gồm một số đối số ảnh hưởng đến lời nhắc xác nhận, bao gồm hộp thoại được Siri nói hoặc hiển thị, chế độ xem SwiftUI được hiển thị trong đoạn mã, nhãn được sử dụng cho nút xác nhận - trong trường hợp này là thứ tự - và đối số showPrompt, kiểm soát xem hộp thoại có nên được hiển thị trên màn

Điều này nên được đặt thành sai khi hộp thoại và chế độ xem chứa cùng thông tin với nhau.

Vì vậy, thật hợp lý khi Siri nói đoạn hội thoại nhưng không hiển thị nó.

Tiếp theo, hãy xem xét xử lý.

Để tái cấu trúc xử lý, bạn có thể chỉ cần di chuyển mã của mình từ phương thức xử lý sang phương thức thực hiện.

Bạn sẽ có thể xóa một số mã xác thực khỏi phương thức xử lý cũ vì việc giải quyết, xác nhận và xử lý hiện xảy ra tất cả trong một phương thức duy nhất.

Ví dụ: nếu bạn sao chép mã cũ của mình từ tay cầm, bạn có thể sẽ kết thúc với mã để mở các tham số không còn là tùy chọn mà bây giờ có thể bị xóa.

Khi kết thúc phương pháp thực hiện của bạn, bạn nên trả về một kết quả có ý định.

Kết quả có thể bao gồm nhiều trường khác nhau như hộp thoại để Siri nói hoặc chế độ xem đoạn mã để hiển thị.

Mỗi cái yêu cầu bạn chú thích loại trả về của phương thức thực hiện của mình bằng các giao thức thích hợp, như ProvidesDialog cho hộp thoại và ShowSnippetView cho chế độ xem đoạn mã SwiftUI.

Cuối cùng, hãy xem xét việc di chuyển các tùy chọn động.

Bạn sẽ cần điền vào Truy vấn hoặc DynamicOptionsProvider tùy thuộc vào loại tham số.

Xcode sẽ cung cấp những việc cần làm ở những nơi mà bạn cần điền chúng vào.

Đối với một truy vấn, bạn sẽ cần triển khai các phương thức để trả về các thực thể theo định danh, theo chuỗi nếu nó có thể tìm kiếm được và tập hợp các thực thể được đề xuất sẽ xuất hiện khi người dùng nhấn vào tham số đó trong Phím tắt.

Đối với các tùy chọn động, bạn chỉ có thể trả về tất cả các tùy chọn trong phương thức kết quả.

Và thế là xong!

Bạn đã hoàn thành việc di chuyển sang App Intents.

Trước khi bạn thực sự hoàn thành, có một vài điều nữa tôi khuyên bạn nên xem xét.

Đầu tiên là áp dụng Phím tắt Ứng dụng.

Điều này sẽ cho phép bạn làm cho ý định của mình có thể khám phá được và cho phép mọi người sử dụng chúng chỉ bằng cách nói một vài từ với Siri.

Thêm các mẹo Siri vào giao diện người dùng của bạn để mọi người có thể tìm hiểu những gì cần nói với Siri để sử dụng chức năng ứng dụng của bạn.

Những thứ này sẽ thay thế bất kỳ nút Thêm vào Siri nào bạn đã có trước đây.

Đảm bảo kiểm tra đường dẫn nâng cấp của khách hàng bằng cách tạo các phím tắt với phiên bản trước của ứng dụng của bạn và kiểm tra xem chúng có hoạt động chính xác với các phiên bản mới của ứng dụng của bạn hay không.

Và nếu ứng dụng của bạn hoạt động ở nhiều ngôn ngữ, hãy nghĩ về bản địa hóa.

Để bản địa hóa Ý định ứng dụng của bạn, tất cả các chuỗi có trong Ý định ứng dụng của bạn phải được cung cấp dưới dạng tài nguyên chuỗi được bản địa hóa và bạn có thể bản địa hóa chúng bằng cách cung cấp tệp .strings có thể định vị tương ứng với các chuỗi đó.

Nếu bạn sử dụng các chuỗi số nhiều, bạn cũng có thể sử dụng tệp dict .strings.

Khi bản địa hóa Phím tắt ứng dụng, hãy thêm các chuỗi vào một tệp có tên AppShortcuts.strings và thay thế bất kỳ biến nào trong các chuỗi đó bằng ký hiệu ${ }.

Tóm lại, chúng tôi khuyên bạn nên nâng cấp ý định tùy chỉnh của mình lên App Intents để nhận được tất cả các lợi ích của các tính năng mới của iOS 16 và mô hình phát triển mới đơn giản hơn của App Intents.

Đảm bảo thêm Phím tắt ứng dụng để mọi người có thể dễ dàng khám phá và sử dụng chức năng ứng dụng của bạn.

Và để tìm hiểu thêm về cách kết hợp trải nghiệm người dùng tuyệt vời, hãy xem phiên "Thiết kế phím tắt ứng dụng" từ WWDC22.

Cảm ơn bạn.