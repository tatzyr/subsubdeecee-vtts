10855

Xin chào, tôi là Patrick, và tôi làm việc trong một nhóm biểu diễn tại Apple.

Hôm nay chúng ta sẽ thảo luận về việc cuộn và hoạt hình trong các ứng dụng của bạn và xem xét chi tiết Vòng lặp kết xuất.

Đầu tiên, chúng ta sẽ có được cảm giác chung về những gì là một trở ngại.

Sau đó, chúng ta sẽ thảo luận về Vòng lặp kết xuất và các loại trở ngại khác nhau có thể xảy ra.

Cuối cùng, chúng ta sẽ thảo luận về cách đo lường những trở ngại.

Vậy trước tiên, một trở ngại là gì?

Trong ứng dụng của bạn, một người có thể kéo ngón tay của họ trên màn hình để cuộn.

Họ có thể nhấn vào một nút và mong đợi phản hồi hoặc chuyển đổi giữa các chế độ xem trong một hệ thống phân cấp.

Những hình ảnh động này xây dựng cảm giác kết nối trực quan giữa con người và nội dung trên màn hình.

Những trở ngại về hoạt hình có thể gây ra những cú nhảy trong hoạt hình và phá vỡ kết nối đó, gây nhầm lẫn thay vì thích thú.

Một trở ngại là bất cứ khi nào một khung hình xuất hiện trên màn hình muộn hơn dự kiến.

Hãy xem xét một ví dụ phổ biến về việc cuộn chế độ xem bộ sưu tập.

Ở đây chúng tôi có một ứng dụng lập kế hoạch bữa ăn giúp chúng tôi sắp xếp các công thức nấu ăn yêu thích của mình.

Khi người dùng kéo ngón tay của họ lên màn hình, chế độ xem cuộn sẽ phản hồi bằng cách di chuyển nội dung lên trên.

Nhưng trong khi cuộn, chúng tôi nhận thấy một bước nhảy vọt trong nội dung.

Nếu chúng ta nhìn vào từng khung hình này, chúng ta có thể thấy ngón tay của mình di chuyển với nội dung trong ba khung hình đầu tiên, nhưng trong khung hình tiếp theo, nội dung dường như bị đình trệ.

Đó là bởi vì khung thứ ba thực sự lặp lại, ở trên màn hình cho một khung hình khác.

Cuối cùng cũng đến khung hình thứ tư, và nó dường như nhảy về phía trước đến vị trí ngón tay của chúng ta.

Khung thứ ba lặp lại vì khung thứ tư đến muộn và người dùng đã nhìn thấy một trở ngại.

Quá giang được gây ra khi Vòng lặp kết xuất không hoàn thành khung hình đúng hạn.

Vì vậy, hãy xem xét Vòng lặp Kết xuất.

Vòng lặp kết xuất là một quá trình liên tục theo đó các sự kiện cảm ứng được chuyển đến một ứng dụng và sau đó các thay đổi đối với giao diện người dùng được gửi đến hệ điều hành nơi khung được hoàn thiện.

Đó là một vòng lặp, và nó xảy ra ở tốc độ làm mới của thiết bị.

Trên iPhone và iPad, đây là 60 khung hình mỗi giây, có nghĩa là một khung hình mới có thể được hiển thị sau mỗi 16,67 mili giây.

Trên iPad Pro, đây là 120 khung hình mỗi giây, có nghĩa là một khung hình mới có thể được hiển thị sau mỗi 8,33 mili giây.

Khi bắt đầu một khung hình, phần cứng phát ra một sự kiện gọi là VSYNC.

VSYNC biểu thị khi nào một khung mới phải sẵn sàng.

Chúng tôi làm nổi bật chúng trong bản nhạc hiển thị, vì vậy thật dễ dàng để xem thời hạn.

Vòng lặp kết xuất được hẹn giờ thành VSYNCs.

Nó phải chạm vào các trạm kiểm soát trên đường đi để có một khung sẵn sàng.

Nó được chia thành ba giai đoạn.

Giai đoạn đầu tiên là trong ứng dụng của bạn, nơi các sự kiện được xử lý và các thay đổi được thực hiện đối với giao diện người dùng.

Công việc đó phải hoàn thành trước VSYNC tiếp theo, vì vậy giai đoạn tiếp theo có thể bắt đầu.

Giai đoạn tiếp theo xảy ra trong một quy trình riêng biệt được gọi là máy chủ kết xuất.

Đây là nơi giao diện người dùng của bạn thực sự được hiển thị.

Giai đoạn này cũng phải hoàn thành trước VSYNC tiếp theo, để khung có thể được hiển thị, đây là giai đoạn thứ ba và cuối cùng.

Một cảnh báo quan trọng đối với quy trình ba giai đoạn là khung được xử lý cho hai khung hình trước khi hiển thị.

Chúng tôi gọi đây là bộ đệm kép, nhưng có một chế độ khác.

Để tránh trở ngại, hệ thống có thể chuyển sang bộ đệm ba lần, trong đó máy chủ kết xuất được cung cấp thêm một thời lượng khung hình để hoàn thành công việc của nó.

Vì đây là chế độ dự phòng, chúng ta sẽ tập trung vào bộ đệm kép trong khi nói về các trở ngại trong Vòng lặp kết xuất.

Nhìn chung, toàn bộ Render Loop được tạo thành từ năm giai đoạn.

Vòng lặp bắt đầu với giai đoạn đầu tiên, giai đoạn sự kiện.

Tại đây, ứng dụng của bạn xử lý các sự kiện cảm ứng và quyết định xem có cần thay đổi trong giao diện người dùng hay không.

Tiếp theo là giai đoạn cam kết.

Trong giai đoạn cam kết, ứng dụng của bạn cập nhật giao diện người dùng của nó và gửi nó đến máy chủ kết xuất để kết xuất.

Trên VSYNC tiếp theo, máy chủ kết xuất sẽ thực hiện việc gửi bài đó và trong giai đoạn chuẩn bị kết xuất, chuẩn bị nó để vẽ trên GPU.

Trong giai đoạn thực thi kết xuất, GPU vẽ giao diện người dùng của bạn thành hình ảnh cuối cùng, vì vậy trên VSYNC tiếp theo, khung có thể được hiển thị cho người dùng của bạn.

Mỗi giai đoạn đều rất quan trọng để có trải nghiệm người dùng mượt mà trên mọi khung hình, ngay cả công việc kết xuất.

Mặc dù nó xảy ra trong một quy trình riêng biệt, nhưng nó hoạt động thay mặt cho ứng dụng của bạn, vì vậy bạn phải đảm bảo cây lớp của bạn có thể được xử lý và vẽ kịp thời.

Để hiểu thêm một chút về điều này, hãy xem xét một ví dụ.

Trong ví dụ này, chúng ta sẽ theo dõi khung hình này thông qua Vòng lặp kết xuất để xem từng giai đoạn trên đường đi.

Đầu tiên là giai đoạn sự kiện, nơi ứng dụng sẽ nhận được các sự kiện.

Những sự kiện này là những thứ như chạm, gọi lại mạng, nhấn bàn phím và hẹn giờ.

Ứng dụng có thể phản hồi các sự kiện này theo bất kỳ cách nào bằng cách thay đổi hệ thống phân cấp lớp của nó.

Ví dụ, ứng dụng có thể thay đổi màu nền của một lớp, hoặc thậm chí thay đổi kích thước và vị trí của một lớp.

Nhưng khi ứng dụng cập nhật giới hạn của một lớp, Core Animation cũng gọi setNeedsLayout.

Điều này xác định tất cả các lớp, phải tính toán lại bố cục của chúng để phản hồi.

Hệ thống sẽ kết hợp các yêu cầu "cần bố cục" này và thực hiện chúng theo thứ tự trong giai đoạn cam kết để giảm công việc trùng lặp.

Nếu cần bất kỳ bố cục nào, giai đoạn cam kết sẽ tự động bắt đầu sau khi giai đoạn sự kiện kết thúc.

Đầu tiên, hệ thống lấy tất cả các lớp yêu cầu bố cục và bố trí từng lớp một, từ cha mẹ đến con cái.

Bố cục là một nút cổ chai hiệu suất phổ biến, vì vậy hãy nhớ rằng ứng dụng của bạn chỉ có vài mili giây để hoàn thành công việc này.

Một số chế độ xem cũng yêu cầu bản vẽ tùy chỉnh, như nhãn, chế độ xem hình ảnh hoặc bất kỳ chế độ xem nào ghi đè drawRect.

Nếu những chế độ xem này yêu cầu cập nhật trực quan, họ phải gọi setNeedsDisplay.

Giống như bố cục, hệ thống sẽ kết hợp các yêu cầu này để thực hiện chúng sau khi tất cả bố cục đã hoàn thành.

Trong quá trình vẽ, mọi lớp vẽ tùy chỉnh sẽ nhận được bối cảnh Đồ họa cốt lõi được hỗ trợ bởi kết cấu mà chúng sẽ vẽ vào.

Liên quan đến Core Animation, các lớp này bây giờ chỉ là hình ảnh.

Và bây giờ tất cả các lớp đã được bố trí và vẽ, toàn bộ cây lớp đã thay đổi được thu thập và gửi đến máy chủ kết xuất để kết xuất.

Bây giờ chúng tôi đang ở trong máy chủ kết xuất, chịu trách nhiệm biến cây lớp của chúng tôi thành một hình ảnh có thể hiển thị thực tế.

Trong giai đoạn chuẩn bị, máy chủ kết xuất lặp lại thông qua cây lớp của ứng dụng và chuẩn bị một đường ống tuyến tính mà GPU sau đó có thể thực thi.

Bắt đầu từ lớp trên cùng, nó hoạt động theo cách của nó từ cha mẹ đến con cái và anh chị em đến anh chị em để các lớp được sắp xếp từ sau ra trước.

Tiếp theo, đường ống tuyến tính này được truyền qua GPU, nơi mỗi lớp được tổng hợp thành một kết cấu cuối cùng.

Một số lớp có thể mất nhiều thời gian hơn để hiển thị và đây là một nút cổ chai hiệu suất phổ biến khác mà chúng ta sẽ thảo luận trong thời gian ngắn.

Tuyệt vời.

Vì vậy, một khi GPU thực thi và hiển thị hình ảnh ở bên phải, nó đã sẵn sàng để được hiển thị trên VSYNC tiếp theo.

Mỗi giai đoạn của Vòng lặp Kết xuất đều nhạy cảm với hiệu suất và có thời hạn.

Hạn chót là VSYNC tiếp theo.

Để đạt được tốc độ khung hình mục tiêu và duy trì độ trễ đầu vào thấp, toàn bộ quá trình này thực sự đang diễn ra song song với mọi khung hình.

Bằng cách này, đường ống trở nên đồng thời và ứng dụng của chúng tôi có thể chuẩn bị một khung mới trong khi hệ thống đang hiển thị khung hình trước đó.

Đây là lý do tại sao bất kỳ thời hạn nào bị bỏ lỡ đều rất quan trọng.

Bây giờ bạn đã thấy Vòng lặp kết xuất hoạt động như thế nào, hãy đi sâu vào loại trở ngại nào bạn có thể thấy trong ứng dụng của mình.

Có hai loại chính: quá giang cam kết, xảy ra trong quy trình của ứng dụng và quá giang kết xuất, xảy ra trong máy chủ kết xuất.

Một trở ngại của cam kết là khi ứng dụng mất quá nhiều thời gian để xử lý các sự kiện hoặc cam kết.

Ở đây, cam kết mất quá nhiều thời gian và bỏ lỡ thời hạn, vì vậy trong VSYNC tiếp theo, máy chủ kết xuất không có gì để xử lý và bây giờ phải đợi VSYNC tiếp theo bắt đầu kết xuất.

Và bây giờ chúng tôi đã trì hoãn thời gian giao hàng khung hình một khung hình.

Tính bằng mili giây, đó là 16,67 mili giây trên iPhone hoặc iPad.

Chúng tôi gọi khoảng thời gian trì hoãn này là "thời gian trì hoãn" và chúng tôi đo nó bằng mili giây.

Nếu công việc cam kết thậm chí còn mất nhiều thời gian hơn và vượt qua VSYNC tiếp theo, thì khung hình sẽ bị trễ hai khung hình, hoặc 33,34 mili giây.

Đó là 33,34 mili giây mà người dùng không nhìn thấy một cuộn mượt mà.

Để hiểu thêm về các trở ngại cam kết và cách bạn có thể khắc phục chúng trong ứng dụng của mình, hãy xem "Tìm và khắc phục các quá giang trong giai đoạn cam kết".

Loại quá giang thứ hai là quá giang kết xuất.

Những điều này xảy ra khi máy chủ kết xuất không thể chuẩn bị hoặc thực thi cây lớp của chúng tôi đúng hạn.

Ở đây, giai đoạn thực thi kết xuất mất quá nhiều thời gian và vượt quá ranh giới VSYNC.

Do đó, khung hình chưa sẵn sàng đúng giờ và khung màu xanh lá cây được hiển thị muộn hơn một khung so với dự kiến.

Một lần nữa, chúng ta có thời gian quá giang 16 mili giây.

Để hiểu thêm về các quá giang kết xuất và cách tối ưu hóa cây lớp của bạn, hãy xem "Demystify and Eliminate Hitches trong Giai đoạn Kết xuất."

Tuyệt vời.

Vì vậy, đó là hai loại quá giang chính.

Bây giờ chúng ta hãy chuyển trọng tâm của chúng ta sang cách chúng ta đo lường và định lượng các trở ngại.

Chúng tôi đã xem xét thời gian quá giang trong các trang trình bày trước đó.

Nó rất hữu ích khi nói về một trở ngại duy nhất, nhưng có thể trở nên khó hiểu khi thảo luận về các sự kiện dài hạn như cuộn, hoạt ảnh hoặc chuyển tiếp.

Thứ nhất, rất khó để so sánh trừ khi mỗi cuộn hoặc hoạt ảnh mất cùng một lượng thời gian, và do đó cùng một số lượng khung hình chính xác.

Điều tồi tệ hơn là các thiết bị iOS không phải lúc nào cũng cập nhật màn hình.

Nếu không có cam kết nào được gửi đến máy chủ kết xuất, không có khung mới nào được gửi.

Điều đó khiến việc so sánh thời gian quá giang giữa các bài kiểm tra và thiết bị trở nên khó khăn hơn.

Vì vậy, thay vào đó, chúng tôi sử dụng một số liệu được gọi là "tỷ lệ thời gian khâu".

Tỷ lệ thời gian quá giang là tổng thời gian quá giang trong một khoảng thời gian chia cho thời gian của nó.

Bởi vì nó được chuẩn hóa thành tổng thời gian, chúng ta có thể so sánh nó giữa các trải nghiệm.

Nó được đo bằng quá giang mili giây mỗi giây, vì vậy nó đại diện cho số mili giây mà thiết bị đã quá giang mỗi giây.

Để tìm hiểu về cách bạn có thể sử dụng số liệu này để đo lường hiệu suất ứng dụng của riêng mình, hãy xem "Có gì mới trong MetricKit".

Để xem cách theo dõi tỷ lệ thời gian quá giang trong bộ thử nghiệm của bạn, hãy xem "Loại bỏ quá giang hoạt hình bằng XCTest".

Cuối cùng, hãy xem xét một ví dụ trong đó tỷ lệ thời gian quá giang có thể được sử dụng.

Ở đây chúng tôi có 30 khung hình, trên iPhone là công việc đáng giá nửa giây.

Mỗi khung hình đạt đến thời hạn của nó, và người dùng không thấy trở ngại nào.

Thời gian quá giang bằng không, và tỷ lệ thời gian quá giang cũng bằng không.

Nhưng bây giờ chúng ta thấy một bản nhạc hiển thị ở phía dưới với các khoảng rời rạc.

Một số khung hình trên màn hình dài hơn những khung hình khác, và một số cam kết và kết xuất đang gây ra trở ngại.

Nếu chúng ta cộng lại thời gian quá giang này, chúng ta sẽ nhận được 100,02 mili giây.

Hơn nửa giây, chúng ta có tỷ lệ thời gian quá giang là 200,04 mili giây mỗi giây.

Đây chỉ là một ví dụ.

Nói chung, đây là những tỷ lệ quá giang mục tiêu mà chúng tôi đề xuất và sử dụng trong các công cụ của chúng tôi tại Apple.

Mặc dù mục tiêu này là không quá giang mili giây mỗi giây, bất cứ điều gì dưới năm quá giang mili giây mỗi giây đều được coi là tốt và hầu như không được người dùng chú ý.

Từ năm đến mười mili giây mỗi giây, người dùng sẽ nhận thấy một số gián đoạn và những điều này cần được điều tra.

Hơn mười phần nghìn giây mỗi giây, quá giang đang ảnh hưởng lớn đến trải nghiệm người dùng và bạn nên điều tra ngay cách tối ưu hóa Vòng lặp kết xuất của mình.

Tóm lại, hôm nay chúng ta đã thảo luận về Vòng lặp kết xuất và cách một khung mới được hiển thị cho người dùng.

Chúng tôi đã xem xét một quá giang là gì và hai loại, một quá giang cam kết và một quá giang kết xuất.

Cuối cùng, chúng tôi đã xác định tỷ lệ thời gian quá giang để đo lường số lần quá giang mà người dùng đã trải qua trong một khoảng thời gian nhất định.

Để tìm hiểu thêm về các loại quá giang và cách bắt và khắc phục chúng trong ứng dụng của bạn, vui lòng xem hai cuộc nói chuyện của chúng tôi về quá giang cam kết và kết xuất quá giang.

Chúng tôi nóng lòng muốn xem các ứng dụng bơ mịn của bạn và cảm ơn vì đã xem.