207

Betsy Langowski: Vào năm 2017, iPhone X đã được phát hành.

Liên kết với iOS 11 SDK cho phép ứng dụng của bạn tận dụng màn hình mới tuyệt đẹp.

Năm nay, chúng tôi sẽ giới thiệu iPhone XS, iPhone XS Max và iPhone XR.

Trong khi iPhone XS đã được thiết kế lại hoàn toàn từ đầu, kích thước màn hình giống như iPhone X, vì vậy video này sẽ tập trung vào iPhone XS Max và iPhone XR với độ phân giải hoàn toàn mới của chúng.

Nếu ứng dụng của bạn chủ yếu sử dụng khung UIKit và bạn đã điều chỉnh ứng dụng của mình cho iPhone X, bạn sẽ ở trong tình trạng tuyệt vời.

Tất cả những gì bạn cần làm là liên kết với iOS 12 để tận dụng tối đa những chiếc điện thoại mới tuyệt vời này.

Nếu bạn cần bồi dưỡng về cách cập nhật ứng dụng của mình cho iPhone X, và bây giờ là iPhone XS Max và iPhone XR, hãy xem video, "Xây dựng ứng dụng cho iPhone X."

Video này hướng dẫn bạn cách đảm bảo máy ảnh TrueDepth không che khuất giao diện người dùng của bạn, đảm bảo các yếu tố giao diện người dùng của bạn được đặt cách xa chỉ báo Home và các điều chỉnh phổ biến khác mà bạn có thể cần thực hiện.

Mặc dù hầu hết các công việc nặng nhọc được thực hiện cho bạn bởi UIKit, bạn vẫn có thể cần tối ưu hóa ứng dụng của mình và video này cung cấp hướng dẫn tuyệt vời cho iPhone XS Max và iPhone XR, cũng như iPhone X.

Hãy nói về một vài điều mà chúng tôi đã làm tốt hơn cho bạn trong năm nay để giúp việc cập nhật ứng dụng của bạn cho iPhone XS Max và iPhone XR trở nên dễ dàng.

Nếu bạn đã xem "Xây dựng ứng dụng cho iPhone X", bạn sẽ nhớ tầm quan trọng của việc thử nghiệm ở chế độ ngang.

Một trong những nơi quan trọng là trong chế độ xem bộ sưu tập.

Tôi đã xây dựng ứng dụng mẫu thực sự đơn giản này, nó chỉ là một bộ điều khiển chế độ xem bộ sưu tập, được nhúng trong bộ điều khiển điều hướng, được nhúng trong bộ điều khiển thanh tab.

Có sự bù đắp để tạo khoảng trống cho các ô, nhưng nếu không thì đây chỉ là sử dụng các mặc định.

Thoạt nhìn, theo chân dung, nó trông rất đẹp.

Nhưng trong phong cảnh, ứng dụng này có một vấn đề: các ô ở phía bên trái nằm phía sau camera TrueDepth.

Để giải quyết vấn đề này, tham chiếu chèn phần của chế độ xem bộ sưu tập cần được đặt thành khu vực an toàn, thay vì nội dung mặc định.

Điều này có thể được thực hiện bằng mã và khi iPhone X được phát hành lần đầu tiên, đó là cách duy nhất để làm điều đó.

Nhưng vì ứng dụng này được xây dựng bằng bảng phân cảnh, trong Xcode gần đây hơn, chúng ta có thể thực hiện thay đổi này trực tiếp trong Trình tạo giao diện.

Với chế độ xem bộ sưu tập được chọn trong bảng phân cảnh, chúng ta có thể chọn Trình kiểm tra kích thước và thay đổi giá trị Inset From thành khu vực an toàn.

Bây giờ khi tôi xây dựng và chạy ứng dụng của mình, chế độ xem bộ sưu tập của tôi tránh được camera TrueDepth ở chế độ ngang, không cần thay đổi mã.

Bố cục tự động là hệ thống bố cục Cocoa và Cocoa Touch.

Nếu ứng dụng của bạn sử dụng bố cục tự động, bạn sẽ thấy rằng hầu hết công việc tối ưu hóa cho các kích thước màn hình mới, như trên iPhone XS Max và iPhone XR, đều được thực hiện cho bạn.

Nếu bạn không tận dụng những lợi ích tuyệt vời mà bạn nhận được từ bố cục tự động, bây giờ chắc chắn là lúc để cập nhật, bởi vì năm nay chúng tôi đã cải thiện đáng kể hiệu suất của nó.

Dưới đây là một số ví dụ về hiệu suất bố trí tự động của iOS 11 màu xám so với hiệu suất bố cục tự động của iOS 12 màu xanh lam.

Hãy xem cây di chuyển mất ít thời gian hơn bao nhiêu trong iOS 12 so với iOS 11.

Sử dụng bố cục tự động trong ứng dụng của bạn nhanh hơn rất nhiều.

Nếu bạn muốn xem hậu trường về cách chúng tôi đã làm điều đó, hãy xem video WWDC 2018, "Bố cục tự động hiệu suất cao".

Một thay đổi cụ thể cho iPhone XS Max và iPhone XR là hành vi của UISplitViewController trong cảnh quan.

Nó rất giống cách nó hoạt động trong Mail ở chế độ dọc trên iPad.

Hãy xem ứng dụng thử nghiệm rất đơn giản này mà tôi đã chạy trong trình mô phỏng iPhone XS Max.

Chế độ xem chính của tôi với bốn ô xuất hiện chỉ bằng một nút bấm và bị loại bỏ tương tự.

Ứng dụng của tôi có hành vi này tự động trên phần cứng mới vì tôi đã đặt displayModeButtonItem.

Hành vi này cũng sẽ được thiết lập nếu bạn sử dụng presentsWithGesture.

Chúng ta hãy xem cái này trông như thế nào trong mã.

Trong App Delegate của tôi, tôi đã nhận được displayModeButtonItem của UISplitViewController và đặt nó làm mục nút thanh bên trái trong thanh điều hướng để khách hàng của tôi nhấn vào.

Vì vậy, bây giờ tôi đã chọn tham gia vào hành vi trên iPhone XS Max và iPhone XR.

Tôi cũng đang đặt presentsWithGesture thành sự thật.

Điều này giúp khách hàng của tôi có thể truy cập chế độ xem chính bằng một cú vuốt.

Đây là tùy chọn và nó có thể được đặt thành sai nếu cần cho ứng dụng của bạn.

Một điều cần lưu ý.

Nếu bạn đã dựa vào việc đặt Chế độ hiển thị ưa thích thành tự động, thì đây bây giờ là hành vi tự động.

Nếu bạn đã thực hiện một số tùy chỉnh và bạn muốn chọn không tham gia hành vi này, chỉ cần tránh sử dụng displayModeButtonItem hoàn toàn và đặt presentsWithGesture thành false.

Bạn cũng có thể đặt preferredDisplayMode thành allVisible.

Được rồi.

Hãy tiếp tục nói về một số cạm bẫy phổ biến.

Một số ứng dụng có thể có hình nền được đặt thành kích thước cụ thể hoặc một số nội dung nhất định được ghim vào một vị trí trên màn hình.

Điều này phổ biến nhất trong các trò chơi, nhưng ứng dụng của bạn có thể sử dụng một kỹ thuật như thế này vì nhiều lý do.

Nếu ứng dụng của bạn đã đặt hình ảnh được chia tỷ lệ, khi bạn chạy nó trên iPhone XS Max hoặc iPhone XR, bạn có thể nhận thấy nội dung của mình được chia tỷ lệ không chính xác.

Không giống như các ứng dụng sử dụng khung UIKit tiêu chuẩn, trong khi những chiếc điện thoại này vẫn còn mới, bạn có thể cần thực hiện một chút vỏ bọc đặc biệt và thông báo cho ứng dụng của bạn - hoặc khuôn khổ mà ứng dụng của bạn đang sử dụng - về màn hình mới.

Kích thước màn hình cho cả iPhone XR và iPhone XS Max rộng 414 điểm x cao 896 điểm.

Khi bạn đang xây dựng tài sản của mình, hãy nhớ rằng iPhone XR là thiết bị 2x và iPhone XS Max là thiết bị 3x.

Vì vậy, tính bằng pixel, độ phân giải của iPhone XR là 828 x 1.792 pixel.

Độ phân giải của iPhone XS Max là 1,242 x 2,688 pixel.

Thận trọng!

Bạn chỉ nên mã hóa kích thước màn hình cứng nếu khuôn khổ của bạn hoàn toàn yêu cầu nó.

Mặc dù điều này có thể làm cho trò chơi hoặc ứng dụng tương tự của bạn hoạt động ngay lập tức, bạn nên tránh sử dụng các phương pháp này trừ khi bạn thực sự cần.

Vui lòng để UIKit thực hiện công việc cho bạn và thay vào đó hãy sử dụng bố cục tự động.

Mặc dù có thể rất hấp dẫn khi buộc ứng dụng của bạn hoạt động theo những cách cụ thể trên các mô hình phần cứng khác nhau, bạn nên tránh tạo các trường hợp đặc biệt cho mỗi phần cứng.

Điều này sẽ mất thời gian để phát triển các tính năng mới và nó phần lớn là công việc dư thừa.

Ngoài ra, khi mã của bạn đang chạy trên một kiểu điện thoại mà nó không nhận ra, các sự cố bất ngờ có thể xảy ra.

Điều này có thể làm tổn thương khách hàng của bạn nếu bạn không thể cập nhật ứng dụng của mình ngay lập tức.

Nếu bạn đã tạo một chiếc ốp lưng đặc biệt cho ứng dụng iOS của mình để chạy trên iPhone X, bây giờ bạn phải làm lại tất cả công việc khó khăn của mình cho iPhone XS Max và iPhone XR.

Ngay cả khi bạn cần đặt kích thước trong ứng dụng của mình để đáp ứng nhu cầu đồ họa, đừng tìm kiếm mô hình thiết bị và hành vi cổng đằng sau kiểm tra chuỗi đó.

Bạn không bao giờ nên viết mã có nội dung như, "Đây có phải là iPhone X không? Làm Một.

Còn nữa không? Làm B."

Đây là một cơ hội tuyệt vời để đảm bảo rằng bạn đã áp dụng các cài đặt khu vực an toàn phổ biến trong toàn bộ ứng dụng của mình và tiết kiệm cho bản thân trong tương lai của bạn rất nhiều thời gian và công sức.

Bây giờ cũng là thời điểm tuyệt vời để thực sự siêng năng về cách bạn phân nhánh mã của mình khi bạn đang tìm kiếm tính khả dụng của tính năng.

Cũng giống như những chiếc iPhone khác mà bạn đã hỗ trợ, chẳng hạn như iPhone SE và tất cả iPad, iPhone XR không hỗ trợ 3D Touch và camera kép, vì vậy điều quan trọng là bạn không dựa vào những hành vi đó.

Hãy lấy 3D Touch làm ví dụ.

Ứng dụng Home là một ví dụ tuyệt vời về ứng dụng sử dụng 3D Touch trên các thiết bị được hỗ trợ nhưng cung cấp bộ tính năng đầy đủ trên các thiết bị không hỗ trợ 3D Touch hoặc cho những người dùng có thể đã tắt nó.

Kiểm tra xem một thiết bị có sử dụng 3D Touch hay không rất đơn giản.

Hãy xem một số mã mẫu.

Đầu tiên, hãy kiểm tra khi khởi chạy xem thiết bị có hỗ trợ tính năng này hay không, như được hiển thị ở đây.

Tuy nhiên, hãy nhớ rằng người dùng có thể tắt 3D Touch trong khi ứng dụng của bạn đang chạy.

Do đó, bạn cũng nên thực hiện kiểm tra này như một phần của việc triển khai phương thức đại diện traitCollectionDidChange.

Trong cả hai trường hợp, hãy phân nhánh mã của bạn để sử dụng một giải pháp thay thế như UILongPressGestureRecognizer cho các thiết bị không hỗ trợ 3D Touch, để bộ tính năng đầy đủ được thể hiện cho tất cả các thiết bị.

Khi nghi ngờ, hãy đảm bảo mã của bạn có thể xử lý số không và đủ mạnh để thất bại một cách duyên dáng khi nhận lại thứ gì đó bất ngờ.

Đối với hầu hết các ứng dụng, bạn sẽ không làm việc nhiều trong năm nay để hỗ trợ iPhone XS, iPhone XS Max và iPhone XR, đặc biệt nếu bạn đã được tối ưu hóa cho iPhone X.

Nếu bạn cần bất kỳ sự hỗ trợ nào, có rất nhiều video có sẵn từ các video iPhone X và các phiên WWDC 2018 năm nay.

Kiểm tra nội dung liên quan và bạn có thể tìm thêm trên developer.apple.com.