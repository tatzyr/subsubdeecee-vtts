207

벳시 랑고프스키: 2017년에 아이폰 X가 출시되었다.

iOS 11 SDK와 연결하면 앱이 아름다운 새 디스플레이를 활용할 수 있습니다.

올해, 우리는 iPhone XS, iPhone XS Max 및 iPhone XR을 소개합니다.

iPhone XS는 처음부터 완전히 재설계되었지만, 화면 크기는 iPhone X와 동일하므로, 이 비디오는 완전히 새로운 해상도로 iPhone XS Max와 iPhone XR에 초점을 맞출 것입니다.

앱이 주로 UIKit 프레임워크를 사용하고 이미 iPhone X에 맞게 앱을 조정했다면, 상태가 좋아야 합니다.

이 멋진 새 휴대폰을 최대한 활용하기 위해 iOS 12와 연결하기만 하면 됩니다.

iPhone X, 그리고 이제 iPhone XS Max 및 iPhone XR용 앱을 업데이트하는 방법에 대한 재교육이 필요하다면, "iPhone X용 앱 구축" 비디오를 확인하세요.

이 비디오는 TrueDepth 카메라가 UI를 차단하지 않도록 하고, UI 요소가 홈 표시기에서 멀리 떨어져 있는지 확인하고, 다른 일반적인 조정을 해야 할 수 있도록 안내합니다.

대부분의 무거운 리프팅은 UIKit에 의해 수행되지만, 여전히 앱을 최적화해야 할 수도 있으며, 이 비디오는 iPhone XS Max와 iPhone XR뿐만 아니라 iPhone X에 적합한 지침을 제공합니다.

iPhone XS Max 및 iPhone XR용 앱을 쉽게 업데이트하기 위해 올해 당신을 위해 더 잘 만든 몇 가지에 대해 이야기해 봅시다.

"iPhone X용 앱 구축"을 봤다면, 가로 모드에서 테스트하는 것의 중요성을 기억할 수 있습니다.

이것이 중요한 장소 중 하나는 컬렉션 뷰에 있다.

저는 탭 바 컨트롤러에 내장된 내비게이션 컨트롤러에 내장된 컬렉션 뷰 컨트롤러인 이 정말 간단한 샘플 앱을 만들었습니다.

셀에 간격을 두기 위한 오프셋이 있지만, 그렇지 않으면 이것은 단지 기본값을 사용하는 것이다.

언뜻 보기에, 초상화에서, 그것은 정말 좋아 보인다.

하지만 풍경에서, 이 앱에는 문제가 있다: 왼쪽의 셀은 TrueDepth 카메라 뒤에 있다.

이를 해결하기 위해, 컬렉션 뷰의 섹션 삽입 참조는 기본 콘텐츠 삽입 대신 안전 영역으로 설정되어야 합니다.

이것은 코드로 할 수 있으며, iPhone X가 처음 출시되었을 때, 그것이 그것을 할 수 있는 유일한 방법이었다.

하지만 이 앱은 스토리보드로 만들어졌기 때문에, 더 최근의 Xcode에서는 인터페이스 빌더에서 직접 변경할 수 있습니다.

스토리보드에서 컬렉션 뷰를 선택하면, 크기 검사기를 선택하고 삽입을 값에서 안전한 영역으로 변경할 수 있습니다.

이제 앱을 빌드하고 실행할 때, 내 컬렉션 보기는 가로에서 TrueDepth 카메라를 피하고 코드 변경이 필요하지 않습니다.

자동 레이아웃은 코코아와 코코아 터치 레이아웃 시스템이다.

앱이 자동 레이아웃을 사용하는 경우, iPhone XS Max 및 iPhone XR과 같은 새로운 화면 크기에 대한 최적화 작업의 대부분이 당신을 위해 수행된다는 것을 알게 될 것입니다.

자동 레이아웃에서 얻을 수 있는 큰 이점을 활용하지 않는다면, 올해는 성능을 획기적으로 향상시켰기 때문에 지금이 확실히 업데이트할 때입니다.

다음은 iOS 12의 파란색 자동 레이아웃 성능과 비교하여 회색 iOS 11의 자동 레이아웃 성능의 몇 가지 예입니다.

iOS 11에 비해 iOS 12에서 나무를 움직이는 데 걸리는 시간이 얼마나 적은지 보세요.

앱에서 자동 레이아웃을 사용하는 것이 훨씬 빨라졌습니다.

우리가 어떻게 했는지 비하인드 스토리를 보고 싶다면, WWDC 2018 비디오 "고성능 자동 레이아웃"을 확인하세요.

iPhone XS Max와 iPhone XR의 한 가지 변경 사항은 가로에서 UISplitViewController의 동작입니다.

그것은 iPad의 세로 모드에서 Mail에서 작동하는 방식과 매우 비슷합니다.

iPhone XS Max 시뮬레이터에서 실행하여 만든 이 매우 간단한 테스트 앱을 살펴보세요.

네 개의 셀이 있는 내 마스터 뷰는 버튼을 누르면 들어오고 비슷하게 무시된다.

내 앱은 displayModeButtonItem을 설정했기 때문에 새 하드웨어에서 자동으로 이 동작을 얻었다.

presentsWithGesture를 사용하면 이 동작도 설정됩니다.

이것이 코드에서 어떻게 생겼는지 살펴봅시다.

앱 위임에서 UISplitViewController의 displayModeButtonItem을 얻었고 고객이 탭할 수 있도록 탐색 모음의 왼쪽 막대 버튼 항목으로 설정했습니다.

그래서 이제 저는 iPhone XS Max와 iPhone XR의 동작을 선택했습니다.

나는 또한 presentsWithGesture를 true로 설정하고 있다.

이것은 내 고객이 스와이프로 마스터 뷰에 접근할 수 있게 해준다.

이것은 선택 사항이며, 앱에 필요한 경우 false로 설정할 수 있습니다.

주목해야 할 한 가지.

선호하는 DisplayMode를 자동으로 설정하는 데 의존했다면, 이것은 이제 자동 동작입니다.

사용자 지정을 했고 이 동작을 거부하고 싶다면, displayModeButtonItem을 완전히 사용하지 말고 presentsWithGesture를 false로 설정하세요.

preferredDisplayMode를 allVisible로 설정할 수도 있습니다.

알았어.

몇 가지 일반적인 함정에 대해 이야기해 봅시다.

일부 앱에는 배경 이미지가 특정 크기로 설정되거나 특정 자산이 화면의 한 지점에 고정되어 있을 수 있습니다.

이것은 게임에서 가장 흔하지만, 앱은 다양한 이유로 이와 같은 기술을 사용할 수 있습니다.

앱이 스케일링된 이미지를 설정한 경우, iPhone XS Max 또는 iPhone XR에서 실행할 때 콘텐츠의 크기가 잘못 조정된 것을 알 수 있습니다.

표준 UIKit 프레임워크를 사용하는 앱과 달리, 이 휴대폰은 아직 새롭지만, 약간의 특수 케이스를 하고 앱 또는 앱이 사용하는 프레임워크에 새 화면에 대해 말해야 할 수도 있습니다.

iPhone XR과 iPhone XS Max의 디스플레이 크기는 너비 414포인트, 높이 896포인트입니다.

자산을 구축할 때, iPhone XR은 2x 장치이고, iPhone XS Max는 3x 장치라는 것을 명심하세요.

따라서 픽셀에서 iPhone XR의 해상도는 828 x 1,792 픽셀이다.

iPhone XS Max의 해상도는 1,242 x 2,688 픽셀이다.

조심해!

프레임워크가 절대적으로 필요한 경우에만 화면 크기를 하드 코딩해야 합니다.

이것은 당신의 게임이나 유사한 앱을 게이트에서 바로 작동하게 할 수 있지만, 절대적으로 필요하지 않는 한 이러한 방법을 사용하지 않아야 합니다.

UIKit이 당신을 위해 일을 하게 하고 대신 자동 레이아웃을 사용하세요.

앱이 다양한 하드웨어 모델에서 특정 방식으로 작동하도록 강요하는 것은 유혹적일 수 있지만, 하드웨어당 특별한 경우를 만드는 것을 피해야 합니다.

이것은 새로운 기능을 개발하는 데 시간이 걸릴 것이며, 대체로 중복된 작업이다.

또한, 코드가 인식되지 않는 휴대폰 모델에서 실행 중일 때, 예상치 못한 문제가 발생할 수 있습니다.

앱을 바로 업데이트할 수 없다면 고객에게 해를 끼칠 수 있습니다.

iOS 앱이 iPhone X에서 실행되도록 특별한 케이스를 만들었다면, 이제 iPhone XS Max와 iPhone XR에 대한 모든 노력을 다시 해야 합니다.

그래픽 요구를 수용하기 위해 앱 내에서 치수를 설정해야 하더라도, 문자열 검사 뒤에 장치 모델과 게이트 동작을 검색하지 마십시오.

"이게 아이폰 X인가요?"와 같은 코드를 작성해서는 안 됩니다. A를 해.

다른 거? B를 해."

이것은 앱 전반에 걸쳐 안전 영역 삽입을 보편적으로 채택하고 미래의 많은 시간과 노력을 절약할 수 있는 좋은 기회입니다.

지금은 또한 기능 가용성을 찾고 있을 때 코드를 어떻게 브랜치하는지에 대해 정말 부지런히 할 수 있는 좋은 시간입니다.

iPhone SE 및 모든 iPad와 같이 이미 지원하는 다른 iPhone과 마찬가지로 iPhone XR은 3D 터치와 듀얼 카메라를 지원하지 않으므로 이러한 행동에 의존하지 않는 것이 중요합니다.

3D 터치를 예로 들어 봅시다.

홈 앱은 지원되는 장치에서 3D 터치를 사용하지만 3D 터치를 지원하지 않는 장치 또는 껐을 수 있는 사용자에게 전체 기능 세트를 제공하는 응용 프로그램의 환상적인 예입니다.

장치가 3D 터치를 사용하는지 확인하는 것은 간단하다.

샘플 코드를 좀 살펴봅시다.

먼저, 여기에 강조 표시된 것처럼 장치가 기능을 지원하는지 여부를 실행 시 확인하십시오.

그러나, 앱이 실행되는 동안 사용자가 3D 터치를 끌 수 있다는 것을 기억하세요.

따라서, 당신은 또한 traitCollectionDidChange 위임 방법의 구현의 일환으로 이 검사를 수행해야 합니다.

두 경우 모두, 3D 터치를 지원하지 않는 장치에 대해 UILongPressGestureRecognizer와 같은 대안을 사용하도록 코드를 분기하여 모든 장치에 대해 전체 기능 세트를 표시하십시오.

의심스러울 때, 당신의 코드가 nil을 처리할 수 있고 예상치 못한 것을 되돌릴 때 우아하게 실패할 만큼 충분히 강력한지 확인하십시오.

대부분의 앱의 경우, 특히 이미 iPhone X에 최적화되어 있다면, 올해 iPhone XS, iPhone XS Max 및 iPhone XR을 지원하는 데 많은 작업이 없을 것입니다.

지원이 필요하다면, iPhone X 비디오와 올해의 WWDC 2018 세션에서 많은 것을 이용할 수 있습니다.

관련 콘텐츠를 확인하고, developer.apple.com에서 더 많은 것을 찾을 수 있습니다.