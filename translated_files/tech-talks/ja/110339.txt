110339

こんにちは、私の名前はナット・ブラウンで、アップルでゲーム技術に取り組んでいるエンジニアのチームを管理しています。

今日は、アプリケーションやゲームで主要なリアルタイムのグラフィック統計を見て収集するためのヘッドアップディスプレイについてお話ししたいと思います。

メタルパフォーマンスHUDを見てみましょう。 メタルパフォーマンスHUDを見てみましょう。

有効にすると、アプリケーションの右上隅にオーバーレイとして表示されます。

その目的は、あなたとあなたのテスターが潜在的なパフォーマンスの問題を簡単に発見し、後で分析するためにいくつかの基本的な情報を記録するのを助けることです。

HUDは、既存のデバッグおよびパフォーマンス分析ツールを補完するものであり、代替するものではなく、スクリーンショットとログだけで品質保証チームや顧客から有用な情報を得るのに役立ち、再現が困難なパフォーマンスの問題やグラフィックスの不具合をより迅速に再現、分析、修正するのに役立ちます。

HUDが表示し、収集できるデータを見てみましょう。

HUDの一番上の行には、GPUとディスプレイ、使用されているデバイス、ターゲットとする解像度、ディスプレイのスケーリング状態に関する情報が表示されます。

HUDは、ディスプレイの直接パスまたは複合パスにいるかどうかを示します。

ダイレクトパスは、ドローableを表示してから画面に表示されるまでの間、バッファリングが最も少なく、更新間隔が最も少ないです。

合成されている場合、システムUI要素または画面に重なる独自の追加レイヤーにより、追加のバッファリングと表示遅延が発生する場合があります。

また、使用されている物理ディスプレイの最大リフレッシュレートも表示されます。

可変リフレッシュレートディスプレイの場合、ディスプレイの最小リフレッシュレートも表示されるため、利用可能な可能なリフレッシュレート範囲が表示されます。

次に、リアルタイムデータの最初の列には、ヘルツ単位の瞬間フレームレートまたはフレーム/秒、次にプリタイム、またはプレゼント間の時間（フレーム時間またはフレーム間隔（ミリ秒単位）とも呼ばれる）が表示されます。

そして最後に、フレーム間隔で完了したGPU作業の量もミリ秒単位で測定されました。

2番目の列には、フレームレートの最低値、フレーム間隔、および過去1秒半にわたってフレームに費やされたGPU時間に関する詳細情報が表示されます。

この低い値が平均から大幅に逸脱した場合、HUDは赤で強調表示されます。

HUDの数値データの最後の列は、最後の1秒半で最も高い瞬間フレームレート、最後の1秒半で最大のシングルフレーム時間、最後の1秒半のフレーム間隔で行われた作業のミリ秒で最も高いGPUコストを示しています。

平均と比較して異常に高いフレーム間隔とGPU時間が、ここで再び赤で強調表示されます。

HUDの下部にある最後のセクションには、時間の経過とともに潜在的なリークを見つけるのに役立つプロセスとGPUメモリ消費情報と、現在の間隔とGPU時間の2行グラフが表示されます。

この情報の目的は、あなたとあなたのテスターが見逃す可能性のある一時的なフレームドロップを見つけ、より高度なXcodeとInstrumentsツールを使用して、より深いテスト、デバッグ、およびパフォーマンスチューニングを分離するのに役立ちます。

では、どのようにメタルパフォーマンスHUDをオンにしますか?

さて、開発者がこの形式のデータ収集と対話し、自動化したい多くの方法があることを知っているので、それを行うにはさまざまな方法があることを知って驚くかもしれません。

1つ目は、iOS、macOS、またはtvOS用に開発している間、Xcode 14から右です。

[診断] タブの [実行] スキームには、[グラフィックスの概要を表示] を選択して HUD をオンにし、[ログ グラフィックスの概要を表示] を選択してシステム ログにデータをログに有効にするオプションが表示されます。

iOSとtvOSでは、デバイスをXcodeに接続し、開発のために有効にした場合は、開発者設定を使用してHUDとロギングをオンにすることができます。

「設定」>「開発者設定」に移動し、下にスクロールしてHUDを有効にし、オプションでロギングするだけです。

iOSとtvOSでは、HUDは独自のアプリケーションのロギングのみを表示して実行します。つまり、XcodeまたはTestFlightを使用してインストールしたアプリケーションです。

macOSでは、環境変数を使用してXcodeの外部でHUDを有効にすることができます。

MTL_HUD_ENABLED環境変数を1に設定してHUDを表示し、MTL_HUD_LOGGING_ENABLED環境変数を1に設定してロギングをトリガーします。

役に立つかもしれないもう1つのオプションは、アプリケーションのユーザーデフォルトを使用することです。

macOS、iOS、tvOSでは、標準ユーザーのデフォルトでMetalForceHudEnabledキーをtrueに設定すると、HUDが表示され、その後のアプリケーションの起動時にロギングが行われます。

macOSでは、すべてのMetalベースのアプリケーションにHUDを表示するグローバル値を設定できます。

最後に、MetalHUDEnabledキーをInfo.plistに追加して、常にHUDを有効にすることができます。

HUDが有効になっている場合、CAMetalLayer developerHUDProperties辞書を使用してHUDを表示および非表示にし、ロギングを有効または無効にすることができます。

モードキーをデフォルトに設定すると、HUDが表示されます。

キーをクリアするとHUDが非表示になります。

ロギングキーをデフォルトに設定すると、ロギングが有効になります。

このキーをクリアすると、ロギングが無効になります。

内部ビルドのUIトグルをテスターに提供してHUDを表示および非表示にしたい場合は、Info.plistキーを追加してこのAPIを使用できます。

それでは、Metal Performance HUDのログを見てみましょう。

毎秒約1回、Metal Performance HUDは、収集しているデータを要約してシステムログにデータを書き込むので、独自の方法で分析できます。

コンソールアプリケーションを起動し、ストリングメタルHUDで出力をフィルタリングするだけです。

結果の各行は、ストリングメタルHUDで始まります。

次に、最初のフレーム番号、次に推定フレームミスの数が表示されます。

この場合、どれも見逃されませんでした。

次に、プロセスメモリの使用量。

ここでは56.05メガバイトです。

その後、各フレームの現在間隔とGPU時間（ミリ秒単位）です。

このデータはすべて、オフラインで分析したり、ゲームプレイをキャプチャしたビデオと関連付けたりして、追加のデバッグと最適化に焦点を合わせる場所についてさらに正確な洞察を提供するのに役立つかもしれません。

今日、メタルパフォーマンスHUDについて楽しく学んでいただければ幸いです。

HUDを使用して、ゲームのパフォーマンスを視覚化します。

微妙なパフォーマンスの問題を発見し、インストゥルメントのようなより高度なツールを使用する場所を選択するのに役立ちます。

すべてのAppleプラットフォームで簡単に有効にでき、独自のカスタム分析のために記録したデータをキャプチャすることもできます。

ゲームやグラフィックアプリケーションの最適化に役立つことを本当に願っています。

フィードバックがある場合は、必ずfeedbackassistant.apple.comから送信してください。

参加してくれてありがとう。