210

ジェイコブ・クラッパー:こんにちは!共有の新機能へようこそ。

私の名前はジェイコブ・クラッパーで、シェアシートチームのエンジニアです。

すぐに飛び込んで、iOS 13の新しいシェアシートを見てみましょう。

シェアシートは、上部に新しいプレビューヘッダーを備えています。

これにより、ユーザーが共有している内容が明確になり、カスタマイズできるようになります。

また、新しい共有シートは、ユーザーが誰と共有したいかを予測する会話の提案行で、迅速かつ簡単に共有しやすくなります。

最後に、新しいアクションリストは、アプリとアクションの間の明確な線引きを提供し、簡単にアクセスできるようにユーザーのお気に入りのアクションを一番上に置きます。

それでは、この新しいデザインを活用して、ユーザーの共有体験を向上させる方法について話しましょう。

まず、シェアシートのプレビューヘッダーのカスタマイズについて説明します。

次に、メッセージングアプリの会話の提案をオプトインします。

そして最後に、いくつかのベストプラクティスを復習します。

では、シェアシートでプレビューヘッダーを設定する方法について話しましょう。

iOS 13では、アプリにリッチリンクを表示できるLinkPresentation APIが導入されています。

UIActivityViewControllerは、このフレームワークを利用して、共有シートにプレビューヘッダーを表示します。

これにより、ユーザーがアプリから何を共有しているかが明確になります。

追加の利点として、ユーザーがメッセージを介して共有する場合、トランスクリプトのリンクプレビューは共有シートのものと一致します。

これにより、ユーザーの共有体験に継続性が追加されます。

Safariのプレビューヘッダーを見てみましょう。 プレビューヘッダーを見てみましょう。

今はかなり良さそうですが、シェアシートはヘッダーに表示するウェブサイト情報を取得する必要がありました。

もう一度見ましょう。

Safariがすでに持っている可能性が高いので、共有シートがこの情報を取得しなければならないのは正しくありません。

プレビューを高速化するために、SafariはUIActivityItemSourceを使用して、Share Sheet LinkPresentationメタデータをヘッダーに表示できます。

これは、UIActivityItemSourceの新しいActivityViewContollerリンクメタデータメソッドの例です。

まず、LPLinkMetadataオブジェクトを作成します。

次に、元のURLとURLのプロパティを設定します。

タイトルとiconProviderを設定します。

そして最後に、メタデータを返します。

プレビューヘッダーが今どのように見えるか見てみましょう。

ご覧のとおり、すべての情報はすぐに利用可能になり、共有シートは追加のメタデータの取得を行う必要はありませんでした。

それでは、シェアシートの新しい会話の提案について話しましょう。

会話の提案により、ユーザーは名前を入力することなく、特定の受信者にコンテンツを簡単に送信できます。

会話の提案はSiriKit Intentsを利用しますが、SiriKit UI拡張機能を追加したり、Siriのサポートを提供したりする必要はありません。

会話の提案行は、共有シートの上部に便利に配置されているため、ユーザーは簡単なタップで共有拡張機能を起動できます。

メッセージングアプリの共有拡張を提案にオプトインする方法について話しましょう。

アプリからのメッセージ送信にINSendMessageIntentsを寄付し、拡張機能を共有します。

より豊かなエクスペリエンスをユーザーに提供するために、受信者、speakableGroupName、conversationIdentifierなど、できるだけ多くのフィールドに入力するようにしてください。

共有拡張が起動されると、NSExtensionContextのintentプロパティは、UIに入力する会話に関する情報を提供します。

最後のステップは、共有拡張機能のInfo.plistのIntentsSupported配列にINSendMessageIntentを追加することです。INSendMessageIntentの寄付の例を見てみましょう。

この関数は、ユーザーがアプリまたは共有拡張機能でメッセージを送信するたびに呼び出す必要があります。

会話識別子は、共有シートがメッセージを受信する受信者またはグループを識別するのに役立ちます。

グループ名は、共有シートに会話を表示するために使用されます。

この場合、参加者配列はINPersonオブジェクトの配列です。

各INPersonは、ユーザーがシェアシートで簡単に見つけられるように、表示名と画像を持つ必要があります。

最後に、sendMessageIntentを使用してINInteractionを作成します。

この場合、ユーザーがメッセージを送信しているため、方向を発信として設定します。

最後に、インタラクションを寄付します。

IntentsSupported配列は、Share ExtensionのInfo.plistのNSExtensionAttributes辞書に挿入する必要があります。

INSendMessageIntentがサポートされているインテントの1つとしてリストされていることを確認してください。そうしないと、会話の提案が拡張機能で有効になりません。

共有拡張子をオプトインするすべての手順を完了すると、共有拡張子にリンクされた受信者の提案が表示されます。

この提案には、連絡先またはグループの画像と表示名、アプリのアイコンが表示されているため、ユーザーは簡単に識別できます。

最後に、シェアシートのベストプラクティスをいくつか紹介しましょう。

まず、新しいアクションリストのアクション拡張アイコンを最適化する方法について話しましょう。

まず、アイコンは40×40のテンプレート画像である必要があります。

システムアイコンに合わせて、塗りつぶしなしでグリフを概説する必要があります。

可能であれば、SFシンボルまたはシンボル画像を使用してください。

これを行うには、CFBundleSymbolNameキーをアクション拡張機能のInfo.plistに追加します。

次に、カードUIについて話しましょう。

iOS 13の新機能では、共有拡張機能はフォームシートとして表示されます。

共有拡張機能にフルスクリーンプレゼンテーションが必要な場合は、拡張機能のInfo.plistでNSExtensionShareWants FullScreenPresentationキーを使用してオプトインできます。

ほとんどの拡張機能はこれを必要としないはずですが、その良い例は、カメラを使用する必要がある拡張機能です。

最後に、iOS 13の共有拡張機能の新しい動作について確認したいと思います。

共有拡張機能は、拡張機能の表示名ではなく、含まれているアプリの表示名を使用して表示されるようになりました。

アプリに複数の共有拡張機能がある場合、ユーザーがそれらを区別することは困難です。

このため、アプリは単一の共有拡張機能に制限する必要があります。

アプリに以前に複数の共有拡張機能があった場合は、オプションUIを追加して、ユーザーが共有拡張機能を起動するときに必要な機能を選択できるようにすることで、それらを1つに統合できます。

共有の新機能にご参加いただきありがとうございます。

詳細については、developer.apple.comをご覧ください。