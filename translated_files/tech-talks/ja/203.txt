203

Apple Watch Series 3用のwatchOS 4アプリをアップデートすると、これまで以上に簡単に接続でき、新しい気圧高度計を活用できます。

Apple Watchは、すべてのネットワークのためにiPhoneへの接続に依存することから始まりました。

ただし、watchOS 2以降、Apple Watchは、iPhoneがオフまたは範囲外の場合、Wi-Fi経由で通信する機能があり、iPhoneが以前に接続したWi-Fiホットスポットの範囲内にあります。

セルラー付きApple Watch Series 3では、iPhoneが通信範囲外にあり、Wi-Fiが利用できない場合、アプリがセルラー接続を介して直接通信できるようになりました。

アプリはどこからでもデータを更新できるだけでなく、iPhoneが受信したプッシュ通知は、携帯電話接続時にApple Watchに自動的に転送されます。

アプリがすべての接続の可能性で機能することを確認するために、ウォッチアプリのネットワーキングリクエストにURLSessionを使用することがさらに重要になりました。

URLSessionは、watchOSでネットワーク接続を作成および管理するために使用されるクラスです。

ウォッチアプリコードのURLSessionを使用すると、Apple Watchから直接ネットワークリクエストを開始できます。

iPhoneがApple Watchの範囲内にある場合、これらのリクエストはiPhoneを介して舞台裏でプロキシされ、その接続を活用します。

それ以外の場合、リクエストはWi-Fiホットスポットまたはセル接続を介して直接発生します。

Apple Watchがセルラー接続のみのときにURLSessionを使用する場合、セッションはシステムによってわずかに異なる方法で処理される可能性があることに注意してください。

さまざまな種類のセッションとあなたが期待できることを見てみましょう。

デフォルトセッションと一時的なセッションの場合、これらのタイプのセッションは、アプリケーションの状態がアクティブなときに通常どおりに機能します。

共有WKExtensionオブジェクトのapplicationStateプロパティを使用して、現在のアプリケーション状態を確認できます。

ただし、アプリケーションの状態が非アクティブまたはバックグラウンドの場合、これらのタイプのセッションは許可されません。

アプリが現在バックグラウンドナビゲーションモードを使用している場合は許可されるため、これには1つの注意点があります。

次に、バックグラウンドセッションを見てみましょう。

バックグラウンドセッションでは、より小さな転送が優先され、システムがネットワーク要求を行うより良い機会がある時点まで、転送を延期することができます。

これはシステムレベルで決定され、電力レベル、接続強度、他のアプリが達成する必要があるタスクなど、多くの側面を考慮に入れます。

バックグラウンドセッションでは、リクエストが行われ、応答が返されると、アプリがfrontmostapp状態の場合、アプリはすぐに起こされ、応答が手渡されます。

最先端のアプリ状態の外では、システムは、そうするのに適した時期であると判断したとき、またはアプリケーションの状態が再びアクティブになったときに、応答でアプリをウェイクします。

それでは、watchOSのネットワークコードを最大限に活用するためのベストプラクティスをいくつか確認しましょう。

1つ目は、URLSessionConfigurationオブジェクトに新しいwaitsForConnectivityプロパティを使用することです。

バックグラウンド以外のセッションでこれをtrueに設定すると、システムはすぐに失敗するのではなく、接続が要求を行うのに十分になるまで待つことができます。

接続がいつ待機しているかを知るためのデリゲートメソッドがあるので、状況を処理できます。

接続が利用可能である限り、すぐに発火するため、即時に依存しないすべての要求にこのプロパティを使用することをお勧めします。

そうでない場合、システムは接続が再開されるまでリクエストを行うのを待ちます。

これにより、到達可能性コードに焦点を当てるのではなく、アプリを素晴らしいものにするものに集中することができます。

WKExtensionDelegateオブジェクトでapplicationWillResignActiveメソッドを使用すると、ネットワーク要求が処理中の場合、アプリケーションの状態がアクティブから非アクティブまたはバックグラウンドに変化したときに何が起こるかを最適化できます。

言い換えれば、誰かがあなたのアプリを使用している間に手首を置いたとき。

この方法を使用すると、既存のリクエストをキャンセルするか、バックグラウンドセッションとして再度作成するかを決定できます。

最後に、各タスクのセッションを作成する代わりに、共有シングルトンURLSessionオブジェクトを複数のタスクに使用することが常に最善です。

多くのセッションを作成して無効にすると、システムに不要なオーバーヘッドが発生し、共有セッションを使用するか、必要に応じて使用するのが最善です。

ウォッチコネクティビティフレームワークに移りましょう。

Apple Watchが接続性でより自立するにつれて、Watch Connectivityを使用することが優れた時計アプリ体験に役立つ場所を特定することが重要です。

Apple Watchでのアプリの最初の起動には、サービスで認証するためのトークンが必要になる場合があります。

Watch Connectivityを使用することは、iPhoneアプリですでに確立されている可能性のあるこの情報を渡すのに最適な方法です。

アプリがワークアウト用のコーチングアプリ、または同様のものである場合、誰かがあなたのアプリを使い始めたら、最初にいくつかの大きなオーディオファイルをApple Watchに転送したいと思うかもしれません。

Watch Connectivityは、これらのタイプの転送を処理でき、アプリのインストールを小さく保つのに役立ち、後でリソースでアプリを補完することができます。

WCSessionのupdateApplicationContextメソッドを使用すると、時計アプリが次回アクティブになったときにアクセスできるデータの辞書をiPhoneに送信させることができます。

これは、iPhoneアプリが新しいデータを取得し、時計アプリがまだ更新する機会がなかった場合に、時計アプリに新鮮なデータを流し続けるための良い方法です。

ウォッチアプリが起動すると、最新のデータのネットワーク要求を開始している間、この新しいデータを表示できます。

ネットワーク要求にフォールバックする機能を構築することは非常に重要です。

Apple Watchがより独立しているため、時計アプリがiPhoneから最新のデータを持つという保証は少なくなります。

それでは、Apple Watch Series 3の新しい気圧高度計に注目しましょう。これにより、誰かがiPhoneから離れているときに、ワークアウトの要約に標高上昇や降下を追加できるようになりました。

これはまた、HealthKit、そしてあなたのアプリに、より正確なアクティブエネルギー燃焼計算を提供するのにも役立ちます。

Core Motionを使用すると、アプリが更新の受信を開始する場所からの相対的な高度の変化についてアプリに通知できるようになりました。

相対高度の変化とは、標高800メートルに立って更新を開始し、標高を50メートル高く移動すると、相対高度値は50メートルになることを意味します。

開始場所よりも80メートル低く移動すると、相対高度値はマイナス80メートルになります。

Core Motionには、アップデートを受け取るために使用するCMAltimeterクラスが含まれています。

CMAltimeterは、デバイスが相対的な高度の更新を提供する機能を持っているかどうかを判断し、伝えることができます。

コアモーションに相対的な高度についてもっと尋ねる前に、必ず最初にこれをチェックする必要があります。

watchOS 4では、CMAltimeterがモーションとフィットネスのアクティビティの承認ステータスを提供できるようになりました。

アプリがアクセスを許可されているものによっては、承認が拒否または制限されるケースを処理する必要があるかもしれません。

最後に、CMAltimeterは相対高度の更新を開始および停止する機能を提供します。

これらのアップデートは、生のセンサーデータに適用する信号フィルタリングにより、watchOS 4で2秒半のケイデンスで配信されます。

アップデートを受け取ると、CMAltitudeDataオブジェクトを渡すハンドラが表示されます。

CMAltitudeDataオブジェクトは、その更新の相対的な高度変化データを提供します。

これには、次のデータが含まれます。最初はタイムスタンプです。

このオブジェクトは時間間隔であり、参照日からの秒数として与えられます。

この値をDateオブジェクトに変換するには、Date クラスで timeIntervalSinceReferenceDate initializer メソッドを簡単に使用できます。

次のプロパティは相対的な高度です。

これは、最後に報告されたイベント以降の高度の変化を表しています。

これは相対値になるので、デバイスが標高が低いか高い場合、この値は特定の高度ではなく標高の変化を表します。

この値はメートル単位で与えられます。

最後の特性は圧力です。

搭載の高度計は気圧高度計であるため、コアモーションは相対的な高度変化と並んで記録された圧力を提供できます。

この値はキロパスカルで与えられます。

CMAltimeterを使用して相対高度更新を開始する方法と、デバイスの機能と承認ステータスを適切に確認する方法の例を見てみましょう。

この beginAltitudeUpdates メソッドの前に、Core Motion フレームワークをクラスにインポートし、CMAltimeter 型の altimeter と呼ばれるインスタンス変数を作成しました。

これは、後で相対高度の更新を開始および停止するために使用するオブジェクトです。

私たちの機能では、最初にすべきことは、デバイスで相対的な高度が利用可能かどうかを確認することです。

そうでない場合は、UIを変更して、アプリを使用しているときにこのデータが利用できないことを人に知らせることをお勧めします。

次に、承認ステータスが拒否または制限されているかどうかを確認する必要があります。

ここでは、承認ステータスが拒否されたり制限されたりしないようにしています。

承認ステータスが承認されている場合は続行でき、承認ステータスが決定されていない場合は、その人が以前にプロンプトが表示されていない場合、システムはアクセスを求めます。

アプリがモーションとフィットネスアクティビティの使用を許可されると、Core Motionに相対的な高度の更新を開始するよう依頼する場合があります。

以前に作成されたCMAltimeterオブジェクトのこの呼び出しは、更新を受信したい操作キューを渡すだけでなく、新しいデータがCore Motionから渡されるたびに実行するハンドラを提供します。

この場合、ハンドラでUIを更新するため、操作キューをメインキューに設定しました。

ハンドラに移動すると、関心のある値を含むCMAltitudeDataオブジェクトが渡されるか、更新で何か問題が発生した場合にエラーが発生する可能性があります。

処理するエラーがないことを確認した後、CMAltitudeDataオブジェクトからrelativeAltitude値を取り、その浮動小数点数値を格納し、それを使用してUIを更新するだけです。

前述のように、タイムスタンプや圧力特性も同じように簡単に使用できます。

更新を受け取る必要がなくなったら、以前に使用したCMAltimeterオブジェクトを使用して、相対的な高度の更新を停止するようにCore Motionに指示します。

そして、それだけです!

Apple Watchの開発とURLSessionとCore Motionの使用の詳細については、次のページのリソースリンクをご覧ください。

ありがとうございます。