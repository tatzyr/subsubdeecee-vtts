10067

こんにちは、Cloud FileProviderチームのJohannes Fortmannです。

今日は、iOS 16で導入された新しいFileProvider APIを使用して、デスクトップクラスの同期をiOSにもたらす方法について説明します。

紹介の後、ファイルプロバイダの目的を簡単にまとめます。

アプリを設計するための最適なアプローチと、iOSで特に重要になるベストプラクティスについて説明します。

最後に、iOSで実行されているプロバイダーの簡単なデモをお見せします。

Big Surは、ファイルをMacに同期するための宣言型APIを導入しました。

このAPIは、多くのクラウドベンダーによって採用され、大きな成功を収めています。

私のチームは着実にAPIの改善に取り組んでおり、iOS 16でも利用できるようにすることに興奮しています。

このAPIにより、iOSアプリは「デスクトップクラス同期」と呼ばれるものを提供できるようになります。

それはどういう意味ですか? 

iOSのアプリがより強力になるにつれて、ファイルシステム上の共有場所にアクセスできることが重要になります。

人々は、これらの強力なアプリがあらゆる種類のファイルシステムオブジェクトにアクセスできることを望んでいます。

彼らが選択すれば、彼らのアプリはフォルダにアクセスし、新しいファイルを作成できるはずです。

私たちは、一貫性を保証しながら、これらすべてが起こることを望んでいます。

一貫性とはどういう意味ですか?

iOSでは、バックグラウンドランタイムは歴史的に電力の懸念から制限されてきた。

同時に、変更はバックグラウンドでアップロードされる予定です。

この問題を解決するために、最新のFileProvider APIが導入されました。

基本レベルでは、アイテムの列挙、コンテンツの取得とアップロード、リモートで変更された場合のアイテムのリストの更新を担当するアプリ拡張機能を実装します。

システムは、お客様が提供した情報を公開し、一貫性を維持する責任があります。

システムの重要なタスクは、エラーを追跡し、必要に応じて再試行することです。

コンテンツの取得など、一部の操作では、再試行が自然に実行されます。

ユーザーは積極的にダウンロードを待っており、おそらくプログレスバーを注意深く監視しています。

一方、アップロードにはスケジューリングが必要です。

ディスク上のアイテムの状態を追跡することで、システムは更新されたコンテンツがアップロードされることを保証します。

進捗状況とエラーは追跡され、必要に応じてアップロードを再試行します。

もう1つの複雑なトピックは、アップロード中の一貫性です。

システムは、ファイルの内容のクローンを管理し、アップロード中にファイルへのその後のアクセスが成功し、正しいデータを表示するようにします。

これらの操作中、システムはまた、複数のアプリがアクセスしていても、ローカルバージョンが一貫性を保つことを保証し、それにはリモートサーバーからの同期ダウンが含まれます。

これは、APFS機能とファイル調整を使用して透過的に実装されます。

ストレージの制限は、モバイルデバイスの重要な制約です。

このシステムは、APFS機能を使用して、ローカルファイルの変更状態を原子的に追跡します。

これにより、ディスクの使用状況と最も最近使用されたステータスに基づいて、ローカルな変更がないファイルを透過的に立ち退かせることができます。

完全にアップロードされたファイルは、設定のストレージ管理ペインでアプリにカウントされません。

これまでのところ、システムと拡張機能について話し合ったことに気付いたかもしれません。

あなたのアプリがどこから来るのかについて話しましょう。

懸念事項の厳格な分離を採用することをお勧めします。

このシステムは、ディスク上の構造を管理し、タスクをスケジュールする責任があります。

あなたの拡張機能は、これらのタスクを上下に同期する責任があります。

システムは、ファイル階層に関するすべての状態と、どの部分が同期を必要とするかを追跡します。

つまり、あなたの拡張機能は非常に軽量になる可能性があるということです。

アイテム固有の状態をまったく追跡する必要はありません。

あなたのアプリケーションは、いかなる同期に対しても責任を負いません。

理想的には、サーバーとまったく話す必要はありません。

代わりに、2つのメカニズムを介して拡張機能と相互作用します。

システム上の他のアプリケーションと同じように、拡張機能と間接的に対話できます。

ルートを含む任意の管理対象アイテムのファイルURLを取得するAPIがあります。

これらの場所は、通常のファイルシステムAPIを使用してアクセスできます。

または、アプリは拡張機能への直接XPCサービス接続をリクエストすることもできます。

これは、ファイルの共有や競合の解決など、ファイルシステムの操作として表現できないタスクを処理する場合に特に便利です。

これらのメカニズムの両方は、Filesアプリで追加の統合ポイントを提供するために、FileProvider UI拡張機能でも使用できます。

無国籍プロバイダーで特に重要になる3つの点に触れたいと思います。

まず、アップロードについて話しましょう。

先に述べたように、システムはアップロードを追跡し、アップロードを実行するための延長時間を許可します。

これの重要な結果は、進捗状況を報告することで、アップロードが実際に進行していることをシステムに認識させる必要があることです。

アップロードタスクが進まない場合は、キャンセルされます。

システムはアップロードをきれいに終了するための猶予期間を提供しますが、キャンセルに時間がかかりすぎると、延長は終了します。

コードを確認しましょう。

キャンセルハンドラを実装するには、タスク固有のメソッドからの進捗リターンに設定するだけです。

アップロードの場合、それはmodifyItemです。

ハンドラでは、実行していた実際のアップロード作業をキャンセルします。

もちろん、完了ハンドラーを呼び出すと、キャンセルエラーが発生したことを通知する必要があります。

ここでのコード例では、これを便利にするために非同期タスクのキャンセルを使用していますが、完了ハンドラを手動で呼び出すこともできます。

次に、同期ダウンパスについて話しましょう。

ユーザーがファイルを操作すると、メインアプリはサーバーから変更を受信するために実行されません。

リモートの変更についてシステムに通知するには、プッシュ通知を実装する必要があります。

PushKitは、ファイルプロバイダーの特定のプッシュタイプを公開します。

これらのプッシュは、拡張機能から直接登録できます。

サーバーでは、明確に定義されたペイロードでプッシュを送信します。

システムはプッシュを受け取り、必要に応じて現在の状態を更新します。

他のタイプのタスクと同様に、バッテリーの状態やユーザーが現在ファイルを見ているかどうかなど、状況に応じて、システムは実際の更新を遅らせる可能性があります。

この最後のことは、私があなたに注意を喚起したいものです。システムは、拡張機能が報告するフォルダ階層を管理します。

これにより、フォルダ階層全体を販売できます。

あなたの内線番号は、ここで余分なことをする必要はありません。

これは、最新のファイルプロバイダーではデフォルトで有効になっています。

最後の機能でどのようなワークフローが可能になるかを簡単に実演しましょう。

このセッションのサンプルコードでデバイスを設定しました。

サンプルコードをiOSに移植しました。

サーバーへのログインを処理するためにiOSアプリを構築しましたが、拡張機能はmacOSバージョンとほとんど変更されていません。

私は今、iPadでサンプルコードを実行しています。

右側でファイルが実行されていて、すでにファイルを同期しています。

フォルダの選択を利用するアプリも書きました。

私のアプリは、フォルダ内のすべての画像にセピアフィルターを適用します。

このタイプのアプリケーションは、個々のアイテムのインタラクションを強制することなく、フォルダ内のすべてのアイテムを操作できるため、フォルダアクセスの恩恵を受けます。

デスクトップクラスの同期では、ファイルアプリからバッチエディタにフォルダをドラッグするだけです。

進捗状況を監視できるように、フォルダとファイルをプルアップさせてください。

その後、ボタンを押すと、すべての写真がダウンロードされ、変更されます。

変更後、それらは自動的にアップロードされます。

拡張機能によって報告されたアップロードの進捗状況は、ファイルアプリの下部にあるユーザーに現れ、それらをループに保ちます。

私のアプリでこのようなものを実装したかったとしましょう。

まず、アイテムのドラッグを実装しましょう。

ドラッグを開始できるようにするには、onDragメソッドを実装します。

このメソッドはNSItemProviderを返します。

ドラッグするファイルの種類を使用して、itemProviderにファイル表現を登録します。

私たちの場合、それはフォルダです。

getUserVisibleURLメソッドを使用してURLを取得します。

受信側では、onDropを実装して、ビューをドロップターゲットとしてマークします。

その後、適切なアイテムプロバイダーからファイルURLを読み込むことができます。

これはあなたのサンドボックスの外にあるファイルになることに注意してください。

アプリがアクセスするには、URLのセキュリティ範囲を消費して解放する必要があります。

あなたの次のステップは何ですか?

iOSアプリを含むようにサンプルコードを更新しました。

ダウンロードして、シンプルなステートレスプロバイダーの設定を試してみてください。

ゼロから始める場合は、必ず更新されたXcodeテンプレートを使用してください。

始めるための基本的なフレームが含まれています。

ファイルプロバイダーとその実装方法の詳細については、WWDC21の「macOSのFileProviderでファイルをクラウドに同期する」を参照してください。

ご覧いただきありがとうございます。

iOSデバイスであなたのパフォーマンスと信頼性の高いプロバイダーを使用することに興奮しています。