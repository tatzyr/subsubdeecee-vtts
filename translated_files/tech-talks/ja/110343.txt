110343

TestFlightの開始へようこそ。

私はAneeshaで、App Storeの製品管理チームで働いています。

同僚のジェロームが開発者ツール製品管理チームに加わりました。

このプレゼンテーションでTestFlightについてもっと共有できることを嬉しく思います。

今日の議題では、テストの重要性の簡単な概要とTestFlightの紹介から始めます。

次に、ビルドの配布方法、テスターの追加方法、フィードバックの表示方法など、TestFlightの使用方法を共有します。

では、飛び込みましょう。

テストは、高品質のアプリ体験を作成するために不可欠です。

これは、チームがコードを反復し、フィードバックを組み込むことができるプロセスであり、App Storeで優れたアプリやエクスペリエンスを顧客に提供できます。

App Storeは、170以上の地域で15億台以上のデバイスと40以上の言語で利用できます。

これは、人々があなたのアプリを発見する大きな機会であり、さまざまなデバイス、言語、アクセシビリティのニーズを持つさまざまな人々でもあります。

アプリをテストすることで、世界中のApp Storeユーザーに素晴らしい体験を提供していることを確認できます。

そして、あなたのテスト活動をサポートするために、Appleはアプリのテストに役立つ広範なツールセットを提供しています。

たとえば、Xcodeを使用してXCTestでユニットテストとUIテストを作成し、Xcode Cloudを使用して各コード変更後にテストを自動化できます。

シミュレータを使用して、さまざまなデバイスやOSでコードを手動でテストし、Instrumentsを使用してアプリのパフォーマンステストを行うことができます。

今日はTestFlightを深く掘り下げます。

TestFlightは、App Storeの人々が愛する世界クラスのアプリやゲームを作成できるように、プライバシーに配慮した方法で実際の人々からフィードバックを収集するのに役立つAppleのツールです。

TestFlightを使用すると、アプリがApp Storeで公開される前からフィードバックを得て、この情報を使用してそれに応じてアプリを更新できます。

TestFlightは、Apple Developer Programのメンバーシップの一部として含まれており、当社が提供する最も人気のある開発者ツールの1つです。

TestFlightを使用すると、すべてのAppleプラットフォームにアプリを配布することができ、テスト体験を最適化するために特別に構築されています。

高レベルでは、TestFlightを使用すると、アプリのビルドをアップロードしたり、テスターを追加したり、継続的にフィードバックを得たりできます。

これにより、テスターのフィードバックを迅速かつ簡単に取得して決定を通知し、App Storeで公開する世界クラスのアプリやゲームを開発するのに役立ちます。

次に、TestFlightの使用方法の例を詳しく説明しましょう。

ジェロームは私たちを始めるつもりです。

TestFlightの使用について話しましょう。

そして、これを説明するために、App Storeで初めてリリースされる新しいフードトラックアプリを準備していると想像してみましょう。

始めるには、まずビルドをアップロードしてテストの準備をする必要があります。

カバーするビルドのアップロードには、App Store Connectへのアップロード、テストの詳細の追加、テスト情報の追加など、3つの主要なステップがあります。

まず、Xcodeを使ってApp Store Connectにアップロードします。

では、Xcodeを開いて、アプリのアーカイブを作成して、配布の準備をしましょう。

そのために、まずアプリを構築したいアーキテクチャを選択します。

ここでは、任意のiOSデバイスarm64で、製品のトップメニューからアーカイブを選択します。

次に、TestFlightに送信するアプリとビルドバージョンを選択し、右側のアプリ配布ボタンをクリックします。

TestFlightビルドでは、内部テスターと外部テスターの両方とビルドを共有できるように、配布方法としてApp Store Connectを選択します。

テスターの種類については後で詳しく説明しますので、とりあえず「次へ」をクリックしましょう。

アップロードを選択して、ビルドをApp Store Connectに自動的に送信します。

アップロードする前に、Xcodeの横にあるアプリレコードを作成してください。

私たちはほとんどビルドを提出せず、あと数回クリックするだけです。

App StoreがXcodeのクラッシュオーガナイザーに配信する前にクラッシュレポートにシンボル名を追加できるように、アプリをアップロードするときにシンボルファイルを含めることをお勧めします。

また、Xcodeの配布アシスタントがアプリに有効なビルド番号があるかどうかを検出できるように、Manage VersionとBuild Numberも選択します。

アプリに以前に使用したような無効な番号がある場合、アシスタントは有効な番号に自動的にインクリメントするオプションを提供します。

デフォルトでは、署名の自動管理が選択されます。

Xcodeは私たちのプロフィールと証明書を管理することができ、これは素晴らしいことです。

そして、これを終えた後、Xcodeは私たちのビルドをApp Store Connectにアップロードします。

アプリがアップロードされると、TestFlightを使用してテストする準備が整いました。

Xcodeを使用してビルドをアップロードする場合、心に留めておくべきベストプラクティスがいくつかあります。

TestFlightを使用するには、必ず配布方法をApp Store Connectに設定してください。

バージョンとビルド番号に注意してください。

新しいビルドをアップロードするときは、常に前のビルドよりも大きい数値を持つビルド文字列を指定する必要があります。

証明書とプロファイルが最新であることを確認してください。

これはアップロードの問題の一般的な理由です。

情報が正しいことを確認する簡単な方法の1つは、Xcodeが署名を管理できるようにすることです。

テストのためにビルドを準備するために、さらに2つのことを行う必要があります。

Aneeshaは、テスト情報の追加方法とテストの開始方法を共有します。

テストの詳細を追加するには、まずApp Store Connectにアクセスしてビルドを表示します。

TestFlightにアクセスするには、App Store Connectアプリページを開き、上部のTestFlightセクションをクリックします。

アプリページのTestFlightセクションにあるApp Store ConnectモバイルアプリからTestFlightにアクセスすることもできます。

これで、フードトラックアプリのTestFlightセクションにアップロードされたビルドが表示されます。

TestFlightにアップロードされたすべてのビルドは、有効期限が切れるまで90日間アクティブです。

90日を超えてテストを続けたい場合は、追加のビルドをアップロードするだけです。

ここでは、ステータスや有効期限など、新しくアップロードされたビルドの詳細が表示されます。

ビルドをクリックして、テストの詳細を追加します。

テストの詳細を追加すると、テスターがアプリをテストするときに何に注意を払うべきかを知るのに役立ち、より価値のあるフィードバックを得るのに役立ちます。

先に進んで、このビルドのためにいくつか追加しましょう。

このアプリをリリースするのは初めてなので、それについて言及しましょう。

また、ユーザーがフードトラックのデザインを変更できるようにし始めたばかりなので、テストの詳細でも言及しましょう。

テスターがアプリをテストするときに最初に見るものであるため、ビルドに固有のテストの詳細を記入することは重要です。

良さそうですね、今、私たちは保存を押しました。

テストの詳細を追加する際に留意すべきベストプラクティスをいくつか紹介します。

ビルドごとにテストの詳細を更新します。

テストの詳細はビルドに関連付けられているため、これはテスターに有意義なフィードバックを提供する方法を伝える機会です。

テストの詳細を思いつくときは、シンプルに保つことをお勧めします。

短い文章や箇条書きを使って読みやすくし、潜在的なテスターを引き付けてみてください。

また、テストする特定の機能や、注意すべき既知の問題を呼び出す必要があります。

これは、テスターが何を探求すべきかを理解し、努力に集中するのに役立ちます。

最後に、ビルドをテスターと共有する前に、アプリのテスト情報を追加する必要があります。

これを行うには、一般情報の「テスト情報」セクションをクリックします。

ベータ版アプリの説明とメールアドレスを追加する必要があります。

ベータアプリの説明は、TestFlightアプリからテスターに表示され、電子メールで送信されたテスターのフィードバックは、ここに入力したフィードバックメールアドレスに送られます。

そして、今は必須ではありませんが、外部テスターにアプリを配布する前に、ベータアプリのレビュー情報セクションに記入する必要があります。

テスト情報ページは、アプリごとに1回だけ更新し、情報が変更された場合はもう一度更新する必要があります。

そして、それで、私たちのビルドはテストを開始する準備ができています。

ビルドがアップロードされ、テスト用に構成されているため、テスターを追加できるようになりました。

TestFlightには、内部と外部の2種類のテスターを追加できます。

私たちのアプリはまだかなり新しいので、チーム内の数人からフィードバックを得ることから始めましょう。

内部テスターとしてアプリに追加します。

内部テスターについてもう少し学びましょう。

内部テスターはApp Store Connectチームの一員であり、最大100人のチームメンバーをアプリの内部テスターとして指定できます。

各内部テスターは、最大30台のデバイスでビルドをインストールしてテストすることができ、これらのテスターはチームの一員であるため、すべての新しいビルドを自動的に配布することを選択できます。

内部テスターを追加するには、まず内部グループを作成する必要があります。

これを行うには、App Store ConnectのTestFlightセクションに移動し、内部テストの横にあるプラスボタンをクリックして、新しい内部テストグループを作成します。

グループは、反復可能なテストプロセスを作成できるため、強力なツールです。

グループ名を追加し、[自動配布を有効にする] ボタンがチェックされたままにして、[作成] をクリックします。

今、私たちは内部グループを持っています。

自動配布を有効にするため、ビルドはすでにこのグループに追加されています。

今後、この内部グループは、1つずつ追加することなく、アップロードしたすべてのビルドに自動的にアクセスできます。

グループが作成されたので、テスターを追加する必要があるので、テスターの横にある青いプラスボタンをクリックして、誰を追加できるかを確認しましょう。

管理者、アプリマネージャー、開発者、またはマーケティングの役割を持つすべてのApp Store Connectチームメンバーは、追加できるテスターとしてここに表示されます。

アプリごとに最大100人の内部テスターを追加できます。

ジェローム、メリッサ、そして私を選んで、このグループに追加しましょう。

今、私たちは社内グループのテスターです。

ステータス欄には、私たちが招待されたことがわかります。

テスターを追加すると、フードトラックアプリをテストするための招待メールが届きます。

メールには、TestFlightで私たちのアプリを見るためのリンクが含まれています。

テスターがTestFlightアプリを開いて招待を受け入れ、フードトラックアプリをインストールすると、最初に表示されます。

このセクションには、ビルドの設定時に追加したテストの詳細が含まれています。

そのため、アプリがインストールされる前から、テスターが貴重なフィードバックを提供する方法を理解するのを助ける機会がありました。

テスターは、アプリの詳細を表示することもできます。

たとえば、TestFlightのテスト情報セクションに追加したベータアプリの説明です。

ジェロームとメリッサが私たちの招待を受けてフードトラックアプリをインストールすると、最初のテスターがいます。

私たちのアプリが一部のテスターの手に渡った今、フィードバックがTestFlightでどのように機能するかを見るのに良い機会です。

テスターは複数の方法でフィードバックを提出できます。

まず、フィードバックの送信ボタンを備えたTestFlightアプリを介して。

この方法で提出されたフィードバックは、アプリのテスト情報セクションで指定したメールに送信されます。

テスターは、アプリのテスト中にスクリーンショットを撮ることもできます。

スクリーンショットのプレビューでは、テスターはマークアップを編集して追加して詳細情報を提供できます。

この方法では、テスターはスクリーンショットとコメントをTestFlightに直接共有するオプションがあります。

フードトラックアプリがクラッシュした場合、テスターはクラッシュレポートを提出できます。

彼らはレポートを送信し、クラッシュのコンテキストに関するフィードバックを追加することに同意することができます。

グループのページは、私たちのアプリのテスターエンゲージメントとフィードバックの概要を得るのに最適な場所です。

ステータス列を見ると、ジェロームとメリッサの両方が私たちのビルドをインストールし、それをテストしていることがわかります。

テスターによるセッション、クラッシュ、フィードバックの数、ビルドごとに帰属するセッションとクラッシュの数を確認できます。

調査すべきいくつかのクラッシュとフィードバックがあるようですので、それをやりましょう。

まず、左側のフィードバックセクションの下にあるクラッシュページに行きましょう。

ここでは、テスターが提出したすべてのクラッシュを確認し、表にまとめられたクラッシュの詳細をすばやく確認できます。

その後、上部のフィルターを使用して、プラットフォーム、ビルド、またはデバイスごとにクラッシュを表示できます。

このクラッシュを選択すると、タイムゾーン、バッテリーパーセンテージ、接続タイプなど、ジェロームが提出したクラッシュレポートの詳細を確認できます。

これらの詳細は、このアプリがクラッシュした理由を理解しようとすると、本当に役に立ちます。

同様に、スクリーンショットページに移動して、テスターから提供されたスクリーンショットのフィードバックを表示できます。

クラッシュフィードバックと同様に、デバイス、ビルド、OSバージョンなどのフィールドでフィルタリングして、フィードバックのサブセットを表示できます。

これは、次のビルドに加える可能性のある変更を知らせるのに役立ちます。

スクリーンショットを選択して、より綿密に検査することもできます。

スクリーンショットの詳細ビューから、右上隅のダウンロードボタンで画像をデバイスにダウンロードし、Xcodeで開くボタンを使用してXcodeオーガナイザーで開くこともできます。

Xcodeオーガナイザーでは、選択したスクリーンショットと、フードトラックアプリのその他の視覚的なフィードバックとクラッシュを見ることができます。

ここでは、開発チームにメモを書き、フィードバックに対処するにつれてフィードバックが解決されたことをマークすることができます。

それを見て、私たちはTestFlightでの最初のテストラウンドを通過しました。

私たちの内部テスターは、私たちに組み込むためにいくつかの本当に素晴らしいフィードバックを与えました。

TestFlightは、テストニーズを拡張してサポートするように設計されていることを覚えておいてください。

では、テストオーディエンスを拡大し、チーム外のテスターとアプリを共有しましょう。

これを行うには、外部テスターをビルドに追加します。

外部テスターは、アプリのベータテストに招待するチーム外のテスターです。

アプリごとに最大10,000人の外部テスターを招待できます。

そして、外部テスターでは、招待する2つの方法があります。招待またはパブリックリンクで、すぐにこれらの両方の違いに触れます。

外部テスターとのテストを開始する前に、ビルドをApp Reviewに提出してください。

これにより、TestFlightはテスターがテストに参加するための安全で信頼できる場所になります。

最後に覚えておくべきことは、TestFlightでは、テスターは料金を発生させることなくアプリ内購入体験をテストできます。

これは、彼らが店でライブになる前に、これらの経験を改善するのに本当に役立ちます。

ビルドがアプリレビューを通過したら、外部グループを作成し、テスターの追加を開始できます。

内部テストと同様に、外部テストセクションの横にある青いプラスボタンをクリックして、新しいグループを作成します。

私たちのアプリをテストするために何人かのシェフを招待しましょう。

先に進み、このグループのシェフテスターに電話して、[作成]をクリックします。

すべての外部グループについて、テスターのグループがアクセスするビルドを手動で追加する必要があります。

このグループのほとんどのセクションは内部グループに似ていますが、パブリックリンクと呼ばれる新しいセクションがあることがわかります。

パブリックリンクは、電子メールに加えて、外部テスターにアプリを配布する別の方法です。

電子メールの招待とは異なり、公開リンクを使用して招待するためにテスターの電子メールは必要ありません。

代わりに、登録制限のある特定のリンクを生成し、リンクをクリックした人は誰でも登録してアプリのテスターになることができます。

ソーシャルチャネルやメールキャンペーンなど、好きなようにリンクを共有することを選択できます。

登録すると、これらのテスターはフィードバックを提供する際に匿名性を維持するオプションがあります。

シェフテスターのための公開リンクを作成しましょう。

これを行うには、[パブリックリンクを有効にする]ボタンを選択します。

もう一度[有効にする]をクリックして、このグループの公開リンクを作成することを確認し、テスターの制限を設定します。

これは、このリンクを使用して登録できる最大人数です。

この制限は1まで低く、最大10,000まで設定できます。

私たちは100から始めるつもりです。

テスターの小さなグループから始めて、拡大することは常に良いことです。

そして、心配しないでください。グループを作成してテストが進行したら、いつでも制限を編集できます。

[制限の設定]をクリックすると、テスターを招待するために使用できるURLが表示されます。

ソーシャルメディアでリンクを共有して、フードトラックアプリをテストするように人々を招待します。

誰かがリンクをクリックすると、まだダウンロードしていない場合はTestFlightをダウンロードするように指示され、その後、フードトラックアプリをダウンロードできます。

外部テスターから提供されたフィードバックは、内部テスターのフィードバックやクラッシュと同じ場所に表示されるため、何をすべきか、アプリを改善するためにそれをどのように使用するかをすでに知っています。

この情報と診断を使用してフードトラックアプリを改善し、さらに数回のテストを経たら、App Storeに公開する準備が整いました。

テストにTestFlightを使用したため、ビルドはすでにApp Store Connectにアップロードされているため、App Storeで公開するために提出するにはいくつかの手順が必要です。

App Store ConnectのApp Storeタブに移動し、ページの詳細を記入します。

繰り返しになりますが、すでにビルドをTestFlightにアップロードしているので、再度アップロードする必要はありません。

代わりに、プロンプトが表示されたら、ドロップダウンメニューからビルドを選択します。

完了したら、[レビューのために送信] をクリックし、それだけです。

テストは1つの経験ではないことを覚えておいてください。

これは、アプリがApp Storeで公開された後でも、継続的な開発サイクルの一部としてのベストプラクティスです。

TestFlightをテストおよびリリースプロセスに組み込むことを検討する際には、テスト作業をさらに簡単にするための追加の方法を共有したいと考えました。

そのために、私はそれをジェロームに返します。

今年は、アプリをTestFlightとApp Store Connect、Xcode Cloudにアップロードする簡単な方法も導入しました。

Xcode Cloudは、Xcodeに組み込まれた継続的な統合および配信サービスであり、Apple開発者向けに特別に設計されています。

アプリを構築し、自動テストを並行して実行し、テスターにアプリを提供するのに役立つクラウドベースのツールをまとめることで、高品質のアプリの開発と配信を加速します。

それはTestFlightの完璧なコンパニオンです。

Xcode Cloudは、どのアクションを実行するか、いつ実行するかをXcode Cloudに指示する構成であるワークフローで動作します。

フードトラックのワークフローを作りましょう。

これはデフォルトのワークフローです。

ワークフローは、開始条件、ビルド環境、実行するアクションのセット、および展開や通知などのポストアクションで構成されています。

デフォルトでは、ポストアクションはありませんので、ワークフローを編集し、TestFlight展開のためのポストアクションを追加しましょう。

まず、アーカイブアクションで、TestFlightビルドの展開準備を変更します。

このワークフローを内部展開にのみ使用したいので、内部テストのみのオプションを選択します。

外部テストやApp Store用にビルドを準備したい場合は、TestFlightとApp Storeのオプションを選択します。

その後、ポストアクションプラス記号をクリックして、アーカイブステップの後にやりたいことを選択できます。

その場合、TestFlightの内部テスト。

次に、このワークフローの特定のテスターグループを選択し、先ほど作成したQAチームで[追加]をクリックします。

私のワークフローが私の開始条件によってトリガーされると、Xcode Cloudは私のアプリを構築し、自動的にApp Store Connectにアップロードし、私のQAチームにTestFlightの新しいビルドが通知されます。

保存をクリックするだけで、それだけです。

Xcode Cloudは、Xcodeから直接アクセスでき、TestFlightアプリのすぐ横にあるApp Store Connectからもアクセスできます。

Xcode Cloudとワークフローの詳細については、WWDCのビデオをご覧ください。

TestFlightを継続的な開発サイクルに組み込む際に、心に留めておくべきことがいくつかあります。

小さく始めて、それから拡大します。

アプリに大きな変更を加えたり、新機能を導入したりする場合は、10,000人のテスター全員に配布する前にこれらの変更をテストできるように、時間の経過とともにテスターを追加することを検討してください。

外部テスターも潜在的なユーザーであるため、彼らの経験に留意したいことを覚えておいてください。

各ビルドとテストで達成したいことを知ることは、よりスムーズなテストプロセスを作成するのに役立ちます。

グループを使用して反復可能なテストプロセスを作成します。グループはテスターを管理し、ビルドをすばやく配布するのに最適な方法です。

グループを設定してテスターを追加すると、テストサイクルを開始し、新しいビルドをテスターとより迅速に共有できます。

そして最後に、開発プロセスでXcode Cloudを試してみてください。

これは、TestFlightのワークフローを自動化するのに役立ち、リリース間の時間を短縮し、アプリの全体的な品質を向上させることができます。

このプレゼンテーションが、TestFlightを使用してテスターを巻き込み、ベータアプリに関する貴重なフィードバックを得る方法をよりよく理解するのに役立ったことを願っています。

TestFlight、ドキュメントへのリンクなどの詳細については、Apple開発者のウェブサイトをご覧ください。