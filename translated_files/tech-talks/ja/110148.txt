110148

ジョン・デイビス：こんにちは、SafariとWebKitチームのウェブテクノロジーエバンジェリスト、ジョン・デイビスです。

iOS用のSafari拡張機能を構築して展開する方法についてのあなたのガイドになることに興奮しています。

さて、iOS用の拡張機能にはいくつかの種類があります。

数年前からiOSにコンテンツブロッカーがありましたが、これはリソースの負荷をブロックするための強力なルールを設定できる一種の拡張機能です。

しかし、私はSafariのウェブ拡張機能についてあなたに話すためにここにいます。

それらは昨年macOS Big Surで導入され、この秋、私たちはそれらをiOS 15とiPadOS 15に持ち込みました。

これは、他のブラウザで動作するウェブ技術を使用する一種の拡張機能であり、私たちのユーザーはそれらを愛しています。

App Storeで最も人気のあるカテゴリで、他のアプリと同様に簡単にインストールできます。

それは、Safariのウェブ拡張機能がアプリで配布されているからです。

そして、それはあなたがApp Storeにいることのメリットを得ることを意味します。

ユーザーは拡張機能を発見でき、拡張機能を事前に簡単に販売できます。アプリ内支払いなどの強力な機能を利用して、拡張機能の高度な機能のロックを解除したり、TestFlightを使用してベータプログラムを実行したりすることもできます。

しかし、あなたは「それはすべて順調で良いことですが、私はウェブ開発者であり、アプリ開発者ではありません」と言っているのかもしれません。

まあ、私も！そして、彼らは私にあなたのガイドになるように頼んだ。

だから私はあなたがXcodeを学ぶのを手伝うためにここにいます、そして私たちはゼロから新しいプロジェクトを構築するつもりです。

また、Safariのプライバシー保護許可モデルと、そのアプリレビュープロセスを通過するためのヒントとともに、拡張機能の提出方法についても触れます。

では、Xcodeで作業を始めましょう。

これを行うには、App Storeからダウンロードしてインストールする必要があります。

App Storeを起動し、検索で「Xcode」と入力すると、すぐに出てきます。

そして、[取得]ボタンをクリックし、[インストール]をクリックするだけです。

今、それはしばらく時間がかかるかなりのダウンロードですが、起動できるようになると、Xcodeはコマンドラインツールをインストールするように促します。

インストールをスキップした場合は、後でターミナルのコマンドラインから簡単に実行できます。

「Xcode-select」と入力してインストールフラグを追加するだけで、インストールプロセスが開始されます。

今、私の環境は準備ができているので、今はこのコマンドを実行しませんが、Safari Web拡張コンバータと呼ばれる重要なツールが含まれているため、インストールされていることを確認する必要があります。

別のブラウザ用のウェブ拡張機能や、iOSのSafariをサポートしてアップグレードしたいmacOSのSafari用に書いたウェブ拡張機能を書いた場合に便利です。

今、私はドキュメントフォルダに簡単なデモWeb拡張機能を持っており、このhello-world拡張機能は別のブラウザ用に書かれており、単にポップアップに「Hello World」メッセージが表示されます。

これで、コンバーターツールを使用して、iOSで動作するようにアップグレードできます。

ターミナルでは、Xcodeのように「xc」と入力するだけで、「xcrun」です。

そして、「safari-web-extension-converter」とプロジェクトへの道筋。

macOSでSafari用に書かれた拡張機能がある場合は、コンバーターツールを使用してアップグレードすることもできます。

「Xcrun safari-web-extension-converter」と入力し、rebuild-projectフラグとそれに続くmacOS拡張機能へのパスを追加するだけです。

しかし、Hello World拡張機能で実行すると、コンバータツールが何をするかを実際に見てみましょう。

リターンを押すと、プロセスが開始されます。

そして、それが実際にやっていることは、拡張機能をiOSとmacOS用にコンパイルして実行できるアプリプロジェクトにまとめることです。

さて、しばらくターミナルに切り替えて、iOS拡張機能に非永続的な背景ページが必要であることを示す警告があるこのメモを指摘したいと思います。

これは、基本的に、拡張機能がiOSで機能することを確認するために確認する必要があるもののやることリストを提供しているので、実際には本当に素晴らしいです。

Xcodeに戻りましょう。 

この拡張機能はほぼ準備ができています。

バックグラウンドスクリプトは、非永続的な方法で実行するようにすでに設定されています。

Safariにそのように実行するように伝える必要があります。

だから、これをiOSで機能させるために必要なのは、マニフェストファイルを編集することだけです。

そして、バックグラウンドセクションでは、falseの値を持つ永続キーを追加します。

そして、それだけです!

シミュレーターでこれを実行してみましょう。

ビルドターゲットメニューを使用して、iPhone 13 Proを選択します。

今、私はすでに多くのシミュレータをインストールしていますが、テストしたいものをダウンロードするには、追加のシミュレータを追加する必要があるかもしれません。

だから私はiPhone 13 Proを選択し、ビルドと実行ボタンをクリックします。再生ボタンのように見えるものです。

そして、これは私たちのアプリを構築し、シミュレーターで起動します。

ステータスバーの右上にあるステータスを確認できます。

さて、シミュレーターに切り替えて、アプリがインストールされて起動するまで待つ必要があります。

起動したら、設定アプリに切り替えて、Safariセクションを見つけて、拡張機能をタップして、Hello World拡張機能をオンにすることができます。

今、私たちはSafariでそれを試すことができます。

Safariを起動し、Aaメニューをタップします。

そこには、Hello World拡張機能があり、私はそれをタップすることができ、許可を求められます。

それについては後で詳しく説明しますが、今のところは「Allow For One Day」を選択します。

そして、私たちはそこに行きます。

「ハローワールド！」ポップアップのメッセージ。

そして、それはあなたが別のブラウザのために書かれたウェブ拡張機能を変換するのがどれほど簡単かです。

そこで、Open Graphメタデータのプレビューを構築するプロジェクトのアイデアがありました。Twitterのようなソーシャルメディアサイトでプレビューを表示するために使用されるのと同じメタデータです。

この素敵な画像、タイトル、ウェブページの説明が表示されます。

だから、ポップアップを使ってそのデータをプレビューできる拡張機能を構築したいと思います。

だから、それが私たちが今日構築しようとしているものです。

では、Xcodeで新しいプロジェクトを作成することから始めましょう。

マルチプラットフォームの下のSafari拡張機能アプリを選択し、[次へ]をクリックします。

製品名には「Open Graph Preview」を使用します。

すでに私のチームが記入し、逆ドメイン規約を使用して組織識別子が入力されています。

言語をSwiftのままにして、[次へ]をクリックします。

今、それはプロジェクトを保存する場所を求めています - デスクトップは正常に動作します - そして、私は「MacでGitリポジトリを作成する」を有効にしておくつもりです - 私はバージョン管理が組み込まれているのが大好きです - そして、私は作成をクリックします。

そして、これはテンプレートから私たちのためにプロジェクトを生成します。

さて、先に進む前に、Xcodeの概要を簡単に説明しましょう。

ウィンドウの左側には、プロジェクトのすべてのリソースが整理されたナビゲーションサイドバーがあります。

中央には、ナビゲーターサイドバーから選択したファイルのメインエディタがあり、右側には、編集中のファイルに基づいて変更されるインスペクタサイドバーがあります。

検査官のサイドバーは必要ありませんので、もう少し作業するスペースがあるように、先に進んで隠します。

それでは、新しいSafariウェブ拡張プロジェクトを構成するファイルを見てみましょう。ナビゲーターサイドバーの上部にプロジェクトファイルがあります。

それを選択すると、メインエディタがプロジェクトの設定オプション画面に開きます。

その下には共有(アプリ)フォルダがあり、これにはアプリの起動画面のリソースがあります。

リソースフォルダの横にある詳細表示三角形をクリックすると、単なるウェブリソースであることがわかります。

実際、編集できるHTMLファイルに過ぎず、テンプレートはマークアップ、スタイル、スクリプトを簡単にカスタマイズできるように設定します。

共有(拡張機能)フォルダには、拡張機能のすべてのリソースがあります。

そして、リソースフォルダを展開すると、Web拡張機能のすべての使い慣れたファイルが表示されます。

マニフェストは、バックグラウンドスクリプト、コンテンツスクリプト、ポップアップファイルです。

iOS（アプリ）フォルダとmacOS（アプリ）フォルダにはプラットフォーム固有のリソースがあり、その下にiOS（拡張機能）フォルダとmacOS（拡張機能）フォルダには、それらのプラットフォームの拡張機能固有のリソースがあります。

このプロジェクトのためにそれらを心配する必要はないので、すべての作業が共有（拡張機能）ファイルになるので、先に進んでそれらを片付けます。

そして、マニフェストファイルから始めましょう。

また、テンプレートには、プロジェクト情報から名前と説明を記入するなど、始めるために必要なすべてが用意されていることがわかります。

その下に、いくつかのデフォルトのアイコンが指定されています。プロジェクトに独自のアイコンを提供することを忘れないでください。

そして、ここでは、バックグラウンドスクリプトを提供し、非永続的な方法でバックグラウンドスクリプトを実行するようにすでに設定されていることがわかります。

さて、このプロジェクトでは、実際にはバックグラウンドスクリプトを必要としないので、先に進んでマニフェストファイルからこのエントリを削除し、先に進んでバックグラウンドスクリプト自体を削除し、それをゴミ箱に移動します。

次に、コンテンツスクリプトを設定し、ここでJavaScriptファイルと注入できるWebサイトのドメインパターンを宣言します。

さて、このツールをユーザーが使用したいどのサイトでも使用できるようにしたいので、実際にここで「example.com」をアスタリスクに変更して、任意のドメインと一致できるようにします。

その下に、ブラウザのアクションセクションを宣言し、ここでは「ポップアップ」ファイルを定義し、次にデフォルトのツールバーアイコンのセットを定義します。繰り返しになりますが、プロジェクトに独自のアイコンを提供することを忘れないでください。

そして最後に、アクセス許可キーがあり、使用するアクセス許可としてactiveTabを追加します。

なぜactiveTabなのか？

あなたが尋ねてくれてとてもうれしいです。

拡張機能が使用できるさまざまな権限を簡単に見てみましょう。

Safariの拡張機能は、ユーザーがコントロールできるように設定されています。

最初にユーザーインタラクションなしでは機能しないので、ユーザーを訓練するために最初の使用時にバッジが付きます。

許可はウェブサイトごとに付与されます。つまり、ウェブサイトの許可は、ユーザーが制御するためのSafariの設定と設定に表示されます。

今、見る許可の4つの楽しい味があります。

それぞれに目を通しましょう。

最初のタイプの権限は、スクリプトインジェクション権限です。

これにより、マッチキーにリストされているウェブサイトのドメインに基づいて、ユーザーが閲覧しているページにJavaScriptやスタイルシートを注入することができます。

ユーザーが閲覧しているWebサイトがマッチキーのパターンと一致すると、スクリプトを注入する拡張機能がツールバーにバッジされます。

ユーザーは拡張機能をクリックして有効にする必要があります。

そして、それは常にそこに座って、ユーザーによって有効になるのを待っています。

次のタイプの許可は暗黙の許可です。

これで、マニフェストファイルで宣言された暗黙のアクセス許可にはいくつかの種類があります。

私がここで強調した最初のものは非センシティブで、追加の特権を必要としません。

そして、2番目のタイプは、ウェブサイト識別データを持っているため、機密性の高い許可であり、これはユーザーのプライバシーを保護する方法の1つです。

APIを呼び出すと、データとのコールバックを待ちます。

ユーザーは拡張機能と対話した後にプロンプトが表示され、応答するのに約1分かかります。

彼らがそれを承認すると、コールバックが満たされ、データが返されます。

彼らがすでに承認したものはすべて、すぐに満たされます。

次のタイプの許可は明示的な許可であり、拡張機能自体が許可を要求しているため、これは明示的です。

プロンプトは常にモーダルに表示され、ユーザーではなく、許可を要求する拡張機能自体であるため、バッジはありません。

そして、最後のタイプのパーミッションは、アクティブなタブパーミッションです。

これは、アラートを避けたい場合は、アクティブなタブが答えである特別なケースです。

ユーザーはツールバーを介して拡張機能を操作する必要があるか、Macではキーボードショートカットまたはコンテキストメニューを使用できます。

これにより、現在のタブの現在のドメインのタブ権限が付与されます。

そして、それは私たちが今日使いたいものです。

では、コンテンツスクリプトのコーディングに移りましょう。

また、コンテンツスクリプトテンプレートは、メッセージを送信およびリッスンするように設定されています。

これで、コンテンツスクリプトからメッセージを送信する必要はありませんが、メッセージを聞く必要があります。

コンテンツスクリプトが最初に行う必要があるのは、ユーザーが閲覧しているページからOpen Graphメタデータを取得することです。簡単なDOM APIを使用して、OGタイトル、説明、画像に適したメタタグを見つけることができます。

さて、拡張機能の仕組みでは、ユーザーは拡張機能をタップしてポップアップを開き、現在のページからOpen Graphデータをコンテンツスクリプトに尋ねるのがポップアップスクリプトの仕事になります。

だから、このリスナーコールバックでは、魔法の言葉のメッセージを聞きたいです。

さて、魔法の言葉のないメッセージを受け取ったら、私たちは何もしません。

実際、私たちはここで無効に戻ります。

しかし、マジックワードのメッセージを受け取ったら、メタタグからデータを送り返します。

そして、コンテンツスクリプトで行う必要があるのはそれだけです。

では、ポップアップの設定に移り、ポップアップHTMLファイルから始めましょう。

スタイルシートとポップアップのJavaScriptがここに含まれています。

だから、ウェブ開発者にとって、あなたは家にいるように感じるでしょう。

さて、このファイルのマークアップのために、タイトルと説明と画像のプレビューのためにいくつかのプレースホルダ要素を設定する必要があります。

これで、タイトル、説明、画像のプレースホルダ要素があります。

次に、ポップアップのスタイルシートにいくつかの調整を行います。

ここでは、すべてのプラットフォームで見栄えを良くするために、いくつかの小さな調整を行うだけです。

そして最後に、スペースを埋め、アスペクト比を維持するために、画像のレスポンシブデザインレイアウトを設定する必要があります。

最後に、ポップアップスクリプトを編集することで拡張機能の中心にたどり着き、まずポップアップHTMLファイルで定義したプレースホルダ要素への参照を取得する必要があります。

次に、コンテンツスクリプトにメッセージを送信し、そのためにはアクティブなタブを照会する必要があります。

したがって、現在のウィンドウでアクティブなタブを照会するには、tabs.query APIを使用します。

そして、tabs.query APIでは、現在のウィンドウのアクティブなタブでフィルタリングします。

正しいタブができたら、メッセージを送信できます。

そして、メッセージを送信する際に、現在のタブIDと、もちろん魔法の言葉を渡します。

次に、応答を受け取ったら、プレースホルダ要素をデータで更新するだけです。

それでおそれ！

では、シミュレーターで拡張機能を実行してみましょう。

繰り返しになりますが、ターゲットメニューから、iPhone 13 Proシミュレーターを選択します。

ビルドと実行ボタンをクリックしてプロセスを開始し、シミュレータに切り替えて、アプリが起動するのを待ちます。

起動したら、設定アプリで新しい拡張機能を有効にすることができます。

では、設定に切り替えてSafariにスクロールしましょう。

次に、それをタップして拡張機能をタップし、Open Graph Previewでオンに切り替えることができます。

では、Safariを起動して、Aaメニューをタップします。

そして、メニューにはOpen Graph Previewがあります。

今、これをタップすると、コンテンツスクリプトの許可リクエストが表示されます。

「1日を許可する」を選択します。

そしてビンゴ、このページのオープングラフデータのプレビューがあります。

では、別のページで試してみましょう。

再びAaメニューから、「グラフプレビューを開く」をタップし、「1日許可」をタップします。

そして、私たちはそれを持っていますが、それは全く正しくありません。

私たちは壊れたイメージを持つべきではありません。

だから、ここで何が起こっているのかを把握するために、私はSafariでウェブインスペクタを使用することができます。

有効にしていない場合は、Safariの環境設定に移動し、[詳細設定]タブでメニューバーの[開発表示]メニューを有効にします。

次に、開発メニューから、シミュレータのコンテンツのWebインスペクタを選択できます。

そして、それを行うと、画像が読み込まれなかったことが簡単にわかります。

したがって、URLが間違っている場合、それはおそらくコンテンツから来ています。

では、webkit.org用の別のWebインスペクタを開きましょう。

これで、ogメタタグデータを検索できます。

そして、ここにはタイトルがあり、説明があることがわかります-ああ、でも画像が欠けています。

そして、それが起こっていることです。

処理していない未定義のケースがあります。

だから、Xcodeに戻って、私たちがする必要があるのは、その未定義のケースを処理することだけです。

これで、これをもう一度実行してみます。

[ビルドと実行]ボタンをクリックすると、[置換]をクリックしてシミュレータで置き換え、シミュレータで起動したら、Safariに戻ってもう一度試すことができます。

Aaメニューから、Open Graph Previewとビンゴを選択します。

完璧！

タイトルと説明が表示されますが、画像があるページで動作することを確認する必要があります。

完璧！

まあ、シミュレータで動作させることは、多くのデバイスでテストするのに最適な方法ですが、実際のデバイスでテストすることは常に良い考えです。

だから私はiPhoneを手元に持っています。

Xcodeに戻って、ターゲットメニューを選択し、iPhoneを選択します。

では、このデバイスでビルドして実行して起動しましょう。

デバイスで実行して起動したら、設定で有効にする必要があります。

では、設定アプリに戻りましょう。

Safariと拡張機能とOpen Graph Previewで、オンに切り替えます。

さて、Safariをもう一度起動して、Aaメニューをタップします。

そして、私は拡張機能を見て、それをタップし、1日を許可することができます。

そして、それは完璧に動作します。

すべてのケースが機能していることを確認するために、他のいくつかのページでこれを試してみましょう。

ここdeveloper.apple.comでは、apple.comドメインの一部であるため、追加の許可を求めませんでした。

Webkit.orgで試してみましょう。

そして、ここでもう一度Aaメニューをタップし、グラフプレビューを開くと、これは別のウェブサイトであるため、再びプロンプトが表示されます。

完璧。

そして、画像付きの投稿にもう1つ。

Aaをタップし、グラフプレビューを開きます。

完璧！

だから、素晴らしい。

アプリと拡張機能がシミュレータと実際のデバイスで動作している今、私たちはこれをApp Storeに提出する準備ができていると思います。

まず、提出する前に注意すべき簡単な詳細があります。

プロジェクト設定で、iOSアプリのターゲットを選択し、必ずアプリカテゴリを設定してください。

開発者ツールを選択します。

次に、[製品] メニューから [アーカイブ] を選択します。

また、ビルドプロセスと同様に、ステータスバーの右側に進捗状況が表示されます。

準備ができたら、提出する準備ができているビルドアーカイブを選択し、[アプリの配布]ボタンをクリックします。

アシスタントから、配布方法の下でApp Store Connectを選択し、[次へ]をクリックします。

目的地については、アップロードを残して[次へ]をクリックします。

そして、アプリレコードを準備するためにApp Store Connectと通信し始めます。

ここでは、名前を確認し、App Store Connectアカウントの他のアプリで使用されるSKUの中でSKUが一意であることを確認することができます。

次に、[次へ]ボタンをクリックすると、レビューのためにアプリレコードの準備が始まります。

しかし、まず、それが求めるいくつかの配布オプションがあります。

これらはすべて非常に役立つので、私はそれらを残して[次へ]をクリックします。

そして、私は間違いなく署名を自動的に管理し続け、[次へ]をクリックしたいです。

これで、アプリのコンテンツと拡張機能のコンテンツを確認する機会があります。

満足したら、[アップロード]をクリックします。

アップロードが完了するのを待っている間、App Storeのレビューを通過するためのヒントを簡単に見てみましょう。

まず、すべてのコードと、プロジェクトで使用されるコンテンツ、画像、またはその他の資産を所有していることを確認してください。

呼び出されるAPIまたはJavaScriptフレームワークの許可を持っているか、または証明できることを確認してください。

また、カスタムアイコンを提供し、アプリに一意の名前を使用することを忘れないでください。App Storeで目立つようにしましょう。

そして、絵文字でウェブを飾らないでください。

最高のウェブ拡張機能 - 特集されるもの - は、ユーザーに役立つものを提供します。

また、別のブラウザのウェブ支払いや寄付のコードがある場合は、App Storeレビューのために無効にする必要があります。

拡張機能の先行販売は簡単で、App Storeで非常に人気があります。

そのアップロードプロセスを確認しましょう。

アップロードは正常に完了しました。

すごい。

Safariでは、App Store Connectにログインし、My Appsをクリックすると、作成された新しいアプリレコードを見ることができます。

そして、Open Graph Previewをクリックすると、App Storeの追加情報を提供できます。

アプリにいくつかのプレビュー画像を提供したいと思うでしょう。

そして、プロモーションテキストの下で、このリリースの新機能に関する説明的な情報を提供する必要があります。

説明の下で、この拡張機能がユーザーに何をするかの完全な説明を提供し、いくつかのキーワードを指定することもできます。

100文字の制限に注意してください。正確である必要があります。

また、ユーザーが拡張機能のサポートを受けることができるページ専用のURLも提供したいと思うでしょう。

また、オプションで、マーケティングページのアドレスを含めることもできます。

次に、アップロードツールを使用して、アプリの正しいアップロードを選択します。

そして、それをすべて記入したら、[レビューのために提出]ボタンをクリックして、アプリレビュープロセスを開始できます。

そして、Safariのウェブ拡張機能を構築して提出するのは簡単です。

iOSとMacOSの両方の拡張機能を提出し、このセッションに関連するリソースをチェックすることをお勧めします。

そして、必ずフィードバックを提出してください。ご連絡をお待ちしております。

フィードバックアシスタントを使用して、バグを提出したり、機能のリクエストを行うことができます。

そして、見てくれてありがとう。