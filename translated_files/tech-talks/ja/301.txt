301

Extensible Enterprise Single Sign-Onの紹介へようこそ。

私の名前はマット・チャンダです。

私はコンサルティングエンジニアであり、シングルサインオンを作成したチームの一員です。

このビデオでは、シングルサインオンの概要を説明し、拡張機能の作成方法、アプリでの使用方法、展開方法、ベストプラクティスについて話し合います。

ご存知のように、ほとんどすべてのエンタープライズアプリやウェブサイトが機能するために認証する必要があります。

これらのアプリは、クラウド、オンプレミス、またはその両方の記録システムを接続します。

しかし、最近、認証はますます複雑になっています。

OpenID Connect、Kerberos、SAMLなど、複数の認証方法を検討する必要があります。

現在、オンプレミスシステムに認証をフェデネートする必要があるクラウドリソースがあります。

また、デバイスをもっと信頼する必要はなく、パスワードがないこともあります。

組織はこれらの課題にどのように対処しますか?

彼らは助けるためにシングルサインオンを使用します。

シングルサインオンにより、一連のアプリやWebサイトが同じ資格情報を使用してシームレスに認証できます。

これにより、ユーザーエクスペリエンスが向上します。

一部の企業はパスワードを持っていないため、シングルサインオンを使用する必要があります。

問題は、すべてのアプリが自分のニーズをサポートしているわけではないということです。

既存の認証ソリューションは、多くのユーザーの摩擦を引き起こす可能性があります。

複数のポップアップ、繰り返しプロンプト、アプリ間のバウンスがあります。

安全でユーザーフレンドリーな真のシングルサインオンを持つ方法はありませんでした。

今日は、iOS 13、iPadOS、macOS Catalinaに追加した強力な新しいシングルサインオン機能についてお話ししたいと思います。

これは、新しい拡張可能なSSO MDMプロファイルと関連するドメインを展開することで有効になります。

ユーザー登録でも機能します。

拡張機能は、UIの表示、Webページの読み込み、または要求を黙って処理することを選択できます。

これらの変更により、ユーザーフレンドリーで安全なSSOソリューションを作成して使用できるようになると考えています。

新しい拡張機能は、iOS、iPadOS、macOSで動作します。

ネイティブアプリとSafariの両方がIDプロバイダーで認証できるようにします。

拡張機能はネイティブコードです。

多要素認証を有効にしたり、キーチェーンにアクセスしたり、安全な飛び地で生成されたキーを使用したりできます。

管理対象アプリの設定を活用し、アプリごとのVPNを使用することもできます。

Appleでサインインについて疑問に思うかもしれません。

シングルサインオンは、Appleでサインインとは異なります。

Appleでサインインは、消費者向けアプリを対象としており、さまざまな問題に対処します。

まず、アカウントのプロビジョニングの問題を解決することを目的としています。

どこでも新しいアカウントを作る代わりに、代わりにApple IDを使ってください。

また、サイトがすべての個人情報を必要としないプライバシーの問題を解決します。

一方、シングルサインオンを使用すると、それらを必要とするアプリに既存のエンタープライズアカウントを使用できます。

エンタープライズアプリは、あなたが誰で、何を許可されているかを正確に知る必要があります。

導入したので、シングルサインオンが実際にどのように見えるか興味があるかもしれません。

見てみましょう。 

iOSでは、認証が必要なウェブページを読み込むことから始めましょう。

拡張機能により、資格情報の入力を求められます。

ユーザー名を入力します...

そして今、私のパスワード...

パスワードを保存すると、ページが読み込まれます。

ページが読み込まれた後に私のユーザー名が表示されることに注意してください。

では、ネイティブアプリに行って、保護されたリソースにアクセスしてみましょう。

ここでシングルサインオンが行われます。

ユーザーに再度資格情報の入力を求められるべきではありません。

このアプリには2つのボタンがあります。

同じクレデンシャルで保護されているネットワークから画像をロードしようとします。

ハンバーガーから始めます...

そして今、タコス...

そして、それはiOSでのシングルサインオンです。

さあ、macOS用です。

繰り返しますが、保護されたWebページをロードし、資格情報に挑戦しようとします。

だから、Safariを開いて、私のサイトをロードさせてください...

では、ユーザー名を入力します...

そして、私のパスワード...

保存すると、ページが読み込まれます。

素晴らしい、これは最初のログインですが、他の場所で使用するまではシングルサインオンではありません。

では、ネイティブアプリで他の保護されたリソースにアクセスしてみましょう。

だから私はハンバーガーから始めます。 

いいね、そして今はタコス。

そして、彼らが期待どおりにロードされたことがわかります。

最初にブラウザにログインしていなかったら、同じ認証ダイアログがネイティブアプリに表示されていただろう。

ログイン後、資格情報が保存され、画像へのアクセスが許可されます。

そして、それはmacOSのシングルサインオンです。

そして今、私たちのスライドに戻ります。

MDM管理デバイスでシングルサインオンを使用するには、これらのものが必要です。

あなたはすでにアプリやウェブサイト、IDプロバイダーを持っている可能性があります。

だから今日、私たちはそれらを接着するために拡張に時間を費やします。

では、それはどのように機能しますか?

拡張機能には、リダイレクトとクレデンシャルの2種類があります。

リダイレクト拡張機能から始めましょう。

リダイレクト拡張機能は、最新の認証方法を対象としています。

例としては、OpenID Connect、OAuth、SAMLなどがあります。

これらの方法はウェブ技術に基づいており、フェデレーションで頻繁に使用されます。

Safariで例を見てみましょう。 では例を見てみましょう。

リダイレクト拡張機能は、iOS、iPadOS、macOSのURLSessionでも機能します。

ログインページを読み込む代わりに、OSはWebリクエストを拡張機能にリダイレクトします。

拡張機能は、URL、ヘッダー、および本文を受け取ります。

拡張機能開発者は、IDプロバイダーとの認証プロセスを完了する責任があります。

準備ができたら、SafariにURL応答を返します。

この応答は大きくないことに注意してください。

これは、小さなWebフォームがSAML応答やその他のトークンをWebサーバーに投稿することを目的としています。

巨大な1megのウェブページには使用しないでください。

では、これらのシングルサインオン拡張機能は何ができますか?

彼らはいくつかのことをすることができます。ここにいくつかあります。

ネイティブUIを提示するか、多要素を要求するかを選択できます。

セキュアエンクレーブでデバイス固有のキーを生成したり、信頼スコアデータで認証要求を補完したりできます。

他のidP固有のセキュリティ機能も実装できます。

彼らはウェブページをロードし、フェデレーションのリンクをたどることができます。

また、macOSでは、IDプロバイダーがサポートしている場合は、WebAuthNを使用することもできます。

リダイレクト拡張機能は、ネイティブアプリでも機能します。

ただし、ネイティブアプリには追加のオプションがあります。

彼らは拡張機能に操作を送ることができます。

アプリは、ログインまたはトークンを静かに更新するのに良い時期を決めることができます。

拡張機能は、再度認証する必要があるのか、それとも保存されたトークンを返す必要があるのかを知ることができます。

また、エンタープライズアプリ開発者にとって、これは拡張機能を認証クライアントとして使用できることを意味します。

各アプリに認証ライブラリのコピーを含め、それを維持する必要がなくなります。

流れをチェックしてみましょう。

Safariに似ていますが、ネイティブアプリはログインなどのコマンドを送信してプロセスを開始できます。

繰り返しになりますが、拡張機能は認証プロセスを完了する責任があります。

そして、準備ができたら、ネイティブアプリに必要なトークンでURLレスポンスを返すことができます。

また、マネージドアプリ設定を使用して、使用するIDプロバイダーURLをネイティブアプリに通知することをお勧めします。

拡張機能の構築方法を紹介する前に、これらの拡張機能の1つを企業に展開する方法について話しましょう。

MDMペイロードと関連ドメインの2つの要件があります。

MDMペイロードから始めましょう。

これは、iOS 13、iPadOS、およびmacOS Catalina用の新しいExtensible SSOペイロードによって有効になります。

ここで例をチェックしてください。

識別子はcom.apple.extensiblessoで、このペイロードはMDMによって配信されなければなりません。

チーム識別子や先ほど話したタイプなど、使用する拡張バンドル識別子を指定します。

この場合、リダイレクト拡張機能。

拡張機能にルーティングするトラフィックを決定するURLプレフィックスが一覧表示されます。

そして最後に、MDMからの拡張機能固有の値のオプションの辞書。

この例では、ユーザー名を送信しています。

2番目の要件は、関連するドメインを使用することです。

これは拡張機能開発者から始まります。

関連するドメインは、あなたまたはあなたのIDプロバイダーがリダイレクトされているトラフィックを所有していることを証明する必要があります。

また、他の誰かがあなたのトラフィックをリダイレクトするのを防ぎます。

Appleプラットフォームでは、拡張機能はホストアプリ内に埋め込まれています。

関連するドメインを設定するには、拡張機能を含むホストアプリで関連するドメイン機能を設定する必要があります。

Authsrvサービスタイプで新しいエントリを追加し、コロンを追加し、アプリで使用されるドメイン名を追加します。

複数のドメインが必要な場合は、それぞれを別々に入力してください。

関連するドメインでは、ホストアプリIDがサーバー上のAppleアプリサイトのアソシエーションファイルにリストされていることも必要です。

このサーバーは、デバイスからアクセスでき、有効なSSL証明書を持っている必要があります。

ユーザー承認またはカスタムルート証明書は、Appleアプリのサイトアソシエーションファイルではサポートされていません。

場合によっては、アプリの開発時に、関連するドメインが不明な場合があります。

これの良い例は、IDプロバイダーが拡張機能を開発するが、各顧客のホストが異なる場合です。

彼らはエンタイトルメントファイルに数千をリストすることができないので、これが起こると、macOSで新しい管理された関連ドメインのペイロードを使用することができます。

この値は、Xcodeの関連ドメインのエンタイトルメント値で使用したのと同じ形式であることに注意してください。

また、iOSとiPadOS用の新しいAssociatedDomains MDMアプリケーション属性を使用できます。

繰り返しになりますが、値はXcodeと同じでした。

そして、管理された関連ドメインの最後のステップは、MDMが管理する資格を追加し、MDM値を使用するようにOSに知らせるために関連するドメインアレイを持つことです。

すでにリストされているものには、MDMの値を追加します。

関連するドメインとその使用方法の詳細については、ユニバーサルリンクの新機能セッションをご覧ください。

そして、リダイレクト拡張はこれで終わります。

では、クレデンシャルの拡張について話しましょう。

資格情報の拡張はチャレンジとレスポンスの認証を目的としており、Kerberosが最良の例です。

チャレンジ/レスポンスには異なる流れがあります。

そのフローでは、クライアントはデータを要求し、認証のために挑戦されます。

一方、リダイレクト拡張機能では、クライアントはデータを要求する前に資格情報を要求します。

クレデンシャル拡張は、リダイレクト拡張が実行されているときに認証の課題を処理するためにも使用できます。

クレデンシャル拡張は、要求の代わりにサーバーから返された認証チャレンジを受け取ります。

URLとヘッダーを受信します。

また、URLの代わりにMDMペイロード内のホストのリストも使用します。

ホストは、個々のホスト名または.example.comなどのサフィックスのいずれかです。

操作は、UIを表示するタイミングを決定したり、サイレント操作を要求したりするために使用できます。

そして最後に、関連するドメインは資格情報の拡張には必要ありません。

クレデンシャル拡張機能の設定は、リダイレクト拡張機能に似ていますが、2つの違いがあります。

まず、タイプは資格情報です。

次に、ホストのリストが選択に使用されます。

サーバーのホスト名と照合されます。

MDM値がピリオドで始まる場合、ホスト名の接尾辞と一致するために使用されます。

それ以外の場合は、ホスト名全体が一致します。

繰り返しになりますが、このプロファイルはMDMによって配信されなければなりません。

クレデンシャル拡張機能は、Safariとネイティブアプリの両方から動作します。

アプリからサーバーにリクエストが送信され、サーバーは認証チャレンジを返します。

ホストがプロファイルと一致する場合、オペレーティングシステムはチャレンジを拡張機能にルーティングします。

延長は、挑戦を処理するか、それを拒否する責任があります。

処理された場合、リクエストを完了するための承認ヘッダーを返します。

そして、サーバーは発信者に応答を返します。

クレデンシャル拡張機能の素晴らしい例は、iOS 13、iPadOS、macOS Catalinaに含まれているシステムが提供するKerberos拡張機能です。

この拡張機能は、すでに使用している可能性のあるActive Directory統合ソリューションであるEnterprise Connectに基づいています。

デバイスをActive Directoryと統合する簡単な方法を提供します。

Kerberosのサポートを提供することに加えて、Active Directoryのパスワードを管理し、ローカルとActive Directoryのパスワードを同期させるのに役立ちます。

ユーザー名とパスワード、MDMが提供する証明書ベースのID、またはスマートカードを使用した認証をサポートしています。

この拡張機能は、多くの人が組織でKerberosとActive Directoryをより簡単に使用するのに役立つと思います。

そして、クレデンシャルシングルサインオン拡張を完了します。

最初にXcodeを開き、新しいプロジェクトを作成し、Authentication Servicesテンプレートを使用してターゲットを追加します。

このようになりますよ。

次に、RequestHandlerプロトコルを実装します。

システムは、リクエストごとに beginAuthorization 関数を呼び出します。

拡張機能は複数の異なるアプリによって複数回呼び出されることを忘れないでください。

したがって、各アプリの並行性とデータの分離を処理する必要があります。

リクエストパラメータには、現在の認証リクエストに必要なすべての情報が含まれます。

拡張機能がUIを表示する必要があると判断した場合は、リクエストでpresentAuthorization ViewControllerを呼び出すと、それを表示します。

リクエストには、URL、ヘッダー、呼び出し元のアプリの識別子、および先ほど示したMDMペイロードからの拡張データが含まれています。

フロー図では、リダイレクト拡張機能がリクエストを受信し、URL応答を返すことを覚えておいてください。

したがって、終了すると、リダイレクト拡張機能はhttpResponseとhttpBodyで完了するか、エラーで完了する必要があります。

これにより、表示された場合はビューが却下され、応答が発信者に返されます。

間違った方法を呼び出すと、システムはリクエストをキャンセルします。

クレデンシャル拡張はhttpChallengeを受け取り、承認ヘッダーを返す必要があります。

したがって、クレデンシャル拡張は完全なAuthorizationHeadersメソッドを使用する必要があります。

承認チャレンジが拡張機能でサポートされていない場合は、SafariまたはURLSessionがデフォルトの処理を続行するようにdoNotHandleで応答します。

では、アプリでの拡張機能の使用を見てみましょう。

URLSessionやWKWebViewなどの標準ネットワークフレームワークを使用すると、資格情報の課題が処理されます。

リクエストもリダイレクトされるので、アプリを動作させるためにアプリを更新する必要はありません。

しかし、その流れはあなたのアプリに最も適していないかもしれません。

たとえば、リダイレクトは拡張機能に送信されますが、他のコンポーネントをオーバーレイしたり、他のWebダイアログが最初に表示される場合があります。

操作を使用して、アプリの流れを改善したり、ログインするだけではありません。

たとえば、組み込みのKerberos拡張機能は、iOS、iPadOS、macOSでのローカルログインとログアウト操作をサポートしています。

また、アプリがユーザーに関する情報を取得するために、応答ヘッダーにカスタム値を返します。

アプリで操作を呼び出すには、まずシングルサインオンプロバイダーのインスタンスを作成し、IDプロバイダーのURLを渡します。

クレデンシャル拡張機能を使用している場合は、特別なレルムまたはホストスキームを使用して、それらの値にも一致させることができます。

次に、canPerformAuthorizationを呼び出すと、URLがシングルサインオンで処理されるかどうかを確認します。

処理できる場合は、リクエストを作成し、操作を設定します。

独自のカスタム操作を作成することもできることを忘れないでください。

次に、リクエストのコントローラを作成します。

コントローラは、要求を処理し、応答を返す責任があります。

応答を処理するデリゲートを設定します。

プレゼンテーションコンテキストプロビダーを設定して、Macアプリのどのウィンドウを認証に使用するかをOSに知らせることができます。

これは、ユーザーへの要求のコンテキストを維持するのに役立ちます。

最後に、performRequestsを呼び出して拡張機能に送信します。

拡張が終了すると、didCompleteWithAuthorizationデリゲートメソッドが呼び出されます。

提供された承認インスタンスには、IDトークン、アクセストークンなどにアクセスするための簡単な方法を備えたシングルサインオン資格情報が含まれています。

システムが提供するKerberos拡張機能は、ヘッダーにログインしているユーザーに関する情報を提供します。

さて、いくつかの開発のヒントについて。

最初のリクエストが受信されると、内線番号が読み込まれます。

リクエストが完了すると、おそらくアンロードされます。

したがって、設定を遅延ロードし、応答を送信する前に値をディスクに保存することをお勧めします。

今、デバッグのために。

拡張機能のデバッグは、最初のリクエストが受信されるまでロードされないため、難しい場合があります。

したがって、拡張機能をデバッグする最善の方法は、「プロセスIDまたは名前でプロセスにアタッチ...」を使用することです。

デバッグメニューの下。

拡張機能の名前を入力するだけで、Xcodeが最初にロードされたときに添付されます。

操作を使用する場合、一貫性を保つために、UIを表示するインタラクティブなシナリオにはログイン操作を使用することをお勧めします。

サイレント操作には更新操作を使用する必要があり、エラーが発生した場合、ネイティブアプリはログイン操作をフォローアップできます。

次に、ホストアプリについて話しましょう。

ホストアプリを空のコンテナ以上のものにするのは良い考えです。

追加メニュー、ウィジェット、さらにはコマンドラインユーティリティを検討できます。

オンボーディング、デバイスのペアリング、またはパスワードの変更など、使用頻度の低い機能を処理できます。

ホストアプリでもNFCを使用できます。

クレデンシャル拡張機能とリダイレクト拡張機能の統合も検討する必要があります。

拡張機能で活用できる新機能が追加されました。

リフレッシュトークンなどの機密情報は、それを制御する方法として、拡張機能に保持することができます。

ローカルでJWTに署名し、認証のためにサーバーに送信することができます。

または、デバイスで証明書署名要求を作成し、CAに送信してデバイスをペアリングすることもできます。

WKWebviewの認証クッキーをURLSessionと共有して、ネイティブリクエストでセッションを共有することもできます。

要約すると、シングルサインオンはアプリやウェブサイトの認証を可能にします。

iOS 13、iPadOS、macOSで利用できます。

利用可能な2つのタイプがあります。

私たちは、あなたが彼らと何ができるかを見て本当に興奮しています。

詳細については、developer.apple.comをご覧ください。